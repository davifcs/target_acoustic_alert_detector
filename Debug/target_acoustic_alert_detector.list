
target_acoustic_alert_detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000135c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000680f8  08013760  08013760  00023760  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807b858  0807b858  000911d8  2**0
                  CONTENTS
  4 .ARM          00000008  0807b858  0807b858  0008b858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807b860  0807b860  000911d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807b860  0807b860  0008b860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807b864  0807b864  0008b864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000011d8  20000000  0807b868  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000911d8  2**0
                  CONTENTS
 10 .bss          000194c0  200011e0  200011e0  000911e0  2**5
                  ALLOC
 11 ._user_heap_stack 00001000  2001a6a0  2001a6a0  000911e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000911d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e252  00000000  00000000  00091208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000619d  00000000  00000000  000bf45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  000c55f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001240  00000000  00000000  000c6a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000278aa  00000000  00000000  000c7cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001faa5  00000000  00000000  000ef57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9696  00000000  00000000  0010f01f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000143  00000000  00000000  001e86b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a74  00000000  00000000  001e87f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003584  00000000  00000000  001ef26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .stab         00000024  00000000  00000000  001f27f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stabstr      0000003c  00000000  00000000  001f2814  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200011e0 	.word	0x200011e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013738 	.word	0x08013738

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200011e4 	.word	0x200011e4
 80001cc:	08013738 	.word	0x08013738

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	f5ad 4d65 	sub.w	sp, sp, #58624	; 0xe500
 8000f46:	b0ac      	sub	sp, #176	; 0xb0
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 8000f4a:	f00d f98f 	bl	800e26c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4e:	f000 fda1 	bl	8001a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f52:	f000 f835 	bl	8000fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f56:	f000 f945 	bl	80011e4 <MX_GPIO_Init>
  MX_CRC_Init();
 8000f5a:	f000 f89b 	bl	8001094 <MX_CRC_Init>
  MX_I2C1_Init();
 8000f5e:	f000 f8ad 	bl	80010bc <MX_I2C1_Init>
  MX_I2S3_Init();
 8000f62:	f000 f8d9 	bl	8001118 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000f66:	f000 f907 	bl	8001178 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f6a:	f007 fdb9 	bl	8008ae0 <MX_USB_HOST_Init>
  MX_X_CUBE_AI_Init();
 8000f6e:	f008 f98d 	bl	800928c <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  Preprocessing_Init();
 8000f72:	f000 fa35 	bl	80013e0 <Preprocessing_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// TODO Load WAV file.
	float32_t aInSignal[SAMPLE_RATE] = {-0.17007345, -0.089332245, -0.15077996, -0.2010011, -0.2852118, -0.49630785, -0.5410619, -0.40065807, -0.18566768, 0.06777546, 0.19613181, 0.110300116, 0.0852473, 0.18397906, 0.37567765, 0.5046372, 0.47902936, 0.3494838, 0.16593318, -0.04679585, -0.18279567, -0.10072188, -0.09138152, -0.16849533, -0.22185823, -0.41815996, -0.5288289, -0.42483643, -0.22930416, 0.009855417, 0.19182917, 0.13511227, 0.0479509, 0.11534379, 0.29569855, 0.46418476, 0.47149727, 0.36506414, 0.19596767, 0.0031389254, -0.14565827, -0.11245933, -0.0610215, -0.14562538, -0.17659074, -0.30872786, -0.47254083, -0.43744478, -0.28814638, -0.07242693, 0.14873928, 0.16186121, 0.03370618, 0.055335514, 0.20629223, 0.3932214, 0.44365558, 0.37039864, 0.24928205, 0.08143399, -0.07553708, -0.1109185, -0.054977976, -0.10931027, -0.14133266, -0.20367181, -0.3913798, -0.45186502, -0.37525615, -0.1773083, 0.065232806, 0.16982886, 0.059338953, 0.015001585, 0.120363444, 0.30151412, 0.4047423, 0.39397395, 0.33164138, 0.17818218, 0.013049766, -0.098055914, -0.08337546, -0.069444165, -0.10464395, -0.1217896, -0.30752328, -0.47711545, -0.47229734, -0.28952718, -0.025243873, 0.16602561, 0.10853512, -0.009895946, 0.042086355, 0.21295698, 0.3768626, 0.43098438, 0.41613966, 0.27732638, 0.08881036, -0.07278334, -0.12498294, -0.054281544, -0.07691916, -0.09327029, -0.23509741, -0.47343126, -0.53918976, -0.38218227, -0.10857599, 0.1323363, 0.1591181, -0.0011426111, -0.0067609926, 0.14275946, 0.34360176, 0.4568436, 0.4766226, 0.3530451, 0.14201395, -0.03902112, -0.15559588, -0.07457815, -0.04996815, -0.0815213, -0.1678161, -0.42696938, -0.5719465, -0.45920926, -0.1921122, 0.07319201, 0.19338691, 0.04333549, -0.037049152, 0.0809276, 0.29360875, 0.45696473, 0.50499713, 0.41021848, 0.20449744, 0.010520197, -0.15858044, -0.11612664, -0.02878154, -0.07494529, -0.12919222, -0.3544841, -0.5658845, -0.5196288, -0.27886492, -0.00027345278, 0.18667315, 0.102728285, -0.029871937, 0.04560694, 0.23548916, 0.42548758, 0.5115221, 0.46438292, 0.27423295, 0.060001116, -0.13566387, -0.17000483, -0.046399258, -0.06861626, -0.120150074, -0.2728905, -0.5220949, -0.55380976, -0.35154694, -0.07235036, 0.15901345, 0.17518675, 0.014014451, 0.014404276, 0.16483325, 0.36263895, 0.49512044, 0.49139765, 0.32753515, 0.104973905, -0.09414089, -0.20449017, -0.09944732, -0.056690544, -0.10880534, -0.18111978, -0.42418182, -0.5538555, -0.4169325, -0.15124325, 0.10545867, 0.22013615, 0.07963006, -0.0076260557, 0.091758415, 0.27204424, 0.4499698, 0.49811703, 0.37705037, 0.16388723, -0.04681446, -0.20999019, -0.16503215, -0.043615326, -0.071040675, -0.10930397, -0.30707443, -0.5188327, -0.47238216, -0.23967844, 0.031502776, 0.21306029, 0.15307245, -0.0032213486, 0.02565267, 0.18007062, 0.37916198, 0.48184448, 0.41373724, 0.22532426, 0.0067669656, -0.17548166, -0.21266198, -0.055765517, -0.02776757, -0.06365458, -0.18579759, -0.4462021, -0.50993824, -0.3290806, -0.04434608, 0.17665394, 0.20980467, 0.029774578, -0.03694773, 0.0787515, 0.28272623, 0.4468294, 0.44388938, 0.29394102, 0.06988946, -0.11708526, -0.21916465, -0.095697016, 0.01998658, -0.021257099, -0.09153733, -0.3444461, -0.5126316, -0.40430748, -0.13835707, 0.09577432, 0.20946358, 0.07493513, -0.08012493, -0.006420095, 0.18562132, 0.3997732, 0.46053782, 0.36342105, 0.16205707, -0.03725213, -0.17239556, -0.13964652, 0.026541762, 0.008470457, -0.05180011, -0.24206565, -0.47764647, -0.47294718, -0.24961238, -0.0019227823, 0.16551606, 0.13968334, -0.053634193, -0.05346528, 0.10385203, 0.3326671, 0.46139297, 0.4220104, 0.24952471, 0.029242799, -0.12905017, -0.1876572, -0.020593807, 0.04420316, -0.023420742, -0.14503302, -0.39811203, -0.50357974, -0.34689045, -0.089845486, 0.11252211, 0.1829621, 0.0081156455, -0.09246594, 0.01737762, 0.23917906, 0.427476, 0.4497065, 0.32882562, 0.104716025, -0.07056634, -0.18299426, -0.08623276, 0.068569094, 0.015471044, -0.07551829, -0.2920227, -0.4976875, -0.4360553, -0.19248132, 0.03266614, 0.17227106, 0.08462199, -0.09069435, -0.050725315, 0.14730775, 0.37545648, 0.4654552, 0.40182772, 0.18618527, -0.018265026, -0.14313416, -0.13709897, 0.0531829, 0.05791978, -0.058089774, -0.21315365, -0.45362213, -0.48791584, -0.2776351, -0.0408251, 0.12899287, 0.14587437, -0.04392488, -0.09457585, 0.071839124, 0.30418697, 0.4524516, 0.44775802, 0.2639066, 0.03593392, -0.09505781, -0.16221519, -0.02090928, 0.08048661, -0.037828423, -0.14563732, -0.3510412, -0.4862973, -0.3515382, -0.117935605, 0.06390676, 0.16417424, 0.039602034, -0.10499065, 0.003894404, 0.21752915, 0.40241337, 0.4603571, 0.3169789, 0.08159982, -0.055087462, -0.1485225, -0.0964081, 0.07973993, 0.0050887233, -0.10790939, -0.23674276, -0.42330724, -0.38254634, -0.18626511, -0.00693061, 0.12828237, 0.10068434, -0.078624174, -0.05124213, 0.1328733, 0.31842396, 0.42248684, 0.3419016, 0.13867302, -0.003853698, -0.09025414, -0.12629999, 0.032091867, 0.05782707, -0.07064782, -0.13603051, -0.3123008, -0.39161843, -0.27026966, -0.09623399, 0.059984993, 0.13389976, -0.001215608, -0.08798567, 0.038746197, 0.20218414, 0.354877, 0.36637902, 0.21621208, 0.057074755, -0.035068095, -0.1171352, -0.0389663, 0.093513556, -0.010694384, -0.07853143, -0.19229086, -0.3547289, -0.32648394, -0.17312895, -0.020104075, 0.10263786, 0.06126308, -0.098752804, -0.0402799, 0.101929784, 0.26785496, 0.35742217, 0.26649404, 0.12152908, 0.032762367, -0.054653477, -0.06911415, 0.083050855, 0.054801, -0.04331973, -0.08613905, -0.2630762, -0.3559029, -0.27258146, -0.13035175, 0.019961981, 0.084829584, -0.051570192, -0.0954225, 0.008762771, 0.16023421, 0.32497928, 0.3266069, 0.2221458, 0.12029312, 0.020839173, -0.062540814, 0.015338876, 0.08776859, -0.00689509, -0.032793865, -0.16123584, -0.353539, -0.36253667, -0.23385397, -0.06451075, 0.0703106, 0.026373062, -0.10288142, -0.053855453, 0.07174885, 0.26724494, 0.35914114, 0.30126378, 0.19518127, 0.07814463, -0.03159556, -0.049437802, 0.065559424, 0.03707775, -0.015282405, -0.071697526, -0.28741673, -0.4062402, -0.32330588, -0.14572151, 0.02331681, 0.08518169, -0.04640195, -0.09829075, -0.011507948, 0.17667107, 0.35069874, 0.35516495, 0.25549114, 0.118274674, 0.0072530094, -0.062108386, 0.010252162, 0.0788473, 0.009929464, -0.024072925, -0.18669078, -0.3983451, -0.3873993, -0.21252035, -0.031453364, 0.08484284, 0.02162074, -0.1195763, -0.075293794, 0.09814704, 0.30935252, 0.3729254, 0.2853958, 0.14216766, 0.04334785, -0.023155345, -0.031177044, 0.0770831, 0.049930554, -0.015927635, -0.08622363, -0.31013033, -0.3920678, -0.2642435, -0.10724954, 0.022833044, 0.057866894, -0.08306985, -0.11378632, 0.023301782, 0.21810591, 0.33376884, 0.28583172, 0.16978605, 0.09320992, 0.041812446, -0.017114302, 0.031586457, 0.07692493, 0.003225345, -0.00545774, -0.15837084, -0.34252018, -0.31983238, -0.20545773, -0.065845095, 0.03759442, -0.014064149, -0.123077296, -0.06254004, 0.09572613, 0.24589978, 0.27467236, 0.22224815, 0.1714468, 0.12093849, 0.040703617, -0.018876854, 0.062358495, 0.05585936, 0.041100763, -0.020781897, -0.2582378, -0.3688438, -0.3094371, -0.16709426, -0.024987463, 0.036437824, -0.08294119, -0.12957054, -0.014223423, 0.1434088, 0.26214048, 0.28228492, 0.25112674, 0.19033594, 0.10221213, -0.021436466, 0.011523612, 0.09884447, 0.065461986, 0.046828963, -0.14604038, -0.36283875, -0.381848, -0.2604397, -0.106641166, 0.0190036, -0.016789105, -0.14623879, -0.09034039, 0.048824664, 0.21272196, 0.2982032, 0.29607657, 0.2411517, 0.1597462, 0.033820305, -0.02919962, 0.096840784, 0.10868091, 0.073509276, -0.024226326, -0.27951136, -0.41300324, -0.34983754, -0.20574436, -0.058091763, 0.025325421, -0.10334382, -0.14597636, -0.04067441, 0.11633508, 0.27204978, 0.3282831, 0.30147457, 0.23430167, 0.12367737, -0.015031783, 0.045628525, 0.13917091, 0.08449626, 0.048113342, -0.14838117, -0.3923831, -0.425875, -0.31651708, -0.16330364, -0.0033253743, -0.03462094, -0.15553808, -0.10291227, 0.016218754, 0.20999809, 0.34451264, 0.36028644, 0.31406254, 0.20788763, 0.042640183, -0.016821163, 0.11292327, 0.1192529, 0.079045966, -0.021009881, -0.3074061, -0.47057283, -0.42498773, -0.2724578, -0.07678285, 0.024073808, -0.10415852, -0.15328342, -0.0671641, 0.11884654, 0.3271671, 0.39849493, 0.37748122, 0.28467262, 0.12585908, -0.017975193, 0.04783461, 0.15164077, 0.099318534, 0.046742912, -0.18884693, -0.46745133, -0.5087893, -0.37434652, -0.17713818, -6.440227e-05, -0.03253029, -0.14508753, -0.10106615, 0.031067556, 0.26016667, 0.41099754, 0.4345791, 0.36705264, 0.21548721, 0.038932692, -0.01925285, 0.104961984, 0.11220371, 0.045874454, -0.087921716, -0.39064497, -0.5417459, -0.4634819, -0.28206164, -0.06863242, 0.04131146, -0.050205227, -0.103052564, -0.037378386, 0.16004844, 0.3813361, 0.4592471, 0.42088616, 0.28326306, 0.09802594, -0.044475097, -0.0024091024, 0.101013005, 0.042003293, -0.0256066, -0.23655447, -0.48808807, -0.51176554, -0.3684434, -0.14871156, 0.051696632, 0.062527925, -0.065225646, -0.07821294, 0.04693163, 0.27621073, 0.4264682, 0.43811905, 0.3456331, 0.16368164, -0.014384804, -0.08810834, 0.03115107, 0.063848436, 0.013413112, -0.07232633, -0.34883294, -0.5148718, -0.45330715, -0.24084003, 0.008574901, 0.13481191, 0.028428903, -0.09572113, -0.06486251, 0.12260931, 0.34461242, 0.43054754, 0.3982666, 0.23424277, 0.028552875, -0.120656595, -0.07962944, 0.08454311, 0.08517414, 0.044876475, -0.1615207, -0.44464126, -0.49995795, -0.32884145, -0.05876451, 0.12913197, 0.11405117, -0.09008483, -0.17425828, -0.04789553, 0.21485549, 0.39763936, 0.4271711, 0.30035287, 0.081924476, -0.08181349, -0.117822796, 0.07731996, 0.19094868, 0.12681383, -0.011630738, -0.31108218, -0.49719238, -0.4103936, -0.15924332, 0.038804516, 0.101042904, -0.05336147, -0.24307282, -0.1819651, 0.07014802, 0.33359155, 0.43904924, 0.3661827, 0.16664143, 0.015139647, -0.045178358, 0.044480424, 0.22537239, 0.17446664, 0.052432507, -0.150091, -0.42990437, -0.48443145, -0.30054724, -0.09774403, 0.021777062, 0.009795909, -0.19897585, -0.24057138, -0.04444007, 0.23123972, 0.41205925, 0.41439703, 0.27578253, 0.12026692, 0.029989284, -0.0006783512, 0.14620288, 0.21325004, 0.09151181, -0.02087851, -0.2837037, -0.49477658, -0.42556447, -0.22142728, -0.059668723, 0.038724944, -0.08426046, -0.2513007, -0.1575904, 0.080997854, 0.3218758, 0.42616472, 0.36077738, 0.20748197, 0.093923904, 0.02007369, 0.05761763, 0.21305445, 0.16706543, 0.056319453, -0.11439976, -0.41298494, -0.49192196, -0.32997245, -0.1478427, -0.011444416, -0.0038846002, -0.20401312, -0.25408316, -0.07681707, 0.18106757, 0.38532653, 0.4105566, 0.29272127, 0.16793792, 0.08907066, 0.050482783, 0.1641311, 0.24742304, 0.12001326, 0.0016201591, -0.25170705, -0.48604593, -0.4379244, -0.26780173, -0.12539724, -0.031653818, -0.12873875, -0.2857025, -0.18903013, 0.04308308, 0.30121318, 0.43453777, 0.3812582, 0.2691278, 0.1870116, 0.119594574, 0.110253595, 0.22680087, 0.17465267, 0.044841126, -0.10214287, -0.39369324, -0.50543755, -0.4049207, -0.2636986, -0.11731126, -0.06412297, -0.20740396, -0.24345827, -0.07313061, 0.17842904, 0.4085253, 0.453344, 0.37208655, 0.2782333, 0.1846319, 0.10533155, 0.13553719, 0.20229204, 0.091296434, -0.018484384, -0.251631, -0.5073473, -0.5117312, -0.38154504, -0.2086392, -0.06827057, -0.09845381, -0.23164742, -0.16077633, 0.059748113, 0.33413148, 0.48288003, 0.43662882, 0.344336, 0.24043587, 0.1529414, 0.090102926, 0.15817696, 0.13807505, -0.002670508, -0.13292012, -0.39963654, -0.5368804, -0.46725288, -0.30697688, -0.14028889, -0.060071964, -0.14224106, -0.18967429, -0.033463318, 0.20622723, 0.43022043, 0.4664512, 0.39648655, 0.3059594, 0.21788089, 0.1145454, 0.07629613, 0.13824442, 0.030090712, -0.07066931, -0.23385301, -0.4765814, -0.52401, -0.41788664, -0.23717234, -0.083665535, -0.045157395, -0.14322303, -0.10728417, 0.072425954, 0.31778416, 0.4650563, 0.43295333, 0.36534393, 0.2737859, 0.16237885, 0.046170868, 0.065590166, 0.06849231, -0.038637247, -0.11865202, -0.33358565, -0.50450844, -0.48549107, -0.3216351, -0.1374347, -0.027612645, -0.05658863, -0.13307098, -0.035629258, 0.17616549, 0.39379182, 0.4384507, 0.3902201, 0.31452745, 0.21019712, 0.09430112, 0.011377684, 0.062456224, 0.020840699, -0.065142035, -0.17611581, -0.39334574, -0.4948688, -0.41148767, -0.22930613, -0.08857104, -0.014684316, -0.07850279, -0.095441215, 0.053987537, 0.2688617, 0.3947907, 0.38187036, 0.34624365, 0.2702075, 0.17143834, 0.036383368, -0.01008039, 0.04891336, -0.020270245, -0.07865499, -0.21631753, -0.4161666, -0.4596236, -0.3277351, -0.16932806, -0.042508356, 0.0066575026, -0.0826458, -0.050429963, 0.10200923, 0.2771899, 0.34499493, 0.3529354, 0.31996045, 0.22983599, 0.10636928, -0.029735463, 0.008428719, 0.05338439, -0.0001799797, -0.049566124, -0.24638745, -0.43415925, -0.4100822, -0.25924283, -0.12331298, -0.0058459067, -0.033883464, -0.12530485, -0.056676924, 0.11156438, 0.2583741, 0.3249516, 0.35377726, 0.30543026, 0.20472722, 0.062168356, -0.015942028, 0.09136414, 0.093883865, 0.04617103, -0.051194943, -0.3164113, -0.46276975, -0.38520935, -0.2503465, -0.1162695, -0.02717245, -0.12151776, -0.16632788, -0.04652123, 0.13100088, 0.27801475, 0.37699345, 0.39902154, 0.32456166, 0.19457518, 0.039770696, 0.058930337, 0.1674716, 0.11666663, 0.058876608, -0.15132144, -0.45494908, -0.5147887, -0.39961842, -0.26013842, -0.10831855, -0.072789244, -0.1920853, -0.16358443, 0.008210723, 0.21875773, 0.3930508, 0.47615582, 0.4427958, 0.3226293, 0.16309275, 0.045122463, 0.13412386, 0.16873464, 0.07215424, -0.044288237, -0.35169685, -0.57571715, -0.5292304, -0.3861316, -0.22768979, -0.07598389, -0.116888896, -0.19385353, -0.06461123, 0.13925132, 0.35485056, 0.49140233, 0.520915, 0.43320346, 0.27346483, 0.099964276, 0.03998155, 0.1422278, 0.090083465, -0.011450185, -0.18992005, -0.50219685, -0.60186005, -0.49820435, -0.34125617, -0.16149063, -0.039272904, -0.11769356, -0.1128908, 0.038107116, 0.2513712, 0.45204008, 0.5472998, 0.5162646, 0.3607755, 0.18836668, 0.024585359, 0.04498885, 0.11538834, 0.009634097, -0.08494216, -0.3309089, -0.5833109, -0.5783856, -0.44523007, -0.26999882, -0.06558828, -0.0066817175, -0.10125781, -0.041730676, 0.13158564, 0.3546096, 0.51007426, 0.5522406, 0.44917762, 0.2776219, 0.099975996, -0.026697213, 0.053994372, 0.05279569, -0.05235414, -0.16147058, -0.4385855, -0.5927667, -0.530471, -0.37469876, -0.16454776, 0.029378029, -0.0021268122, -0.07562415, 0.025608491, 0.20869468, 0.41423503, 0.5318488, 0.50896573, 0.36331472, 0.18810579, 0.0054593263, -0.0477587, 0.054272093, 0.0027967985, -0.07299718, -0.23272544, -0.49267602, -0.5622205, -0.4718077, -0.28189653, -0.056153923, 0.07669769, -0.016803294, -0.050970484, 0.06310171, 0.254903, 0.43453032, 0.5130005, 0.4464188, 0.28807807, 0.115766294, -0.049183387, -0.031033428, 0.04945268, -0.010201111, -0.06827105, -0.28182754, -0.5139726, -0.54971796, -0.41793606, -0.1964303, 0.02939418, 0.07757132, -0.05621237, -0.057895686, 0.07432305, 0.28352323, 0.46319774, 0.5174012, 0.41818428, 0.24405192, 0.049896173, -0.083240494, 0.0065784543, 0.07113096, 0.015825283, -0.09505093, -0.3727433, -0.57112855, -0.54570955, -0.3575647, -0.116875514, 0.075403504, 0.023906102, -0.10247116, -0.048244786, 0.13361198, 0.37178326, 0.53098524, 0.52239865, 0.37636128, 0.18609488, -0.0075556356, -0.07474419, 0.053652864, 0.053884234, -0.029700646, -0.19561979, -0.4794726, -0.6034114, -0.5060607, -0.28608346, -0.04362613, 0.09601682, -0.004329998, -0.08003031, 0.019869016, 0.22964923, 0.45911708, 0.5673685, 0.49408478, 0.31322876, 0.10549853, -0.09192477, -0.08727358, 0.04433187, 0.0061242855, -0.06984527, -0.27496254, -0.54767734, -0.6039196, -0.43670183, -0.17387128, 0.07624473, 0.14593197, -0.02812607, -0.078585826, 0.069015615, 0.3124898, 0.5247585, 0.55396026, 0.40423548, 0.18871367, -0.021564849, -0.16226894, -0.04280853, 0.07395796, 0.00049504184, -0.09534026, -0.36021417, -0.5852814, -0.5312626, -0.29827267, -0.03985263, 0.15577726, 0.08787235, -0.10869532, -0.06595985, 0.12891899, 0.38063896, 0.52277446, 0.4664323, 0.28761837, 0.09377106, -0.08025843, -0.13085715, 0.051715903, 0.08795244, 0.00043965122, -0.1269202, -0.42492905, -0.5658517, -0.43851388, -0.20378503, 0.020844756, 0.14508286, -0.013710895, -0.14628415, -0.039531875, 0.17388953, 0.41606602, 0.50208735, 0.40745443, 0.23136255, 0.053579196, -0.102732815, -0.06338611, 0.12538895, 0.08481309, 0.0063783783, -0.1896017, -0.49566656, -0.554431, -0.38471314, -0.15159144, 0.06983448, 0.1157155, -0.10816927, -0.15971105, -0.008268393, 0.24169032, 0.46842802, 0.49319786, 0.36454985, 0.18558808, 0.011256668, -0.1096981, 0.03283442, 0.17278141, 0.07589791, -0.024466844, -0.3073712, -0.56278807, -0.521918, -0.31494752, -0.08044277, 0.10484259, 0.030078186, -0.18246646, -0.13955843, 0.04880141, 0.3270136, 0.5004095, 0.46885243, 0.31747964, 0.13767181, -0.021555474, -0.06944066, 0.12882215, 0.16128038, 0.043283343, -0.08713808, -0.4000628, -0.5720949, -0.4731368, -0.2562165, -0.033874404, 0.10052076, -0.065138794, -0.217017, -0.107146986, 0.11952023, 0.40355006, 0.52041554, 0.44408494, 0.27497154, 0.10759789, -0.039560683, 0.00054818706, 0.191354, 0.13589232, 0.031946868, -0.1709622, -0.5002681, -0.5904042, -0.43790337, -0.20935322, 0.015872594, 0.05656518, -0.16731092, -0.21433844, -0.052302253, 0.23229074, 0.49608806, 0.53240377, 0.41289005, 0.24454546, 0.07351361, -0.034150984, 0.07933311, 0.19636421, 0.09334291, -0.035594564, -0.31328872, -0.5878147, -0.5780222, -0.37487692, -0.12919152, 0.04511835, -0.015679106, -0.20210963, -0.15836014, 0.061565176, 0.36310214, 0.54084545, 0.5084886, 0.36033422, 0.1826255, 0.032034017, -0.024564236, 0.11580131, 0.16194128, 0.022320777, -0.12900974, -0.41435117, -0.59523827, -0.49955866, -0.28348792, -0.07372639, 0.045964345, -0.063974455, -0.18837212, -0.070301935, 0.15871929, 0.4155105, 0.51767474, 0.43872184, 0.29174614, 0.13866654, 0.0005396403, -0.01024416, 0.13715175, 0.11305087, -0.0095761055, -0.16708691, -0.44778535, -0.55404246, -0.43435976, -0.23257633, -0.031120757, 0.040964715, -0.102302074, -0.16760682, -0.039040614, 0.1833964, 0.42185107, 0.47916135, 0.39904872, 0.26426584, 0.104779944, -0.010653558, 0.040735118, 0.17009549, 0.11669458, -0.005282649, -0.21537974, -0.48416635, -0.5370859, -0.4054004, -0.19492584, -0.013714446, -0.004308736, -0.15770552, -0.17779356, -0.032460358, 0.23108365, 0.45540562, 0.4886695, 0.40066236, 0.2460577, 0.08867818, 0.017992247, 0.1004038, 0.2044323, 0.1046834, -0.04851248, -0.29635635, -0.5480691, -0.558026, -0.3875261, -0.1553982, -0.010183527, -0.061121013, -0.2069622, -0.16960602, 0.036427803, 0.33922917, 0.52232677, 0.5030551, 0.3791804, 0.20607182, 0.08169196, 0.056607287, 0.15843967, 0.20123236, 0.03638302, -0.14308645, -0.41057014, -0.5939712, -0.5263155, -0.32307616, -0.12731265, -0.047637407, -0.11887596, -0.20849755, -0.09549468, 0.150502, 0.42868155, 0.53845155, 0.48248053, 0.34982538, 0.19834638, 0.1115752, 0.08267245, 0.16510181, 0.12916595, -0.060149387, -0.22619632, -0.47379014, -0.6027096, -0.50293255, -0.29435506, -0.12195305, -0.048639487, -0.11554761, -0.1561676, -0.008279868, 0.24751872, 0.49105418, 0.54647475, 0.46082625, 0.314335, 0.1726023, 0.09283918, 0.06534729, 0.14202179, 0.048120737, -0.12970942, -0.2873736, -0.5285585, -0.59766585, -0.44961807, -0.23531576, -0.092984885, -0.032123182, -0.100785755, -0.10036849, 0.07097206, 0.33007517, 0.51873726, 0.51894015, 0.4202535, 0.27271304, 0.1523618, 0.056213394, 0.035502132, 0.10557936, -0.02560349, -0.16915871, -0.33357334, -0.55048513, -0.56246334, -0.38187927, -0.17916314, -0.047814045, -0.00089968304, -0.08117976, -0.06531751, 0.11635584, 0.37309563, 0.5115777, 0.49316755, 0.374595, 0.21253529, 0.10073367, 0.009703615, 0.04738547, 0.10375808, -0.06397568, -0.1898415, -0.36509117, -0.5500139, -0.492858, -0.29681498, -0.13680735, -0.030017909, -0.016955933, -0.1119096, -0.05278078, 0.16940995, 0.40464664, 0.49685737, 0.43747038, 0.30050483, 0.17564842, 0.09998898, 0.026068524, 0.09623189, 0.083639495, -0.10143798, -0.1907076, -0.37688932, -0.5154119, -0.43087602, -0.27578172, -0.15566944, -0.056020264, -0.06139861, -0.1192509, -0.00015400905, 0.21526317, 0.40387133, 0.4558051, 0.39826715, 0.29392502, 0.21025613, 0.12730289, 0.055194892, 0.11809413, 0.03084018, -0.12381764, -0.1913463, -0.39634708, -0.50703776, -0.42414823, -0.31037572, -0.19301108, -0.0689811, -0.06616925, -0.0847504, 0.046626642, 0.2347387, 0.40383697, 0.45841292, 0.41526917, 0.3375095, 0.25109348, 0.12779534, 0.0479233, 0.08414162, -0.026390888, -0.12260788, -0.20920485, -0.4430955, -0.5304296, -0.4652307, -0.34458792, -0.18257804, -0.033642124, -0.035014097, -0.044821434, 0.080049954, 0.26726875, 0.4386869, 0.49174252, 0.45410636, 0.3600379, 0.2307978, 0.074613065, 0.017040117, 0.054107655, -0.065794714, -0.13605464, -0.26426968, -0.5014191, -0.562064, -0.47827142, -0.31847954, -0.12549579, 0.022839427, -0.0112444, -0.015911926, 0.119795084, 0.32027566, 0.48271242, 0.5151029, 0.44442508, 0.32551306, 0.18338999, 0.02893446, -0.0031018478, 0.007253808, -0.10466485, -0.15020423, -0.31341636, -0.5315249, -0.55886465, -0.46035728, -0.27425, -0.059644133, 0.071474396, 0.007898237, 0.0133979805, 0.15408605, 0.3537571, 0.49255335, 0.49911255, 0.42920575, 0.30091217, 0.13267842, -0.020363452, -0.028395848, -0.01979293, -0.1099746, -0.15971346, -0.35130525, -0.5470074, -0.5576875, -0.42483693, -0.20581168, 0.0073641418, 0.09305052, -0.005315889, 0.018287577, 0.18089789, 0.3831052, 0.4983535, 0.48758423, 0.40163514, 0.25448874, 0.09963921, -0.04089302, -0.034922548, -0.03648428, -0.12051978, -0.16485877, -0.37505722, -0.55812454, -0.5463365, -0.39088237, -0.16690831, 0.05197179, 0.0971024, -0.013317535, 0.04035746, 0.20846403, 0.40559015, 0.49393585, 0.4695655, 0.38979474, 0.23807113, 0.069259614, -0.07762661, -0.046538454, -0.054434367, -0.11249294, -0.17026775, -0.413315, -0.5758269, -0.54652524, -0.35710657, -0.10962886, 0.10711976, 0.09158096, -0.021286288, 0.053201023, 0.22854738, 0.41485608, 0.49041, 0.48297602, 0.3824104, 0.19800958, 0.0132946465, -0.11032132, -0.038222782, -0.04215706, -0.08533598, -0.19514409, -0.4644426, -0.6064656, -0.5342467, -0.2900908, -0.038549002, 0.131478, 0.0537814, -0.042993847, 0.057804056, 0.25888014, 0.44952327, 0.51194865, 0.48579523, 0.33433428, 0.15454026, -0.011942969, -0.0967137, -0.008311591, -0.03965347, -0.11444614, -0.2606867, -0.50959826, -0.6193957, -0.48270077, -0.23288164, -0.015867308, 0.12326748, 0.019730613, -0.03890957, 0.10833521, 0.31825006, 0.4762135, 0.5237492, 0.4628471, 0.2965388, 0.14504087, -0.02647382, -0.0984468, -0.022307022, -0.08580061, -0.15388381, -0.2932914, -0.53633815, -0.6045397, -0.43817192, -0.2125867, 0.007136437, 0.13870381, 0.024798293, 0.01320165, 0.16610765, 0.34142366, 0.47519788, 0.51634747, 0.4354021, 0.27957687, 0.12854917, -0.07984409, -0.12788388, -0.048764516, -0.12241499, -0.15999758, -0.31241828, -0.5534182, -0.577554, -0.4000465, -0.17505202, 0.06533648, 0.16763231, 0.045990065, 0.0491137, 0.1650784, 0.32798305, 0.46248686, 0.49744296, 0.41137886, 0.2639255, 0.089474835,
 8000f76:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000f7a:	3bb0      	subs	r3, #176	; 0xb0
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <main+0x78>)
 8000f7e:	4618      	mov	r0, r3
 8000f80:	4611      	mov	r1, r2
 8000f82:	f24e 53b0 	movw	r3, #58800	; 0xe5b0
 8000f86:	461a      	mov	r2, r3
 8000f88:	f00e fc32 	bl	800f7f0 <memcpy>
		  -0.1269755, 0.07191798, 0.27393556, 0.36987373, 0.38035148, 0.30162153, 0.1472807, 0.016997987, -0.09834026, -0.06856599, 0.1271771, 0.13374479, 0.079515725, -0.09332775, -0.38405153, -0.4997016, -0.42103058, -0.21699901, -0.006188193, 0.12438621, 0.13962033, -0.08951429, -0.21415636, -0.08138134, 0.14016174, 0.31748366, 0.4100872, 0.3912246, 0.25954378, 0.0846117, -0.05532291, -0.1464085, 0.009906339, 0.17654754, 0.115720406, 0.031006953, -0.22000857, -0.47428694, -0.4893865, -0.35457712, -0.12979743, 0.056027085, 0.17638656, 0.10895661, -0.1418156, -0.16965799, -0.02024994, 0.19711037, 0.3718247, 0.42988527, 0.35822633, 0.18304205, -0.0069462117, -0.14765646, -0.15775795, 0.078226075, 0.16188638, 0.10555122, -0.016969128, -0.31380287, -0.49218404, -0.44580734, -0.2591597, -0.019600218, 0.15889548, 0.23261623, 0.01948866, -0.21365184, -0.18425848, 0.017932981, 0.26032263, 0.40340063, 0.39840633, 0.26091912, 0.07384658, -0.086440645, -0.18391046, -0.06963887, 0.18217948, 0.19630092, 0.12305639, -0.08395777, -0.3934347, -0.48116392, -0.36721018, -0.16109392, 0.057083867, 0.19171807, 0.13745804, -0.13831931, -0.26585427, -0.15428917, 0.08574747, 0.31666264, 0.41001543, 0.35137558, 0.21355867, 0.04074027, -0.099612415, -0.14374313, 0.05894052, 0.24943487, 0.1902158, 0.08200703, -0.196604, -0.45642585, -0.47167405, -0.3296364, -0.10957874, 0.08649472, 0.1644512, 0.02351606, -0.21987994, -0.24679942, -0.07729978, 0.19251595, 0.3840273, 0.4166887, 0.3270924, 0.18304805, 0.0067736595, -0.118305355, -0.0919342, 0.16090778, 0.24389616, 0.14741848, -0.005856008, -0.3266164, -0.5081931, -0.44808963, -0.27087495, -0.048616175, 0.1172593, 0.13625124, -0.056487255, -0.23775263, -0.1916742, 0.017530018, 0.278202, 0.41536674, 0.3938963, 0.29592124, 0.13946387, -0.028928699, -0.122313604, -0.026548967, 0.20837496, 0.193022, 0.09600009, -0.111657, -0.41548097, -0.50682503, -0.4005194, -0.20436393, 0.006370298, 0.13429706, 0.09712866, -0.12019857, -0.22790377, -0.1310093, 0.10788373, 0.34234896, 0.41560283, 0.36521915, 0.26418823, 0.10234769, -0.052422367, -0.124516204, 0.04142154, 0.209654, 0.14301093, 0.051331244, -0.21093868, -0.46734068, -0.48513395, -0.34953424, -0.15010403, 0.033112228, 0.13417974, 0.05373537, -0.14591476, -0.19147314, -0.05992663, 0.1879364, 0.3681899, 0.40294993, 0.35719284, 0.2425694, 0.0659218, -0.08953499, -0.117909, 0.080915034, 0.16906308, 0.10179689, -0.0034512808, -0.2886181, -0.4843167, -0.46294516, -0.31018332, -0.11007784, 0.07718619, 0.17465597, 0.03701859, -0.15318014, -0.15773642, -0.003127986, 0.23007654, 0.3773601, 0.408276, 0.34620813, 0.1976535, 0.0030216912, -0.15850432, -0.12527604, 0.10577996, 0.1526971, 0.11237359, -0.039393723, -0.35551906, -0.50755894, -0.4402293, -0.24678433, -0.031044854, 0.16453768, 0.19448109, -0.029294211, -0.19261804, -0.15772155, 0.0347784, 0.28041685, 0.4129534, 0.40710545, 0.292296, 0.11786892, -0.07692106, -0.19912353, -0.059757385, 0.16747427, 0.16965143, 0.121221825, -0.117001206, -0.43636528, -0.51862353, -0.3733845, -0.15973707, 0.048809584, 0.20709719, 0.12077188, -0.13418038, -0.22229652, -0.12905078, 0.11333535, 0.34893698, 0.43075785, 0.36594042, 0.23020309, 0.058835052, -0.11947243, -0.17494392, 0.041668355, 0.20657797, 0.16591367, 0.07591998, -0.23235217, -0.4934032, -0.47512776, -0.29465976, -0.10705009, 0.082743324, 0.1883315, 0.027555155, -0.18133365, -0.19822694, -0.06316675, 0.20363277, 0.385547, 0.39910114, 0.30592167, 0.18268098, 0.02990746, -0.12876976, -0.121140644, 0.11190814, 0.18904382, 0.14801656, 0.019044796, -0.30734676, -0.49143696, -0.42668623, -0.25977018, -0.08150553, 0.11482435, 0.16307096, -0.040853396, -0.1912362, -0.17525399, 0.003701934, 0.250936, 0.37104857, 0.36692837, 0.287795, 0.1771509, 0.0075757615, -0.1485256, -0.07688642, 0.15639211, 0.19199473, 0.15097345, -0.044319466, -0.3785916, -0.5036299, -0.40382612, -0.2344967, -0.034431364, 0.14752303, 0.12532863, -0.10272101, -0.21457145, -0.15736878, 0.05688174, 0.28706142, 0.3861647, 0.36828813, 0.29163215, 0.15794428, -0.02438037, -0.14485304, -0.009595435, 0.18698175, 0.18393667, 0.13237922, -0.13408916, -0.44804588, -0.5060155, -0.39146286, -0.19514108, 0.008493823, 0.14653821, 0.063685045, -0.16332719, -0.21357499, -0.10433334, 0.14113933, 0.34150407, 0.40210822, 0.37483874, 0.27260488, 0.11659513, -0.05129163, -0.13098997, 0.06153993, 0.20761424, 0.17610489, 0.06535248, -0.26700658, -0.5115339, -0.5030269, -0.33583426, -0.12836921, 0.032078896, 0.13048376, -0.011918686, -0.1959808, -0.17513536, -0.015031384, 0.23478645, 0.37493762, 0.40275902, 0.3523299, 0.23910984, 0.10356644, -0.055347063, -0.09353284, 0.10444711, 0.1734722, 0.119414896, -0.038774267, -0.3568999, -0.5197104, -0.46364105, -0.2866638, -0.12197246, 0.026247755, 0.11404385, -0.04034403, -0.16087396, -0.09845108, 0.079642534, 0.2806436, 0.379354, 0.404165, 0.34380868, 0.22627367, 0.07967401, -0.09749306, -0.092880905, 0.10741645, 0.13034901, 0.07324669, -0.11790559, -0.4176635, -0.5209767, -0.426934, -0.25655636, -0.09358248, 0.07717542, 0.13375169, -0.050489873, -0.133983, -0.049284477, 0.13273253, 0.29697204, 0.38057816, 0.39640185, 0.32150373, 0.2006092, 0.044522736, -0.13968384, -0.08594713, 0.094101, 0.09204275, 0.048368454, -0.1595946, -0.4317682, -0.5029967, -0.40573406, -0.24043931, -0.056475524, 0.13615647, 0.14847961, -0.058876798, -0.12372594, -0.03499369, 0.1336166, 0.29602227, 0.4060465, 0.41721117, 0.32336622, 0.16682135, -0.03969371, -0.2032639, -0.058763396, 0.12337493, 0.124359556, 0.06305158, -0.21566139, -0.49930555, -0.5317851, -0.39244962, -0.18421172, 0.027229529, 0.18314666, 0.10747917, -0.12123395, -0.14428991, -0.009757721, 0.19151668, 0.36848608, 0.44932064, 0.40874687, 0.27156493, 0.08644223, -0.09978667, -0.18092936, 0.02496292, 0.14907342, 0.1067749, -0.0077968347, -0.33435795, -0.54646224, -0.49693042, -0.32875532, -0.11715886, 0.05897436, 0.17348053, 0.051303424, -0.14497358, -0.10891908, 0.048398234, 0.25297582, 0.41073942, 0.45917714, 0.38954413, 0.22337496, 0.0349876, -0.12722537, -0.1515955, 0.06614817, 0.1260886, 0.07078756, -0.08931557, -0.41291383, -0.5476449, -0.47047386, -0.2831455, -0.06778608, 0.10013984, 0.18521495, 0.010200449, -0.15216394, -0.06579395, 0.11722408, 0.3214713, 0.45074803, 0.44103408, 0.32450604, 0.14521913, -0.010207734, -0.13790737, -0.11121044, 0.08853159, 0.07858638, 0.024488827, -0.16453986, -0.4562894, -0.5266764, -0.4197333, -0.21950853, -0.011882032, 0.12827067, 0.16857208, -0.02359561, -0.12411911, -0.015080974, 0.1681073, 0.3516865, 0.43473166, 0.39899057, 0.27483878, 0.10896257, -0.02358577, -0.15727723, -0.099189915, 0.06775131, 0.053204603, 0.016486702, -0.20690937, -0.4689991, -0.51202035, -0.3836794, -0.16338801, 0.027692406, 0.15827957, 0.17271778, -0.038628254, -0.11878298, 0.0047506597, 0.19365934, 0.36621025, 0.43713027, 0.37095717, 0.23027006, 0.06506107, -0.07546961, -0.18870151, -0.067521736, 0.08879722, 0.06572715, -0.00152336, -0.2576906, -0.49368697, -0.491352, -0.32568437, -0.098482616, 0.075372554, 0.18680573, 0.13890883, -0.10044933, -0.13798766, 0.029587565, 0.24331458, 0.406501, 0.42808047, 0.32857606, 0.17720897, 0.019273002, -0.10402468, -0.17403139, -0.0042849267, 0.111742415, 0.05386218, -0.033270657, -0.3133629, -0.51740277, -0.4631653, -0.26708195, -0.050669253, 0.09615465, 0.18025686, 0.07883576, -0.14286718, -0.10820614, 0.091217, 0.30496418, 0.42370734, 0.39742628, 0.28923234, 0.13362828, -0.015940957, -0.121349424, -0.14610523, 0.0438004, 0.09380268, 0.027958237, -0.08426811, -0.37379122, -0.5132473, -0.40855864, -0.20631933, -0.01097665, 0.12358167, 0.18708786, 0.03565651, -0.15257548, -0.07833379, 0.13263756, 0.33166745, 0.40309638, 0.36172086, 0.24481808, 0.07966889, -0.049401972, -0.13609712, -0.11818374, 0.08350189, 0.09625756, 0.03097544, -0.10937774, -0.39898935, -0.49214402, -0.35891354, -0.15357555, 0.036059525, 0.1430447, 0.14990394, -0.0466226, -0.18816163, -0.06344571, 0.17030565, 0.3506075, 0.39607567, 0.3362886, 0.20472263, 0.046705663, -0.055444926, -0.12441521, -0.046106853, 0.14066993, 0.09261838, 0.023136998, -0.16377583, -0.43639272, -0.47233644, -0.3272396, -0.12389744, 0.036947694, 0.12394149, 0.109128475, -0.10221004, -0.18787442, -0.034640957, 0.20806147, 0.37571394, 0.40015057, 0.32073072, 0.18266156, 0.038695376, -0.05054354, -0.099714525, 0.0144094825, 0.15431453, 0.084887564, -4.3760056e-06, -0.22783536, -0.46800327, -0.46567976, -0.30845964, -0.10196026, 0.049629137, 0.12439927, 0.053774633, -0.15113077, -0.1810235, -0.002111034, 0.26226172, 0.40228167, 0.39418513, 0.30945644, 0.17321898, 0.03574739, -0.042299077, -0.07291684, 0.06239402, 0.16785774, 0.068015665, -0.045226615, -0.28097174, -0.49390182, -0.4728567, -0.30092847, -0.090911046, 0.053828936, 0.106207825, 0.0042272937, -0.18184568, -0.1688877, 0.052879266, 0.3231529, 0.44418427, 0.42283723, 0.31723085, 0.16836277, 0.027293965, -0.041536994, -0.04122991, 0.09895767, 0.14968103, 0.01687263, -0.111664265, -0.35890496, -0.5392087, -0.47784323, -0.28399011, -0.06702308, 0.058599636, 0.09765989, -0.025259735, -0.1825315, -0.10700448, 0.13957939, 0.40519565, 0.49392253, 0.4322221, 0.29758912, 0.13005197, -0.0017363904, -0.0529098, -0.03764092, 0.100104354, 0.110079266, -0.044243347, -0.18572044, -0.42831373, -0.5618403, -0.45379373, -0.23257668, -0.026328098, 0.08343693, 0.103006214, -0.037956223, -0.15355128, -0.039626174, 0.22149952, 0.46067894, 0.5009964, 0.40354002, 0.24904287, 0.08879327, -0.023489537, -0.06383389, -0.04044234, 0.091938436, 0.04746566, -0.10694762, -0.22857147, -0.46343666, -0.5429034, -0.4083453, -0.19524121, 0.008335346, 0.11248899, 0.12312993, -0.023024634, -0.112074114, 0.014646701, 0.26463428, 0.47552028, 0.47752306, 0.3664652, 0.21211131, 0.040920105, -0.0590754, -0.09637317, -0.0632568, 0.07960371, 0.016275212, -0.12122644, -0.25102216, -0.47266385, -0.5211404, -0.36642033, -0.12717225, 0.06763534, 0.15426752, 0.14287388, -0.038843524, -0.11139083, 0.03401697, 0.28081155, 0.47910348, 0.45948693, 0.32542732, 0.1497278, -0.018060656, -0.09254702, -0.11308473, -0.031243289, 0.1053624, -0.005282006, -0.14016049, -0.2724859, -0.46144652, -0.46323386, -0.2958499, -0.070193276, 0.08315541, 0.14926863, 0.12187294, -0.061779216, -0.10811815, 0.044111565, 0.2899709, 0.4579119, 0.41444522, 0.2773457, 0.10709248, -0.01987306, -0.07394912, -0.09489379, -0.011063137, 0.09129296, -0.029065385, -0.12533042, -0.24100588, -0.42535448, -0.4426927, -0.28712723, -0.068888664, 0.08288513, 0.16247948, 0.124889635, -0.08122611, -0.12907693, 0.03383434, 0.2822397, 0.447328, 0.41237932, 0.26616114, 0.09108799, -0.02881712, -0.08902035, -0.09990248, 0.016309423, 0.121121764, -0.009013182, -0.103739336, -0.247078, -0.45035332, -0.44419238, -0.2552288, -0.04921986, 0.08686508, 0.15686871, 0.0863902, -0.12857792, -0.14339119, 0.039977785, 0.2931088, 0.45572588, 0.40500507, 0.25539264, 0.10298418, -0.015630718, -0.078494735, -0.07562634, 0.040750865, 0.12878205, -0.006319176, -0.10339633, -0.27736568, -0.4805479, -0.45364043, -0.2614604, -0.053041905, 0.09474603, 0.15782642, 0.0680807, -0.15891978, -0.15560736, 0.059088837, 0.33798325, 0.5001608, 0.4339181, 0.25878778, 0.091396764, -0.036994856, -0.07955775, -0.06412212, 0.053836513, 0.12749064, -0.031119963, -0.14185442, -0.3266066, -0.5086424, -0.44568342, -0.23959579, -0.022713164, 0.11187177, 0.15280029, 0.046738714, -0.17758152, -0.1322939, 0.11874937, 0.3950657, 0.52457845, 0.4100002, 0.21551368, 0.0548126, -0.052809875, -0.060138922, -0.047729447, 0.057022784, 0.102264345, -0.07118395, -0.1686616, -0.34283173, -0.4844283, -0.39851293, -0.20919888, -0.015052053, 0.08869433, 0.12326474, 0.03574314, -0.15724792, -0.090380505, 0.15728375, 0.396075, 0.47934628, 0.3660377, 0.20978348, 0.067723855, -0.014539369, -0.026875407, -0.06630907, 0.020950338, 0.07016353, -0.08631537, -0.15684527, -0.3184481, -0.46184206, -0.40916306, -0.22916134, -0.03484641, 0.076350786, 0.1394701, 0.06585783, -0.13680062, -0.07505992, 0.16324373, 0.3756603, 0.459406, 0.37808123, 0.22815438, 0.08447419, -0.0018381138, -0.057059377, -0.11501977, 0.0042530745, 0.074896365, -0.0677587, -0.13859439, -0.32252976, -0.48547292, -0.42443228, -0.22610623, -0.031403176, 0.09191699, 0.15948938, 0.07418056, -0.13421205, -0.06849672, 0.15924671, 0.3570984, 0.45195317, 0.39789936, 0.25020322, 0.09450609, -0.01841281, -0.090783775, -0.1293411, 0.013227259, 0.09392767, -0.046893805, -0.13374256, -0.34051383, -0.5125924, -0.44286624, -0.23664328, -0.022072718, 0.11185842, 0.16781834, 0.07113514, -0.14128496, -0.07745652, 0.15218748, 0.36584935, 0.4858578, 0.43757915, 0.25985348, 0.076933786, -0.03968269, -0.094455235, -0.12578252, 0.01752898, 0.09397456, -0.052379046, -0.14956763, -0.36463848, -0.5365247, -0.46036026, -0.23349713, -0.013078731, 0.110757336, 0.18233752, 0.087468244, -0.12873861, -0.07527101, 0.15560085, 0.38302827, 0.51363057, 0.4570625, 0.2585774, 0.074553125, -0.04129058, -0.10712088, -0.14752595, -0.004620427, 0.08069046, -0.052741427, -0.16213678, -0.3946309, -0.56495297, -0.46582776, -0.22198288, -0.004992572, 0.13325958, 0.21960771, 0.10903777, -0.11735585, -0.067064, 0.1688682, 0.3977151, 0.5300331, 0.4724444, 0.2658124, 0.0627945, -0.080805026, -0.1602422, -0.1884112, -0.018375145, 0.08667393, -0.04632533, -0.17911296, -0.42890248, -0.5827466, -0.448348, -0.1856213, 0.042327914, 0.17847537, 0.24201174, 0.11179782, -0.1125731, -0.060918715, 0.1751254, 0.4119848, 0.53666544, 0.45876998, 0.23314573, 0.013792682, -0.119817816, -0.1829135, -0.19359389, -0.0130275525, 0.0867536, -0.04967304, -0.18856825, -0.43230706, -0.56249744, -0.41526377, -0.15293343, 0.06215427, 0.19334134, 0.25725344, 0.12074356, -0.10566726, -0.07128375, 0.16169582, 0.41071805, 0.52450365, 0.4478409, 0.21683447, -0.009081119, -0.13910049, -0.19683215, -0.19383375, -0.013367672, 0.08748078, -0.04864497, -0.19040819, -0.42368817, -0.54601413, -0.39827454, -0.14113076, 0.07504006, 0.21802038, 0.27224293, 0.12331188, -0.10708176, -0.083080225, 0.15278555, 0.40679595, 0.5130232, 0.44005752, 0.19967385, -0.02987143, -0.1565988, -0.20940454, -0.2016045, -0.01741827, 0.09615806, -0.031233681, -0.17490199, -0.41423967, -0.54471546, -0.38893956, -0.116092786, 0.106427334, 0.23192109, 0.26232582, 0.11224915, -0.11438345, -0.09797549, 0.14467378, 0.40666884, 0.5088759, 0.4299501, 0.18269865, -0.043399356, -0.16648743, -0.21515606, -0.2003174, -0.013626717, 0.1061385, -0.023668315, -0.17351286, -0.40933132, -0.5318487, -0.36677313, -0.10485166, 0.09918467, 0.22611663, 0.26848456, 0.12694232, -0.10806331, -0.10459555, 0.13790523, 0.40144074, 0.5033008, 0.4257879, 0.18238461, -0.057543173, -0.19392343, -0.2358231, -0.21319622, -0.017619757, 0.11761296, -0.013955116, -0.17180845, -0.40668234, -0.52592427, -0.35063785, -0.07847305, 0.12564544, 0.25525054, 0.28072777, 0.12375988, -0.114221714, -0.10563435, 0.13267638, 0.38933963, 0.48678803, 0.3933851, 0.1401135, -0.09429822, -0.21672928, -0.23661514, -0.20734958, -0.016309267, 0.122421205, -0.004680537, -0.14882001, -0.3661857, -0.4824975, -0.3121725, -0.05533812, 0.14306433, 0.26375565, 0.2717746, 0.11623762, -0.13241157, -0.13003209, 0.09465373, 0.35537758, 0.45489618, 0.34842035, 0.114932284, -0.10242714, -0.20731582, -0.2227708, -0.1946398, 0.002962753, 0.15198456, 0.033247035, -0.10776923, -0.3260134, -0.45501393, -0.2987735, -0.044812936, 0.14447503, 0.24642538, 0.23726633, 0.0823372, -0.15997408, -0.14927502, 0.061441958, 0.32162312, 0.41833, 0.31295115, 0.10785666, -0.08202194, -0.17627019, -0.1893924, -0.15413123, 0.030622765, 0.16430755, 0.05103291, -0.074460566, -0.28087726, -0.41860643, -0.29234186, -0.065842755, 0.10938565, 0.19769871, 0.1886716, 0.052385136, -0.16238457, -0.16530216, 0.025169613, 0.29038265, 0.38916478, 0.29737547, 0.12899968, -0.03521957, -0.13000646, -0.14330493, -0.110561416, 0.037648123, 0.16756384, 0.06996289, -0.041867647, -0.24119145, -0.41092628, -0.3211771, -0.10516658, 0.061277226, 0.1405803, 0.13312711, 0.035115425, -0.14722362, -0.16384868, 0.01205923, 0.26052588, 0.366312, 0.29758275, 0.17514898, 0.040378336, -0.06169355, -0.08734799, -0.09481262, -0.00023414224, 0.14036414, 0.07532711, -0.011371876, -0.20797624, -0.41537386, -0.3645472, -0.16947706, -0.00586939, 0.08835586, 0.11543724, 0.0731853, -0.099475324, -0.15469247, -0.012871575, 0.21410593, 0.35307857, 0.32924917, 0.23794192, 0.10562276, -0.015941203, -0.07431889, -0.11945294, -0.04249137, 0.12746398, 0.08602664, 0.012118414, -0.18397088, -0.42642242, -0.40827122, -0.22857562, -0.0585974, 0.06427873, 0.12726341, 0.115985714, -0.05938897, -0.14936505, -0.03311423, 0.18189386, 0.3559193, 0.36040255, 0.27705866, 0.15540418, 0.012885915, -0.082208075, -0.14825678, -0.09293728, 0.099120475, 0.095899805, 0.0399868, -0.15002628, -0.42787346, -0.44767207, -0.28480917, -0.09160899, 0.0708492, 0.15689744, 0.16757952, -0.022913104, -0.16312684, -0.074280776, 0.13160428, 0.34993964, 0.39544085, 0.32179213, 0.19344302, 0.02105565, -0.09975682, -0.17850043, -0.13384213, 0.08963387, 0.12761071, 0.07432505, -0.11489424, -0.43184462, -0.49134007, -0.33020502, -0.10650508, 0.09082322, 0.1862095, 0.1968475, -0.012054583, -0.18895797, -0.1133365, 0.09934377, 0.35485932, 0.4229789, 0.33700314, 0.20444019, 0.02216376, -0.109333344, -0.19253896, -0.15103513, 0.09816228, 0.16490376, 0.09868607, -0.089425206, -0.42477524, -0.5055194, -0.34289744, -0.11081225, 0.08121338, 0.17419209, 0.18686382, -0.009786878, -0.20159557, -0.13821572, 0.07057024, 0.33005077, 0.42500097, 0.34414443, 0.2212436, 0.05647388, -0.08155706, -0.1700875, -0.14344768, 0.09959337, 0.18288346, 0.101723276, -0.06149636, -0.3999531, -0.51715714, -0.3768866, -0.16465431, 0.042325605, 0.1534624, 0.17346749, 0.004009847, -0.19661647, -0.1491939, 0.041686542, 0.3069175, 0.43996307, 0.37539557, 0.27336705, 0.120938964, -0.042380933, -0.16176033, -0.16730161, 0.06141428, 0.1762563, 0.098817475, -0.03549706, -0.3677015, -0.5368105, -0.4396899, -0.23338355, 0.0020004797, 0.14311022, 0.18901297, 0.0645562, -0.15456551, -0.15777001, 0.014359871, 0.2848248, 0.45696175, 0.4207669, 0.32295308, 0.161099, -0.05028955, -0.19527146, -0.21217471, 0.026118925, 0.18819231, 0.10707832, -0.019595817, -0.35124046, -0.5701418, -0.48576474, -0.25113875, 0.014222524, 0.16548942, 0.2163104, 0.10304239, -0.14508618, -0.17628384, 0.0020187383, 0.26651913, 0.45273665, 0.43396544, 0.32255518, 0.15514061, -0.0594076, -0.1966368, -0.20830806, 0.007782589, 0.17529927, 0.08748098, -0.009456178, -0.28566113, -0.5272281, -0.47109506, -0.26609483, -0.015597281, 0.15093923, 0.22022745, 0.13426207, -0.12833539, -0.1972452, -0.045381814, 0.2030391, 0.4144947, 0.43517658, 0.33796868, 0.18380435, -0.029146623, -0.1745024, -0.20223778, -0.027696347, 0.16805023, 0.12137623, 0.050329145, -0.2002075, -0.48960906, -0.50239474, -0.32743979, -0.0628902, 0.119859725, 0.19906552, 0.14686085, -0.11123309, -0.22412382, -0.09401014, 0.14657524, 0.37130886, 0.44707033, 0.38785508, 0.23889855, 0.029511325, -0.13351768, -0.19786298, -0.07118209, 0.1693664, 0.16986641, 0.0996638, -0.1321924, -0.47776482, -0.57634467, -0.4151125, -0.12385718, 0.09100927, 0.20491037, 0.17803903, -0.100664295, -0.2731236, -0.16013779, 0.10203842, 0.37876588, 0.520318, 0.46427777, 0.2693973, 0.046525795, -0.12203019, -0.18299654, -0.06510133, 0.19899985, 0.21203509, 0.09286777, -0.1388934, -0.50382185, -0.6353309, -0.4591463, -0.15359956, 0.06867206, 0.18080217, 0.15596327, -0.10537504, -0.28968793, -0.16077085, 0.1332855, 0.41641873, 0.5537995, 0.48458824, 0.2766532, 0.08592334, -0.06615166, -0.13694017, -0.073651634, 0.167154, 0.19355644, 0.042375006, -0.15989587, -0.49724972, -0.6456763, -0.47284535, -0.18473525, 0.030090753, 0.13648918, 0.12877041, -0.07169419, -0.24605647, -0.10822388, 0.17528349, 0.42054304, 0.52859336, 0.46149352, 0.27994168, 0.13375056, 0.0043062163, -0.088611305, -0.096009456, 0.092189215, 0.12891343, -0.02548896, -0.15588227, -0.4174666, -0.5818753, -0.47714463, -0.25832358, -0.060097434, 0.07085773, 0.13102885, 0.031016264, -0.13862883, -0.06931414, 0.13649826, 0.34678793, 0.4672182, 0.45952094, 0.34385714, 0.21564023, 0.06940507, -0.07484419, -0.15346575, -0.012822088, 0.080596745, -0.025975354, -0.10364038, -0.32702628, -0.55489945, -0.5347584, -0.34133142, -0.113132656, 0.05798391, 0.16542716, 0.120596476, -0.07692851, -0.085443266, 0.087095685, 0.30541295, 0.44685733, 0.47783574, 0.393332, 0.25282362, 0.09509328, -0.07558474, -0.19294465, -0.09319622, 0.05140362, -0.016825097, -0.075397305, -0.26039597, -0.5211519, -0.55265135, -0.38779342, -0.15994573, 0.042239487, 0.17887746, 0.18535174, -0.012990421, -0.08980611, 0.04446261, 0.25450686, 0.40838778, 0.4601877, 0.41476613, 0.28260761, 0.12326752, -0.056630228, -0.20120525, -0.15766598, 0.02363801, -0.0026747577, -0.045904182, -0.17990139, -0.4496113, -0.5488414, -0.44281653, -0.2214563, 0.0032651003, 0.16537432, 0.22537264, 0.049031116, -0.090461686, -0.003034653, 0.18593551, 0.35830376, 0.441495, 0.44843772, 0.33766726, 0.17557737, -0.018326867, -0.19647215, -0.21842936, -0.020404615, 0.022034701, -0.0051282593, -0.107361875, -0.39217654, -0.5651828, -0.51372933, -0.29779336, -0.05150573, 0.15015821, 0.25827482, 0.11994264, -0.07715045, -0.04785056, 0.121547945, 0.32214457, 0.4483142, 0.49064505, 0.39559567, 0.21632552, 0.009428376, -0.18163048, -0.25907922, -0.069155455, 0.04680636, 0.018819388, -0.067539096, -0.34887463, -0.5747323, -0.56615895, -0.36177945, -0.09576446, 0.13508174, 0.26850232, 0.17274806, -0.061044104, -0.08161777, 0.078068, 0.30334496, 0.4554433, 0.51071227, 0.43727088, 0.2459847, 0.039676856, -0.15154281, -0.28063264, -0.12494472, 0.049186204, 0.018263852, -0.05350294, -0.30393437, -0.56312776, -0.5935093, -0.40606174, -0.1392884, 0.10946686, 0.27653226, 0.23137973, -0.01753492, -0.09754075, 0.034684185, 0.2718379, 0.45579737, 0.52629405, 0.46164545, 0.2614194, 0.05642993, -0.13352984, -0.28131452, -0.17445025, 0.04226659, 0.02088386, -0.05393247, -0.2638777, -0.5368548, -0.58835274, -0.42562383, -0.17334786, 0.07800408, 0.2570615, 0.25834835, 0.03126219, -0.08944493, 0.027116152, 0.2513055, 0.44119158, 0.4935925, 0.42457998, 0.26140535, 0.08603213, -0.08205591, -0.23940179, -0.22212291, -0.008397066, -0.0006386517, -0.049647696, -0.17720617, -0.4450718, -0.5332025, -0.4423442, -0.23603576, 0.007963976, 0.20681511, 0.2795883, 0.10518743, -0.06588206, -0.009631308, 0.16514842, 0.36512575, 0.4351477, 0.41132587, 0.32011652, 0.15481201, -0.016992003, -0.1906565, -0.259368, -0.06919282, 0.0055853883, -0.008359953, -0.07827589, -0.34922197, -0.50806713, -0.49912748, -0.3333996, -0.078010716, 0.15138955, 0.28973985, 0.17906909, -0.042562697, -0.0646789, 0.07002157, 0.29533947, 0.4244942, 0.45388544, 0.40430766, 0.2279136, 0.023457833, -0.1640714, -0.2847748, -0.122958526, 0.045332268, 0.047961157, -0.018748796, -0.29992732, -0.54145724, -0.583125, -0.41529173, -0.11811669, 0.13207175, 0.29019016, 0.22700104, -0.041995153, -0.12784722, 0.013530795, 0.27532104, 0.4653366, 0.5053511,
		  0.43659523, 0.24598429, 0.0340333, -0.12562111, -0.25027406, -0.14572349, 0.0623028, 0.052722014, -0.029241983, -0.28017145, -0.5484954, -0.5926206, -0.42979756, -0.1511429, 0.07962373, 0.2419843, 0.2444897, -0.0010353103, -0.13703108, -0.01102891, 0.25182295, 0.47216472, 0.51423377, 0.43193817, 0.26506487, 0.07370285, -0.06566696, -0.18933234, -0.17976315, 0.028941115, 0.04569907, -0.05164117, -0.2346773, -0.50436485, -0.57784706, -0.44642422, -0.2104591, 0.010813481, 0.17420131, 0.24210928, 0.06166861, -0.12174456, -0.021844056, 0.22858272, 0.4552541, 0.5035883, 0.41801286, 0.29490343, 0.13498428, -0.0051521184, -0.12996867, -0.21574427, -0.04348108, 0.021433443, -0.06918711, -0.17066117, -0.42595664, -0.55650353, -0.47104138, -0.27828395, -0.054624237, 0.12072893, 0.24323462, 0.14696516, -0.07497416, -0.041593794, 0.17034672, 0.39726773, 0.47904673, 0.41653642, 0.31608853, 0.17981254, 0.028991092, -0.091000125, -0.21973753, -0.10034665, 0.029633773, -0.045188863, -0.10940034, -0.3424553, -0.53416294, -0.4923475, -0.3247444, -0.11385078, 0.0654424, 0.21045774, 0.19070706, -0.044681665, -0.088791326, 0.09299149, 0.33727524, 0.4677332, 0.4384723, 0.34317762, 0.23267938, 0.075068496, -0.05224057, -0.17111306, -0.12189612, 0.045140512, -0.0098213665, -0.09035448, -0.2871678, -0.5239662, -0.5221897, -0.36949036, -0.17885198, 0.0023317123, 0.14414717, 0.1813101, -0.011470392, -0.10508184, 0.06269218, 0.3122847, 0.468675, 0.45821577, 0.35925975, 0.264049, 0.13878079, 0.018762004, -0.08551425, -0.12771408, 9.88853e-05, -0.029860849, -0.12429567, -0.24348302, -0.47141632, -0.5271269, -0.40732628, -0.25430724, -0.091823824, 0.06186287, 0.17127717, 0.08138303, -0.045157876, 0.052636914, 0.25778013, 0.42273694, 0.45774174, 0.39137864, 0.31500092, 0.22684844, 0.07546462, -0.056002025, -0.1558413, -0.09084431, -0.042404033, -0.122359045, -0.19783303, -0.4037897, -0.5392578, -0.4631754, -0.32101423, -0.15073061, 0.032238983, 0.17816615, 0.16923702, 0.0026025565, 0.014055427, 0.19491675, 0.38417137, 0.470354, 0.43552828, 0.34475416, 0.24792236, 0.089421734, -0.049908593, -0.15214024, -0.13842921, -0.03547668, -0.10997876, -0.18132037, -0.32616252, -0.51551384, -0.4884172, -0.34123984, -0.18725367, -0.013365618, 0.13957457, 0.19757213, 0.052833512, -0.0063773273, 0.1358475, 0.32336283, 0.44616467, 0.449583, 0.36191508, 0.25959143, 0.13090415, -0.008620971, -0.10650381, -0.15513067, -0.05060034, -0.07982498, -0.15551986, -0.24114752, -0.4599424, -0.5154503, -0.38944566, -0.2482795, -0.081147775, 0.07940892, 0.18784112, 0.10623821, -0.016145078, 0.07283859, 0.2552443, 0.41679686, 0.47059336, 0.40588647, 0.29716507, 0.19334918, 0.058457233, -0.05767263, -0.16435426, -0.088559024, -0.04837926, -0.14173655, -0.1936818, -0.40453786, -0.55431044, -0.46590573, -0.3113757, -0.13574116, 0.02773251, 0.16416782, 0.16539904, 0.006154542, 0.023808867, 0.19640365, 0.39762744, 0.5042205, 0.46304387, 0.34268758, 0.21963279, 0.09278927, -0.031009192, -0.15396328, -0.12018016, -0.025774613, -0.12969111, -0.19453524, -0.35547307, -0.56062317, -0.5207285, -0.33694032, -0.16286892, -0.022893323, 0.11511328, 0.18478999, 0.04412142, 0.0007372031, 0.15863821, 0.36072266, 0.49918434, 0.49159813, 0.37711686, 0.24883798, 0.1439704, 0.012517872, -0.12073298, -0.14008836, -0.028746037, -0.106093384, -0.20738241, -0.3026797, -0.5264761, -0.5639113, -0.38622656, -0.21577205, -0.091709316, 0.052535623, 0.17678192, 0.11380749, 0.011588052, 0.121713586, 0.31439933, 0.48504248, 0.5256223, 0.43400314, 0.288894, 0.17270806, 0.051601987, -0.07377896, -0.14277093, -0.07063304, -0.097468965, -0.23349403, -0.2762047, -0.46350893, -0.5821653, -0.44583076, -0.27140906, -0.14757021, -0.00079807825, 0.1552272, 0.18721952, 0.062745884, 0.10364705, 0.2704016, 0.44018716, 0.52747166, 0.47117862, 0.3368294, 0.21803713, 0.109181985, -0.03447193, -0.15726937, -0.15188514, -0.1065897, -0.2248317, -0.26119965, -0.38955656, -0.57507217, -0.5145806, -0.34116387, -0.18922046, -0.0348604, 0.14124942, 0.26139456, 0.15646143, 0.08671517, 0.20728315, 0.37801453, 0.5166357, 0.5158173, 0.40182623, 0.25098202, 0.11794826, -0.029482013, -0.17460921, -0.23057419, -0.13552217, -0.18918838, -0.25927472, -0.3164759, -0.5272972, -0.5544255, -0.39131176, -0.20805405, -0.035140887, 0.14518915, 0.29853243, 0.23546036, 0.07525583, 0.1342652, 0.30313408, 0.48342815, 0.5328367, 0.43505067, 0.26956302, 0.09723588, -0.041391328, -0.17487991, -0.26305747, -0.15522754, -0.109655716, -0.22573756, -0.2708126, -0.4514855, -0.55165374, -0.41805956, -0.21302533, -0.029479574, 0.11596892, 0.25687823, 0.2600378, 0.08134153, 0.07346251, 0.23988582, 0.42660245, 0.5120075, 0.44282803, 0.28472188, 0.08985212, -0.035248145, -0.12813328, -0.22560155, -0.17586957, -0.068066396, -0.1894193, -0.2512244, -0.34194332, -0.48995006, -0.43661323, -0.25878438, -0.07162813, 0.06737606, 0.19632816, 0.25970393, 0.1250958, 0.038659208, 0.16770215, 0.33748922, 0.455712, 0.43634868, 0.31709987, 0.13820276, 0.004801845, -0.066137604, -0.17197517, -0.21240284, -0.078798994, -0.123223014, -0.21417198, -0.23987348, -0.41267127, -0.46867833, -0.33023927, -0.13124917, 0.019222427, 0.1345498, 0.23587735, 0.18479331, 0.046006598, 0.09323956, 0.22958782, 0.37301275, 0.42320374, 0.36232468, 0.21529096, 0.06264686, -0.0256864, -0.12215884, -0.2204617, -0.13053325, -0.055269513, -0.15724155, -0.1704617, -0.3111631, -0.47117493, -0.3977654, -0.2083809, -0.034498643, 0.091379784, 0.19799131, 0.21690792, 0.06863542, 0.02523576, 0.1240354, 0.28021854, 0.40108922, 0.39430863, 0.2837316, 0.13345979, 0.004825566, -0.08107535, -0.17501652, -0.16225493, -0.012692073, -0.07002634, -0.12621987, -0.21566696, -0.43162566, -0.452842, -0.31051153, -0.11209532, 0.043452926, 0.13233219, 0.1929279, 0.09682032, -0.02837911, 0.02882725, 0.19095813, 0.36935383, 0.4324243, 0.3702992, 0.23157634, 0.07249635, -0.034470823, -0.10579578, -0.15981753, -0.029117573, 0.011668628, -0.10565108, -0.17733926, -0.3876402, -0.51167554, -0.40806437, -0.19879112, -0.010171756, 0.07162437, 0.12938389, 0.12120449, -0.016224226, 0.0039039946, 0.16137865, 0.34625888, 0.45590582, 0.4134611, 0.29230818, 0.1415981, 0.012690397, -0.04114963, -0.124417596, -0.10448929, 0.001335986, -0.105288595, -0.17302097, -0.29636165, -0.46966764, -0.44192836, -0.2931164, -0.10730871, 0.007221837, 0.08294254, 0.16851489, 0.08689392, 0.015149328, 0.0934214, 0.23450232, 0.39010933, 0.41916025, 0.36118865, 0.24523489, 0.08502047, -0.01847294, -0.11165845, -0.1875337, -0.055020753, -0.023303656, -0.11169949, -0.17876081, -0.37955743, -0.4855786, -0.40112755, -0.21086907, -0.038444858, 0.06680253, 0.16586047, 0.14718498, 0.0074823853, 0.01371809, 0.12926638, 0.31023642, 0.42078376, 0.41462463, 0.3301197, 0.16749263, 0.010495048, -0.078487225, -0.1689849, -0.10487026, 0.03180272, -0.052096955, -0.119244725, -0.28059122, -0.47411177, -0.47478464, -0.33889845, -0.14597209, 0.0151726, 0.12564698, 0.18478936, 0.065255284, -0.02655424, 0.04041681, 0.21457686, 0.3955833, 0.46795663, 0.42757884, 0.2775942, 0.084743515, -0.046371132, -0.13172433, -0.16987862, -0.005516061, 0.01766966, -0.08642081, -0.20277263, -0.43925512, -0.5489436, -0.46057117, -0.2557753, -0.023664763, 0.115076296, 0.18941146, 0.14093652, -0.023431053, -0.023182133, 0.1344529, 0.3558983, 0.49752563, 0.49359217, 0.36138672, 0.16070384, -0.019944593, -0.107021354, -0.18799572, -0.09749176, 0.05016818, -0.04675388, -0.15648915, -0.3558386, -0.5545903, -0.53554946, -0.34853968, -0.08534067, 0.09445421, 0.17039843, 0.18959467, 0.027174253, -0.057229836, 0.06326348, 0.2787223, 0.47360298, 0.52879554, 0.43323472, 0.2337725, 0.024799136, -0.100309685, -0.16374467, -0.16318253, 0.026208598, 0.02392797, -0.1236278, -0.26341084, -0.4892916, -0.56867296, -0.43719432, -0.19085401, 0.02990393, 0.14183821, 0.19713667, 0.11132391, -0.04986302, -0.0045750346, 0.18216154, 0.40321654, 0.530165, 0.49655154, 0.3136045, 0.108568214, -0.05560359, -0.13632186, -0.18296084, -0.06519361, 0.060315523, -0.07434152, -0.19083802, -0.37967545, -0.56914186, -0.52841204, -0.31169248, -0.061335012, 0.122453995, 0.19947983, 0.18404317, -0.0017542309, -0.06216015, 0.09195544, 0.3211885, 0.5192864, 0.5412678, 0.3813526, 0.1845137, 0.0042527365, -0.121813506, -0.1657116, -0.1440554, 0.018258031, -0.019235075, -0.1509249, -0.275713, -0.50343597, -0.5601927, -0.40627074, -0.16098166, 0.07406453, 0.18988134, 0.2151164, 0.09760309, -0.05424411, 0.016359193, 0.21351095, 0.43750608, 0.5163873, 0.42923865, 0.26590353, 0.08447342, -0.08769309, -0.1644006, -0.19278215, -0.08620301, 0.031435978, -0.065523446, -0.16326843, -0.3660575, -0.55246353, -0.49368235, -0.25712898, 0.0055308584, 0.17577744, 0.21378405, 0.15956658, -0.016041229, -0.060332194, 0.087813266, 0.31311318, 0.47566316, 0.45993114, 0.3256543, 0.14632015, -0.03667938, -0.14351477, -0.16057988, -0.13331342, 0.028893678, 0.02397206, -0.08918986, -0.23701145, -0.47353366, -0.5142418, -0.3418664, -0.10443573, 0.09474963, 0.1680542, 0.1637333, 0.06032167, -0.08083923, -0.021628758, 0.18158099, 0.38970673, 0.44322294, 0.36483735, 0.2256679, 0.0659551, -0.0608132, -0.10388731, -0.13567747, -0.044433016, 0.07274117, -0.016759483, -0.120717354, -0.32521367, -0.4850629, -0.43068972, -0.2480048, -0.048238162, 0.08110557, 0.13083036, 0.12546998, -0.02321766, -0.0884546, 0.047848422, 0.25864565, 0.39679205, 0.40388805, 0.33126286, 0.20330603, 0.061307583, -0.043577388, -0.11457437, -0.127316, 0.03258287, 0.06561579, -0.025273927, -0.17940097, -0.42545703, -0.51293117, -0.40096605, -0.20416822, -0.022406466, 0.09678948, 0.1622215, 0.07787844, -0.1054871, -0.06356087, 0.13334772, 0.33520594, 0.43593127, 0.42427385, 0.31577295, 0.16590968, 0.027492208, -0.07447833, -0.15452452, -0.05974205, 0.092459366, 0.033792417, -0.078141615, -0.30177346, -0.5166165, -0.50945115, -0.3534738, -0.15682949, 0.026702043, 0.15868892, 0.17261638, -0.02309418, -0.11611268, 0.010760348, 0.2198259, 0.41219997, 0.47484386, 0.41084868, 0.28193247, 0.12476609, -0.0269878, -0.15389769, -0.15799007, 0.03348737, 0.09082442, 0.00043367103, -0.16193183, -0.44487813, -0.5699201, -0.48403582, -0.28916237, -0.06513431, 0.12284032, 0.22660878, 0.10860448, -0.100535676, -0.09669358, 0.078200325, 0.32353213, 0.47435623, 0.48548365, 0.39429495, 0.22935657, 0.04367986, -0.12545766, -0.21174091, -0.08567625, 0.10125373, 0.07831959, -0.03173892, -0.28795213, -0.5598702, -0.59709907, -0.43491292, -0.18219064, 0.06525847, 0.23944004, 0.22156993, -0.020125106, -0.18096769, -0.0836617, 0.18419278, 0.44810468, 0.55407774, 0.48866603, 0.31042895, 0.10621008, -0.08140754, -0.20029128, -0.15568937, 0.07738766, 0.1563803, 0.04930276, -0.14920147, -0.47977346, -0.6486894, -0.5440103, -0.29461434, -0.028541027, 0.17770731, 0.24202207, 0.0798057, -0.17540206, -0.19036175, 0.053950537, 0.36862835, 0.5549622, 0.53793895, 0.38247952, 0.2016585, 0.024644898, -0.12647498, -0.1696026, -0.02243638, 0.14663675, 0.09008509, -0.04209236, -0.30872145, -0.59465486, -0.61794335, -0.4313881, -0.17871091, 0.054919496, 0.19796984, 0.18409462, -0.039152067, -0.20665424, -0.082578935, 0.20373727, 0.46633768, 0.55844283, 0.48570284, 0.33240375, 0.14720584, -0.049466033, -0.1726403, -0.14424725, 0.057968408, 0.14849406, 0.05387206, -0.12413872, -0.46679533, -0.66987264, -0.57540613, -0.3315642, -0.058356553, 0.14762677, 0.23542736, 0.11212435, -0.17460473, -0.21074595, 0.035304114, 0.3591208, 0.56648225, 0.5651038, 0.42565465, 0.22511572, 0.025226332, -0.116031155, -0.17078036, -0.04722645, 0.14465283, 0.09804948, -0.033587392, -0.2855588, -0.5902571, -0.630405, -0.44982854, -0.19423577, 0.028685931, 0.17722489, 0.20416334, -0.017162748, -0.2174363, -0.10133102, 0.17571564, 0.4512904, 0.56127757, 0.50131476, 0.34720466, 0.15291509, -0.01994991, -0.14253327, -0.15552242, 0.042204622, 0.15601265, 0.06785185, -0.07704761, -0.41545534, -0.6646842, -0.6111829, -0.37324303, -0.106548, 0.09832166, 0.22748056, 0.14270592, -0.15146247, -0.22468702, -0.019817987, 0.3004561, 0.5454734, 0.5885642, 0.48119873, 0.27803752, 0.07528533, -0.0762033, -0.16633706, -0.078834035, 0.13978791, 0.13103344, 0.0097377505, -0.23174065, -0.5911897, -0.69993126, -0.53005356, -0.2535765, -0.009011248, 0.17517619, 0.22270781, 0.010851483, -0.22686036, -0.1554148, 0.13065906, 0.46272254, 0.6139478, 0.5669613, 0.3826732, 0.16862962, 0.001176252, -0.11835235, -0.15363307, 0.007473483, 0.15868518, 0.067006774, -0.08152289, -0.3896908, -0.67253375, -0.64329463, -0.40013304, -0.14278227, 0.074231714, 0.2077205, 0.16409877, -0.101748854, -0.2290309, -0.045238256, 0.2777705, 0.53654516, 0.6036021, 0.49317762, 0.29790813, 0.11303113, -0.04940622, -0.15252522, -0.13761765, 0.09261402, 0.14460728, 0.017441224, -0.16184436, -0.5256006, -0.7039328, -0.559712, -0.30488735, -0.041330494, 0.15562788, 0.21433768, 0.06409206, -0.20189524, -0.1891107, 0.07191153, 0.40453216, 0.60205007, 0.5745821, 0.40869245, 0.2192538, 0.031407434, -0.090642706, -0.1583004, -0.04946617, 0.16704348, 0.09794545, -0.031244136, -0.30147487, -0.64141494, -0.672617, -0.4739718, -0.1966779, 0.046685304, 0.16676879, 0.17544952, -0.043826204, -0.22936283, -0.09690633, 0.21434395, 0.5058517, 0.59553665, 0.5101017, 0.3501361, 0.16289504, -0.0021655094, -0.108269446, -0.15726691, 0.038689706, 0.1645563, 0.036599617, -0.10623722, -0.45086923, -0.697243, -0.6192627, -0.37488812, -0.1002301, 0.08253113, 0.17567465, 0.13471445, -0.12237708, -0.1986805, 0.016897874, 0.3319135, 0.5536727, 0.5828458, 0.47651967, 0.30078468, 0.10743827, -0.044926025, -0.15701437, -0.13723494, 0.11188934, 0.11528755, -0.013258119, -0.21830072, -0.5822751, -0.6982742, -0.5439911, -0.27585563, -0.028626712, 0.12828316, 0.21779591, 0.07984912, -0.1751515, -0.1266287, 0.1274958, 0.4197782, 0.5733076, 0.5551417, 0.42191404, 0.23975019, 0.036471296, -0.11336695, -0.20872295, -0.07943471, 0.14271511, 0.06750376, -0.04540436, -0.32765836, -0.644236, -0.66758573, -0.46641418, -0.18726979, 0.05364759, 0.20600678, 0.24077268, -0.008216562, -0.21190703, -0.08655632, 0.21027145, 0.49139228, 0.6014106, 0.53869635, 0.3579497, 0.1265418, -0.070778586, -0.17838001, -0.21015896, 0.04406523, 0.1835268, 0.05105702, -0.11049149, -0.4662154, -0.70686483, -0.60709614, -0.3369278, -0.052796125, 0.1424207, 0.23864734, 0.14987376, -0.16552448, -0.22519967, 0.017306006, 0.33699, 0.55939543, 0.5810631, 0.4410524, 0.2376818, 0.03658846, -0.0863397, -0.17061594, -0.10953438, 0.16285336, 0.13773578, -0.010774577, -0.21294118, -0.56113344, -0.65765345, -0.4922241, -0.23934516, -0.004317472, 0.14311066, 0.20387326, 0.026787307, -0.22566256, -0.1492592, 0.11348587, 0.40258762, 0.55025214, 0.51968765, 0.38310006, 0.20243286, 0.033974495, -0.08124703, -0.16873871, -0.01956364, 0.18652974, 0.08146993, -0.026090957, -0.29164574, -0.6104774, -0.6359283, -0.45591787, -0.19581762, 0.033861637, 0.16931723, 0.17599143, -0.073725, -0.23764881, -0.09277141, 0.18655926, 0.45986894, 0.5608609, 0.5108836, 0.36262816, 0.166244, 0.0041294987, -0.121183686, -0.16368963, 0.072675, 0.17833321, 0.06520263, -0.057330452, -0.40612698, -0.6643497, -0.62498516, -0.39882952, -0.12328403, 0.079973266, 0.19256113, 0.11793832, -0.15659377, -0.22406267, -0.038937923, 0.26469344, 0.50593394, 0.5751756, 0.5001631, 0.3278548, 0.1308221, -0.042989537, -0.1676276, -0.105654776, 0.15415789, 0.17566676, 0.07982265, -0.13322377, -0.5349007, -0.7162214, -0.6006798, -0.33220443, -0.058568463, 0.12314748, 0.19254453, 0.033376392, -0.22687876, -0.22144419, 0.023750693, 0.3602719, 0.577973, 0.60861176, 0.49788544, 0.28634217, 0.061730254, -0.09426264, -0.16502382, -0.011377847, 0.2174144, 0.17187795, 0.038993932, -0.28875828, -0.67037356, -0.74489796, -0.54705894, -0.2452465, 0.0006152249, 0.15192819, 0.1654577, -0.0660918, -0.27679962, -0.17455637, 0.14493872, 0.48333737, 0.6480338, 0.62626576, 0.44482285, 0.20316891, 0.01141968, -0.1071373, -0.13259324, 0.083044186, 0.23402615, 0.12221089, -0.070715964, -0.45598143, -0.754881, -0.7206869, -0.46635953, -0.17881548, 0.042942706, 0.1675145, 0.12359148, -0.1466667, -0.2720396, -0.0723397, 0.2840073, 0.58685684, 0.6910395, 0.5923898, 0.3779383, 0.16350962, -0.01044812, -0.1352278, -0.10972442, 0.14366905, 0.19410041, 0.046837207, -0.1936683, -0.59936917, -0.80443597, -0.6850368, -0.39743507, -0.10377386, 0.1021219, 0.2010155, 0.08079867, -0.20498754, -0.21994866, 0.05116958, 0.42610103, 0.6764319, 0.69698894, 0.54778147, 0.31614232, 0.08635018, -0.08584954, -0.18101671, -0.053619932, 0.18654342, 0.13042353, -0.037955377, -0.34291583, -0.719432, -0.80955505, -0.59920853, -0.27743316, -0.005621345, 0.16656505, 0.22109525, 0.009231948, -0.22637948, -0.13299245, 0.18843204, 0.5385454, 0.7016822, 0.6553868, 0.45525968, 0.20651798, -0.0020652662, -0.14281198, -0.18283837, 0.020156635, 0.17667446, 0.05954278, -0.116610385, -0.4646694, -0.765391, -0.73709786, -0.47113496, -0.16130644, 0.07357285, 0.2162992, 0.19622658, -0.075919755, -0.2218989, -0.045879513, 0.29741755, 0.5904823, 0.67938906, 0.57127094, 0.3460559, 0.12478588, -0.0526982, -0.16873983, -0.14027411, 0.09016821, 0.14814599, 0.020206092, -0.18479346, -0.5462288, -0.75537145, -0.64866626, -0.36958927, -0.08627669, 0.12228015, 0.22836068, 0.11802558, -0.15290003, -0.19807777, 0.02852864, 0.36478147, 0.6090491, 0.65536106, 0.5200803, 0.3019671, 0.080089584, -0.099665344, -0.18030432, -0.07831394, 0.14346062, 0.13905998, -0.0074081994, -0.27679625, -0.6386082, -0.75879854, -0.5848473, -0.28653482, -0.011137417, 0.16165876, 0.20592675, 0.03217275, -0.19348462, -0.14850785, 0.12376822, 0.45988172, 0.6544886, 0.63059384, 0.44015247, 0.20188072, -0.0015382057, -0.119252175, -0.13178785, 0.008686145, 0.15997641, 0.074101046, -0.09859923, -0.38857102, -0.6751425, -0.6904731, -0.4709728, -0.18452598, 0.045296106, 0.16187777, 0.15553488, -0.041313548, -0.1976572, -0.08104376, 0.21200167, 0.50092417, 0.6234137, 0.5519232, 0.36384884, 0.16055824, -0.007436336, -0.08984327, -0.10516777, 0.04354339, 0.1490307, 0.039149374, -0.13169166, -0.43788174, -0.673234, -0.63818675, -0.4104203, -0.14337163, 0.04690077, 0.13810305, 0.10756033, -0.09146135, -0.18451008, -0.028582837, 0.26793697, 0.5280141, 0.6203495, 0.52827084, 0.33893153, 0.13682796, -0.008954849, -0.076480865, -0.07316763, 0.097641826, 0.13638553, 0.0016451287, -0.19970901, -0.51803666, -0.70482373, -0.61695874, -0.36354738, -0.10192554, 0.057773504, 0.12922168, 0.06539812, -0.1400033, -0.16647407, 0.045770597, 0.35595962, 0.59434015, 0.6423084, 0.4997554, 0.2907882, 0.09736665, -0.0145447645, -0.07598074, -0.039034583, 0.1269795, 0.08329944, -0.06876241, -0.29758683, -0.60971546, -0.70435673, -0.5423506, -0.28041103, -0.071095295, 0.045865007, 0.10903372, 0.01692697, -0.13640366, -0.07884882, 0.14930205, 0.44294345, 0.62541944, 0.5961187, 0.42895383, 0.24716206, 0.096017934, 0.0032432792, -0.08136161, -0.025724115, 0.076536156, -0.009790755, -0.123881005, -0.3647837, -0.6240706, -0.646368, -0.47552097, -0.26154688, -0.08418376, 0.05893529, 0.14110233, 0.039708797, -0.08613008, -0.023304366, 0.20030068, 0.47359073, 0.6113847, 0.55240285, 0.40151814, 0.22990502, 0.07706726, -0.046851628, -0.12841453, -0.034812164, 0.047985543, -0.019630764, -0.13790274, -0.42376155, -0.6341416, -0.6047883, -0.43658713, -0.2242401, -0.030164575, 0.123700105, 0.16375518, -0.002637151, -0.11009448, -0.005328161, 0.2587187, 0.52131665, 0.6019855, 0.5104479, 0.34477514, 0.17778036, 0.03227317, -0.06874436, -0.10313381, 0.018763922, 0.056175075, -0.04424948, -0.20181163, -0.4791376, -0.61677074, -0.55493087, -0.38701352, -0.18446498, -0.004923174, 0.1186894, 0.11220123, -0.0542913, -0.08151487, 0.074787736, 0.3323372, 0.53515524, 0.5559921, 0.45031667, 0.31497452, 0.17136578, 0.043497868, -0.048280273, -0.085473984, 0.017895691, -0.006879138, -0.08809835, -0.23316005, -0.490104, -0.5816873, -0.52613425, -0.38014573, -0.18228792, -0.0029945767, 0.1292201, 0.116744824, -0.033515077, -0.03264661, 0.11126519, 0.35239488, 0.5154325, 0.52178246, 0.45012975, 0.33058846, 0.1679777, 0.035077576, -0.093995675, -0.13107939, -0.0142891845, -0.027002668, -0.06646177, -0.23835747, -0.4962284, -0.5888819, -0.5480415, -0.37358263, -0.14336441, 0.053702693, 0.18996084, 0.12405426, -0.048637636, -0.035936166, 0.1235044, 0.36842132, 0.5169446, 0.5344735, 0.47003502, 0.31106383, 0.12576234, -0.021398006, -0.16256236, -0.12872867, 0.024286415, -0.003469725, -0.0588015, -0.29169118, -0.5516897, -0.61832744, -0.5358237, -0.31600314, -0.07048464, 0.118857756, 0.20805474, 0.0745947, -0.08064431, -0.024010733, 0.17201462, 0.4239434, 0.53612167, 0.5329882, 0.42667952, 0.24231997, 0.079223275, -0.0631085, -0.17776705, -0.07586141, 0.04075574, -0.028406708, -0.10181962, -0.35684395, -0.571342, -0.59174436, -0.4664969, -0.23242784, -0.014153317, 0.13632786, 0.18336165, 0.027806064, -0.07008021, 0.02245317, 0.22469722, 0.43480232, 0.5127619, 0.50092715, 0.37092263, 0.20619732, 0.04400248, -0.102533035, -0.1707974, -0.03964632, 0.026142329, -0.041072983, -0.11500169, -0.38210326, -0.5650621, -0.5539978, -0.40592358, -0.18455008, 0.018023785, 0.14930986, 0.16730382, -0.00062757323, -0.066356875, 0.039581086, 0.24067457, 0.4283859, 0.49605548, 0.46110898, 0.3302432, 0.16997264, 0.011967696, -0.10805599, -0.15207571, -0.0024142165, 0.03186019, -0.03346468, -0.1354342, -0.41014403, -0.5488342, -0.50275314, -0.3456019, -0.14094223, 0.024572942, 0.13669859, 0.12271276, -0.05007443, -0.07067878, 0.055859968, 0.26280075, 0.42427862, 0.47763902, 0.4249625, 0.2946363, 0.14617722, 0.013491487, -0.08512611, -0.10291632, 0.04675447, 0.028564394, -0.046401523, -0.15817218, -0.41911218, -0.5228564, -0.46402296, -0.32523447, -0.15060024, -0.00516227, 0.10041827, 0.076583266, -0.06701707, -0.042225845, 0.09215995, 0.2666654, 0.40380418, 0.44839695, 0.41198793, 0.31614324, 0.18405642, 0.05476889, -0.07971753, -0.106881455, 0.0390785, 0.002313265, -0.036393136, -0.15233697, -0.4234513, -0.5195528, -0.47824246, -0.3552261, -0.18155247, -0.01873295, 0.12504047, 0.09626416, -0.054856095, -0.03976246, 0.06504827, 0.25329036, 0.41835347, 0.49006408, 0.46352738, 0.3410904, 0.1713068, 0.0055778353, -0.1294377, -0.08629623, 0.08086609, 0.025243709, -0.021341419, -0.1997893, -0.48378608, -0.5578458, -0.49241468, -0.34619272, -0.15066278, 0.03143879, 0.15121055, 0.058779564, -0.104954414, -0.061072405, 0.09434902, 0.31478524, 0.4671409, 0.51680195, 0.4572384, 0.31616482, 0.13530222, -0.015693637, -0.121235535, -0.043321017, 0.09215076, 0.00395438, -0.04655037, -0.24797527, -0.51506126, -0.5604498, -0.49261916, -0.3418534, -0.12698561, 0.052845284, 0.15507369, 0.029809209, -0.11804634, -0.043585684, 0.1263836, 0.34345564, 0.49821177, 0.54596645, 0.4649298, 0.2879913, 0.096364476, -0.033303116, -0.12002647, -0.0022392052, 0.10947526, -2.4977511e-05, -0.0714821, -0.3215051, -0.5714284, -0.58748454, -0.488846, -0.2929404, -0.08086364, 0.07485172, 0.13392322, -0.032818276, -0.13660903, -0.004602449, 0.20845172, 0.42600346, 0.55177295, 0.5413163, 0.40261737, 0.2285309,
		  0.08512546, -0.020869663, -0.09668429, 0.024983492, 0.07837567, -0.06254734, -0.14241008, -0.3791943, -0.57976574, -0.56541765, -0.4471986, -0.260168, -0.06770381, 0.08276345, 0.13189353, -0.0271703, -0.08674114, 0.06566548, 0.25771666, 0.4379007, 0.5359159, 0.49497393, 0.36360464, 0.21500343, 0.07275001, -0.048184443, -0.119300574, 0.018135957, 0.04382092, -0.08955433, -0.15339056, -0.39707926, -0.57903516, -0.5376381, -0.39979383, -0.20640346, -0.02372763, 0.10591729, 0.11822916, -0.05814391, -0.08370902, 0.08893133, 0.28460935, 0.46234268, 0.5206685, 0.44043633, 0.31474695, 0.18195486, 0.06291516, -0.03405465, -0.0892426, 0.03745634, 0.015417621, -0.11859553, -0.18435168, -0.4188184, -0.5545031, -0.48961633, -0.35295478, -0.17758888, -0.031989474, 0.07290865, 0.08141996, -0.05811786, -0.02977706, 0.14819829, 0.32184204, 0.4553871, 0.461407, 0.38536924, 0.2971702, 0.18699989, 0.07770706, -0.034760904, -0.1034372, 0.015712837, -0.026318572, -0.1348376, -0.18061061, -0.40607607, -0.5274703, -0.46102536, -0.32494396, -0.16681863, -0.042937085, 0.07382702, 0.10250801, -0.019698776, 0.007150801, 0.14970295, 0.30250305, 0.4129022, 0.41299647, 0.36933354, 0.29872587, 0.18674591, 0.07051476, -0.057775572, -0.109726004, 0.0122125605, -0.042233117, -0.11975999, -0.165082, -0.39776152, -0.50547206, -0.42889842, -0.2991556, -0.16655509, -0.047801062, 0.085507125, 0.106589824, -0.02041012, 0.0044714194, 0.1444498, 0.2928465, 0.37947005, 0.38478684, 0.35835072, 0.2931925, 0.18897372, 0.07750587, -0.05267254, -0.10854097, -0.0075131995, -0.05741908, -0.104989335, -0.14406224, -0.36654714, -0.46951935, -0.41054273, -0.31369203, -0.19540833, -0.058188885, 0.10401745, 0.13204195, -0.0070688217, 0.0033151123, 0.1244165, 0.24415259, 0.33654186, 0.37431455, 0.37253925, 0.3189208, 0.21248712, 0.07780905, -0.09558848, -0.15378566, -0.008593934, -0.022640057, -0.04061304, -0.09345081, -0.36154464, -0.49444166, -0.4439488, -0.33473903, -0.18451853, -0.014622995, 0.14709622, 0.12613776, -0.049159423, -0.036737926, 0.0841067, 0.2230687, 0.3418698, 0.3878235, 0.39067948, 0.33066627, 0.20470266, 0.048704773, -0.1223435, -0.13215229, 0.040159423, 0.013925743, -0.00913143, -0.101715505, -0.38699958, -0.5015348, -0.4396234, -0.32556635, -0.172478, -0.0116027715, 0.13498256, 0.099499084, -0.074004345, -0.05195039, 0.06443585, 0.20867342, 0.3386977, 0.40128192, 0.41536564, 0.34671536, 0.20192115, 0.03622186, -0.13253859, -0.1086926, 0.07169959, 0.046361685, 0.025335817, -0.10681398, -0.40797067, -0.5253356, -0.46631855, -0.3366799, -0.17027031, -0.0015813785, 0.14557688, 0.084869914, -0.09956099, -0.088228785, 0.031067373, 0.21113412, 0.36705047, 0.4434424, 0.45006546, 0.35209352, 0.18544, 0.014771627, -0.13878767, -0.08171384, 0.10838258, 0.08574859, 0.042122748, -0.12566017, -0.44062912, -0.56633306, -0.4909582, -0.339608, -0.1586016, 0.02061764, 0.15386489, 0.054392055, -0.14993224, -0.14165105, 0.019099114, 0.25092864, 0.4274003, 0.4978595, 0.46821737, 0.33329946, 0.15778257, -0.0030030422, -0.122762196, -0.031423345, 0.1608587, 0.11662226, 0.028402684, -0.18455684, -0.5127883, -0.6114694, -0.49254042, -0.31234896, -0.12835419, 0.029255422, 0.12471071, 0.0009135078, -0.19167824, -0.14953552, 0.06347441, 0.32103646, 0.4855916, 0.52212787, 0.45316675, 0.30245036, 0.13401195, -0.0011822348, -0.08482593, 0.01123906, 0.17947884, 0.09880198, -0.02841779, -0.25252348, -0.5519157, -0.6105685, -0.46413997, -0.2711761, -0.10899239, 0.021658752, 0.09417457, -0.038321454, -0.21240708, -0.12991412, 0.12321417, 0.37934467, 0.50343835, 0.5037184, 0.41236892, 0.274937, 0.14351344, 0.031525258, -0.045997847, 0.028305551, 0.16260764, 0.061570115, -0.07042705, -0.27908793, -0.55314857, -0.5933989, -0.43050602, -0.26316258, -0.12654997, -0.008897096, 0.048305128, -0.052108727, -0.18209866, -0.07683892, 0.17241327, 0.38717958, 0.48085633, 0.4809701, 0.4080907, 0.2982223, 0.16289996, 0.046692353, -0.03707469, 0.012379942, 0.13678977, 0.033492357, -0.09908206, -0.28720063, -0.5380421, -0.57309705, -0.42661393, -0.2812585, -0.1411056, -0.033329308, 0.04427312, -0.015455443, -0.1445784, -0.05083424, 0.17626001, 0.36761242, 0.46287197, 0.4816176, 0.4210134, 0.30816188, 0.1699161, 0.053752173, -0.052617315, -0.013283731, 0.116885625, 0.020947773, -0.08838776, -0.25779375, -0.52731234, -0.58555746, -0.4505465, -0.29912722, -0.14361826, -0.025678925, 0.07412047, 0.013676929, -0.13593882, -0.068836935, 0.14273094, 0.35108182, 0.4762103, 0.51032585, 0.45076945, 0.3109171, 0.15070525, 0.023666942, -0.07538024, -0.014321872, 0.13521771, 0.052958127, -0.06792922, -0.2733424, -0.55429417, -0.61216384, -0.46759066, -0.27438048, -0.11852828, -0.0074345097, 0.08752613, 0.000516779, -0.1728575, -0.10702479, 0.13867362, 0.38598603, 0.520201, 0.5379946, 0.43298388, 0.26586452, 0.12741368, 0.029655086, -0.04312069, 0.0121860355, 0.1525022, 0.057047088, -0.09557798, -0.3052217, -0.5640611, -0.6209117, -0.45227087, -0.24491875, -0.120436884, -0.012338627, 0.069412, -0.0275257, -0.19491498, -0.106459506, 0.16788311, 0.4254725, 0.5438704, 0.5342987, 0.40082878, 0.24757904, 0.13544625, 0.058226656, -0.011927632, 0.025087364, 0.15693848, 0.039323933, -0.13995844, -0.33817714, -0.5713999, -0.61244506, -0.4196429, -0.22789364, -0.13192563, -0.041768923, 0.025117116, -0.045913413, -0.18080635, -0.06580696, 0.21576287, 0.44398454, 0.53618187, 0.51030284, 0.37293178, 0.25472254, 0.17681329, 0.103710264, 0.010648055, 0.0062657683, 0.10885061, -0.012704269, -0.1678725, -0.32427436, -0.5464215, -0.59428626, -0.4223351, -0.26149553, -0.16368006, -0.0647076, 0.026262341, -0.0034293588, -0.13152008, -0.032880098, 0.2162109, 0.43110502, 0.532553, 0.5027041, 0.38118607, 0.2811939, 0.1963853, 0.10023105, -0.0146649275, -0.035555225, 0.07193427, -0.02478866, -0.16453496, -0.31392145, -0.5405152, -0.588278, -0.43081877, -0.27156934, -0.16744499, -0.065834425, 0.03742854, 0.03302734, -0.0927778, -0.016377412, 0.21683383, 0.429809, 0.51603824, 0.4814165, 0.38487676, 0.2889735, 0.19780593, 0.09312821, -0.028102065, -0.07020079, 0.03989751, -0.03630412, -0.16271992, -0.29438922, -0.5150699, -0.56892926, -0.43438795, -0.27940726, -0.17350207, -0.07119558, 0.05367811, 0.07780105, -0.056159023, -0.008361103, 0.19278294, 0.39666146, 0.49054998, 0.4730615, 0.39500383, 0.29401326, 0.20201138, 0.09156732, -0.04534196, -0.104228325, 0.010649291, -0.033175692, -0.14468347, -0.27202883, -0.48052153, -0.5474587, -0.4479992, -0.2929008, -0.18626378, -0.06809914, 0.080570765, 0.11697404, -0.031118141, -0.028043976, 0.15762544, 0.37847015, 0.47762144, 0.4648223, 0.39370254, 0.29910424, 0.21028002, 0.08477374, -0.062108517, -0.13898243, -0.012466017, -0.016404452, -0.12529284, -0.23249154, -0.43265012, -0.5424092, -0.47470793, -0.30807355, -0.1878246, -0.05481209, 0.101186246, 0.14481716, -0.019310353, -0.043532882, 0.1306372, 0.34188086, 0.45085832, 0.4581032, 0.39973807, 0.31145692, 0.2149321, 0.06925064, -0.079740666, -0.16015168, -0.025224147, 0.004776277, -0.09170002, -0.19142963, -0.40378195, -0.54389524, -0.48589566, -0.31881756, -0.18927996, -0.051845204, 0.1102284, 0.17542675, 0.0038667188, -0.06336052, 0.08191255, 0.29180852, 0.43152374, 0.4595112, 0.4130195, 0.33134866, 0.2159035, 0.057452627, -0.09441121, -0.18784285, -0.0392445, 0.042381197, -0.04785997, -0.15292126, -0.38039148, -0.54734695, -0.5097147, -0.3372333, -0.18049897, -0.031264342, 0.13725281, 0.19481039, -0.0024647103, -0.10613642, 0.022597093, 0.2523999, 0.43070635, 0.47555432, 0.42917117, 0.32229513, 0.19772811, 0.042263143, -0.10521717, -0.18057881, -0.023763867, 0.086047366, -0.015242702, -0.12217976, -0.35385382, -0.5482933, -0.51865923, -0.34280798, -0.1774409, -0.024293192, 0.12677225, 0.18144834, -0.0045060557, -0.1432349, -0.02852506, 0.21376255, 0.4239049, 0.48599893, 0.43323725, 0.3283315, 0.2027284, 0.032801114, -0.09372067, -0.15300624, -0.0043684756, 0.13123403, 0.024879629, -0.09515419, -0.3517826, -0.56089234, -0.5297078, -0.36319947, -0.17541368, -0.021064918, 0.10506094, 0.1541368, -0.033661988, -0.1895092, -0.06846202, 0.19696814, 0.44606566, 0.5096564, 0.45083287, 0.33670476, 0.19670041, 0.05428166, -0.0404592, -0.102854215, 0.008751553, 0.13960472, 0.020305678, -0.11519259, -0.35738295, -0.55388093, -0.54057467, -0.3850338, -0.1924192, -0.055113547, 0.053427063, 0.11566578, -0.01940875, -0.16139059, -0.0516174, 0.20422557, 0.45273566, 0.51495177, 0.45852116, 0.34987235, 0.22907808, 0.09770058, -0.013999952, -0.10128912, -0.03652666, 0.09825024, 0.0043622605, -0.12452963, -0.34035036, -0.53893876, -0.55165213, -0.42095962, -0.23142359, -0.0806115, 0.048224732, 0.1479912, 0.056133278, -0.10796515, -0.05027665, 0.17811441, 0.4348714, 0.51566136, 0.47001576, 0.37043864, 0.24029405, 0.09055977, -0.044078995, -0.13902728, -0.10331498, 0.061077654, 0.018517569, -0.1071323, -0.29059586, -0.5014375, -0.5570807, -0.44282869, -0.22904192, -0.046957143, 0.08729852, 0.1780476, 0.10055619, -0.09964719, -0.093579106, 0.124856, 0.3950989, 0.5022398, 0.46370625, 0.35436282, 0.21518081, 0.0658442, -0.055647373, -0.12955737, -0.10936172, 0.06969803, 0.055611107, -0.08107752, -0.23684475, -0.4684861, -0.5485456, -0.43344185, -0.21555246, -0.042578608, 0.065030664, 0.15121225, 0.10764705, -0.09351497, -0.12232392, 0.07896398, 0.35518497, 0.4851815, 0.44890693, 0.34321812, 0.21143296, 0.080311604, -0.026062327, -0.097035185, -0.11292388, 0.054508455, 0.07470616, -0.060409795, -0.18806437, -0.4235383, -0.53109527, -0.43191803, -0.23033448, -0.06503662, 0.043331668, 0.1302483, 0.118188225, -0.0753293, -0.15384986, 0.028074179, 0.30395645, 0.45363912, 0.43623796, 0.33728695, 0.21903986, 0.10887957, 0.004274204, -0.06943936, -0.11155845, 0.041556355, 0.108370595, -0.02146605, -0.1301876, -0.37520123, -0.52315855, -0.447497, -0.26569995, -0.08827397, 0.02474284, 0.10350536, 0.11702597, -0.07195774, -0.19372001, -0.035268888, 0.24441707, 0.44124198, 0.4461727, 0.34834483, 0.24038184, 0.135598, 0.031717896, -0.03461973, -0.09010389, 0.04110263, 0.14993219, 0.022053905, -0.09625654, -0.3462347, -0.52713585, -0.46766153, -0.29599294, -0.119279265, -0.013571381, 0.053701546, 0.08253289, -0.07624337, -0.20873927, -0.061148047, 0.21737523, 0.43440887, 0.4506435, 0.35995138, 0.27107176, 0.18814167, 0.09263226, 0.010497374, -0.06677696, 0.01875183, 0.14483407, 0.026752472, -0.093645744, -0.31588888, -0.5112005, -0.48082656, -0.3491667, -0.18031473, -0.063740544, 0.01564656, 0.07288865, -0.027453456, -0.17129256, -0.07085392, 0.17519155, 0.40504873, 0.45189682, 0.3829754, 0.31584835, 0.23956251, 0.12470288, 0.021169681, -0.058241233, -0.030541655, 0.11104278, 0.047592957, -0.069433555, -0.25377405, -0.48012307, -0.5120646, -0.41277525, -0.23973264, -0.08884186, 0.013131647, 0.08548896, 0.03025819, -0.14961095, -0.11678048, 0.10195235, 0.3560333, 0.46786422, 0.43244395, 0.36865422, 0.27289027, 0.13037843, 0.021366827, -0.053214867, -0.06542307, 0.09865873, 0.09047819, -0.041077554, -0.20991513, -0.46815127, -0.55042946, -0.4626467, -0.27830914, -0.09570441, 0.01317221, 0.0772272, 0.055601444, -0.13094288, -0.1567626, 0.04983616, 0.3276258, 0.4925705, 0.47240195, 0.39133576, 0.28286085, 0.13768537, 0.029909534, -0.026167348, -0.06842168, 0.07397026, 0.11308914, -0.0378617, -0.18226969, -0.4448592, -0.5705224, -0.4848073, -0.3016361, -0.11339126, -0.004683255, 0.046170622, 0.06275584, -0.10042597, -0.17019767, 0.024704656, 0.30569702, 0.502385, 0.4904535, 0.40125135, 0.2942268, 0.15896872, 0.062289145, 0.010594621, -0.0726712, 0.02534727, 0.10659192, -0.034132622, -0.15548797, -0.4047515, -0.5619937, -0.50723743, -0.3530868, -0.14854245, -0.028113116, 0.024842964, 0.07349804, -0.045693085, -0.15784381, -0.003795664, 0.26627165, 0.48816183, 0.5004947, 0.41789111, 0.3198541, 0.18726067, 0.08760452, 0.027828904, -0.07232242, -0.017571997, 0.102160424, -0.017791096, -0.14643057, -0.36764595, -0.56100047, -0.54022586, -0.39261478, -0.17393222, -0.049068477, -0.0051148823, 0.07385364, 0.025037903, -0.11253841, -0.013877691, 0.22707981, 0.45344356, 0.50589454, 0.43806782, 0.34245807, 0.221641, 0.11843424, 0.041505676, -0.085061185, -0.10093692, 0.041586436, -0.01242764, -0.12466504, -0.28782785, -0.5218743, -0.55632967, -0.43137893, -0.22324602, -0.0708437, 0.0014018991, 0.10984058, 0.110158406, -0.06566313, -0.06005144, 0.14240484, 0.40042704, 0.5204853, 0.4696418, 0.361168, 0.22585547, 0.11185136, 0.02317018, -0.08389743, -0.13004255, 0.01354437, 0.022168983, -0.103745736, -0.24643284, -0.49186793, -0.5585402, -0.43492976, -0.23069753, -0.06881623, 0.012059462, 0.095429465, 0.111977376, -0.051821157, -0.0900245, 0.10951174, 0.3815349, 0.52553993, 0.46745688, 0.33506188, 0.19609635, 0.114454836, 0.05438992, -0.031176725, -0.11322482, -0.02400819, 0.024645466, -0.11722527, -0.21941918, -0.41409785, -0.5118286, -0.4232802, -0.27223834, -0.125969, -0.03945252, 0.052423205, 0.13753241, 0.03601168, -0.05778161, 0.0744988, 0.29911757, 0.4603973, 0.43568707, 0.33802727, 0.24827513, 0.18328688, 0.104917236, -0.009002446, -0.14774081, -0.1361617, -0.009138208, -0.079754405, -0.13808161, -0.29859784, -0.47886983, -0.46494907, -0.35826403, -0.18693908, -0.04722611, 0.06987949, 0.18803622, 0.12989815, -0.040787186, -0.00057677954, 0.19460271, 0.39243853, 0.4415909, 0.38033047, 0.3013802, 0.20161273, 0.08285342, -0.039306868, -0.18036266, -0.19866334, -0.0009644423, 0.0006552918, -0.07584592, -0.22178487, -0.4555282, -0.4930313, -0.3945511, -0.2038922, -0.025818447, 0.09591418, 0.20468464, 0.16500631, -0.05300565, -0.081866235, 0.09894139, 0.33558998, 0.4559693, 0.39918724, 0.299528, 0.1759824, 0.064565815, -0.024864554, -0.14306536, -0.187501, 0.0013792332, 0.06457126, -0.036743842, -0.15639949, -0.39196756, -0.48283717, -0.4127977, -0.23413816, -0.04389572, 0.06287986, 0.15184689, 0.15795816, -0.028979756, -0.117795646, 0.020594029, 0.255056, 0.42342812, 0.39146847, 0.31197134, 0.21238519, 0.12040352, 0.037349883, -0.08527775, -0.17723554, -0.045649763, 0.08886042, -0.0040439563, -0.09182252, -0.3037931, -0.46626195, -0.45466062, -0.31318316, -0.11611677, 0.012694808, 0.11535129, 0.16618338, 0.024946885, -0.13072455, -0.048427824, 0.17357159, 0.38889864, 0.4197116, 0.35974666, 0.2707165, 0.16828965, 0.06496108, -0.06375493, -0.16499588, -0.08715483, 0.098018296, 0.03542612, -0.05882642, -0.23891267, -0.46285272, -0.50359905, -0.38177732, -0.16836509, -0.003234836, 0.10156066, 0.15622166, 0.070287764, -0.11053353, -0.092025526, 0.11731882, 0.35455373, 0.4334504, 0.38446784, 0.2945354, 0.18563884, 0.09538711, -0.01868817, -0.13586168, -0.13454038, 0.052058347, 0.06140827, -0.027058909, -0.16323529, -0.42257664, -0.5212863, -0.42714155, -0.22201739, -0.040075183, 0.069911085, 0.15019007, 0.12138216, -0.06756115, -0.11966685, 0.043598954, 0.2783379, 0.4121951, 0.4116173, 0.34233296, 0.23373881, 0.13650282, 0.0013830962, -0.13354482, -0.1396416, 0.054680362, 0.07758568, -0.0236038, -0.17084187, -0.45733303, -0.5504499, -0.43632287, -0.21738048, -0.0065537198, 0.09931857, 0.14943525, 0.06752986, -0.13514371, -0.12501398, 0.084389664, 0.35171625, 0.4987723, 0.44884965, 0.30832368, 0.16074564, 0.057705306, -0.032559335, -0.11559151, -0.09042657, 0.09033116, 0.07072648, -0.056883637, -0.22494367, -0.49699828, -0.5565692, -0.39873636, -0.16701508, 0.032354306, 0.11783063, 0.13427873, 0.025849326, -0.14384852, -0.0871994, 0.12868933, 0.3742164, 0.50448924, 0.45063964, 0.28034025, 0.11687442, 0.014365922, -0.046775337, -0.10543502, -0.060581196, 0.09468231, 0.03845828, -0.0851051, -0.25408202, -0.51102513, -0.54397976, -0.3521238, -0.11857217, 0.064925894, 0.14993364, 0.14938879, -0.01100544, -0.1817308, -0.07707841, 0.16010642, 0.40481853, 0.5217422, 0.43676665, 0.2327787, 0.060152393, -0.045185767, -0.06720863, -0.091280624, -0.0060255066, 0.1269136, 0.011794869, -0.10599902, -0.30125338, -0.5321132, -0.5118097, -0.28154805, -0.04344182, 0.10399152, 0.15436263, 0.11380945, -0.08928689, -0.2081603, -0.0351623, 0.22503623, 0.44436345, 0.5029984, 0.38667068, 0.184626, 0.008575187, -0.074389935, -0.06546098, -0.055999175, 0.075206324, 0.123995975, -0.02627513, -0.13835473, -0.3698538, -0.53178465, -0.4583524, -0.2256581, 0.010736991, 0.10929748, 0.14122394, 0.07694669, -0.15975441, -0.19711266, 0.02856342, 0.29653615, 0.4664105, 0.467047, 0.3563459, 0.16376886, -0.014928829, -0.0813705, -0.08186084, -0.028745983, 0.13931076, 0.0930323, -0.059450205, -0.20021382, -0.44146672, -0.52702916, -0.4103301, -0.18158518, 0.028190706, 0.12622058, 0.1551645, 0.029106615, -0.19184914, -0.14538625, 0.11146776, 0.36510378, 0.46893495, 0.4480078, 0.3324856, 0.13560663, -0.028637651, -0.11083607, -0.13715616, 0.021050554, 0.1632645, 0.032386504, -0.08990972, -0.29682282, -0.515479, -0.50783575, -0.35170743, -0.1317125, 0.07442462, 0.18208343, 0.15953924, -0.043191787, -0.18587252, -0.06547444, 0.20848311, 0.43440655, 0.4981788, 0.42664057, 0.2720185, 0.08095152, -0.07524241, -0.17312905, -0.1389856, 0.09854754, 0.12933534, -0.007162704, -0.17870863, -0.44970566, -0.5481299, -0.45312363, -0.25326747, -0.03338555, 0.13501786, 0.22129817, 0.08796046, -0.12553945, -0.11183077, 0.068408705, 0.33745357, 0.48337072, 0.45989996, 0.34948623, 0.1749879, 0.009188532, -0.10332291, -0.19917013, -0.06591796, 0.109718546, 0.04962539, -0.068552084, -0.3271164, -0.5289427, -0.49878854, -0.34682676, -0.13052958, 0.061433233, 0.17536886, 0.18929847, -0.030686017, -0.11656677, 0.023120385, 0.23647165, 0.40957186, 0.44279873, 0.38890505, 0.26215753, 0.0915933, -0.04350508, -0.15090443, -0.14675876, 0.016201295, 0.0337004, -0.009669126, -0.18183607, -0.46297422, -0.5329728, -0.41904643, -0.22043382, -0.009538157, 0.13656838, 0.18709874, 0.042870127, -0.08478444, -0.021837033, 0.19803996, 0.38542992, 0.42657238, 0.39319143, 0.29300645, 0.16380414, 0.015950257, -0.11432434, -0.13095893, 0.0032518622, -0.0113502145, -0.05813104, -0.13628237, -0.38455185, -0.5400481, -0.46944284, -0.26873702, -0.06981173, 0.08949337, 0.18016616, 0.055744, -0.09972302, -0.0034533378, 0.18637307, 0.41157058, 0.4821245, 0.4075289, 0.2992655, 0.17255993, 0.053320963, -0.070435435, -0.14470892, -0.0057734833, 0.04177992, -0.10067868, -0.18926825, -0.3992616, -0.5398211, -0.48761344, -0.30581683, -0.09548624, 0.06361576, 0.17208318, 0.096533135, -0.07875822, -0.048568584, 0.18779017, 0.4248153, 0.52284133, 0.48102492, 0.32782727, 0.16651338, 0.03044852, -0.06788667, -0.14706135, -0.03851004, 0.055851683, -0.039701797, -0.19533747, -0.45553017, -0.59575254, -0.51239675, -0.31349358, -0.10061808, 0.066165276, 0.17833468, 0.11002515, -0.06970316, -0.03589006, 0.14463638, 0.4154208, 0.5662481, 0.5261743, 0.39116338, 0.18963553, 0.015505786, -0.099661894, -0.15949072, -0.038671974, 0.0400029, -0.050754383, -0.15346296, -0.4354512, -0.65175366, -0.58320063, -0.3456687, -0.10095593, 0.06793809, 0.19080867, 0.11836769, -0.068894245, -0.021675266, 0.1811266, 0.40080348, 0.5341802, 0.5518819, 0.41946632, 0.23753193, 0.06754773, -0.10209108, -0.18784367, -0.049309514, 0.022890436, -0.082110815, -0.16866769, -0.4144156, -0.62480396, -0.60356295, -0.39445776, -0.13617587, 0.060614996, 0.18738286, 0.115470484, -0.057204776, -0.008688767, 0.2159837, 0.4428505, 0.5376435, 0.50939065, 0.4102164, 0.25195003, 0.08373393, -0.05708712, -0.15667391, -0.04784781, 0.0025946733, -0.107928306, -0.21555099, -0.45766607, -0.6174052, -0.53522086, -0.33932483, -0.14659308, 0.01356514, 0.13038853, 0.058812514, -0.06905107, 0.025129572, 0.26068103, 0.4902111, 0.55715024, 0.488941, 0.34625706, 0.18670566, 0.079813905, -0.02036854, -0.04028565, 0.063760296, -0.012834365, -0.1459443, -0.300222, -0.5429121, -0.6091877, -0.4841842, -0.25754666, -0.07700148, -0.0062944707, 0.031223357, -0.07330753, -0.114377834, 0.066754594, 0.32649562, 0.5400649, 0.5806331, 0.47623882, 0.31221533, 0.14934929, 0.036892645, -0.0067876917, 0.045152884, 0.16345169, 0.04264388, -0.16199352, -0.38957837, -0.627885, -0.625998, -0.4393041, -0.21415652, -0.044928182, 0.046635725, -0.02209605, -0.20137127, -0.1712285, 0.072462335, 0.39308688, 0.59362394, 0.59485584, 0.45855352, 0.2827482, 0.13404562, 0.029892055, -0.03144269, 0.10248817, 0.20423019, 0.058356673, -0.108481, -0.43843034, -0.69569767, -0.6419996, -0.4119511, -0.16688277, -0.011214058, 0.05604522, -0.06340184, -0.2526295, -0.18130514, 0.09072977, 0.4084425, 0.6063445, 0.58680737, 0.42413878, 0.25421587, 0.11450392, 0.023624873, 0.005292248, 0.15582272, 0.15835549, 0.04591491, -0.12880693, -0.45917442, -0.6661766, -0.59121066, -0.34962583, -0.15069494, 0.010144091, 0.041580986, -0.15667997, -0.25975046, -0.09767758, 0.17406592, 0.41720396, 0.5321728, 0.5170825, 0.36988994, 0.19338705, 0.091610424, 0.021339163, 0.091257274, 0.2079459, 0.11437576, -0.007638418, -0.23446098, -0.5058392, -0.5788999, -0.44470617, -0.24314678, -0.08103675, 0.011737612, -0.04511499, -0.23638275, -0.22964227, -0.020230956, 0.2662983, 0.462151, 0.4762346, 0.38959408, 0.25389183, 0.118439175, 0.027099028, 0.029710706, 0.19744773, 0.2180685, 0.095111474, -0.057470087, -0.36543196, -0.5483222, -0.463603, -0.2965675, -0.106921196, 0.031492636, 0.032632098, -0.16261409, -0.28589648, -0.16500586, 0.06697567, 0.31733936, 0.4551378, 0.43330005, 0.28020424, 0.11405362, 0.0110105425, -0.039817315, 0.08216973, 0.26273444, 0.17951305, 0.072511055, -0.15075712, -0.42932758, -0.48088855, -0.36655316, -0.1561616, 0.0038132905, 0.07985529, 0.0013431847, -0.21523808, -0.25687677, -0.07640377, 0.1846799, 0.3509513, 0.3681128, 0.31378347, 0.20026012, 0.032713104, -0.08335056, -0.046533126, 0.18173413, 0.22860302, 0.13419494, -0.020694906, -0.32283598, -0.45486572, -0.35050517, -0.19765462, -0.053203415, 0.1016412, 0.09382026, -0.12606609, -0.20137621, -0.11737546, 0.069206916, 0.2876795, 0.3530049, 0.28076974, 0.16900598, 0.07720634, -0.025223602, -0.13223211, 0.016794598, 0.17777579, 0.1326152, 0.06478439, -0.1966426, -0.42935583, -0.3965043, -0.21741761, -0.020682197, 0.09222414, 0.13829926, 0.0050460673, -0.184696, -0.13056777, 0.07300983, 0.26911533, 0.3366539, 0.2971152, 0.17054816, 0.018856853, -0.06551513, -0.10609111, -0.0450078, 0.09308049, 0.07049983, 0.03630491, -0.12994668, -0.3745052, -0.40332615, -0.25842506, -0.04875781, 0.11763853, 0.1941199, 0.09761055, -0.12272067, -0.12550765, 0.04090331, 0.26145703, 0.39958346, 0.34046322, 0.19390918, 0.033784233, -0.11305117, -0.19411702, -0.12706423, 0.08214061, 0.08107346, -0.026084604, -0.1394808, -0.36272615, -0.43590087, -0.30152136, -0.07324176, 0.112427, 0.22272807, 0.18150313, -0.038994685, -0.09717689, 0.02766901, 0.25052872, 0.3939396, 0.38315877, 0.28000134, 0.084564745, -0.07970481, -0.18744053, -0.22815077, -0.043759443, 0.060184933, 0.0030031598, -0.107991226, -0.37418795, -0.49016607, -0.3726388, -0.15480526, 0.0710141, 0.2158179, 0.2285497, 0.0591016, -0.04834727, 0.021329716, 0.23116465, 0.40239176, 0.42645398, 0.3179041, 0.16962433, 0.01859234, -0.15163015, -0.23476167, -0.11098338, -0.03710661, -0.07590829, -0.0933439, -0.2985535, -0.5007032, -0.4682219, -0.25550798,
		  -0.022438113, 0.15772843, 0.24795747, 0.11235454, 0.006385938, 0.08534573, 0.24121255, 0.40643317, 0.43031982, 0.36672398, 0.24897645, 0.066902615, -0.06562242, -0.18077527, -0.13460548, -0.06642694, -0.14483978, -0.18203993, -0.33603543, -0.48265854, -0.44092107, -0.3092026, -0.118822, 0.07615649, 0.1961188, 0.10945817, 0.007144911, 0.12857158, 0.3148581, 0.46333814, 0.48211214, 0.3719914, 0.21542898, 0.10990653, -0.0012702621, -0.1165535, -0.06352529, -0.01775959, -0.15981133, -0.2682691, -0.41619027, -0.55197096, -0.4790597, -0.26417443, -0.08603944, 0.028636044, 0.1124944, 0.010622563, -0.054493904, 0.11256346, 0.3598561, 0.55349344, 0.5650714, 0.42935503, 0.22432855, 0.03652059, -0.0396898, -0.065266274, 0.033491008, 0.10335435, -0.083220184, -0.27035227, -0.5065235, -0.66097236, -0.53389144, -0.28735182, -0.05698097, 0.10345332, 0.12504484, -0.07371644, -0.18374154, 0.006901098, 0.33585244, 0.59150815, 0.6407013, 0.5172666, 0.27589998, 0.040684976, -0.09242934, -0.13362554, 0.051228978, 0.18231238, 0.05245122, -0.14669125, -0.4904572, -0.7243203, -0.63904315, -0.35789353, -0.066856526, 0.11495733, 0.15619497, -0.04042898, -0.20813276, -0.10567135, 0.19959046, 0.5359659, 0.6530703, 0.5791601, 0.34895387, 0.10436527, -0.06503388, -0.15224555, 0.0046241926, 0.15687147, 0.10792346, -0.041967105, -0.3811071, -0.65931964, -0.65845877, -0.44490048, -0.14465484, 0.080302775, 0.13434899, -0.032987148, -0.142661, -0.07781906, 0.13874033, 0.40321857, 0.5493047, 0.5486807, 0.40419483, 0.18009183, -0.02043282, -0.11359319, 0.031359307, 0.103244185, 0.04538822, -0.027178392, -0.32986546, -0.5680009, -0.5497256, -0.39483586, -0.1881678, 0.0034930047, 0.061908282, -0.0882684, -0.13252284, 0.010023748, 0.21680424, 0.37753353, 0.43533292, 0.4159816, 0.33055747, 0.19995008, 0.022406207, -0.046983164, 0.09677528, 0.104917794, 0.030535161, -0.117606, -0.39628622, -0.5106361, -0.42702577, -0.26132116, -0.11022252, 0.0024401324, -0.028403783, -0.17612854, -0.15163153, 0.026256876, 0.28207296, 0.4439044, 0.42052114, 0.30981612, 0.19003096, 0.09439886, 0.005754732, 0.03301198, 0.17079031, 0.12033151, 0.029707417, -0.15458806, -0.46149647, -0.5267837, -0.35323712, -0.13580988, 0.029163295, 0.07271352, -0.09310192, -0.2516556, -0.1681967, 0.053027067, 0.29616433, 0.43852684, 0.42920208, 0.26789463, 0.087514564, -0.014892085, -0.0619807, 0.077661395, 0.20378365, 0.12716372, 0.023974227, -0.22103757, -0.45899114, -0.47222072, -0.2937125, -0.06304414, 0.10051636, 0.1297665, -0.0969874, -0.23888305, -0.141657, 0.09338437, 0.3158965, 0.38122213, 0.34964368, 0.222126, 0.031441342, -0.086029805, -0.10227712, 0.105355434, 0.17549613, 0.09447994, -0.015137456, -0.29805848, -0.44868365, -0.36893606, -0.19236673, 0.016917557, 0.16196774, 0.08361048, -0.12132228, -0.15586513, -0.030378126, 0.17701541, 0.31963313, 0.31895426, 0.24664555, 0.13714503, 0.0018263222, -0.14499429, -0.09888638, 0.09655574, 0.09041583, 0.05553144, -0.096747965, -0.3607781, -0.41646293, -0.2799666, -0.09010714, 0.07438486, 0.19012342, 0.08155998, -0.09739909, -0.05549345, 0.09512979, 0.25346, 0.31113565, 0.2678296, 0.16944575, 0.04721179, -0.059012983, -0.14697619, -0.078914896, -0.007973726, -0.003736352, -0.012195991, -0.22649169, -0.37924102, -0.321919, -0.17128687, -0.013785652, 0.13269104, 0.14962831, 0.030500429, 0.01605672, 0.10277096, 0.26588684, 0.3241283, 0.26023206, 0.16976306, 0.07923374, -0.0105270175, -0.12338134, -0.10883071, -0.025371475, -0.11746637, -0.13544352, -0.18853147, -0.34792724, -0.35891715, -0.22379695, -0.041919403, 0.110607676, 0.18294151, 0.05917061, -0.035033602, 0.11020126, 0.2827942, 0.4265544, 0.43977875, 0.2665659, 0.060523227, -0.06875191, -0.13131836, -0.16176184, -0.017702956, 0.014123943, -0.15624516, -0.27273613, -0.4386031, -0.49084848, -0.32976818, -0.077470824, 0.101285204, 0.19732065, 0.1758203, 0.0010957897, -0.015786458, 0.17948309, 0.4493538, 0.5503253, 0.47365144, 0.27495173, 0.016421987, -0.16233476, -0.25499818, -0.16605705, 0.009689642, -0.02967125, -0.14617649, -0.4095592, -0.63973933, -0.562067, -0.28375736, 0.022812882, 0.21560833, 0.25603613, 0.09025979, -0.01332559, 0.10558914, 0.32145214, 0.5429044, 0.58799994, 0.45508167, 0.24294654, -0.018038062, -0.22236356, -0.26684496, -0.10147775, -0.051637486, -0.11365927, -0.24548367, -0.54256016, -0.6759056, -0.5222401, -0.22997482, 0.07763084, 0.25970206, 0.18925892, 0.037637737, 0.08023462, 0.25461656, 0.45659283, 0.5680881, 0.5553908, 0.39191842, 0.18661106, -0.022034189, -0.2160458, -0.16914214, -0.094369, -0.15315574, -0.2227766, -0.42989835, -0.6067163, -0.59680337, -0.40469626, -0.13459902, 0.091194615, 0.15210627, 0.047119822, 0.07388569, 0.25083426, 0.46424073, 0.56439865, 0.5241315, 0.4353312, 0.28700736, 0.104858726, -0.03484224, -0.04793687, -0.034281988, -0.17180543, -0.25525108, -0.43914238, -0.632602, -0.583641, -0.41826475, -0.22708467, -0.030144148, 0.057280783, -0.03602485, -0.03395611, 0.14825508, 0.42139208, 0.64629585, 0.64280003, 0.48265943, 0.29228812, 0.1345712, -0.0077211596, -0.0030075542, 0.12375744, -0.014410534, -0.19260158, -0.3844121, -0.6656927, -0.7171712, -0.5149585, -0.25712857, -0.05867235, 0.054065254, -0.0527395, -0.12545553, 0.035071697, 0.29868644, 0.55823773, 0.6504761, 0.60212964, 0.42762035, 0.20698646, 0.035609145, -0.040500212, 0.07965316, 0.07013761, -0.08383047, -0.2640247, -0.5768287, -0.7155612, -0.59297025, -0.3798171, -0.14284141, 0.017279884, -0.052948136, -0.13330372, 0.0009973855, 0.2372492, 0.48807433, 0.61157894, 0.57906824, 0.4297465, 0.25904104, 0.116870575, 0.019160267, 0.104387, 0.10063672, -0.059517235, -0.22110803, -0.5221453, -0.70903, -0.59896755, -0.36299682, -0.14706826, -0.0060303695, -0.06207852, -0.19841132, -0.1175131, 0.15995476, 0.47864425, 0.6473164, 0.6133047, 0.43885517, 0.25173667, 0.0800303, -0.017971031, 0.08911141, 0.15140727, 0.055127833, -0.11015862, -0.4404598, -0.7075876, -0.68985134, -0.45768327, -0.18553899, 0.035851784, 0.040209465, -0.12263052, -0.12595254, 0.016004045, 0.30267325, 0.5529096, 0.6231968, 0.54373884, 0.36186272, 0.13638942, -0.036361087, 0.010635907, 0.0639717, 0.0022264973, -0.03875338, -0.29401416, -0.5615939, -0.6089585, -0.5134215, -0.3261771, -0.088361874, 0.0045494176, -0.075390816, -0.01105053, 0.13387348, 0.28633493, 0.41728765, 0.47606963, 0.45027417, 0.36355296, 0.24153273, 0.08596001, 0.07910409, 0.06093121, -0.06284098, -0.15355043, -0.34294745, -0.506149, -0.49772194, -0.38752085, -0.26903266, -0.14160335, -0.12225514, -0.1709073, -0.043895233, 0.16348468, 0.38297838, 0.48484978, 0.4738248, 0.385913, 0.26786664, 0.17315929, 0.0900712, 0.1473057, 0.14661193, -0.0046659326, -0.13875662, -0.40551394, -0.56094617, -0.5065283, -0.36018693, -0.19509456, -0.094602674, -0.13221847, -0.2231976, -0.09724077, 0.12993404, 0.36553615, 0.505153, 0.46599105, 0.36620045, 0.26904655, 0.15812203, 0.09387858, 0.19211338, 0.1658973, -0.003330784, -0.13679235, -0.39383593, -0.56312305, -0.46193525, -0.2854072, -0.18683812, -0.10790976, -0.17393686, -0.2798248, -0.14707015, 0.13253626, 0.39846873, 0.5079724, 0.47415343, 0.313783, 0.16781764, 0.102186754, 0.10542842, 0.27494493, 0.25693354, 0.06730675, -0.13674653, -0.4538853, -0.6004137, -0.48551413, -0.24453841, -0.052265752, -0.010330481, -0.17596714, -0.34052116, -0.24235527, 0.048591074, 0.37616965, 0.5187616, 0.4903217, 0.34895542, 0.15524669, 0.0066858614, 0.0153713, 0.21475343, 0.2650143, 0.17699046, -0.03442194, -0.39901972, -0.57752186, -0.4909128, -0.29196092, -0.05195673, 0.056710478, -0.10920953, -0.24019848, -0.18688323, 0.0088206725, 0.25412884, 0.39216286, 0.4058926, 0.32906213, 0.20455171, 0.025850682, -0.000120816185, 0.13734002, 0.14573489, 0.14100668, -0.031590432, -0.3240623, -0.4311167, -0.3748904, -0.22235729, -0.069901586, -0.0018360338, -0.12626427, -0.17314334, -0.0540587, 0.11892957, 0.25428918, 0.2839277, 0.25936216, 0.19025844, 0.1154202, 0.029649777, 0.07396945, 0.1469904, 0.06787343, 0.024885084, -0.13466188, -0.3330806, -0.33663332, -0.23022929, -0.07603936, 0.02516886, -0.040296372, -0.16342461, -0.1296214, 0.018209577, 0.24056134, 0.33311966, 0.26518586, 0.16333397, 0.064233035, -0.017287964, -0.035188217, 0.09728682, 0.1268283, 0.02471107, -0.04635264, -0.26112103, -0.39223316, -0.30110362, -0.13934262, 0.03508707, 0.1348619, -0.01090126, -0.1549685, -0.059532285, 0.11127032, 0.30047, 0.3832401, 0.3040381, 0.13630427, -0.007026413, -0.10409411, -0.100324154, 0.06146706, 0.05945666, -0.015897864, -0.15589118, -0.38860747, -0.41598746, -0.25673962, -0.06880606, 0.08299195, 0.13391592, -0.020321433, -0.06399162, 0.05730061, 0.23988436, 0.39027432, 0.39080012, 0.2846758, 0.10812247, -0.05487088, -0.13422497, -0.035605747, 0.053089343, -0.02784293, -0.10979224, -0.32493716, -0.51080364, -0.4343447, -0.19094169, 0.02644261, 0.1427216, 0.07917018, -0.09379674, -0.040398393, 0.14978367, 0.3786275, 0.51522166, 0.43863216, 0.267067, 0.07967695, -0.10353412, -0.1650898, -0.0018820999, 0.043119885, -0.020098792, -0.13680829, -0.43519396, -0.60657686, -0.49503908, -0.21507736, 0.06804163, 0.20028588, 0.066474244, -0.059896313, -0.0060246876, 0.18281499, 0.40497303, 0.50622076, 0.4616403, 0.27371964, 0.094861835, -0.07252642, -0.10693683, -0.004734139, -0.0486256, -0.09254652, -0.2392253, -0.4497324, -0.49658257, -0.40086487, -0.20277284, 0.018538253, 0.07780958, -0.02566052, -0.0041372795, 0.13948017, 0.34691206, 0.4571527, 0.41308343, 0.32305554, 0.18564284, 0.025272764, -0.028152985, 0.061879605, 0.03433396, -0.0565286, -0.17382786, -0.42954904, -0.548708, -0.42068964, -0.23216034, -0.038915757, 0.092692494, -0.004842976, -0.10087369, -0.017168764, 0.17552838, 0.4034005, 0.50792205, 0.44866353, 0.27087793, 0.066867486, -0.11959735, -0.07490323, 0.07340847, 0.028780825, -0.029268771, -0.23081246, -0.48628655, -0.51506686, -0.35284463, -0.15035407, 0.032691788, 0.07354783, -0.012396797, 0.035368036, 0.14115676, 0.28067097, 0.38003504, 0.37675887, 0.30583754, 0.18834858, 0.025247782, -0.06880682, 0.0003397409, -0.017121755, -0.10182158, -0.19166863, -0.40070593, -0.48508552, -0.36268026, -0.17615432, 0.0065044747, 0.07224835, -0.05097099, -0.05460852, 0.11753188, 0.33417526, 0.4779277, 0.46170342, 0.34337384, 0.18272677, 0.022269307, -0.123332925, -0.04900592, 0.036654186, -0.0522613, -0.12316666, -0.36167517, -0.5808525, -0.54389894, -0.3276237, -0.07869467, 0.13238792, 0.11477385, -0.022017404, 0.038984478, 0.22927059, 0.44196126, 0.51928663, 0.4662538, 0.34422156, 0.17292526, -0.012538499, -0.095510006, -0.045574386, -0.10928294, -0.17143506, -0.28124067, -0.5134061, -0.587274, -0.4523955, -0.24207821, -0.044341914, 0.043441508, -0.0025520853, 0.049455244, 0.22715808, 0.44583347, 0.5572216, 0.53562236, 0.41564617, 0.25857642, 0.1054944, -0.0011918758, 0.031108709, -0.055370014, -0.15777227, -0.26394996, -0.5035574, -0.6217366, -0.5595306, -0.3784292, -0.16063026, -0.034528013, -0.059948727, 0.003810821, 0.14759001, 0.34263152, 0.52117497, 0.5656512, 0.50071573, 0.37620574, 0.22806452, 0.095855206, 0.1134018, 0.07122097, -0.11933703, -0.24510342, -0.45439315, -0.60674626, -0.5295215, -0.37929913, -0.23726706, -0.15254459, -0.2213744, -0.19072029, 0.041276842, 0.32155162, 0.540767, 0.5745609, 0.47928426, 0.33853105, 0.21149164, 0.13156448, 0.19966356, 0.23723707, 0.06607604, -0.11184884, -0.38170397, -0.5988899, -0.6031326, -0.43559548, -0.22294432, -0.09114464, -0.1598951, -0.26022282, -0.13445497, 0.11266461, 0.39020726, 0.5177759, 0.49045083, 0.38918954, 0.26878163, 0.14251494, 0.13568614, 0.22210398, 0.10544874, -0.007930542, -0.21482976, -0.49295163, -0.5140739, -0.39617226, -0.2493222, -0.10848766, -0.16278204, -0.2963455, -0.19458717, 0.06597846, 0.35000512, 0.49950498, 0.461995, 0.29337317, 0.14972302, 0.0674997, 0.11804939, 0.27037588, 0.22260702, 0.0764182, -0.16351596, -0.4912844, -0.58725595, -0.409849, -0.16374063, 0.0068395287, -0.0143675655, -0.2156446, -0.25018403, -0.08788944, 0.20177835, 0.43342283, 0.50230026, 0.39691952, 0.1981498, 0.033140805, -0.0060181743, 0.13821077, 0.13633071, 0.073608465, -0.043881513, -0.33317384, -0.48265642, -0.44625974, -0.2790878, -0.062819734, -0.005370413, -0.1201454, -0.11427764, -0.009871753, 0.1775097, 0.35123235, 0.40516326, 0.35249057, 0.23137508, 0.06691721, -0.011021555, 0.11274535, 0.1342237, 0.05274484, -0.07187853, -0.34564784, -0.49798253, -0.4149285, -0.25859448, -0.068339214, 0.024886172, -0.10848544, -0.118097104, 0.010854991, 0.19076137, 0.32865316, 0.3790955, 0.3514761, 0.24910568, 0.12324774, 0.016609045, 0.07084759, 0.054852225, -0.0040882034, -0.08607261, -0.30383393, -0.4211192, -0.36315116, -0.22850284, -0.11065828, -0.08362657, -0.16360684, -0.10237537, 0.084990755, 0.317802, 0.40588382, 0.3256482, 0.23192345, 0.13867669, 0.062559046, 0.064920925, 0.18260248, 0.12029288, -0.008527056, -0.15007116, -0.41633755, -0.481991, -0.32905465, -0.13083707, 0.026630765, -0.008987736, -0.1899572, -0.16303192, 0.0028835945, 0.25750172, 0.45193043, 0.4281569, 0.27967, 0.1285607, -0.011693109, -0.04502733, 0.11217808, 0.10557196, 0.005119926, -0.10994049, -0.36822215, -0.4714653, -0.34114414, -0.15039927, 0.020088373, 0.04130931, -0.12345648, -0.13801864, 0.036635857, 0.26863614, 0.43411568, 0.45000845, 0.25768048, 0.055715833, -0.05818651, -0.055671502, 0.119898565, 0.12955749, 0.0063438094, -0.17567106, -0.43896908, -0.50768244, -0.3366173, -0.08721273, 0.097922586, 0.090512164, -0.09269963, -0.13038138, 0.013475552, 0.27571607, 0.44463456, 0.45779005, 0.32713622, 0.09341349, -0.09837228, -0.11017521, 0.02134415, 0.03749818, 0.022200735, -0.14170682, -0.43642867, -0.51144546, -0.36897564, -0.11811813, 0.11069463, 0.09446645, -0.0482988, -0.039451484, 0.07870525, 0.28447157, 0.44854107, 0.43779016, 0.2989053, 0.12930337, -0.083698764, -0.12441403, -0.012084018, -0.020797746, -0.017308032, -0.16278028, -0.4515335, -0.52799004, -0.37427467, -0.13297798, 0.1092392, 0.11629978, 0.009332145, 0.0390879, 0.14211895, 0.29125628, 0.38900506, 0.40052882, 0.2942349, 0.15117201, -0.013879079, -0.07943471, -0.07150313, -0.11905407, -0.106780395, -0.24110173, -0.4232687, -0.433747, -0.3112491, -0.10967324, 0.051319387, 0.026999258, 0.010019031, 0.109885424, 0.26214647, 0.40008587, 0.40005106, 0.33265826, 0.22426815, 0.07327581, -0.031769693, -0.019734375, -0.06182119, -0.1270948, -0.16279016, -0.33927232, -0.45789155, -0.39637908, -0.26090446, -0.081463516, 0.037231594, 0.016528811, 0.08027689, 0.20183052, 0.33835638, 0.4066754, 0.35210255, 0.25426534, 0.18568492, 0.08854689, 0.023018785, 0.05709883, -0.10569341, -0.25412348, -0.3244394, -0.46278033, -0.43193704, -0.25594002, -0.10951436, -0.019463018, -0.04724325, -0.109641284, 0.06047017, 0.30234963, 0.50346917, 0.5517004, 0.41530725, 0.20533322, 0.040335156, -0.066521466, -0.017012754, 0.09142209, -0.031460956, -0.1875866, -0.39596415, -0.6093256, -0.55226517, -0.31896576, -0.065622486, 0.08741087, 0.022573022, -0.018752255, 0.09714418, 0.31421942, 0.51285326, 0.5498145, 0.4439646, 0.2513553, 0.06155259, -0.0693348, 0.008719408, 0.020966144, -0.12694067, -0.26647255, -0.52465504, -0.64849216, -0.49657717, -0.23183891, -0.0015136952, 0.064465635, -0.081277005, -0.06507463, 0.1379606, 0.4393043, 0.6670141, 0.6441371, 0.44196668, 0.17537852, -0.0392906, -0.10042944, 0.031291604, 0.026338886, -0.07872453, -0.269764, -0.612571, -0.73844814, -0.57628936, -0.2705222, 0.031303033, 0.10702739, 0.0071532913, 0.028019866, 0.18377216, 0.42326745, 0.5975493, 0.5991137, 0.4551828, 0.24420625, 0.022665713, -0.02412757, -0.013157922, -0.101538695, -0.1538864, -0.3647521, -0.619645, -0.6350777, -0.4794904, -0.2345261, -0.023395762, -0.02497474, -0.006712084, 0.10600875, 0.29342866, 0.49776733, 0.5911246, 0.56385833, 0.39852944, 0.1843844, 0.015254592, 0.028303092, -0.031552583, -0.12453626, -0.20732962, -0.4504409, -0.60292345, -0.5495733, -0.39249513, -0.20214406, -0.115330756, -0.09784898, 0.0573187, 0.25988162, 0.4466124, 0.50978273, 0.47299716, 0.40104705, 0.2921082, 0.1542544, 0.1454614, 0.14245589, -0.043305036, -0.19567122, -0.4116198, -0.6152191, -0.5845768, -0.39960444, -0.18967432, -0.086689495, -0.16626438, -0.15475093, 0.029411048, 0.30764988, 0.5243272, 0.5682574, 0.49096522, 0.37297186, 0.21104518, 0.07590887, 0.11228831, 0.042752046, -0.08065295, -0.20714405, -0.465809, -0.5781848, -0.50243574, -0.34762704, -0.18230829, -0.17833546, -0.21894422, -0.026746675, 0.23303458, 0.4894162, 0.57701474, 0.46303216, 0.3235141, 0.22370596, 0.14075042, 0.19799368, 0.23471034, 0.040011983, -0.15611386, -0.4398994, -0.69485766, -0.60832757, -0.3552635, -0.13613203, -0.030520199, -0.17848468, -0.24667522, -0.059245892, 0.25726247, 0.5451908, 0.64696854, 0.5429205, 0.3278525, 0.122960046, 0.053260528, 0.1603025, 0.122861475, 0.0069782785, -0.17811738, -0.4930869, -0.6494772, -0.5616187, -0.32928997, -0.13442917, -0.12869139, -0.16864695, -0.08568097, 0.12717411, 0.40183905, 0.53682756, 0.51585907, 0.39585754, 0.21715356, 0.097165324, 0.1895593, 0.2265963, 0.08037474, -0.087027736, -0.38633493, -0.625377, -0.58059675, -0.3891001, -0.13620017, -0.064716734, -0.21185733, -0.20035164, -0.05594939, 0.21303958, 0.47993112, 0.5734277, 0.48750585, 0.29919323, 0.080145225, 0.045409843, 0.16083002, 0.15543933, 0.0954745, -0.13776769, -0.4650689, -0.6019786, -0.5085112, -0.28003064, -0.081815936, -0.09433995, -0.13590927, -0.05222576, 0.11445309, 0.2931633, 0.42284402, 0.43167043, 0.33956313, 0.1941113, 0.09080303, 0.12944423, 0.0860598, 0.033183195, -0.07320869, -0.34106335, -0.4706889, -0.4381527, -0.29127842, -0.11854583, -0.11154508, -0.12988597, -0.05927507, 0.087491564, 0.29619753, 0.39309034, 0.40578985, 0.33226994, 0.19013257, 0.06511959, 0.07290779, 0.028745247, -0.021129923, -0.026875135, -0.2331796, -0.42237046, -0.43741116, -0.3375024, -0.16701758, -0.098851405, -0.118438326, 0.021908196, 0.152608, 0.30140188, 0.39097962, 0.34256738, 0.2778774, 0.20453054, 0.10253669, 0.1268962, 0.119333684, -0.07107815, -0.15297572, -0.30628607, -0.46737435, -0.41416788, -0.28927854, -0.13621087, -0.06512982, -0.15421923, -0.10349, 0.110830925, 0.3139453, 0.44289845, 0.47598132, 0.36438036, 0.21780734, 0.081991784, 0.05700267, 0.108911835, 0.007787306, -0.1078204, -0.28399223, -0.4875359, -0.482973, -0.33333766, -0.17482254, -0.09410809, -0.17023174, -0.14569433, 0.035175614, 0.31217173, 0.5072434, 0.49553347, 0.39554173, 0.23839684, 0.07151542, 0.050669104, 0.16864069, 0.1050853, -0.023875138, -0.23396273, -0.53386885, -0.5960785, -0.4245157, -0.1918011, -0.027946273, -0.08999503, -0.14602824, -0.040975403, 0.15821294, 0.3929855, 0.5044608, 0.4436038, 0.33882633, 0.19204572, 0.069401786, 0.10577058, 0.041297764, -0.05248478, -0.16403842, -0.41764152, -0.52991, -0.42635608, -0.2512362, -0.09252488, -0.122219965, -0.17490633, -0.042592853, 0.18480712, 0.4129112, 0.49815592, 0.43815827, 0.29846466, 0.1581053, 0.05946972, 0.115195565, 0.08918093, -0.014782247, -0.1388588, -0.39082772, -0.54872745, -0.49396318, -0.29226577, -0.10043396, -0.08763491, -0.122049406, -0.0068867253, 0.16747326, 0.3632723, 0.44444245, 0.41231155, 0.33606035, 0.21198349, 0.11612741, 0.1420303, 0.08177155, -0.041607045, -0.16683309, -0.4185176, -0.5504886, -0.46731022, -0.28613055, -0.08917903, -0.098610245, -0.1727385, -0.07478928, 0.12577894, 0.36423287, 0.49735433, 0.47262353, 0.36731318, 0.21670698, 0.06358106, 0.11162214, 0.10732254, 0.005363742, -0.08479643, -0.34878048, -0.54088473, -0.48935547, -0.3450411, -0.17893997, -0.13534662, -0.16695888, -0.038641274, 0.16138482, 0.35132205, 0.4387515, 0.40070528, 0.29964513, 0.20049769, 0.13627023, 0.18473737, 0.15395547, 0.028686348, -0.11127135, -0.3868395, -0.5396601, -0.44619927, -0.25817394, -0.09301202, -0.12947561, -0.2159837, -0.122791894, 0.090076104, 0.35773998, 0.48428375, 0.43195507, 0.2970248, 0.14323868, 0.05304775, 0.15029985, 0.1362092, 0.025183512, -0.07523504, -0.35530415, -0.5320212, -0.44419575, -0.24878697, -0.065134585, -0.09486985, -0.1928783, -0.09224291, 0.12320944, 0.38732657, 0.48754382, 0.41503042, 0.27226737, 0.12940829, 0.03475142, 0.12503688, 0.1151769, -0.010911185, -0.114031725, -0.3835249, -0.5598579, -0.46907946, -0.25285262, -0.054442223, -0.06047354, -0.14826608, -0.06429921, 0.14111346, 0.3918535, 0.52047586, 0.46240664, 0.30416784, 0.1428389, 0.051864773, 0.11447252, 0.087551184, -0.01846592, -0.15926535, -0.41814584, -0.5546791, -0.4827526, -0.28281337, -0.10340623, -0.1125681, -0.13350964, -0.046179906, 0.15058115, 0.3912525, 0.5073062, 0.48449516, 0.3351575, 0.15975797, 0.089872174, 0.1696046, 0.102675565, -0.0073055513, -0.15743694, -0.44066614, -0.5421467, -0.4483277, -0.26798213, -0.11872835, -0.18020368, -0.18561216, -0.049755115, 0.13149881, 0.37168133, 0.47573322, 0.45138744, 0.33611554, 0.14570688, 0.07659568, 0.1649838, 0.120330825, 0.044823375, -0.10467624, -0.40955195, -0.528317, -0.42246687, -0.22992915, -0.09604966, -0.15699346, -0.15675579, -0.027382597, 0.15842868, 0.32568985, 0.39526224, 0.35982573, 0.27512115, 0.13287431, 0.089618236, 0.14561763, 0.0638467, -0.013687979, -0.17182697, -0.39446244, -0.45619437, -0.33316183, -0.13915426, -0.06759464, -0.16326076, -0.11660841, 0.027389891, 0.23770852, 0.39742857, 0.3889054, 0.30905667, 0.20385224, 0.070236824, 0.07571275, 0.11129065, 0.010077245, -0.059010036, -0.25813457, -0.4640561, -0.46028045, -0.3189066, -0.09512272, -0.027114332, -0.14165398, -0.08256226, 0.07662457, 0.30496198, 0.46811533, 0.44517782, 0.32455555, 0.16872983, 0.05009533, 0.09305254, 0.107578635, 0.0061934236, -0.09953524, -0.35196832, -0.54293877, -0.47611022, -0.30249095, -0.107683815, -0.069751136, -0.1452699, -0.06688946, 0.1067453, 0.33099073, 0.4780792, 0.46103925, 0.33776647, 0.1829657, 0.0584492, 0.13689145, 0.12645417, 0.023237493, -0.09010989, -0.37451875, -0.55559033, -0.48906955, -0.28290218, -0.10163373, -0.097273536, -0.11656362, -0.06427603, 0.08866781, 0.29354307, 0.41590545, 0.44031745, 0.32629532, 0.14826354, 0.062496953, 0.13219027, 0.097558625, 0.034142412, -0.093394995, -0.35537165, -0.47742137, -0.40645617, -0.22483414, -0.098133855, -0.13077979, -0.09015248, 0.02344397, 0.17020018, 0.30393776, 0.33896714, 0.3184628, 0.24611896, 0.09471268, 0.05541003, 0.092553824, 0.02832032, -0.0061341734, -0.16734935, -0.3837212, -0.4086668, -0.30610114, -0.13837092, -0.060337897, -0.11094998, -0.033329334, 0.12123995, 0.28870073, 0.35899994, 0.31863564, 0.24897915, 0.15081424, 0.03714194, 0.052438844, 0.035863288, -0.03726721, -0.07699846, -0.28963757, -0.45835108, -0.40304866, -0.23314627, -0.05734314, -0.047853146, -0.08092988, 0.021434586, 0.21350273, 0.4038817, 0.4185417, 0.33058396, 0.22442062, 0.10851933, 0.034821924, 0.059063442, -0.030523565, -0.09834731, -0.16734591, -0.39348057, -0.49501744, -0.38131338, -0.1681758, -0.028097352, -0.09776202, -0.08084182, 0.06783009, 0.2916006, 0.49327418, 0.46243212, 0.32379454, 0.19473243, 0.06735533, 0.04849632, 0.06330993, -0.061388426, -0.13141514, -0.26010525, -0.43731427, -0.4579104, -0.340534, -0.14573027};

	AudioPreprocessing_Run(aInSignal, aSpectrogram, SAMPLE_RATE);
 8000f8c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000f90:	3bb0      	subs	r3, #176	; 0xb0
 8000f92:	f643 126c 	movw	r2, #14700	; 0x396c
 8000f96:	4909      	ldr	r1, [pc, #36]	; (8000fbc <main+0x7c>)
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 fa9d 	bl	80014d8 <AudioPreprocessing_Run>
	PowerTodB(aSpectrogram);
 8000f9e:	4807      	ldr	r0, [pc, #28]	; (8000fbc <main+0x7c>)
 8000fa0:	f000 fae2 	bl	8001568 <PowerTodB>

	acquire_and_process_data(aSpectrogram, NUM_COLS * NUM_MELS * 4);
 8000fa4:	f640 41a8 	movw	r1, #3240	; 0xca8
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <main+0x7c>)
 8000faa:	f008 f94f 	bl	800924c <acquire_and_process_data>

	/* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000fae:	f007 fdbd 	bl	8008b2c <MX_USB_HOST_Process>

    MX_X_CUBE_AI_Process();
 8000fb2:	f008 f979 	bl	80092a8 <MX_X_CUBE_AI_Process>
  {
 8000fb6:	e7de      	b.n	8000f76 <main+0x36>
 8000fb8:	08013760 	.word	0x08013760
 8000fbc:	200164e4 	.word	0x200164e4

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b094      	sub	sp, #80	; 0x50
 8000fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	f107 0320 	add.w	r3, r7, #32
 8000fca:	2230      	movs	r2, #48	; 0x30
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f00e fc1c 	bl	800f80c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	4b28      	ldr	r3, [pc, #160]	; (800108c <SystemClock_Config+0xcc>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	4a27      	ldr	r2, [pc, #156]	; (800108c <SystemClock_Config+0xcc>)
 8000fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff4:	4b25      	ldr	r3, [pc, #148]	; (800108c <SystemClock_Config+0xcc>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	4b22      	ldr	r3, [pc, #136]	; (8001090 <SystemClock_Config+0xd0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a21      	ldr	r2, [pc, #132]	; (8001090 <SystemClock_Config+0xd0>)
 800100a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <SystemClock_Config+0xd0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800101c:	2301      	movs	r3, #1
 800101e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001020:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001026:	2302      	movs	r3, #2
 8001028:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800102e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001030:	2308      	movs	r3, #8
 8001032:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001034:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001038:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800103a:	2302      	movs	r3, #2
 800103c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800103e:	2307      	movs	r3, #7
 8001040:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	4618      	mov	r0, r3
 8001048:	f003 fbf2 	bl	8004830 <HAL_RCC_OscConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001052:	f000 fb19 	bl	8001688 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001056:	230f      	movs	r3, #15
 8001058:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105a:	2302      	movs	r3, #2
 800105c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001062:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001066:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	2105      	movs	r1, #5
 8001074:	4618      	mov	r0, r3
 8001076:	f003 fe53 	bl	8004d20 <HAL_RCC_ClockConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001080:	f000 fb02 	bl	8001688 <Error_Handler>
  }
}
 8001084:	bf00      	nop
 8001086:	3750      	adds	r7, #80	; 0x50
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40023800 	.word	0x40023800
 8001090:	40007000 	.word	0x40007000

08001094 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_CRC_Init+0x20>)
 800109a:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <MX_CRC_Init+0x24>)
 800109c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_CRC_Init+0x20>)
 80010a0:	f000 fe9f 	bl	8001de2 <HAL_CRC_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80010aa:	f000 faed 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200171e0 	.word	0x200171e0
 80010b8:	40023000 	.word	0x40023000

080010bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <MX_I2C1_Init+0x50>)
 80010c2:	4a13      	ldr	r2, [pc, #76]	; (8001110 <MX_I2C1_Init+0x54>)
 80010c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_I2C1_Init+0x50>)
 80010c8:	4a12      	ldr	r2, [pc, #72]	; (8001114 <MX_I2C1_Init+0x58>)
 80010ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_I2C1_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_I2C1_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MX_I2C1_Init+0x50>)
 80010da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <MX_I2C1_Init+0x50>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_I2C1_Init+0x50>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <MX_I2C1_Init+0x50>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_I2C1_Init+0x50>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <MX_I2C1_Init+0x50>)
 80010fa:	f002 fdb5 	bl	8003c68 <HAL_I2C_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001104:	f000 fac0 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2001718c 	.word	0x2001718c
 8001110:	40005400 	.word	0x40005400
 8001114:	000186a0 	.word	0x000186a0

08001118 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <MX_I2S3_Init+0x54>)
 800111e:	4a14      	ldr	r2, [pc, #80]	; (8001170 <MX_I2S3_Init+0x58>)
 8001120:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <MX_I2S3_Init+0x54>)
 8001124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001128:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <MX_I2S3_Init+0x54>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_I2S3_Init+0x54>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <MX_I2S3_Init+0x54>)
 8001138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800113c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_I2S3_Init+0x54>)
 8001140:	4a0c      	ldr	r2, [pc, #48]	; (8001174 <MX_I2S3_Init+0x5c>)
 8001142:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_I2S3_Init+0x54>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_I2S3_Init+0x54>)
 800114c:	2200      	movs	r2, #0
 800114e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_I2S3_Init+0x54>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_I2S3_Init+0x54>)
 8001158:	f002 feca 	bl	8003ef0 <HAL_I2S_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001162:	f000 fa91 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200192b8 	.word	0x200192b8
 8001170:	40003c00 	.word	0x40003c00
 8001174:	00017700 	.word	0x00017700

08001178 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_SPI1_Init+0x64>)
 800117e:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <MX_SPI1_Init+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_SPI1_Init+0x64>)
 8001184:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001188:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_SPI1_Init+0x64>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_SPI1_Init+0x64>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_SPI1_Init+0x64>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_SPI1_Init+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_SPI1_Init+0x64>)
 80011a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_SPI1_Init+0x64>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MX_SPI1_Init+0x64>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_SPI1_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <MX_SPI1_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_SPI1_Init+0x64>)
 80011c4:	220a      	movs	r2, #10
 80011c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <MX_SPI1_Init+0x64>)
 80011ca:	f004 f8d1 	bl	8005370 <HAL_SPI_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011d4:	f000 fa58 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20019260 	.word	0x20019260
 80011e0:	40013000 	.word	0x40013000

080011e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08c      	sub	sp, #48	; 0x30
 80011e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <MX_GPIO_Init+0x1e4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <MX_GPIO_Init+0x1e4>)
 8001204:	f043 0310 	orr.w	r3, r3, #16
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b6f      	ldr	r3, [pc, #444]	; (80013c8 <MX_GPIO_Init+0x1e4>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	4b6b      	ldr	r3, [pc, #428]	; (80013c8 <MX_GPIO_Init+0x1e4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a6a      	ldr	r2, [pc, #424]	; (80013c8 <MX_GPIO_Init+0x1e4>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b68      	ldr	r3, [pc, #416]	; (80013c8 <MX_GPIO_Init+0x1e4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b64      	ldr	r3, [pc, #400]	; (80013c8 <MX_GPIO_Init+0x1e4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a63      	ldr	r2, [pc, #396]	; (80013c8 <MX_GPIO_Init+0x1e4>)
 800123c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b61      	ldr	r3, [pc, #388]	; (80013c8 <MX_GPIO_Init+0x1e4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b5d      	ldr	r3, [pc, #372]	; (80013c8 <MX_GPIO_Init+0x1e4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a5c      	ldr	r2, [pc, #368]	; (80013c8 <MX_GPIO_Init+0x1e4>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b5a      	ldr	r3, [pc, #360]	; (80013c8 <MX_GPIO_Init+0x1e4>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <MX_GPIO_Init+0x1e4>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a55      	ldr	r2, [pc, #340]	; (80013c8 <MX_GPIO_Init+0x1e4>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b53      	ldr	r3, [pc, #332]	; (80013c8 <MX_GPIO_Init+0x1e4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b4f      	ldr	r3, [pc, #316]	; (80013c8 <MX_GPIO_Init+0x1e4>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a4e      	ldr	r2, [pc, #312]	; (80013c8 <MX_GPIO_Init+0x1e4>)
 8001290:	f043 0308 	orr.w	r3, r3, #8
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b4c      	ldr	r3, [pc, #304]	; (80013c8 <MX_GPIO_Init+0x1e4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2108      	movs	r1, #8
 80012a6:	4849      	ldr	r0, [pc, #292]	; (80013cc <MX_GPIO_Init+0x1e8>)
 80012a8:	f000 ff54 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2101      	movs	r1, #1
 80012b0:	4847      	ldr	r0, [pc, #284]	; (80013d0 <MX_GPIO_Init+0x1ec>)
 80012b2:	f000 ff4f 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012b6:	2200      	movs	r2, #0
 80012b8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80012bc:	4845      	ldr	r0, [pc, #276]	; (80013d4 <MX_GPIO_Init+0x1f0>)
 80012be:	f000 ff49 	bl	8002154 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80012c2:	2308      	movs	r3, #8
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4619      	mov	r1, r3
 80012d8:	483c      	ldr	r0, [pc, #240]	; (80013cc <MX_GPIO_Init+0x1e8>)
 80012da:	f000 fd9f 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012de:	2301      	movs	r3, #1
 80012e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	4836      	ldr	r0, [pc, #216]	; (80013d0 <MX_GPIO_Init+0x1ec>)
 80012f6:	f000 fd91 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80012fa:	2308      	movs	r3, #8
 80012fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800130a:	2305      	movs	r3, #5
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4619      	mov	r1, r3
 8001314:	482e      	ldr	r0, [pc, #184]	; (80013d0 <MX_GPIO_Init+0x1ec>)
 8001316:	f000 fd81 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800131a:	2301      	movs	r3, #1
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800131e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	482a      	ldr	r0, [pc, #168]	; (80013d8 <MX_GPIO_Init+0x1f4>)
 8001330:	f000 fd74 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001334:	2304      	movs	r3, #4
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	4619      	mov	r1, r3
 8001346:	4825      	ldr	r0, [pc, #148]	; (80013dc <MX_GPIO_Init+0x1f8>)
 8001348:	f000 fd68 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800134c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800135e:	2305      	movs	r3, #5
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	481c      	ldr	r0, [pc, #112]	; (80013dc <MX_GPIO_Init+0x1f8>)
 800136a:	f000 fd57 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800136e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001372:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4813      	ldr	r0, [pc, #76]	; (80013d4 <MX_GPIO_Init+0x1f0>)
 8001388:	f000 fd48 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800138c:	2320      	movs	r3, #32
 800138e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	480d      	ldr	r0, [pc, #52]	; (80013d4 <MX_GPIO_Init+0x1f0>)
 80013a0:	f000 fd3c 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80013a4:	2302      	movs	r3, #2
 80013a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013a8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <MX_GPIO_Init+0x1e8>)
 80013ba:	f000 fd2f 	bl	8001e1c <HAL_GPIO_Init>

}
 80013be:	bf00      	nop
 80013c0:	3730      	adds	r7, #48	; 0x30
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020400 	.word	0x40020400

080013e0 <Preprocessing_Init>:

/* USER CODE BEGIN 4 */
void Preprocessing_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0

  /* Init window function */
  if (Window_Init(aWindowFuncBuffer, FRAME_LEN, WINDOW_HANN) != 0)
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ea:	4832      	ldr	r0, [pc, #200]	; (80014b4 <Preprocessing_Init+0xd4>)
 80013ec:	f005 fba0 	bl	8006b30 <Window_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d000      	beq.n	80013f8 <Preprocessing_Init+0x18>
  {
    while(1);
 80013f6:	e7fe      	b.n	80013f6 <Preprocessing_Init+0x16>
  }
  /* Init RFFT */
  arm_rfft_fast_init_f32(&S_Rfft, FFT_LEN);
 80013f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013fc:	482e      	ldr	r0, [pc, #184]	; (80014b8 <Preprocessing_Init+0xd8>)
 80013fe:	f00d f877 	bl	800e4f0 <arm_rfft_fast_init_f32>

  /* Init Spectrogram */
  S_Spectr.pRfft    = &S_Rfft;
 8001402:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <Preprocessing_Init+0xdc>)
 8001404:	4a2c      	ldr	r2, [pc, #176]	; (80014b8 <Preprocessing_Init+0xd8>)
 8001406:	601a      	str	r2, [r3, #0]
  S_Spectr.Type     = SPECTRUM_TYPE_POWER;
 8001408:	4b2c      	ldr	r3, [pc, #176]	; (80014bc <Preprocessing_Init+0xdc>)
 800140a:	2201      	movs	r2, #1
 800140c:	711a      	strb	r2, [r3, #4]
  S_Spectr.pWindow  = aWindowFuncBuffer;
 800140e:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <Preprocessing_Init+0xdc>)
 8001410:	4a28      	ldr	r2, [pc, #160]	; (80014b4 <Preprocessing_Init+0xd4>)
 8001412:	609a      	str	r2, [r3, #8]
  S_Spectr.SampRate = SAMPLE_RATE;
 8001414:	4b29      	ldr	r3, [pc, #164]	; (80014bc <Preprocessing_Init+0xdc>)
 8001416:	f643 126c 	movw	r2, #14700	; 0x396c
 800141a:	60da      	str	r2, [r3, #12]
  S_Spectr.FrameLen = FRAME_LEN;
 800141c:	4b27      	ldr	r3, [pc, #156]	; (80014bc <Preprocessing_Init+0xdc>)
 800141e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001422:	611a      	str	r2, [r3, #16]
  S_Spectr.FFTLen   = FFT_LEN;
 8001424:	4b25      	ldr	r3, [pc, #148]	; (80014bc <Preprocessing_Init+0xdc>)
 8001426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800142a:	615a      	str	r2, [r3, #20]
  S_Spectr.pScratch = aSpectrScratchBuffer;
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <Preprocessing_Init+0xdc>)
 800142e:	4a24      	ldr	r2, [pc, #144]	; (80014c0 <Preprocessing_Init+0xe0>)
 8001430:	619a      	str	r2, [r3, #24]

  /* Init Mel filter */

  S_MelFilter.pStartIndices = aMelFilterStartIndices;
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <Preprocessing_Init+0xe4>)
 8001434:	4a24      	ldr	r2, [pc, #144]	; (80014c8 <Preprocessing_Init+0xe8>)
 8001436:	601a      	str	r2, [r3, #0]
  S_MelFilter.pStopIndices  = aMelFilterStopIndices;
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <Preprocessing_Init+0xe4>)
 800143a:	4a24      	ldr	r2, [pc, #144]	; (80014cc <Preprocessing_Init+0xec>)
 800143c:	605a      	str	r2, [r3, #4]
  S_MelFilter.pCoefficients = aMelFilterCoefs;
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <Preprocessing_Init+0xe4>)
 8001440:	4a23      	ldr	r2, [pc, #140]	; (80014d0 <Preprocessing_Init+0xf0>)
 8001442:	609a      	str	r2, [r3, #8]
  S_MelFilter.NumMels   = NUM_MELS;
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <Preprocessing_Init+0xe4>)
 8001446:	221e      	movs	r2, #30
 8001448:	611a      	str	r2, [r3, #16]
  S_MelFilter.FFTLen    = FFT_LEN;
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <Preprocessing_Init+0xe4>)
 800144c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001450:	615a      	str	r2, [r3, #20]
  S_MelFilter.SampRate  = SAMPLE_RATE;
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <Preprocessing_Init+0xe4>)
 8001454:	f643 126c 	movw	r2, #14700	; 0x396c
 8001458:	619a      	str	r2, [r3, #24]
  S_MelFilter.FMin      = 0.0;
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <Preprocessing_Init+0xe4>)
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  S_MelFilter.FMax      = S_MelFilter.SampRate / 2.0;
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <Preprocessing_Init+0xe4>)
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f84c 	bl	8000504 <__aeabi_ui2d>
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001474:	f7ff f9ea 	bl	800084c <__aeabi_ddiv>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	f7ff fb92 	bl	8000ba8 <__aeabi_d2f>
 8001484:	4603      	mov	r3, r0
 8001486:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <Preprocessing_Init+0xe4>)
 8001488:	6213      	str	r3, [r2, #32]
  S_MelFilter.Formula   = MEL_SLANEY;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <Preprocessing_Init+0xe4>)
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  S_MelFilter.Normalize = 1;
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <Preprocessing_Init+0xe4>)
 8001494:	2201      	movs	r2, #1
 8001496:	629a      	str	r2, [r3, #40]	; 0x28
  S_MelFilter.Mel2F     = 1;
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <Preprocessing_Init+0xe4>)
 800149a:	2201      	movs	r2, #1
 800149c:	62da      	str	r2, [r3, #44]	; 0x2c
  MelFilterbank_Init(&S_MelFilter);
 800149e:	4809      	ldr	r0, [pc, #36]	; (80014c4 <Preprocessing_Init+0xe4>)
 80014a0:	f005 f86b 	bl	800657a <MelFilterbank_Init>

  /* Init MelSpectrogram */
  S_MelSpectr.SpectrogramConf = &S_Spectr;
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <Preprocessing_Init+0xf4>)
 80014a6:	4a05      	ldr	r2, [pc, #20]	; (80014bc <Preprocessing_Init+0xdc>)
 80014a8:	601a      	str	r2, [r3, #0]
  S_MelSpectr.MelFilter       = &S_MelFilter;
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <Preprocessing_Init+0xf4>)
 80014ac:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <Preprocessing_Init+0xe4>)
 80014ae:	605a      	str	r2, [r3, #4]
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20001268 	.word	0x20001268
 80014b8:	200011fc 	.word	0x200011fc
 80014bc:	20001244 	.word	0x20001244
 80014c0:	20018260 	.word	0x20018260
 80014c4:	20001214 	.word	0x20001214
 80014c8:	20003188 	.word	0x20003188
 80014cc:	20003200 	.word	0x20003200
 80014d0:	20002268 	.word	0x20002268
 80014d4:	20001260 	.word	0x20001260

080014d8 <AudioPreprocessing_Run>:

void AudioPreprocessing_Run(float32_t *pInSignal, float32_t *pOut, uint32_t signal_len)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  const uint32_t num_frames = 1 + (signal_len - FRAME_LEN) / HOP_LEN;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80014ea:	0a5b      	lsrs	r3, r3, #9
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]

  for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
 80014f4:	e029      	b.n	800154a <AudioPreprocessing_Run+0x72>
  {
    buf_to_float_normed(&pInSignal[HOP_LEN * frame_index], aInFrame, FRAME_LEN);
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	02db      	lsls	r3, r3, #11
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4413      	add	r3, r2
 80014fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001502:	4916      	ldr	r1, [pc, #88]	; (800155c <AudioPreprocessing_Run+0x84>)
 8001504:	4618      	mov	r0, r3
 8001506:	f004 ff73 	bl	80063f0 <buf_to_float_normed>
    MelSpectrogramColumn(&S_MelSpectr, aInFrame, aColBuffer);
 800150a:	4a15      	ldr	r2, [pc, #84]	; (8001560 <AudioPreprocessing_Run+0x88>)
 800150c:	4913      	ldr	r1, [pc, #76]	; (800155c <AudioPreprocessing_Run+0x84>)
 800150e:	4815      	ldr	r0, [pc, #84]	; (8001564 <AudioPreprocessing_Run+0x8c>)
 8001510:	f005 f817 	bl	8006542 <MelSpectrogramColumn>
    /* Reshape column into pOut */
    for (uint32_t i = 0; i < NUM_MELS; i++)
 8001514:	2300      	movs	r3, #0
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	e011      	b.n	800153e <AudioPreprocessing_Run+0x66>
    {
      pOut[i * num_frames + frame_index] = aColBuffer[i];
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	fb02 f203 	mul.w	r2, r2, r3
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	4413      	add	r3, r2
 800152c:	490c      	ldr	r1, [pc, #48]	; (8001560 <AudioPreprocessing_Run+0x88>)
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	0092      	lsls	r2, r2, #2
 8001532:	440a      	add	r2, r1
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < NUM_MELS; i++)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	3301      	adds	r3, #1
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b1d      	cmp	r3, #29
 8001542:	d9ea      	bls.n	800151a <AudioPreprocessing_Run+0x42>
  for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	3301      	adds	r3, #1
 8001548:	61fb      	str	r3, [r7, #28]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	429a      	cmp	r2, r3
 8001550:	d3d1      	bcc.n	80014f6 <AudioPreprocessing_Run+0x1e>
    }
  }
}
 8001552:	bf00      	nop
 8001554:	bf00      	nop
 8001556:	3720      	adds	r7, #32
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200171e8 	.word	0x200171e8
 8001560:	200181e8 	.word	0x200181e8
 8001564:	20001260 	.word	0x20001260

08001568 <PowerTodB>:

void PowerTodB(float32_t *pSpectrogram)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  float32_t max_mel_energy = 0.0f;
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Find MelEnergy Scaling factor */
  for (i = 0; i < NUM_MELS * NUM_COLS; i++) {
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	e017      	b.n	80015ac <PowerTodB+0x44>
    max_mel_energy = (max_mel_energy > pSpectrogram[i]) ? max_mel_energy : pSpectrogram[i];
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	4413      	add	r3, r2
 8001584:	edd3 7a00 	vldr	s15, [r3]
 8001588:	ed97 7a03 	vldr	s14, [r7, #12]
 800158c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	dd01      	ble.n	800159a <PowerTodB+0x32>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	e004      	b.n	80015a4 <PowerTodB+0x3c>
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < NUM_MELS * NUM_COLS; i++) {
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	3301      	adds	r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	f240 3229 	movw	r2, #809	; 0x329
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d9e2      	bls.n	800157c <PowerTodB+0x14>
  }

  /* Scale Mel Energies */
  for (i = 0; i < NUM_MELS * NUM_COLS; i++) {
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	e012      	b.n	80015e2 <PowerTodB+0x7a>
    pSpectrogram[i] /= max_mel_energy;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	edd3 6a00 	vldr	s13, [r3]
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	4413      	add	r3, r2
 80015d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80015d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d8:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < NUM_MELS * NUM_COLS; i++) {
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	3301      	adds	r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	f240 3229 	movw	r2, #809	; 0x329
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d9e7      	bls.n	80015bc <PowerTodB+0x54>
  }

  /* Convert power spectrogram to decibel */
  for (i = 0; i < NUM_MELS * NUM_COLS; i++) {
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	e018      	b.n	8001624 <PowerTodB+0xbc>
    pSpectrogram[i] = 10.0f * log10f(pSpectrogram[i]);
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	edd3 7a00 	vldr	s15, [r3]
 80015fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001602:	f010 fe1d 	bl	8012240 <log10f>
 8001606:	eef0 7a40 	vmov.f32	s15, s0
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001616:	ee67 7a87 	vmul.f32	s15, s15, s14
 800161a:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < NUM_MELS * NUM_COLS; i++) {
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	3301      	adds	r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	f240 3229 	movw	r2, #809	; 0x329
 800162a:	4293      	cmp	r3, r2
 800162c:	d9e1      	bls.n	80015f2 <PowerTodB+0x8a>
  }

  /* Threshold output to -80.0 dB */
  for (i = 0; i < NUM_MELS * NUM_COLS; i++) {
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	e01b      	b.n	800166c <PowerTodB+0x104>
    pSpectrogram[i] = (pSpectrogram[i] < -80.0f) ? (-80.0f) : (pSpectrogram[i]);
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	4413      	add	r3, r2
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001680 <PowerTodB+0x118>
 8001644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164c:	d501      	bpl.n	8001652 <PowerTodB+0xea>
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <PowerTodB+0x11c>)
 8001650:	e004      	b.n	800165c <PowerTodB+0xf4>
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	0092      	lsls	r2, r2, #2
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	440a      	add	r2, r1
 8001664:	6013      	str	r3, [r2, #0]
  for (i = 0; i < NUM_MELS * NUM_COLS; i++) {
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	3301      	adds	r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	f240 3229 	movw	r2, #809	; 0x329
 8001672:	4293      	cmp	r3, r2
 8001674:	d9de      	bls.n	8001634 <PowerTodB+0xcc>
  }
}
 8001676:	bf00      	nop
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	c2a00000 	.word	0xc2a00000
 8001684:	c2a00000 	.word	0xc2a00000

08001688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800168c:	b672      	cpsid	i
}
 800168e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001690:	e7fe      	b.n	8001690 <Error_Handler+0x8>
	...

08001694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <HAL_MspInit+0x4c>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <HAL_MspInit+0x4c>)
 80016a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a8:	6453      	str	r3, [r2, #68]	; 0x44
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <HAL_MspInit+0x4c>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_MspInit+0x4c>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <HAL_MspInit+0x4c>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_MspInit+0x4c>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016d2:	2007      	movs	r0, #7
 80016d4:	f000 fb44 	bl	8001d60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40023800 	.word	0x40023800

080016e4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <HAL_CRC_MspInit+0x3c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d10d      	bne.n	8001712 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <HAL_CRC_MspInit+0x40>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a09      	ldr	r2, [pc, #36]	; (8001724 <HAL_CRC_MspInit+0x40>)
 8001700:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b07      	ldr	r3, [pc, #28]	; (8001724 <HAL_CRC_MspInit+0x40>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40023000 	.word	0x40023000
 8001724:	40023800 	.word	0x40023800

08001728 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a19      	ldr	r2, [pc, #100]	; (80017ac <HAL_I2C_MspInit+0x84>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d12c      	bne.n	80017a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a17      	ldr	r2, [pc, #92]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001766:	f44f 7310 	mov.w	r3, #576	; 0x240
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176c:	2312      	movs	r3, #18
 800176e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001770:	2301      	movs	r3, #1
 8001772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001778:	2304      	movs	r3, #4
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	480c      	ldr	r0, [pc, #48]	; (80017b4 <HAL_I2C_MspInit+0x8c>)
 8001784:	f000 fb4a 	bl	8001e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 8001792:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001796:	6413      	str	r3, [r2, #64]	; 0x40
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017a4:	bf00      	nop
 80017a6:	3728      	adds	r7, #40	; 0x28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40005400 	.word	0x40005400
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020400 	.word	0x40020400

080017b8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08e      	sub	sp, #56	; 0x38
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a31      	ldr	r2, [pc, #196]	; (80018a8 <HAL_I2S_MspInit+0xf0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d15a      	bne.n	800189e <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80017e8:	2301      	movs	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80017ec:	23c0      	movs	r3, #192	; 0xc0
 80017ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 fc79 	bl	80050f0 <HAL_RCCEx_PeriphCLKConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001804:	f7ff ff40 	bl	8001688 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_I2S_MspInit+0xf4>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	4a26      	ldr	r2, [pc, #152]	; (80018ac <HAL_I2S_MspInit+0xf4>)
 8001812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001816:	6413      	str	r3, [r2, #64]	; 0x40
 8001818:	4b24      	ldr	r3, [pc, #144]	; (80018ac <HAL_I2S_MspInit+0xf4>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	4b20      	ldr	r3, [pc, #128]	; (80018ac <HAL_I2S_MspInit+0xf4>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	4a1f      	ldr	r2, [pc, #124]	; (80018ac <HAL_I2S_MspInit+0xf4>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6313      	str	r3, [r2, #48]	; 0x30
 8001834:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <HAL_I2S_MspInit+0xf4>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_I2S_MspInit+0xf4>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	4a18      	ldr	r2, [pc, #96]	; (80018ac <HAL_I2S_MspInit+0xf4>)
 800184a:	f043 0304 	orr.w	r3, r3, #4
 800184e:	6313      	str	r3, [r2, #48]	; 0x30
 8001850:	4b16      	ldr	r3, [pc, #88]	; (80018ac <HAL_I2S_MspInit+0xf4>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800185c:	2310      	movs	r3, #16
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800186c:	2306      	movs	r3, #6
 800186e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001874:	4619      	mov	r1, r3
 8001876:	480e      	ldr	r0, [pc, #56]	; (80018b0 <HAL_I2S_MspInit+0xf8>)
 8001878:	f000 fad0 	bl	8001e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800187c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800188e:	2306      	movs	r3, #6
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001896:	4619      	mov	r1, r3
 8001898:	4806      	ldr	r0, [pc, #24]	; (80018b4 <HAL_I2S_MspInit+0xfc>)
 800189a:	f000 fabf 	bl	8001e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800189e:	bf00      	nop
 80018a0:	3738      	adds	r7, #56	; 0x38
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40003c00 	.word	0x40003c00
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020000 	.word	0x40020000
 80018b4:	40020800 	.word	0x40020800

080018b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a19      	ldr	r2, [pc, #100]	; (800193c <HAL_SPI_MspInit+0x84>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d12b      	bne.n	8001932 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_SPI_MspInit+0x88>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	4a17      	ldr	r2, [pc, #92]	; (8001940 <HAL_SPI_MspInit+0x88>)
 80018e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_SPI_MspInit+0x88>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <HAL_SPI_MspInit+0x88>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a10      	ldr	r2, [pc, #64]	; (8001940 <HAL_SPI_MspInit+0x88>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_SPI_MspInit+0x88>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001912:	23e0      	movs	r3, #224	; 0xe0
 8001914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001922:	2305      	movs	r3, #5
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	4805      	ldr	r0, [pc, #20]	; (8001944 <HAL_SPI_MspInit+0x8c>)
 800192e:	f000 fa75 	bl	8001e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40013000 	.word	0x40013000
 8001940:	40023800 	.word	0x40023800
 8001944:	40020000 	.word	0x40020000

08001948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800194c:	e7fe      	b.n	800194c <NMI_Handler+0x4>

0800194e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <HardFault_Handler+0x4>

08001954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <MemManage_Handler+0x4>

0800195a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195e:	e7fe      	b.n	800195e <BusFault_Handler+0x4>

08001960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <UsageFault_Handler+0x4>

08001966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001994:	f000 f8d0 	bl	8001b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <OTG_FS_IRQHandler+0x10>)
 80019a2:	f000 fe5b 	bl	800265c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200196dc 	.word	0x200196dc

080019b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b8:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <_sbrk+0x5c>)
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <_sbrk+0x60>)
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d102      	bne.n	80019d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <_sbrk+0x64>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <_sbrk+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d207      	bcs.n	80019f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e0:	f00d fdd2 	bl	800f588 <__errno>
 80019e4:	4603      	mov	r3, r0
 80019e6:	220c      	movs	r2, #12
 80019e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	e009      	b.n	8001a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <_sbrk+0x64>)
 8001a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20020000 	.word	0x20020000
 8001a10:	00000800 	.word	0x00000800
 8001a14:	20003278 	.word	0x20003278
 8001a18:	2001a6a0 	.word	0x2001a6a0

08001a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <SystemInit+0x20>)
 8001a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <SystemInit+0x20>)
 8001a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a44:	480d      	ldr	r0, [pc, #52]	; (8001a7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a46:	490e      	ldr	r1, [pc, #56]	; (8001a80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a48:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a4c:	e002      	b.n	8001a54 <LoopCopyDataInit>

08001a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a52:	3304      	adds	r3, #4

08001a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a58:	d3f9      	bcc.n	8001a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5a:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a5c:	4c0b      	ldr	r4, [pc, #44]	; (8001a8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a60:	e001      	b.n	8001a66 <LoopFillZerobss>

08001a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a64:	3204      	adds	r2, #4

08001a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a68:	d3fb      	bcc.n	8001a62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a6a:	f7ff ffd7 	bl	8001a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a6e:	f00d fe87 	bl	800f780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a72:	f7ff fa65 	bl	8000f40 <main>
  bx  lr    
 8001a76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a80:	200011d8 	.word	0x200011d8
  ldr r2, =_sidata
 8001a84:	0807b868 	.word	0x0807b868
  ldr r2, =_sbss
 8001a88:	200011e0 	.word	0x200011e0
  ldr r4, =_ebss
 8001a8c:	2001a6a0 	.word	0x2001a6a0

08001a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a90:	e7fe      	b.n	8001a90 <ADC_IRQHandler>
	...

08001a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_Init+0x40>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ad4 <HAL_Init+0x40>)
 8001a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_Init+0x40>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <HAL_Init+0x40>)
 8001aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_Init+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <HAL_Init+0x40>)
 8001ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001abc:	2003      	movs	r0, #3
 8001abe:	f000 f94f 	bl	8001d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f000 f808 	bl	8001ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac8:	f7ff fde4 	bl	8001694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023c00 	.word	0x40023c00

08001ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_InitTick+0x54>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_InitTick+0x58>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f967 	bl	8001dca <HAL_SYSTICK_Config>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00e      	b.n	8001b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b0f      	cmp	r3, #15
 8001b0a:	d80a      	bhi.n	8001b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f000 f92f 	bl	8001d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b18:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <HAL_InitTick+0x5c>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e000      	b.n	8001b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000008 	.word	0x20000008
 8001b34:	20000004 	.word	0x20000004

08001b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_IncTick+0x20>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_IncTick+0x24>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <HAL_IncTick+0x24>)
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000008 	.word	0x20000008
 8001b5c:	20019300 	.word	0x20019300

08001b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return uwTick;
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <HAL_GetTick+0x14>)
 8001b66:	681b      	ldr	r3, [r3, #0]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20019300 	.word	0x20019300

08001b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b80:	f7ff ffee 	bl	8001b60 <HAL_GetTick>
 8001b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b90:	d005      	beq.n	8001b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_Delay+0x44>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b9e:	bf00      	nop
 8001ba0:	f7ff ffde 	bl	8001b60 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d8f7      	bhi.n	8001ba0 <HAL_Delay+0x28>
  {
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000008 	.word	0x20000008

08001bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf2:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	60d3      	str	r3, [r2, #12]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <__NVIC_GetPriorityGrouping+0x18>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	f003 0307 	and.w	r3, r3, #7
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	db0b      	blt.n	8001c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	f003 021f 	and.w	r2, r3, #31
 8001c3c:	4907      	ldr	r1, [pc, #28]	; (8001c5c <__NVIC_EnableIRQ+0x38>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	2001      	movs	r0, #1
 8001c46:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000e100 	.word	0xe000e100

08001c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	6039      	str	r1, [r7, #0]
 8001c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	db0a      	blt.n	8001c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	490c      	ldr	r1, [pc, #48]	; (8001cac <__NVIC_SetPriority+0x4c>)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	0112      	lsls	r2, r2, #4
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	440b      	add	r3, r1
 8001c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c88:	e00a      	b.n	8001ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4908      	ldr	r1, [pc, #32]	; (8001cb0 <__NVIC_SetPriority+0x50>)
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	3b04      	subs	r3, #4
 8001c98:	0112      	lsls	r2, r2, #4
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	761a      	strb	r2, [r3, #24]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000e100 	.word	0xe000e100
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b089      	sub	sp, #36	; 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f1c3 0307 	rsb	r3, r3, #7
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	bf28      	it	cs
 8001cd2:	2304      	movcs	r3, #4
 8001cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	d902      	bls.n	8001ce4 <NVIC_EncodePriority+0x30>
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3b03      	subs	r3, #3
 8001ce2:	e000      	b.n	8001ce6 <NVIC_EncodePriority+0x32>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43da      	mvns	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	fa01 f303 	lsl.w	r3, r1, r3
 8001d06:	43d9      	mvns	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	4313      	orrs	r3, r2
         );
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3724      	adds	r7, #36	; 0x24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d2c:	d301      	bcc.n	8001d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00f      	b.n	8001d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <SysTick_Config+0x40>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3a:	210f      	movs	r1, #15
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	f7ff ff8e 	bl	8001c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <SysTick_Config+0x40>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4a:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <SysTick_Config+0x40>)
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	e000e010 	.word	0xe000e010

08001d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ff29 	bl	8001bc0 <__NVIC_SetPriorityGrouping>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d88:	f7ff ff3e 	bl	8001c08 <__NVIC_GetPriorityGrouping>
 8001d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	6978      	ldr	r0, [r7, #20]
 8001d94:	f7ff ff8e 	bl	8001cb4 <NVIC_EncodePriority>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff5d 	bl	8001c60 <__NVIC_SetPriority>
}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff31 	bl	8001c24 <__NVIC_EnableIRQ>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff ffa2 	bl	8001d1c <SysTick_Config>
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e00e      	b.n	8001e12 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	795b      	ldrb	r3, [r3, #5]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d105      	bne.n	8001e0a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff fc6d 	bl	80016e4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	; 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	e16b      	b.n	8002110 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e38:	2201      	movs	r2, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	f040 815a 	bne.w	800210a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d005      	beq.n	8001e6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d130      	bne.n	8001ed0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 0201 	and.w	r2, r3, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d017      	beq.n	8001f0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d123      	bne.n	8001f60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	08da      	lsrs	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3208      	adds	r2, #8
 8001f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	220f      	movs	r2, #15
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	08da      	lsrs	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3208      	adds	r2, #8
 8001f5a:	69b9      	ldr	r1, [r7, #24]
 8001f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0203 	and.w	r2, r3, #3
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80b4 	beq.w	800210a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b60      	ldr	r3, [pc, #384]	; (8002128 <HAL_GPIO_Init+0x30c>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	4a5f      	ldr	r2, [pc, #380]	; (8002128 <HAL_GPIO_Init+0x30c>)
 8001fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb2:	4b5d      	ldr	r3, [pc, #372]	; (8002128 <HAL_GPIO_Init+0x30c>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fbe:	4a5b      	ldr	r2, [pc, #364]	; (800212c <HAL_GPIO_Init+0x310>)
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a52      	ldr	r2, [pc, #328]	; (8002130 <HAL_GPIO_Init+0x314>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d02b      	beq.n	8002042 <HAL_GPIO_Init+0x226>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a51      	ldr	r2, [pc, #324]	; (8002134 <HAL_GPIO_Init+0x318>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d025      	beq.n	800203e <HAL_GPIO_Init+0x222>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a50      	ldr	r2, [pc, #320]	; (8002138 <HAL_GPIO_Init+0x31c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d01f      	beq.n	800203a <HAL_GPIO_Init+0x21e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4f      	ldr	r2, [pc, #316]	; (800213c <HAL_GPIO_Init+0x320>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d019      	beq.n	8002036 <HAL_GPIO_Init+0x21a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4e      	ldr	r2, [pc, #312]	; (8002140 <HAL_GPIO_Init+0x324>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d013      	beq.n	8002032 <HAL_GPIO_Init+0x216>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4d      	ldr	r2, [pc, #308]	; (8002144 <HAL_GPIO_Init+0x328>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00d      	beq.n	800202e <HAL_GPIO_Init+0x212>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4c      	ldr	r2, [pc, #304]	; (8002148 <HAL_GPIO_Init+0x32c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d007      	beq.n	800202a <HAL_GPIO_Init+0x20e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4b      	ldr	r2, [pc, #300]	; (800214c <HAL_GPIO_Init+0x330>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_GPIO_Init+0x20a>
 8002022:	2307      	movs	r3, #7
 8002024:	e00e      	b.n	8002044 <HAL_GPIO_Init+0x228>
 8002026:	2308      	movs	r3, #8
 8002028:	e00c      	b.n	8002044 <HAL_GPIO_Init+0x228>
 800202a:	2306      	movs	r3, #6
 800202c:	e00a      	b.n	8002044 <HAL_GPIO_Init+0x228>
 800202e:	2305      	movs	r3, #5
 8002030:	e008      	b.n	8002044 <HAL_GPIO_Init+0x228>
 8002032:	2304      	movs	r3, #4
 8002034:	e006      	b.n	8002044 <HAL_GPIO_Init+0x228>
 8002036:	2303      	movs	r3, #3
 8002038:	e004      	b.n	8002044 <HAL_GPIO_Init+0x228>
 800203a:	2302      	movs	r3, #2
 800203c:	e002      	b.n	8002044 <HAL_GPIO_Init+0x228>
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <HAL_GPIO_Init+0x228>
 8002042:	2300      	movs	r3, #0
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	f002 0203 	and.w	r2, r2, #3
 800204a:	0092      	lsls	r2, r2, #2
 800204c:	4093      	lsls	r3, r2
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002054:	4935      	ldr	r1, [pc, #212]	; (800212c <HAL_GPIO_Init+0x310>)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	089b      	lsrs	r3, r3, #2
 800205a:	3302      	adds	r3, #2
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002062:	4b3b      	ldr	r3, [pc, #236]	; (8002150 <HAL_GPIO_Init+0x334>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002086:	4a32      	ldr	r2, [pc, #200]	; (8002150 <HAL_GPIO_Init+0x334>)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800208c:	4b30      	ldr	r3, [pc, #192]	; (8002150 <HAL_GPIO_Init+0x334>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020b0:	4a27      	ldr	r2, [pc, #156]	; (8002150 <HAL_GPIO_Init+0x334>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <HAL_GPIO_Init+0x334>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020da:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <HAL_GPIO_Init+0x334>)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e0:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <HAL_GPIO_Init+0x334>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002104:	4a12      	ldr	r2, [pc, #72]	; (8002150 <HAL_GPIO_Init+0x334>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3301      	adds	r3, #1
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	2b0f      	cmp	r3, #15
 8002114:	f67f ae90 	bls.w	8001e38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3724      	adds	r7, #36	; 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800
 800212c:	40013800 	.word	0x40013800
 8002130:	40020000 	.word	0x40020000
 8002134:	40020400 	.word	0x40020400
 8002138:	40020800 	.word	0x40020800
 800213c:	40020c00 	.word	0x40020c00
 8002140:	40021000 	.word	0x40021000
 8002144:	40021400 	.word	0x40021400
 8002148:	40021800 	.word	0x40021800
 800214c:	40021c00 	.word	0x40021c00
 8002150:	40013c00 	.word	0x40013c00

08002154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
 8002160:	4613      	mov	r3, r2
 8002162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002164:	787b      	ldrb	r3, [r7, #1]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800216a:	887a      	ldrh	r2, [r7, #2]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002170:	e003      	b.n	800217a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002172:	887b      	ldrh	r3, [r7, #2]
 8002174:	041a      	lsls	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	619a      	str	r2, [r3, #24]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002186:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002188:	b08f      	sub	sp, #60	; 0x3c
 800218a:	af0a      	add	r7, sp, #40	; 0x28
 800218c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e054      	b.n	8002242 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d106      	bne.n	80021b8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f006 fcf2 	bl	8008b9c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2203      	movs	r2, #3
 80021bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 f9c5 	bl	8005566 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	603b      	str	r3, [r7, #0]
 80021e2:	687e      	ldr	r6, [r7, #4]
 80021e4:	466d      	mov	r5, sp
 80021e6:	f106 0410 	add.w	r4, r6, #16
 80021ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80021fa:	1d33      	adds	r3, r6, #4
 80021fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021fe:	6838      	ldr	r0, [r7, #0]
 8002200:	f003 f93f 	bl	8005482 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2101      	movs	r1, #1
 800220a:	4618      	mov	r0, r3
 800220c:	f003 f9bc 	bl	8005588 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	687e      	ldr	r6, [r7, #4]
 8002218:	466d      	mov	r5, sp
 800221a:	f106 0410 	add.w	r4, r6, #16
 800221e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002226:	e894 0003 	ldmia.w	r4, {r0, r1}
 800222a:	e885 0003 	stmia.w	r5, {r0, r1}
 800222e:	1d33      	adds	r3, r6, #4
 8002230:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002232:	6838      	ldr	r0, [r7, #0]
 8002234:	f003 fb22 	bl	800587c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800224a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800224a:	b590      	push	{r4, r7, lr}
 800224c:	b089      	sub	sp, #36	; 0x24
 800224e:	af04      	add	r7, sp, #16
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	4608      	mov	r0, r1
 8002254:	4611      	mov	r1, r2
 8002256:	461a      	mov	r2, r3
 8002258:	4603      	mov	r3, r0
 800225a:	70fb      	strb	r3, [r7, #3]
 800225c:	460b      	mov	r3, r1
 800225e:	70bb      	strb	r3, [r7, #2]
 8002260:	4613      	mov	r3, r2
 8002262:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_HCD_HC_Init+0x28>
 800226e:	2302      	movs	r3, #2
 8002270:	e076      	b.n	8002360 <HAL_HCD_HC_Init+0x116>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	333d      	adds	r3, #61	; 0x3d
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	212c      	movs	r1, #44	; 0x2c
 8002292:	fb01 f303 	mul.w	r3, r1, r3
 8002296:	4413      	add	r3, r2
 8002298:	3338      	adds	r3, #56	; 0x38
 800229a:	787a      	ldrb	r2, [r7, #1]
 800229c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	3340      	adds	r3, #64	; 0x40
 80022ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80022ae:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	3339      	adds	r3, #57	; 0x39
 80022be:	78fa      	ldrb	r2, [r7, #3]
 80022c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	212c      	movs	r1, #44	; 0x2c
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	333f      	adds	r3, #63	; 0x3f
 80022d0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80022d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	78ba      	ldrb	r2, [r7, #2]
 80022da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022de:	b2d0      	uxtb	r0, r2
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	212c      	movs	r1, #44	; 0x2c
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	333a      	adds	r3, #58	; 0x3a
 80022ec:	4602      	mov	r2, r0
 80022ee:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80022f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	da09      	bge.n	800230c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	212c      	movs	r1, #44	; 0x2c
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	4413      	add	r3, r2
 8002304:	333b      	adds	r3, #59	; 0x3b
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
 800230a:	e008      	b.n	800231e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	212c      	movs	r1, #44	; 0x2c
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	333b      	adds	r3, #59	; 0x3b
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	212c      	movs	r1, #44	; 0x2c
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	333c      	adds	r3, #60	; 0x3c
 800232c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002330:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	787c      	ldrb	r4, [r7, #1]
 8002338:	78ba      	ldrb	r2, [r7, #2]
 800233a:	78f9      	ldrb	r1, [r7, #3]
 800233c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800233e:	9302      	str	r3, [sp, #8]
 8002340:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002344:	9301      	str	r3, [sp, #4]
 8002346:	f897 3020 	ldrb.w	r3, [r7, #32]
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	4623      	mov	r3, r4
 800234e:	f003 fc0f 	bl	8005b70 <USB_HC_Init>
 8002352:	4603      	mov	r3, r0
 8002354:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800235e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	bd90      	pop	{r4, r7, pc}

08002368 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_HCD_HC_Halt+0x1e>
 8002382:	2302      	movs	r3, #2
 8002384:	e00f      	b.n	80023a6 <HAL_HCD_HC_Halt+0x3e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f003 fe4b 	bl	8006032 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	4608      	mov	r0, r1
 80023ba:	4611      	mov	r1, r2
 80023bc:	461a      	mov	r2, r3
 80023be:	4603      	mov	r3, r0
 80023c0:	70fb      	strb	r3, [r7, #3]
 80023c2:	460b      	mov	r3, r1
 80023c4:	70bb      	strb	r3, [r7, #2]
 80023c6:	4613      	mov	r3, r2
 80023c8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	212c      	movs	r1, #44	; 0x2c
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	333b      	adds	r3, #59	; 0x3b
 80023d8:	78ba      	ldrb	r2, [r7, #2]
 80023da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	212c      	movs	r1, #44	; 0x2c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	333f      	adds	r3, #63	; 0x3f
 80023ea:	787a      	ldrb	r2, [r7, #1]
 80023ec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80023ee:	7c3b      	ldrb	r3, [r7, #16]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d112      	bne.n	800241a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	212c      	movs	r1, #44	; 0x2c
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	3342      	adds	r3, #66	; 0x42
 8002402:	2203      	movs	r2, #3
 8002404:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	333d      	adds	r3, #61	; 0x3d
 8002414:	7f3a      	ldrb	r2, [r7, #28]
 8002416:	701a      	strb	r2, [r3, #0]
 8002418:	e008      	b.n	800242c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	212c      	movs	r1, #44	; 0x2c
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	3342      	adds	r3, #66	; 0x42
 8002428:	2202      	movs	r2, #2
 800242a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800242c:	787b      	ldrb	r3, [r7, #1]
 800242e:	2b03      	cmp	r3, #3
 8002430:	f200 80c6 	bhi.w	80025c0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002434:	a201      	add	r2, pc, #4	; (adr r2, 800243c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243a:	bf00      	nop
 800243c:	0800244d 	.word	0x0800244d
 8002440:	080025ad 	.word	0x080025ad
 8002444:	080024b1 	.word	0x080024b1
 8002448:	0800252f 	.word	0x0800252f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800244c:	7c3b      	ldrb	r3, [r7, #16]
 800244e:	2b01      	cmp	r3, #1
 8002450:	f040 80b8 	bne.w	80025c4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002454:	78bb      	ldrb	r3, [r7, #2]
 8002456:	2b00      	cmp	r3, #0
 8002458:	f040 80b4 	bne.w	80025c4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800245c:	8b3b      	ldrh	r3, [r7, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d108      	bne.n	8002474 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002462:	78fb      	ldrb	r3, [r7, #3]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	212c      	movs	r1, #44	; 0x2c
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	3355      	adds	r3, #85	; 0x55
 8002470:	2201      	movs	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3355      	adds	r3, #85	; 0x55
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d109      	bne.n	800249c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	3342      	adds	r3, #66	; 0x42
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800249a:	e093      	b.n	80025c4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	3342      	adds	r3, #66	; 0x42
 80024aa:	2202      	movs	r2, #2
 80024ac:	701a      	strb	r2, [r3, #0]
      break;
 80024ae:	e089      	b.n	80025c4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80024b0:	78bb      	ldrb	r3, [r7, #2]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d11d      	bne.n	80024f2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	212c      	movs	r1, #44	; 0x2c
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	3355      	adds	r3, #85	; 0x55
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	212c      	movs	r1, #44	; 0x2c
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	4413      	add	r3, r2
 80024d6:	3342      	adds	r3, #66	; 0x42
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80024dc:	e073      	b.n	80025c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	212c      	movs	r1, #44	; 0x2c
 80024e4:	fb01 f303 	mul.w	r3, r1, r3
 80024e8:	4413      	add	r3, r2
 80024ea:	3342      	adds	r3, #66	; 0x42
 80024ec:	2202      	movs	r2, #2
 80024ee:	701a      	strb	r2, [r3, #0]
      break;
 80024f0:	e069      	b.n	80025c6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	212c      	movs	r1, #44	; 0x2c
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	4413      	add	r3, r2
 80024fe:	3354      	adds	r3, #84	; 0x54
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d109      	bne.n	800251a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	3342      	adds	r3, #66	; 0x42
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
      break;
 8002518:	e055      	b.n	80025c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	212c      	movs	r1, #44	; 0x2c
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	4413      	add	r3, r2
 8002526:	3342      	adds	r3, #66	; 0x42
 8002528:	2202      	movs	r2, #2
 800252a:	701a      	strb	r2, [r3, #0]
      break;
 800252c:	e04b      	b.n	80025c6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800252e:	78bb      	ldrb	r3, [r7, #2]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d11d      	bne.n	8002570 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	212c      	movs	r1, #44	; 0x2c
 800253a:	fb01 f303 	mul.w	r3, r1, r3
 800253e:	4413      	add	r3, r2
 8002540:	3355      	adds	r3, #85	; 0x55
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	212c      	movs	r1, #44	; 0x2c
 800254e:	fb01 f303 	mul.w	r3, r1, r3
 8002552:	4413      	add	r3, r2
 8002554:	3342      	adds	r3, #66	; 0x42
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800255a:	e034      	b.n	80025c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	212c      	movs	r1, #44	; 0x2c
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	4413      	add	r3, r2
 8002568:	3342      	adds	r3, #66	; 0x42
 800256a:	2202      	movs	r2, #2
 800256c:	701a      	strb	r2, [r3, #0]
      break;
 800256e:	e02a      	b.n	80025c6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	212c      	movs	r1, #44	; 0x2c
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	4413      	add	r3, r2
 800257c:	3354      	adds	r3, #84	; 0x54
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d109      	bne.n	8002598 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	212c      	movs	r1, #44	; 0x2c
 800258a:	fb01 f303 	mul.w	r3, r1, r3
 800258e:	4413      	add	r3, r2
 8002590:	3342      	adds	r3, #66	; 0x42
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
      break;
 8002596:	e016      	b.n	80025c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	212c      	movs	r1, #44	; 0x2c
 800259e:	fb01 f303 	mul.w	r3, r1, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	3342      	adds	r3, #66	; 0x42
 80025a6:	2202      	movs	r2, #2
 80025a8:	701a      	strb	r2, [r3, #0]
      break;
 80025aa:	e00c      	b.n	80025c6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	212c      	movs	r1, #44	; 0x2c
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	3342      	adds	r3, #66	; 0x42
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
      break;
 80025be:	e002      	b.n	80025c6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80025c0:	bf00      	nop
 80025c2:	e000      	b.n	80025c6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80025c4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80025c6:	78fb      	ldrb	r3, [r7, #3]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	3344      	adds	r3, #68	; 0x44
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80025d8:	78fb      	ldrb	r3, [r7, #3]
 80025da:	8b3a      	ldrh	r2, [r7, #24]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	202c      	movs	r0, #44	; 0x2c
 80025e0:	fb00 f303 	mul.w	r3, r0, r3
 80025e4:	440b      	add	r3, r1
 80025e6:	334c      	adds	r3, #76	; 0x4c
 80025e8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80025ea:	78fb      	ldrb	r3, [r7, #3]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	212c      	movs	r1, #44	; 0x2c
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	4413      	add	r3, r2
 80025f6:	3360      	adds	r3, #96	; 0x60
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	212c      	movs	r1, #44	; 0x2c
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	4413      	add	r3, r2
 8002608:	3350      	adds	r3, #80	; 0x50
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	3339      	adds	r3, #57	; 0x39
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	212c      	movs	r1, #44	; 0x2c
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	4413      	add	r3, r2
 800262c:	3361      	adds	r3, #97	; 0x61
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	222c      	movs	r2, #44	; 0x2c
 800263a:	fb02 f303 	mul.w	r3, r2, r3
 800263e:	3338      	adds	r3, #56	; 0x38
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	18d1      	adds	r1, r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	f003 fb9e 	bl	8005d8c <USB_HC_StartXfer>
 8002650:	4603      	mov	r3, r0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop

0800265c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f003 f8c1 	bl	80057fa <USB_GetMode>
 8002678:	4603      	mov	r3, r0
 800267a:	2b01      	cmp	r3, #1
 800267c:	f040 80f6 	bne.w	800286c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f003 f8a5 	bl	80057d4 <USB_ReadInterrupts>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80ec 	beq.w	800286a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f003 f89c 	bl	80057d4 <USB_ReadInterrupts>
 800269c:	4603      	mov	r3, r0
 800269e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026a6:	d104      	bne.n	80026b2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80026b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 f88c 	bl	80057d4 <USB_ReadInterrupts>
 80026bc:	4603      	mov	r3, r0
 80026be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026c6:	d104      	bne.n	80026d2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 f87c 	bl	80057d4 <USB_ReadInterrupts>
 80026dc:	4603      	mov	r3, r0
 80026de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026e6:	d104      	bne.n	80026f2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80026f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f003 f86c 	bl	80057d4 <USB_ReadInterrupts>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b02      	cmp	r3, #2
 8002704:	d103      	bne.n	800270e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2202      	movs	r2, #2
 800270c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f003 f85e 	bl	80057d4 <USB_ReadInterrupts>
 8002718:	4603      	mov	r3, r0
 800271a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800271e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002722:	d11c      	bne.n	800275e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800272c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10f      	bne.n	800275e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800273e:	2110      	movs	r1, #16
 8002740:	6938      	ldr	r0, [r7, #16]
 8002742:	f002 ff6d 	bl	8005620 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002746:	6938      	ldr	r0, [r7, #16]
 8002748:	f002 ff8e 	bl	8005668 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2101      	movs	r1, #1
 8002752:	4618      	mov	r0, r3
 8002754:	f003 f946 	bl	80059e4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f006 fa9d 	bl	8008c98 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f003 f836 	bl	80057d4 <USB_ReadInterrupts>
 8002768:	4603      	mov	r3, r0
 800276a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800276e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002772:	d102      	bne.n	800277a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f001 fa03 	bl	8003b80 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f003 f828 	bl	80057d4 <USB_ReadInterrupts>
 8002784:	4603      	mov	r3, r0
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b08      	cmp	r3, #8
 800278c:	d106      	bne.n	800279c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f006 fa66 	bl	8008c60 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2208      	movs	r2, #8
 800279a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f003 f817 	bl	80057d4 <USB_ReadInterrupts>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b10      	cmp	r3, #16
 80027ae:	d101      	bne.n	80027b4 <HAL_HCD_IRQHandler+0x158>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <HAL_HCD_IRQHandler+0x15a>
 80027b4:	2300      	movs	r3, #0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d012      	beq.n	80027e0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699a      	ldr	r2, [r3, #24]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0210 	bic.w	r2, r2, #16
 80027c8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f001 f906 	bl	80039dc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699a      	ldr	r2, [r3, #24]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0210 	orr.w	r2, r2, #16
 80027de:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f002 fff5 	bl	80057d4 <USB_ReadInterrupts>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027f4:	d13a      	bne.n	800286c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f003 fc08 	bl	8006010 <USB_HC_ReadInterrupt>
 8002800:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	e025      	b.n	8002854 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d018      	beq.n	800284e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800282e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002832:	d106      	bne.n	8002842 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	4619      	mov	r1, r3
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f8ab 	bl	8002996 <HCD_HC_IN_IRQHandler>
 8002840:	e005      	b.n	800284e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	4619      	mov	r1, r3
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fcc6 	bl	80031da <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	3301      	adds	r3, #1
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	429a      	cmp	r2, r3
 800285c:	d3d4      	bcc.n	8002808 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002866:	615a      	str	r2, [r3, #20]
 8002868:	e000      	b.n	800286c <HAL_HCD_IRQHandler+0x210>
      return;
 800286a:	bf00      	nop
    }
  }
}
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_HCD_Start+0x16>
 8002884:	2302      	movs	r3, #2
 8002886:	e013      	b.n	80028b0 <HAL_HCD_Start+0x3e>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2101      	movs	r1, #1
 8002896:	4618      	mov	r0, r3
 8002898:	f003 f908 	bl	8005aac <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f002 fe4f 	bl	8005544 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_HCD_Stop+0x16>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e00d      	b.n	80028ea <HAL_HCD_Stop+0x32>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f003 fd02 	bl	80062e4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f003 f8aa 	bl	8005a58 <USB_ResetPort>
 8002904:	4603      	mov	r3, r0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	460b      	mov	r3, r1
 8002918:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800291a:	78fb      	ldrb	r3, [r7, #3]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	212c      	movs	r1, #44	; 0x2c
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	4413      	add	r3, r2
 8002926:	3360      	adds	r3, #96	; 0x60
 8002928:	781b      	ldrb	r3, [r3, #0]
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	212c      	movs	r1, #44	; 0x2c
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	3350      	adds	r3, #80	; 0x50
 8002950:	681b      	ldr	r3, [r3, #0]
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f003 f8ee 	bl	8005b4c <USB_GetCurrentFrame>
 8002970:	4603      	mov	r3, r0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f003 f8c9 	bl	8005b1e <USB_GetHostSpeed>
 800298c:	4603      	mov	r3, r0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b086      	sub	sp, #24
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	460b      	mov	r3, r1
 80029a0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d119      	bne.n	80029fa <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d2:	461a      	mov	r2, r3
 80029d4:	2304      	movs	r3, #4
 80029d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	0151      	lsls	r1, r2, #5
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	440a      	add	r2, r1
 80029ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029f2:	f043 0302 	orr.w	r3, r3, #2
 80029f6:	60d3      	str	r3, [r2, #12]
 80029f8:	e101      	b.n	8002bfe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a10:	d12b      	bne.n	8002a6a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	3361      	adds	r3, #97	; 0x61
 8002a34:	2207      	movs	r2, #7
 8002a36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	0151      	lsls	r1, r2, #5
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	440a      	add	r2, r1
 8002a4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a52:	f043 0302 	orr.w	r3, r3, #2
 8002a56:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f003 fae5 	bl	8006032 <USB_HC_Halt>
 8002a68:	e0c9      	b.n	8002bfe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d109      	bne.n	8002a94 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	2320      	movs	r3, #32
 8002a90:	6093      	str	r3, [r2, #8]
 8002a92:	e0b4      	b.n	8002bfe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d133      	bne.n	8002b12 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	0151      	lsls	r1, r2, #5
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	440a      	add	r2, r1
 8002ac0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ac4:	f043 0302 	orr.w	r3, r3, #2
 8002ac8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3361      	adds	r3, #97	; 0x61
 8002ad8:	2205      	movs	r2, #5
 8002ada:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2310      	movs	r3, #16
 8002aec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afa:	461a      	mov	r2, r3
 8002afc:	2308      	movs	r3, #8
 8002afe:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 fa91 	bl	8006032 <USB_HC_Halt>
 8002b10:	e075      	b.n	8002bfe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b28:	d134      	bne.n	8002b94 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	0151      	lsls	r1, r2, #5
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	440a      	add	r2, r1
 8002b40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b44:	f043 0302 	orr.w	r3, r3, #2
 8002b48:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	3361      	adds	r3, #97	; 0x61
 8002b58:	2208      	movs	r2, #8
 8002b5a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2310      	movs	r3, #16
 8002b6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b80:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f003 fa50 	bl	8006032 <USB_HC_Halt>
 8002b92:	e034      	b.n	8002bfe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba6:	2b80      	cmp	r3, #128	; 0x80
 8002ba8:	d129      	bne.n	8002bfe <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	0151      	lsls	r1, r2, #5
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	440a      	add	r2, r1
 8002bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bc4:	f043 0302 	orr.w	r3, r3, #2
 8002bc8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	212c      	movs	r1, #44	; 0x2c
 8002bd0:	fb01 f303 	mul.w	r3, r1, r3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3361      	adds	r3, #97	; 0x61
 8002bd8:	2206      	movs	r2, #6
 8002bda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f003 fa23 	bl	8006032 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c14:	d122      	bne.n	8002c5c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	0151      	lsls	r1, r2, #5
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	440a      	add	r2, r1
 8002c2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c30:	f043 0302 	orr.w	r3, r3, #2
 8002c34:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f003 f9f6 	bl	8006032 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c52:	461a      	mov	r2, r3
 8002c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c58:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002c5a:	e2ba      	b.n	80031d2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	f040 811b 	bne.w	8002eaa <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d019      	beq.n	8002cb0 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	212c      	movs	r1, #44	; 0x2c
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	3348      	adds	r3, #72	; 0x48
 8002c8a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	0159      	lsls	r1, r3, #5
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	440b      	add	r3, r1
 8002c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c9e:	1ad2      	subs	r2, r2, r3
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	202c      	movs	r0, #44	; 0x2c
 8002ca6:	fb00 f303 	mul.w	r3, r0, r3
 8002caa:	440b      	add	r3, r1
 8002cac:	3350      	adds	r3, #80	; 0x50
 8002cae:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3361      	adds	r3, #97	; 0x61
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	212c      	movs	r1, #44	; 0x2c
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	335c      	adds	r3, #92	; 0x5c
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	212c      	movs	r1, #44	; 0x2c
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	333f      	adds	r3, #63	; 0x3f
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	212c      	movs	r1, #44	; 0x2c
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	333f      	adds	r3, #63	; 0x3f
 8002d08:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d121      	bne.n	8002d52 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	0151      	lsls	r1, r2, #5
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	440a      	add	r2, r1
 8002d24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d28:	f043 0302 	orr.w	r3, r3, #2
 8002d2c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f003 f97a 	bl	8006032 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2310      	movs	r3, #16
 8002d4e:	6093      	str	r3, [r2, #8]
 8002d50:	e066      	b.n	8002e20 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	212c      	movs	r1, #44	; 0x2c
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	333f      	adds	r3, #63	; 0x3f
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d127      	bne.n	8002db6 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	0151      	lsls	r1, r2, #5
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	440a      	add	r2, r1
 8002d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d84:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	212c      	movs	r1, #44	; 0x2c
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	3360      	adds	r3, #96	; 0x60
 8002d94:	2201      	movs	r2, #1
 8002d96:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	b2d9      	uxtb	r1, r3
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	202c      	movs	r0, #44	; 0x2c
 8002da2:	fb00 f303 	mul.w	r3, r0, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3360      	adds	r3, #96	; 0x60
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f005 ff80 	bl	8008cb4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002db4:	e034      	b.n	8002e20 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	333f      	adds	r3, #63	; 0x3f
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d12a      	bne.n	8002e20 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3360      	adds	r3, #96	; 0x60
 8002dd8:	2201      	movs	r2, #1
 8002dda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	212c      	movs	r1, #44	; 0x2c
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	3354      	adds	r3, #84	; 0x54
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	f083 0301 	eor.w	r3, r3, #1
 8002df0:	b2d8      	uxtb	r0, r3
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3354      	adds	r3, #84	; 0x54
 8002e00:	4602      	mov	r2, r0
 8002e02:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	b2d9      	uxtb	r1, r3
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	202c      	movs	r0, #44	; 0x2c
 8002e0e:	fb00 f303 	mul.w	r3, r0, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	3360      	adds	r3, #96	; 0x60
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f005 ff4a 	bl	8008cb4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d12b      	bne.n	8002e80 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	212c      	movs	r1, #44	; 0x2c
 8002e2e:	fb01 f303 	mul.w	r3, r1, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	3348      	adds	r3, #72	; 0x48
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	202c      	movs	r0, #44	; 0x2c
 8002e3e:	fb00 f202 	mul.w	r2, r0, r2
 8002e42:	440a      	add	r2, r1
 8002e44:	3240      	adds	r2, #64	; 0x40
 8002e46:	8812      	ldrh	r2, [r2, #0]
 8002e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 81be 	beq.w	80031d2 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	3354      	adds	r3, #84	; 0x54
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	f083 0301 	eor.w	r3, r3, #1
 8002e6a:	b2d8      	uxtb	r0, r3
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	212c      	movs	r1, #44	; 0x2c
 8002e72:	fb01 f303 	mul.w	r3, r1, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	3354      	adds	r3, #84	; 0x54
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	701a      	strb	r2, [r3, #0]
}
 8002e7e:	e1a8      	b.n	80031d2 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	212c      	movs	r1, #44	; 0x2c
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3354      	adds	r3, #84	; 0x54
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	f083 0301 	eor.w	r3, r3, #1
 8002e94:	b2d8      	uxtb	r0, r3
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	212c      	movs	r1, #44	; 0x2c
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3354      	adds	r3, #84	; 0x54
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	701a      	strb	r2, [r3, #0]
}
 8002ea8:	e193      	b.n	80031d2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	f040 8106 	bne.w	80030ce <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	0151      	lsls	r1, r2, #5
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	440a      	add	r2, r1
 8002ed8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002edc:	f023 0302 	bic.w	r3, r3, #2
 8002ee0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	212c      	movs	r1, #44	; 0x2c
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	3361      	adds	r3, #97	; 0x61
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d109      	bne.n	8002f0a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	212c      	movs	r1, #44	; 0x2c
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	4413      	add	r3, r2
 8002f02:	3360      	adds	r3, #96	; 0x60
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	e0c9      	b.n	800309e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	212c      	movs	r1, #44	; 0x2c
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	4413      	add	r3, r2
 8002f16:	3361      	adds	r3, #97	; 0x61
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b05      	cmp	r3, #5
 8002f1c:	d109      	bne.n	8002f32 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	212c      	movs	r1, #44	; 0x2c
 8002f24:	fb01 f303 	mul.w	r3, r1, r3
 8002f28:	4413      	add	r3, r2
 8002f2a:	3360      	adds	r3, #96	; 0x60
 8002f2c:	2205      	movs	r2, #5
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	e0b5      	b.n	800309e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	212c      	movs	r1, #44	; 0x2c
 8002f38:	fb01 f303 	mul.w	r3, r1, r3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3361      	adds	r3, #97	; 0x61
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b06      	cmp	r3, #6
 8002f44:	d009      	beq.n	8002f5a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	3361      	adds	r3, #97	; 0x61
 8002f54:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d150      	bne.n	8002ffc <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	335c      	adds	r3, #92	; 0x5c
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	202c      	movs	r0, #44	; 0x2c
 8002f72:	fb00 f303 	mul.w	r3, r0, r3
 8002f76:	440b      	add	r3, r1
 8002f78:	335c      	adds	r3, #92	; 0x5c
 8002f7a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	212c      	movs	r1, #44	; 0x2c
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	335c      	adds	r3, #92	; 0x5c
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d912      	bls.n	8002fb6 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	212c      	movs	r1, #44	; 0x2c
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	335c      	adds	r3, #92	; 0x5c
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	212c      	movs	r1, #44	; 0x2c
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	4413      	add	r3, r2
 8002fae:	3360      	adds	r3, #96	; 0x60
 8002fb0:	2204      	movs	r2, #4
 8002fb2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fb4:	e073      	b.n	800309e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3360      	adds	r3, #96	; 0x60
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fde:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fe6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ffa:	e050      	b.n	800309e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	212c      	movs	r1, #44	; 0x2c
 8003002:	fb01 f303 	mul.w	r3, r1, r3
 8003006:	4413      	add	r3, r2
 8003008:	3361      	adds	r3, #97	; 0x61
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d122      	bne.n	8003056 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	212c      	movs	r1, #44	; 0x2c
 8003016:	fb01 f303 	mul.w	r3, r1, r3
 800301a:	4413      	add	r3, r2
 800301c:	3360      	adds	r3, #96	; 0x60
 800301e:	2202      	movs	r2, #2
 8003020:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4413      	add	r3, r2
 800302a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003038:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003040:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4413      	add	r3, r2
 800304a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304e:	461a      	mov	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	e023      	b.n	800309e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	3361      	adds	r3, #97	; 0x61
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b07      	cmp	r3, #7
 8003068:	d119      	bne.n	800309e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	335c      	adds	r3, #92	; 0x5c
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	202c      	movs	r0, #44	; 0x2c
 8003082:	fb00 f303 	mul.w	r3, r0, r3
 8003086:	440b      	add	r3, r1
 8003088:	335c      	adds	r3, #92	; 0x5c
 800308a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4413      	add	r3, r2
 8003098:	3360      	adds	r3, #96	; 0x60
 800309a:	2204      	movs	r2, #4
 800309c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030aa:	461a      	mov	r2, r3
 80030ac:	2302      	movs	r3, #2
 80030ae:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	b2d9      	uxtb	r1, r3
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	202c      	movs	r0, #44	; 0x2c
 80030ba:	fb00 f303 	mul.w	r3, r0, r3
 80030be:	4413      	add	r3, r2
 80030c0:	3360      	adds	r3, #96	; 0x60
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f005 fdf4 	bl	8008cb4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80030cc:	e081      	b.n	80031d2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	d176      	bne.n	80031d2 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	212c      	movs	r1, #44	; 0x2c
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	333f      	adds	r3, #63	; 0x3f
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d121      	bne.n	800313c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	212c      	movs	r1, #44	; 0x2c
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	335c      	adds	r3, #92	; 0x5c
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4413      	add	r3, r2
 8003112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	0151      	lsls	r1, r2, #5
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	440a      	add	r2, r1
 8003120:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003124:	f043 0302 	orr.w	r3, r3, #2
 8003128:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f002 ff7c 	bl	8006032 <USB_HC_Halt>
 800313a:	e041      	b.n	80031c0 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	212c      	movs	r1, #44	; 0x2c
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	4413      	add	r3, r2
 8003148:	333f      	adds	r3, #63	; 0x3f
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d009      	beq.n	8003164 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	212c      	movs	r1, #44	; 0x2c
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	4413      	add	r3, r2
 800315c:	333f      	adds	r3, #63	; 0x3f
 800315e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003160:	2b02      	cmp	r3, #2
 8003162:	d12d      	bne.n	80031c0 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	212c      	movs	r1, #44	; 0x2c
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	4413      	add	r3, r2
 8003170:	335c      	adds	r3, #92	; 0x5c
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d120      	bne.n	80031c0 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	212c      	movs	r1, #44	; 0x2c
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	4413      	add	r3, r2
 800318a:	3361      	adds	r3, #97	; 0x61
 800318c:	2203      	movs	r2, #3
 800318e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4413      	add	r3, r2
 8003198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	0151      	lsls	r1, r2, #5
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	440a      	add	r2, r1
 80031a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031aa:	f043 0302 	orr.w	r3, r3, #2
 80031ae:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	4611      	mov	r1, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f002 ff39 	bl	8006032 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031cc:	461a      	mov	r2, r3
 80031ce:	2310      	movs	r3, #16
 80031d0:	6093      	str	r3, [r2, #8]
}
 80031d2:	bf00      	nop
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b088      	sub	sp, #32
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	460b      	mov	r3, r1
 80031e4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	2b04      	cmp	r3, #4
 8003208:	d119      	bne.n	800323e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	015a      	lsls	r2, r3, #5
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	4413      	add	r3, r2
 8003212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003216:	461a      	mov	r2, r3
 8003218:	2304      	movs	r3, #4
 800321a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	4413      	add	r3, r2
 8003224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	0151      	lsls	r1, r2, #5
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	440a      	add	r2, r1
 8003232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003236:	f043 0302 	orr.w	r3, r3, #2
 800323a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800323c:	e3ca      	b.n	80039d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	4413      	add	r3, r2
 8003246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b20      	cmp	r3, #32
 8003252:	d13e      	bne.n	80032d2 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	4413      	add	r3, r2
 800325c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003260:	461a      	mov	r2, r3
 8003262:	2320      	movs	r3, #32
 8003264:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	212c      	movs	r1, #44	; 0x2c
 800326c:	fb01 f303 	mul.w	r3, r1, r3
 8003270:	4413      	add	r3, r2
 8003272:	333d      	adds	r3, #61	; 0x3d
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b01      	cmp	r3, #1
 8003278:	f040 83ac 	bne.w	80039d4 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	212c      	movs	r1, #44	; 0x2c
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	4413      	add	r3, r2
 8003288:	333d      	adds	r3, #61	; 0x3d
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	212c      	movs	r1, #44	; 0x2c
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	4413      	add	r3, r2
 800329a:	3360      	adds	r3, #96	; 0x60
 800329c:	2202      	movs	r2, #2
 800329e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	0151      	lsls	r1, r2, #5
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	440a      	add	r2, r1
 80032b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032ba:	f043 0302 	orr.w	r3, r3, #2
 80032be:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	4611      	mov	r1, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f002 feb1 	bl	8006032 <USB_HC_Halt>
}
 80032d0:	e380      	b.n	80039d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e8:	d122      	bne.n	8003330 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	0151      	lsls	r1, r2, #5
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	440a      	add	r2, r1
 8003300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003304:	f043 0302 	orr.w	r3, r3, #2
 8003308:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f002 fe8c 	bl	8006032 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	4413      	add	r3, r2
 8003322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003326:	461a      	mov	r2, r3
 8003328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800332c:	6093      	str	r3, [r2, #8]
}
 800332e:	e351      	b.n	80039d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b01      	cmp	r3, #1
 8003344:	d150      	bne.n	80033e8 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	212c      	movs	r1, #44	; 0x2c
 800334c:	fb01 f303 	mul.w	r3, r1, r3
 8003350:	4413      	add	r3, r2
 8003352:	335c      	adds	r3, #92	; 0x5c
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	4413      	add	r3, r2
 8003360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336a:	2b40      	cmp	r3, #64	; 0x40
 800336c:	d111      	bne.n	8003392 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	212c      	movs	r1, #44	; 0x2c
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	4413      	add	r3, r2
 800337a:	333d      	adds	r3, #61	; 0x3d
 800337c:	2201      	movs	r2, #1
 800337e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338c:	461a      	mov	r2, r3
 800338e:	2340      	movs	r3, #64	; 0x40
 8003390:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	4413      	add	r3, r2
 800339a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	0151      	lsls	r1, r2, #5
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	440a      	add	r2, r1
 80033a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033ac:	f043 0302 	orr.w	r3, r3, #2
 80033b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f002 fe38 	bl	8006032 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ce:	461a      	mov	r2, r3
 80033d0:	2301      	movs	r3, #1
 80033d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	3361      	adds	r3, #97	; 0x61
 80033e2:	2201      	movs	r2, #1
 80033e4:	701a      	strb	r2, [r3, #0]
}
 80033e6:	e2f5      	b.n	80039d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b40      	cmp	r3, #64	; 0x40
 80033fc:	d13c      	bne.n	8003478 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	212c      	movs	r1, #44	; 0x2c
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	4413      	add	r3, r2
 800340a:	3361      	adds	r3, #97	; 0x61
 800340c:	2204      	movs	r2, #4
 800340e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	212c      	movs	r1, #44	; 0x2c
 8003416:	fb01 f303 	mul.w	r3, r1, r3
 800341a:	4413      	add	r3, r2
 800341c:	333d      	adds	r3, #61	; 0x3d
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	212c      	movs	r1, #44	; 0x2c
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	4413      	add	r3, r2
 800342e:	335c      	adds	r3, #92	; 0x5c
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	4413      	add	r3, r2
 800343c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	0151      	lsls	r1, r2, #5
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	440a      	add	r2, r1
 800344a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800344e:	f043 0302 	orr.w	r3, r3, #2
 8003452:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	4611      	mov	r1, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f002 fde7 	bl	8006032 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	4413      	add	r3, r2
 800346c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003470:	461a      	mov	r2, r3
 8003472:	2340      	movs	r3, #64	; 0x40
 8003474:	6093      	str	r3, [r2, #8]
}
 8003476:	e2ad      	b.n	80039d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	4413      	add	r3, r2
 8003480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b08      	cmp	r3, #8
 800348c:	d12a      	bne.n	80034e4 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	4413      	add	r3, r2
 8003496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349a:	461a      	mov	r2, r3
 800349c:	2308      	movs	r3, #8
 800349e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	0151      	lsls	r1, r2, #5
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	440a      	add	r2, r1
 80034b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034ba:	f043 0302 	orr.w	r3, r3, #2
 80034be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f002 fdb1 	bl	8006032 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	212c      	movs	r1, #44	; 0x2c
 80034d6:	fb01 f303 	mul.w	r3, r1, r3
 80034da:	4413      	add	r3, r2
 80034dc:	3361      	adds	r3, #97	; 0x61
 80034de:	2205      	movs	r2, #5
 80034e0:	701a      	strb	r2, [r3, #0]
}
 80034e2:	e277      	b.n	80039d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 0310 	and.w	r3, r3, #16
 80034f6:	2b10      	cmp	r3, #16
 80034f8:	d150      	bne.n	800359c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	212c      	movs	r1, #44	; 0x2c
 8003500:	fb01 f303 	mul.w	r3, r1, r3
 8003504:	4413      	add	r3, r2
 8003506:	335c      	adds	r3, #92	; 0x5c
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	212c      	movs	r1, #44	; 0x2c
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	4413      	add	r3, r2
 8003518:	3361      	adds	r3, #97	; 0x61
 800351a:	2203      	movs	r2, #3
 800351c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	212c      	movs	r1, #44	; 0x2c
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	4413      	add	r3, r2
 800352a:	333d      	adds	r3, #61	; 0x3d
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d112      	bne.n	8003558 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	212c      	movs	r1, #44	; 0x2c
 8003538:	fb01 f303 	mul.w	r3, r1, r3
 800353c:	4413      	add	r3, r2
 800353e:	333c      	adds	r3, #60	; 0x3c
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d108      	bne.n	8003558 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	212c      	movs	r1, #44	; 0x2c
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	4413      	add	r3, r2
 8003552:	333d      	adds	r3, #61	; 0x3d
 8003554:	2201      	movs	r2, #1
 8003556:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	4413      	add	r3, r2
 8003560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	0151      	lsls	r1, r2, #5
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	440a      	add	r2, r1
 800356e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003572:	f043 0302 	orr.w	r3, r3, #2
 8003576:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	4611      	mov	r1, r2
 8003582:	4618      	mov	r0, r3
 8003584:	f002 fd55 	bl	8006032 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	4413      	add	r3, r2
 8003590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003594:	461a      	mov	r2, r3
 8003596:	2310      	movs	r3, #16
 8003598:	6093      	str	r3, [r2, #8]
}
 800359a:	e21b      	b.n	80039d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ae:	2b80      	cmp	r3, #128	; 0x80
 80035b0:	d174      	bne.n	800369c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d121      	bne.n	80035fe <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	212c      	movs	r1, #44	; 0x2c
 80035c0:	fb01 f303 	mul.w	r3, r1, r3
 80035c4:	4413      	add	r3, r2
 80035c6:	3361      	adds	r3, #97	; 0x61
 80035c8:	2206      	movs	r2, #6
 80035ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	0151      	lsls	r1, r2, #5
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	440a      	add	r2, r1
 80035e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035e6:	f043 0302 	orr.w	r3, r3, #2
 80035ea:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f002 fd1b 	bl	8006032 <USB_HC_Halt>
 80035fc:	e044      	b.n	8003688 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	212c      	movs	r1, #44	; 0x2c
 8003604:	fb01 f303 	mul.w	r3, r1, r3
 8003608:	4413      	add	r3, r2
 800360a:	335c      	adds	r3, #92	; 0x5c
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	202c      	movs	r0, #44	; 0x2c
 8003616:	fb00 f303 	mul.w	r3, r0, r3
 800361a:	440b      	add	r3, r1
 800361c:	335c      	adds	r3, #92	; 0x5c
 800361e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	212c      	movs	r1, #44	; 0x2c
 8003626:	fb01 f303 	mul.w	r3, r1, r3
 800362a:	4413      	add	r3, r2
 800362c:	335c      	adds	r3, #92	; 0x5c
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d920      	bls.n	8003676 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	4413      	add	r3, r2
 8003640:	335c      	adds	r3, #92	; 0x5c
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	212c      	movs	r1, #44	; 0x2c
 800364c:	fb01 f303 	mul.w	r3, r1, r3
 8003650:	4413      	add	r3, r2
 8003652:	3360      	adds	r3, #96	; 0x60
 8003654:	2204      	movs	r2, #4
 8003656:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	b2d9      	uxtb	r1, r3
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	202c      	movs	r0, #44	; 0x2c
 8003662:	fb00 f303 	mul.w	r3, r0, r3
 8003666:	4413      	add	r3, r2
 8003668:	3360      	adds	r3, #96	; 0x60
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f005 fb20 	bl	8008cb4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003674:	e008      	b.n	8003688 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	212c      	movs	r1, #44	; 0x2c
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	4413      	add	r3, r2
 8003682:	3360      	adds	r3, #96	; 0x60
 8003684:	2202      	movs	r2, #2
 8003686:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	4413      	add	r3, r2
 8003690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003694:	461a      	mov	r2, r3
 8003696:	2380      	movs	r3, #128	; 0x80
 8003698:	6093      	str	r3, [r2, #8]
}
 800369a:	e19b      	b.n	80039d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b2:	d134      	bne.n	800371e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	0151      	lsls	r1, r2, #5
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	440a      	add	r2, r1
 80036ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036ce:	f043 0302 	orr.w	r3, r3, #2
 80036d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	4611      	mov	r1, r2
 80036de:	4618      	mov	r0, r3
 80036e0:	f002 fca7 	bl	8006032 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f0:	461a      	mov	r2, r3
 80036f2:	2310      	movs	r3, #16
 80036f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003702:	461a      	mov	r2, r3
 8003704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003708:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	212c      	movs	r1, #44	; 0x2c
 8003710:	fb01 f303 	mul.w	r3, r1, r3
 8003714:	4413      	add	r3, r2
 8003716:	3361      	adds	r3, #97	; 0x61
 8003718:	2208      	movs	r2, #8
 800371a:	701a      	strb	r2, [r3, #0]
}
 800371c:	e15a      	b.n	80039d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	4413      	add	r3, r2
 8003726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b02      	cmp	r3, #2
 8003732:	f040 814f 	bne.w	80039d4 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	4413      	add	r3, r2
 800373e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	0151      	lsls	r1, r2, #5
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	440a      	add	r2, r1
 800374c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003750:	f023 0302 	bic.w	r3, r3, #2
 8003754:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	212c      	movs	r1, #44	; 0x2c
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	4413      	add	r3, r2
 8003762:	3361      	adds	r3, #97	; 0x61
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d17d      	bne.n	8003866 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	212c      	movs	r1, #44	; 0x2c
 8003770:	fb01 f303 	mul.w	r3, r1, r3
 8003774:	4413      	add	r3, r2
 8003776:	3360      	adds	r3, #96	; 0x60
 8003778:	2201      	movs	r2, #1
 800377a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	212c      	movs	r1, #44	; 0x2c
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	333f      	adds	r3, #63	; 0x3f
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d00a      	beq.n	80037a6 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	212c      	movs	r1, #44	; 0x2c
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	4413      	add	r3, r2
 800379c:	333f      	adds	r3, #63	; 0x3f
 800379e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	f040 8100 	bne.w	80039a6 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d113      	bne.n	80037d6 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	212c      	movs	r1, #44	; 0x2c
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	4413      	add	r3, r2
 80037ba:	3355      	adds	r3, #85	; 0x55
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	f083 0301 	eor.w	r3, r3, #1
 80037c2:	b2d8      	uxtb	r0, r3
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	212c      	movs	r1, #44	; 0x2c
 80037ca:	fb01 f303 	mul.w	r3, r1, r3
 80037ce:	4413      	add	r3, r2
 80037d0:	3355      	adds	r3, #85	; 0x55
 80037d2:	4602      	mov	r2, r0
 80037d4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	f040 80e3 	bne.w	80039a6 <HCD_HC_OUT_IRQHandler+0x7cc>
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	212c      	movs	r1, #44	; 0x2c
 80037e6:	fb01 f303 	mul.w	r3, r1, r3
 80037ea:	4413      	add	r3, r2
 80037ec:	334c      	adds	r3, #76	; 0x4c
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80d8 	beq.w	80039a6 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	212c      	movs	r1, #44	; 0x2c
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	4413      	add	r3, r2
 8003802:	334c      	adds	r3, #76	; 0x4c
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	202c      	movs	r0, #44	; 0x2c
 800380c:	fb00 f202 	mul.w	r2, r0, r2
 8003810:	440a      	add	r2, r1
 8003812:	3240      	adds	r2, #64	; 0x40
 8003814:	8812      	ldrh	r2, [r2, #0]
 8003816:	4413      	add	r3, r2
 8003818:	3b01      	subs	r3, #1
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	202c      	movs	r0, #44	; 0x2c
 8003820:	fb00 f202 	mul.w	r2, r0, r2
 8003824:	440a      	add	r2, r1
 8003826:	3240      	adds	r2, #64	; 0x40
 8003828:	8812      	ldrh	r2, [r2, #0]
 800382a:	fbb3 f3f2 	udiv	r3, r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 80b5 	beq.w	80039a6 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	212c      	movs	r1, #44	; 0x2c
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	4413      	add	r3, r2
 8003848:	3355      	adds	r3, #85	; 0x55
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	f083 0301 	eor.w	r3, r3, #1
 8003850:	b2d8      	uxtb	r0, r3
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	212c      	movs	r1, #44	; 0x2c
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	4413      	add	r3, r2
 800385e:	3355      	adds	r3, #85	; 0x55
 8003860:	4602      	mov	r2, r0
 8003862:	701a      	strb	r2, [r3, #0]
 8003864:	e09f      	b.n	80039a6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	212c      	movs	r1, #44	; 0x2c
 800386c:	fb01 f303 	mul.w	r3, r1, r3
 8003870:	4413      	add	r3, r2
 8003872:	3361      	adds	r3, #97	; 0x61
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b03      	cmp	r3, #3
 8003878:	d109      	bne.n	800388e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	212c      	movs	r1, #44	; 0x2c
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	4413      	add	r3, r2
 8003886:	3360      	adds	r3, #96	; 0x60
 8003888:	2202      	movs	r2, #2
 800388a:	701a      	strb	r2, [r3, #0]
 800388c:	e08b      	b.n	80039a6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	212c      	movs	r1, #44	; 0x2c
 8003894:	fb01 f303 	mul.w	r3, r1, r3
 8003898:	4413      	add	r3, r2
 800389a:	3361      	adds	r3, #97	; 0x61
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d109      	bne.n	80038b6 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	212c      	movs	r1, #44	; 0x2c
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	3360      	adds	r3, #96	; 0x60
 80038b0:	2202      	movs	r2, #2
 80038b2:	701a      	strb	r2, [r3, #0]
 80038b4:	e077      	b.n	80039a6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	212c      	movs	r1, #44	; 0x2c
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	4413      	add	r3, r2
 80038c2:	3361      	adds	r3, #97	; 0x61
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b05      	cmp	r3, #5
 80038c8:	d109      	bne.n	80038de <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	212c      	movs	r1, #44	; 0x2c
 80038d0:	fb01 f303 	mul.w	r3, r1, r3
 80038d4:	4413      	add	r3, r2
 80038d6:	3360      	adds	r3, #96	; 0x60
 80038d8:	2205      	movs	r2, #5
 80038da:	701a      	strb	r2, [r3, #0]
 80038dc:	e063      	b.n	80039a6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	212c      	movs	r1, #44	; 0x2c
 80038e4:	fb01 f303 	mul.w	r3, r1, r3
 80038e8:	4413      	add	r3, r2
 80038ea:	3361      	adds	r3, #97	; 0x61
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b06      	cmp	r3, #6
 80038f0:	d009      	beq.n	8003906 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	212c      	movs	r1, #44	; 0x2c
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	4413      	add	r3, r2
 80038fe:	3361      	adds	r3, #97	; 0x61
 8003900:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003902:	2b08      	cmp	r3, #8
 8003904:	d14f      	bne.n	80039a6 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	212c      	movs	r1, #44	; 0x2c
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	4413      	add	r3, r2
 8003912:	335c      	adds	r3, #92	; 0x5c
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	202c      	movs	r0, #44	; 0x2c
 800391e:	fb00 f303 	mul.w	r3, r0, r3
 8003922:	440b      	add	r3, r1
 8003924:	335c      	adds	r3, #92	; 0x5c
 8003926:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	212c      	movs	r1, #44	; 0x2c
 800392e:	fb01 f303 	mul.w	r3, r1, r3
 8003932:	4413      	add	r3, r2
 8003934:	335c      	adds	r3, #92	; 0x5c
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d912      	bls.n	8003962 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	212c      	movs	r1, #44	; 0x2c
 8003942:	fb01 f303 	mul.w	r3, r1, r3
 8003946:	4413      	add	r3, r2
 8003948:	335c      	adds	r3, #92	; 0x5c
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	212c      	movs	r1, #44	; 0x2c
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	4413      	add	r3, r2
 800395a:	3360      	adds	r3, #96	; 0x60
 800395c:	2204      	movs	r2, #4
 800395e:	701a      	strb	r2, [r3, #0]
 8003960:	e021      	b.n	80039a6 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	212c      	movs	r1, #44	; 0x2c
 8003968:	fb01 f303 	mul.w	r3, r1, r3
 800396c:	4413      	add	r3, r2
 800396e:	3360      	adds	r3, #96	; 0x60
 8003970:	2202      	movs	r2, #2
 8003972:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	4413      	add	r3, r2
 800397c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800398a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003992:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	4413      	add	r3, r2
 800399c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a0:	461a      	mov	r2, r3
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b2:	461a      	mov	r2, r3
 80039b4:	2302      	movs	r3, #2
 80039b6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	b2d9      	uxtb	r1, r3
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	202c      	movs	r0, #44	; 0x2c
 80039c2:	fb00 f303 	mul.w	r3, r0, r3
 80039c6:	4413      	add	r3, r2
 80039c8:	3360      	adds	r3, #96	; 0x60
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f005 f970 	bl	8008cb4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80039d4:	bf00      	nop
 80039d6:	3720      	adds	r7, #32
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08a      	sub	sp, #40	; 0x28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	0c5b      	lsrs	r3, r3, #17
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a10:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d004      	beq.n	8003a22 <HCD_RXQLVL_IRQHandler+0x46>
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2b05      	cmp	r3, #5
 8003a1c:	f000 80a9 	beq.w	8003b72 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003a20:	e0aa      	b.n	8003b78 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 80a6 	beq.w	8003b76 <HCD_RXQLVL_IRQHandler+0x19a>
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	212c      	movs	r1, #44	; 0x2c
 8003a30:	fb01 f303 	mul.w	r3, r1, r3
 8003a34:	4413      	add	r3, r2
 8003a36:	3344      	adds	r3, #68	; 0x44
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 809b 	beq.w	8003b76 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	212c      	movs	r1, #44	; 0x2c
 8003a46:	fb01 f303 	mul.w	r3, r1, r3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	3350      	adds	r3, #80	; 0x50
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	441a      	add	r2, r3
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	202c      	movs	r0, #44	; 0x2c
 8003a5a:	fb00 f303 	mul.w	r3, r0, r3
 8003a5e:	440b      	add	r3, r1
 8003a60:	334c      	adds	r3, #76	; 0x4c
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d87a      	bhi.n	8003b5e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	212c      	movs	r1, #44	; 0x2c
 8003a72:	fb01 f303 	mul.w	r3, r1, r3
 8003a76:	4413      	add	r3, r2
 8003a78:	3344      	adds	r3, #68	; 0x44
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	b292      	uxth	r2, r2
 8003a80:	4619      	mov	r1, r3
 8003a82:	f001 fe4f 	bl	8005724 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	212c      	movs	r1, #44	; 0x2c
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	3344      	adds	r3, #68	; 0x44
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	441a      	add	r2, r3
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	202c      	movs	r0, #44	; 0x2c
 8003aa0:	fb00 f303 	mul.w	r3, r0, r3
 8003aa4:	440b      	add	r3, r1
 8003aa6:	3344      	adds	r3, #68	; 0x44
 8003aa8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	212c      	movs	r1, #44	; 0x2c
 8003ab0:	fb01 f303 	mul.w	r3, r1, r3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3350      	adds	r3, #80	; 0x50
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	441a      	add	r2, r3
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	202c      	movs	r0, #44	; 0x2c
 8003ac4:	fb00 f303 	mul.w	r3, r0, r3
 8003ac8:	440b      	add	r3, r1
 8003aca:	3350      	adds	r3, #80	; 0x50
 8003acc:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	0cdb      	lsrs	r3, r3, #19
 8003ade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ae2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	212c      	movs	r1, #44	; 0x2c
 8003aea:	fb01 f303 	mul.w	r3, r1, r3
 8003aee:	4413      	add	r3, r2
 8003af0:	3340      	adds	r3, #64	; 0x40
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	461a      	mov	r2, r3
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d13c      	bne.n	8003b76 <HCD_RXQLVL_IRQHandler+0x19a>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d039      	beq.n	8003b76 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b18:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b20:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	212c      	movs	r1, #44	; 0x2c
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	4413      	add	r3, r2
 8003b40:	3354      	adds	r3, #84	; 0x54
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	f083 0301 	eor.w	r3, r3, #1
 8003b48:	b2d8      	uxtb	r0, r3
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	212c      	movs	r1, #44	; 0x2c
 8003b50:	fb01 f303 	mul.w	r3, r1, r3
 8003b54:	4413      	add	r3, r2
 8003b56:	3354      	adds	r3, #84	; 0x54
 8003b58:	4602      	mov	r2, r0
 8003b5a:	701a      	strb	r2, [r3, #0]
      break;
 8003b5c:	e00b      	b.n	8003b76 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	212c      	movs	r1, #44	; 0x2c
 8003b64:	fb01 f303 	mul.w	r3, r1, r3
 8003b68:	4413      	add	r3, r2
 8003b6a:	3360      	adds	r3, #96	; 0x60
 8003b6c:	2204      	movs	r2, #4
 8003b6e:	701a      	strb	r2, [r3, #0]
      break;
 8003b70:	e001      	b.n	8003b76 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003b72:	bf00      	nop
 8003b74:	e000      	b.n	8003b78 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003b76:	bf00      	nop
  }
}
 8003b78:	bf00      	nop
 8003b7a:	3728      	adds	r7, #40	; 0x28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003bac:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d10b      	bne.n	8003bd0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d102      	bne.n	8003bc8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f005 f85a 	bl	8008c7c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f043 0302 	orr.w	r3, r3, #2
 8003bce:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d132      	bne.n	8003c40 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f043 0308 	orr.w	r3, r3, #8
 8003be0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d126      	bne.n	8003c3a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d113      	bne.n	8003c1c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003bfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bfe:	d106      	bne.n	8003c0e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2102      	movs	r1, #2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f001 feec 	bl	80059e4 <USB_InitFSLSPClkSel>
 8003c0c:	e011      	b.n	8003c32 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2101      	movs	r1, #1
 8003c14:	4618      	mov	r0, r3
 8003c16:	f001 fee5 	bl	80059e4 <USB_InitFSLSPClkSel>
 8003c1a:	e00a      	b.n	8003c32 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d106      	bne.n	8003c32 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003c30:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f005 f84c 	bl	8008cd0 <HAL_HCD_PortEnabled_Callback>
 8003c38:	e002      	b.n	8003c40 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f005 f856 	bl	8008cec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	2b20      	cmp	r3, #32
 8003c48:	d103      	bne.n	8003c52 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f043 0320 	orr.w	r3, r3, #32
 8003c50:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c58:	461a      	mov	r2, r3
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	6013      	str	r3, [r2, #0]
}
 8003c5e:	bf00      	nop
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e12b      	b.n	8003ed2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd fd4a 	bl	8001728 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2224      	movs	r2, #36	; 0x24
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0201 	bic.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ccc:	f001 f9fc 	bl	80050c8 <HAL_RCC_GetPCLK1Freq>
 8003cd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4a81      	ldr	r2, [pc, #516]	; (8003edc <HAL_I2C_Init+0x274>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d807      	bhi.n	8003cec <HAL_I2C_Init+0x84>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4a80      	ldr	r2, [pc, #512]	; (8003ee0 <HAL_I2C_Init+0x278>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	bf94      	ite	ls
 8003ce4:	2301      	movls	r3, #1
 8003ce6:	2300      	movhi	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	e006      	b.n	8003cfa <HAL_I2C_Init+0x92>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4a7d      	ldr	r2, [pc, #500]	; (8003ee4 <HAL_I2C_Init+0x27c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	bf94      	ite	ls
 8003cf4:	2301      	movls	r3, #1
 8003cf6:	2300      	movhi	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e0e7      	b.n	8003ed2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4a78      	ldr	r2, [pc, #480]	; (8003ee8 <HAL_I2C_Init+0x280>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	0c9b      	lsrs	r3, r3, #18
 8003d0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4a6a      	ldr	r2, [pc, #424]	; (8003edc <HAL_I2C_Init+0x274>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d802      	bhi.n	8003d3c <HAL_I2C_Init+0xd4>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	e009      	b.n	8003d50 <HAL_I2C_Init+0xe8>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d42:	fb02 f303 	mul.w	r3, r2, r3
 8003d46:	4a69      	ldr	r2, [pc, #420]	; (8003eec <HAL_I2C_Init+0x284>)
 8003d48:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4c:	099b      	lsrs	r3, r3, #6
 8003d4e:	3301      	adds	r3, #1
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	430b      	orrs	r3, r1
 8003d56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	495c      	ldr	r1, [pc, #368]	; (8003edc <HAL_I2C_Init+0x274>)
 8003d6c:	428b      	cmp	r3, r1
 8003d6e:	d819      	bhi.n	8003da4 <HAL_I2C_Init+0x13c>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1e59      	subs	r1, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d7e:	1c59      	adds	r1, r3, #1
 8003d80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d84:	400b      	ands	r3, r1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <HAL_I2C_Init+0x138>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1e59      	subs	r1, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d98:	3301      	adds	r3, #1
 8003d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d9e:	e051      	b.n	8003e44 <HAL_I2C_Init+0x1dc>
 8003da0:	2304      	movs	r3, #4
 8003da2:	e04f      	b.n	8003e44 <HAL_I2C_Init+0x1dc>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d111      	bne.n	8003dd0 <HAL_I2C_Init+0x168>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	1e58      	subs	r0, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6859      	ldr	r1, [r3, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	440b      	add	r3, r1
 8003dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	e012      	b.n	8003df6 <HAL_I2C_Init+0x18e>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1e58      	subs	r0, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	0099      	lsls	r1, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de6:	3301      	adds	r3, #1
 8003de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bf0c      	ite	eq
 8003df0:	2301      	moveq	r3, #1
 8003df2:	2300      	movne	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_I2C_Init+0x196>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e022      	b.n	8003e44 <HAL_I2C_Init+0x1dc>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10e      	bne.n	8003e24 <HAL_I2C_Init+0x1bc>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1e58      	subs	r0, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6859      	ldr	r1, [r3, #4]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	440b      	add	r3, r1
 8003e14:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e18:	3301      	adds	r3, #1
 8003e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e22:	e00f      	b.n	8003e44 <HAL_I2C_Init+0x1dc>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	1e58      	subs	r0, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	0099      	lsls	r1, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	6809      	ldr	r1, [r1, #0]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69da      	ldr	r2, [r3, #28]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6911      	ldr	r1, [r2, #16]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	68d2      	ldr	r2, [r2, #12]
 8003e7e:	4311      	orrs	r1, r2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	430b      	orrs	r3, r1
 8003e86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	000186a0 	.word	0x000186a0
 8003ee0:	001e847f 	.word	0x001e847f
 8003ee4:	003d08ff 	.word	0x003d08ff
 8003ee8:	431bde83 	.word	0x431bde83
 8003eec:	10624dd3 	.word	0x10624dd3

08003ef0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e128      	b.n	8004154 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a90      	ldr	r2, [pc, #576]	; (800415c <HAL_I2S_Init+0x26c>)
 8003f1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7fd fc4b 	bl	80017b8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2202      	movs	r2, #2
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6812      	ldr	r2, [r2, #0]
 8003f34:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f38:	f023 030f 	bic.w	r3, r3, #15
 8003f3c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2202      	movs	r2, #2
 8003f44:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d060      	beq.n	8004010 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d102      	bne.n	8003f5c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003f56:	2310      	movs	r3, #16
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	e001      	b.n	8003f60 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003f5c:	2320      	movs	r3, #32
 8003f5e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d802      	bhi.n	8003f6e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003f6e:	2001      	movs	r0, #1
 8003f70:	f001 f9a0 	bl	80052b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f74:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f7e:	d125      	bne.n	8003fcc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d010      	beq.n	8003faa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	3305      	adds	r3, #5
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	e01f      	b.n	8003fea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc6:	3305      	adds	r3, #5
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	e00e      	b.n	8003fea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	461a      	mov	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe6:	3305      	adds	r3, #5
 8003fe8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4a5c      	ldr	r2, [pc, #368]	; (8004160 <HAL_I2S_Init+0x270>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	08db      	lsrs	r3, r3, #3
 8003ff4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	085b      	lsrs	r3, r3, #1
 8004006:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	e003      	b.n	8004018 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004010:	2302      	movs	r3, #2
 8004012:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d902      	bls.n	8004024 <HAL_I2S_Init+0x134>
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	2bff      	cmp	r3, #255	; 0xff
 8004022:	d907      	bls.n	8004034 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004028:	f043 0210 	orr.w	r2, r3, #16
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e08f      	b.n	8004154 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	ea42 0103 	orr.w	r1, r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	430a      	orrs	r2, r1
 8004046:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004052:	f023 030f 	bic.w	r3, r3, #15
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6851      	ldr	r1, [r2, #4]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6892      	ldr	r2, [r2, #8]
 800405e:	4311      	orrs	r1, r2
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	68d2      	ldr	r2, [r2, #12]
 8004064:	4311      	orrs	r1, r2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6992      	ldr	r2, [r2, #24]
 800406a:	430a      	orrs	r2, r1
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004076:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d161      	bne.n	8004144 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a38      	ldr	r2, [pc, #224]	; (8004164 <HAL_I2S_Init+0x274>)
 8004084:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a37      	ldr	r2, [pc, #220]	; (8004168 <HAL_I2S_Init+0x278>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d101      	bne.n	8004094 <HAL_I2S_Init+0x1a4>
 8004090:	4b36      	ldr	r3, [pc, #216]	; (800416c <HAL_I2S_Init+0x27c>)
 8004092:	e001      	b.n	8004098 <HAL_I2S_Init+0x1a8>
 8004094:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	4932      	ldr	r1, [pc, #200]	; (8004168 <HAL_I2S_Init+0x278>)
 80040a0:	428a      	cmp	r2, r1
 80040a2:	d101      	bne.n	80040a8 <HAL_I2S_Init+0x1b8>
 80040a4:	4a31      	ldr	r2, [pc, #196]	; (800416c <HAL_I2S_Init+0x27c>)
 80040a6:	e001      	b.n	80040ac <HAL_I2S_Init+0x1bc>
 80040a8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80040ac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80040b0:	f023 030f 	bic.w	r3, r3, #15
 80040b4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a2b      	ldr	r2, [pc, #172]	; (8004168 <HAL_I2S_Init+0x278>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d101      	bne.n	80040c4 <HAL_I2S_Init+0x1d4>
 80040c0:	4b2a      	ldr	r3, [pc, #168]	; (800416c <HAL_I2S_Init+0x27c>)
 80040c2:	e001      	b.n	80040c8 <HAL_I2S_Init+0x1d8>
 80040c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c8:	2202      	movs	r2, #2
 80040ca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a25      	ldr	r2, [pc, #148]	; (8004168 <HAL_I2S_Init+0x278>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d101      	bne.n	80040da <HAL_I2S_Init+0x1ea>
 80040d6:	4b25      	ldr	r3, [pc, #148]	; (800416c <HAL_I2S_Init+0x27c>)
 80040d8:	e001      	b.n	80040de <HAL_I2S_Init+0x1ee>
 80040da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ea:	d003      	beq.n	80040f4 <HAL_I2S_Init+0x204>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d103      	bne.n	80040fc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80040f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	e001      	b.n	8004100 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80040fc:	2300      	movs	r3, #0
 80040fe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800410a:	4313      	orrs	r3, r2
 800410c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004114:	4313      	orrs	r3, r2
 8004116:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800411e:	4313      	orrs	r3, r2
 8004120:	b29a      	uxth	r2, r3
 8004122:	897b      	ldrh	r3, [r7, #10]
 8004124:	4313      	orrs	r3, r2
 8004126:	b29b      	uxth	r3, r3
 8004128:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800412c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a0d      	ldr	r2, [pc, #52]	; (8004168 <HAL_I2S_Init+0x278>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d101      	bne.n	800413c <HAL_I2S_Init+0x24c>
 8004138:	4b0c      	ldr	r3, [pc, #48]	; (800416c <HAL_I2S_Init+0x27c>)
 800413a:	e001      	b.n	8004140 <HAL_I2S_Init+0x250>
 800413c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004140:	897a      	ldrh	r2, [r7, #10]
 8004142:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3720      	adds	r7, #32
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	08004267 	.word	0x08004267
 8004160:	cccccccd 	.word	0xcccccccd
 8004164:	0800437d 	.word	0x0800437d
 8004168:	40003800 	.word	0x40003800
 800416c:	40003400 	.word	0x40003400

08004170 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	881a      	ldrh	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	1c9a      	adds	r2, r3, #2
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10e      	bne.n	8004200 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041f0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff ffb8 	bl	8004170 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004200:	bf00      	nop
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421a:	b292      	uxth	r2, r2
 800421c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	1c9a      	adds	r2, r3, #2
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10e      	bne.n	800425e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800424e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff ff93 	bl	8004184 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b086      	sub	sp, #24
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b04      	cmp	r3, #4
 8004280:	d13a      	bne.n	80042f8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b01      	cmp	r3, #1
 800428a:	d109      	bne.n	80042a0 <I2S_IRQHandler+0x3a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	2b40      	cmp	r3, #64	; 0x40
 8004298:	d102      	bne.n	80042a0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff ffb4 	bl	8004208 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a6:	2b40      	cmp	r3, #64	; 0x40
 80042a8:	d126      	bne.n	80042f8 <I2S_IRQHandler+0x92>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d11f      	bne.n	80042f8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042c8:	2300      	movs	r3, #0
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	613b      	str	r3, [r7, #16]
 80042dc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	f043 0202 	orr.w	r2, r3, #2
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff ff50 	bl	8004198 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b03      	cmp	r3, #3
 8004302:	d136      	bne.n	8004372 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b02      	cmp	r3, #2
 800430c:	d109      	bne.n	8004322 <I2S_IRQHandler+0xbc>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004318:	2b80      	cmp	r3, #128	; 0x80
 800431a:	d102      	bne.n	8004322 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff ff45 	bl	80041ac <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b08      	cmp	r3, #8
 800432a:	d122      	bne.n	8004372 <I2S_IRQHandler+0x10c>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b20      	cmp	r3, #32
 8004338:	d11b      	bne.n	8004372 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004348:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004364:	f043 0204 	orr.w	r2, r3, #4
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff ff13 	bl	8004198 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004372:	bf00      	nop
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4aa2      	ldr	r2, [pc, #648]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d101      	bne.n	800439a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004396:	4ba2      	ldr	r3, [pc, #648]	; (8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004398:	e001      	b.n	800439e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800439a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a9b      	ldr	r2, [pc, #620]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d101      	bne.n	80043b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80043b4:	4b9a      	ldr	r3, [pc, #616]	; (8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043b6:	e001      	b.n	80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80043b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c8:	d004      	beq.n	80043d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f040 8099 	bne.w	8004506 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d107      	bne.n	80043ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f925 	bl	8004638 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d107      	bne.n	8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f9c8 	bl	8004798 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b40      	cmp	r3, #64	; 0x40
 8004410:	d13a      	bne.n	8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f003 0320 	and.w	r3, r3, #32
 8004418:	2b00      	cmp	r3, #0
 800441a:	d035      	beq.n	8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a7e      	ldr	r2, [pc, #504]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d101      	bne.n	800442a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004426:	4b7e      	ldr	r3, [pc, #504]	; (8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004428:	e001      	b.n	800442e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800442a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4979      	ldr	r1, [pc, #484]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004436:	428b      	cmp	r3, r1
 8004438:	d101      	bne.n	800443e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800443a:	4b79      	ldr	r3, [pc, #484]	; (8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800443c:	e001      	b.n	8004442 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800443e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004442:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004446:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004456:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447a:	f043 0202 	orr.w	r2, r3, #2
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff fe88 	bl	8004198 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b08      	cmp	r3, #8
 8004490:	f040 80be 	bne.w	8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 80b8 	beq.w	8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044ae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a59      	ldr	r2, [pc, #356]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d101      	bne.n	80044be <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80044ba:	4b59      	ldr	r3, [pc, #356]	; (8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044bc:	e001      	b.n	80044c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80044be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4954      	ldr	r1, [pc, #336]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044ca:	428b      	cmp	r3, r1
 80044cc:	d101      	bne.n	80044d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80044ce:	4b54      	ldr	r3, [pc, #336]	; (8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044d0:	e001      	b.n	80044d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80044d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044da:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80044dc:	2300      	movs	r3, #0
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	f043 0204 	orr.w	r2, r3, #4
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff fe4a 	bl	8004198 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004504:	e084      	b.n	8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b02      	cmp	r3, #2
 800450e:	d107      	bne.n	8004520 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f8be 	bl	800469c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b01      	cmp	r3, #1
 8004528:	d107      	bne.n	800453a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f8fd 	bl	8004734 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004540:	2b40      	cmp	r3, #64	; 0x40
 8004542:	d12f      	bne.n	80045a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d02a      	beq.n	80045a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800455c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a2e      	ldr	r2, [pc, #184]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d101      	bne.n	800456c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004568:	4b2d      	ldr	r3, [pc, #180]	; (8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800456a:	e001      	b.n	8004570 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800456c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4929      	ldr	r1, [pc, #164]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004578:	428b      	cmp	r3, r1
 800457a:	d101      	bne.n	8004580 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800457c:	4b28      	ldr	r3, [pc, #160]	; (8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800457e:	e001      	b.n	8004584 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004580:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004584:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004588:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	f043 0202 	orr.w	r2, r3, #2
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff fdfa 	bl	8004198 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d131      	bne.n	8004612 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d02c      	beq.n	8004612 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a17      	ldr	r2, [pc, #92]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d101      	bne.n	80045c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80045c2:	4b17      	ldr	r3, [pc, #92]	; (8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045c4:	e001      	b.n	80045ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80045c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4912      	ldr	r1, [pc, #72]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045d2:	428b      	cmp	r3, r1
 80045d4:	d101      	bne.n	80045da <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80045d6:	4b12      	ldr	r3, [pc, #72]	; (8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045d8:	e001      	b.n	80045de <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80045da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045f2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004600:	f043 0204 	orr.w	r2, r3, #4
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff fdc5 	bl	8004198 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800460e:	e000      	b.n	8004612 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004610:	bf00      	nop
}
 8004612:	bf00      	nop
 8004614:	3720      	adds	r7, #32
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40003800 	.word	0x40003800
 8004620:	40003400 	.word	0x40003400

08004624 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	1c99      	adds	r1, r3, #2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6251      	str	r1, [r2, #36]	; 0x24
 800464a:	881a      	ldrh	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d113      	bne.n	8004692 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004678:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d106      	bne.n	8004692 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff ffc9 	bl	8004624 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004692:	bf00      	nop
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	1c99      	adds	r1, r3, #2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6251      	str	r1, [r2, #36]	; 0x24
 80046ae:	8819      	ldrh	r1, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a1d      	ldr	r2, [pc, #116]	; (800472c <I2SEx_TxISR_I2SExt+0x90>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d101      	bne.n	80046be <I2SEx_TxISR_I2SExt+0x22>
 80046ba:	4b1d      	ldr	r3, [pc, #116]	; (8004730 <I2SEx_TxISR_I2SExt+0x94>)
 80046bc:	e001      	b.n	80046c2 <I2SEx_TxISR_I2SExt+0x26>
 80046be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046c2:	460a      	mov	r2, r1
 80046c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d8:	b29b      	uxth	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d121      	bne.n	8004722 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a12      	ldr	r2, [pc, #72]	; (800472c <I2SEx_TxISR_I2SExt+0x90>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d101      	bne.n	80046ec <I2SEx_TxISR_I2SExt+0x50>
 80046e8:	4b11      	ldr	r3, [pc, #68]	; (8004730 <I2SEx_TxISR_I2SExt+0x94>)
 80046ea:	e001      	b.n	80046f0 <I2SEx_TxISR_I2SExt+0x54>
 80046ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	490d      	ldr	r1, [pc, #52]	; (800472c <I2SEx_TxISR_I2SExt+0x90>)
 80046f8:	428b      	cmp	r3, r1
 80046fa:	d101      	bne.n	8004700 <I2SEx_TxISR_I2SExt+0x64>
 80046fc:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <I2SEx_TxISR_I2SExt+0x94>)
 80046fe:	e001      	b.n	8004704 <I2SEx_TxISR_I2SExt+0x68>
 8004700:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004704:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004708:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800470e:	b29b      	uxth	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d106      	bne.n	8004722 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7ff ff81 	bl	8004624 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004722:	bf00      	nop
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40003800 	.word	0x40003800
 8004730:	40003400 	.word	0x40003400

08004734 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68d8      	ldr	r0, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	1c99      	adds	r1, r3, #2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800474c:	b282      	uxth	r2, r0
 800474e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d113      	bne.n	8004790 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004776:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff ff4a 	bl	8004624 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a20      	ldr	r2, [pc, #128]	; (8004828 <I2SEx_RxISR_I2SExt+0x90>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d101      	bne.n	80047ae <I2SEx_RxISR_I2SExt+0x16>
 80047aa:	4b20      	ldr	r3, [pc, #128]	; (800482c <I2SEx_RxISR_I2SExt+0x94>)
 80047ac:	e001      	b.n	80047b2 <I2SEx_RxISR_I2SExt+0x1a>
 80047ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047b2:	68d8      	ldr	r0, [r3, #12]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	1c99      	adds	r1, r3, #2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80047be:	b282      	uxth	r2, r0
 80047c0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d121      	bne.n	800481e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a12      	ldr	r2, [pc, #72]	; (8004828 <I2SEx_RxISR_I2SExt+0x90>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d101      	bne.n	80047e8 <I2SEx_RxISR_I2SExt+0x50>
 80047e4:	4b11      	ldr	r3, [pc, #68]	; (800482c <I2SEx_RxISR_I2SExt+0x94>)
 80047e6:	e001      	b.n	80047ec <I2SEx_RxISR_I2SExt+0x54>
 80047e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	490d      	ldr	r1, [pc, #52]	; (8004828 <I2SEx_RxISR_I2SExt+0x90>)
 80047f4:	428b      	cmp	r3, r1
 80047f6:	d101      	bne.n	80047fc <I2SEx_RxISR_I2SExt+0x64>
 80047f8:	4b0c      	ldr	r3, [pc, #48]	; (800482c <I2SEx_RxISR_I2SExt+0x94>)
 80047fa:	e001      	b.n	8004800 <I2SEx_RxISR_I2SExt+0x68>
 80047fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004800:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004804:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480a:	b29b      	uxth	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d106      	bne.n	800481e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff ff03 	bl	8004624 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800481e:	bf00      	nop
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40003800 	.word	0x40003800
 800482c:	40003400 	.word	0x40003400

08004830 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e264      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d075      	beq.n	800493a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800484e:	4ba3      	ldr	r3, [pc, #652]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 030c 	and.w	r3, r3, #12
 8004856:	2b04      	cmp	r3, #4
 8004858:	d00c      	beq.n	8004874 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800485a:	4ba0      	ldr	r3, [pc, #640]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004862:	2b08      	cmp	r3, #8
 8004864:	d112      	bne.n	800488c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004866:	4b9d      	ldr	r3, [pc, #628]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800486e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004872:	d10b      	bne.n	800488c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004874:	4b99      	ldr	r3, [pc, #612]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d05b      	beq.n	8004938 <HAL_RCC_OscConfig+0x108>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d157      	bne.n	8004938 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e23f      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004894:	d106      	bne.n	80048a4 <HAL_RCC_OscConfig+0x74>
 8004896:	4b91      	ldr	r3, [pc, #580]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a90      	ldr	r2, [pc, #576]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 800489c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	e01d      	b.n	80048e0 <HAL_RCC_OscConfig+0xb0>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048ac:	d10c      	bne.n	80048c8 <HAL_RCC_OscConfig+0x98>
 80048ae:	4b8b      	ldr	r3, [pc, #556]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a8a      	ldr	r2, [pc, #552]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	4b88      	ldr	r3, [pc, #544]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a87      	ldr	r2, [pc, #540]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	e00b      	b.n	80048e0 <HAL_RCC_OscConfig+0xb0>
 80048c8:	4b84      	ldr	r3, [pc, #528]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a83      	ldr	r2, [pc, #524]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	4b81      	ldr	r3, [pc, #516]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a80      	ldr	r2, [pc, #512]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d013      	beq.n	8004910 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e8:	f7fd f93a 	bl	8001b60 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048f0:	f7fd f936 	bl	8001b60 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b64      	cmp	r3, #100	; 0x64
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e204      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004902:	4b76      	ldr	r3, [pc, #472]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0xc0>
 800490e:	e014      	b.n	800493a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004910:	f7fd f926 	bl	8001b60 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004918:	f7fd f922 	bl	8001b60 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b64      	cmp	r3, #100	; 0x64
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e1f0      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800492a:	4b6c      	ldr	r3, [pc, #432]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0xe8>
 8004936:	e000      	b.n	800493a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d063      	beq.n	8004a0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004946:	4b65      	ldr	r3, [pc, #404]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 030c 	and.w	r3, r3, #12
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00b      	beq.n	800496a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004952:	4b62      	ldr	r3, [pc, #392]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800495a:	2b08      	cmp	r3, #8
 800495c:	d11c      	bne.n	8004998 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800495e:	4b5f      	ldr	r3, [pc, #380]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d116      	bne.n	8004998 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800496a:	4b5c      	ldr	r3, [pc, #368]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <HAL_RCC_OscConfig+0x152>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d001      	beq.n	8004982 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e1c4      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004982:	4b56      	ldr	r3, [pc, #344]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	4952      	ldr	r1, [pc, #328]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004992:	4313      	orrs	r3, r2
 8004994:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004996:	e03a      	b.n	8004a0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d020      	beq.n	80049e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049a0:	4b4f      	ldr	r3, [pc, #316]	; (8004ae0 <HAL_RCC_OscConfig+0x2b0>)
 80049a2:	2201      	movs	r2, #1
 80049a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a6:	f7fd f8db 	bl	8001b60 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ae:	f7fd f8d7 	bl	8001b60 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e1a5      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c0:	4b46      	ldr	r3, [pc, #280]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f0      	beq.n	80049ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049cc:	4b43      	ldr	r3, [pc, #268]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4940      	ldr	r1, [pc, #256]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	600b      	str	r3, [r1, #0]
 80049e0:	e015      	b.n	8004a0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049e2:	4b3f      	ldr	r3, [pc, #252]	; (8004ae0 <HAL_RCC_OscConfig+0x2b0>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fd f8ba 	bl	8001b60 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049f0:	f7fd f8b6 	bl	8001b60 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e184      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a02:	4b36      	ldr	r3, [pc, #216]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f0      	bne.n	80049f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d030      	beq.n	8004a7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d016      	beq.n	8004a50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a22:	4b30      	ldr	r3, [pc, #192]	; (8004ae4 <HAL_RCC_OscConfig+0x2b4>)
 8004a24:	2201      	movs	r2, #1
 8004a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a28:	f7fd f89a 	bl	8001b60 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a30:	f7fd f896 	bl	8001b60 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e164      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a42:	4b26      	ldr	r3, [pc, #152]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCC_OscConfig+0x200>
 8004a4e:	e015      	b.n	8004a7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a50:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <HAL_RCC_OscConfig+0x2b4>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a56:	f7fd f883 	bl	8001b60 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a5e:	f7fd f87f 	bl	8001b60 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e14d      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a70:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f0      	bne.n	8004a5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80a0 	beq.w	8004bca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a8e:	4b13      	ldr	r3, [pc, #76]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10f      	bne.n	8004aba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	4a0e      	ldr	r2, [pc, #56]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8004aaa:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aba:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <HAL_RCC_OscConfig+0x2b8>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d121      	bne.n	8004b0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ac6:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <HAL_RCC_OscConfig+0x2b8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a07      	ldr	r2, [pc, #28]	; (8004ae8 <HAL_RCC_OscConfig+0x2b8>)
 8004acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ad2:	f7fd f845 	bl	8001b60 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad8:	e011      	b.n	8004afe <HAL_RCC_OscConfig+0x2ce>
 8004ada:	bf00      	nop
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	42470000 	.word	0x42470000
 8004ae4:	42470e80 	.word	0x42470e80
 8004ae8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aec:	f7fd f838 	bl	8001b60 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e106      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004afe:	4b85      	ldr	r3, [pc, #532]	; (8004d14 <HAL_RCC_OscConfig+0x4e4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d106      	bne.n	8004b20 <HAL_RCC_OscConfig+0x2f0>
 8004b12:	4b81      	ldr	r3, [pc, #516]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	4a80      	ldr	r2, [pc, #512]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b1e:	e01c      	b.n	8004b5a <HAL_RCC_OscConfig+0x32a>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2b05      	cmp	r3, #5
 8004b26:	d10c      	bne.n	8004b42 <HAL_RCC_OscConfig+0x312>
 8004b28:	4b7b      	ldr	r3, [pc, #492]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2c:	4a7a      	ldr	r2, [pc, #488]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b2e:	f043 0304 	orr.w	r3, r3, #4
 8004b32:	6713      	str	r3, [r2, #112]	; 0x70
 8004b34:	4b78      	ldr	r3, [pc, #480]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b38:	4a77      	ldr	r2, [pc, #476]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b3a:	f043 0301 	orr.w	r3, r3, #1
 8004b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b40:	e00b      	b.n	8004b5a <HAL_RCC_OscConfig+0x32a>
 8004b42:	4b75      	ldr	r3, [pc, #468]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b46:	4a74      	ldr	r2, [pc, #464]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b48:	f023 0301 	bic.w	r3, r3, #1
 8004b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b4e:	4b72      	ldr	r3, [pc, #456]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b52:	4a71      	ldr	r2, [pc, #452]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b54:	f023 0304 	bic.w	r3, r3, #4
 8004b58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d015      	beq.n	8004b8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b62:	f7fc fffd 	bl	8001b60 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b68:	e00a      	b.n	8004b80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b6a:	f7fc fff9 	bl	8001b60 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e0c5      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b80:	4b65      	ldr	r3, [pc, #404]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0ee      	beq.n	8004b6a <HAL_RCC_OscConfig+0x33a>
 8004b8c:	e014      	b.n	8004bb8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b8e:	f7fc ffe7 	bl	8001b60 <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b94:	e00a      	b.n	8004bac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b96:	f7fc ffe3 	bl	8001b60 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e0af      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bac:	4b5a      	ldr	r3, [pc, #360]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1ee      	bne.n	8004b96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bb8:	7dfb      	ldrb	r3, [r7, #23]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d105      	bne.n	8004bca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bbe:	4b56      	ldr	r3, [pc, #344]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	4a55      	ldr	r2, [pc, #340]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 809b 	beq.w	8004d0a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bd4:	4b50      	ldr	r3, [pc, #320]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 030c 	and.w	r3, r3, #12
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d05c      	beq.n	8004c9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d141      	bne.n	8004c6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be8:	4b4c      	ldr	r3, [pc, #304]	; (8004d1c <HAL_RCC_OscConfig+0x4ec>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bee:	f7fc ffb7 	bl	8001b60 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bf6:	f7fc ffb3 	bl	8001b60 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e081      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c08:	4b43      	ldr	r3, [pc, #268]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f0      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69da      	ldr	r2, [r3, #28]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	019b      	lsls	r3, r3, #6
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2a:	085b      	lsrs	r3, r3, #1
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	041b      	lsls	r3, r3, #16
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	061b      	lsls	r3, r3, #24
 8004c38:	4937      	ldr	r1, [pc, #220]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c3e:	4b37      	ldr	r3, [pc, #220]	; (8004d1c <HAL_RCC_OscConfig+0x4ec>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c44:	f7fc ff8c 	bl	8001b60 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c4c:	f7fc ff88 	bl	8001b60 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e056      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c5e:	4b2e      	ldr	r3, [pc, #184]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0f0      	beq.n	8004c4c <HAL_RCC_OscConfig+0x41c>
 8004c6a:	e04e      	b.n	8004d0a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c6c:	4b2b      	ldr	r3, [pc, #172]	; (8004d1c <HAL_RCC_OscConfig+0x4ec>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c72:	f7fc ff75 	bl	8001b60 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c7a:	f7fc ff71 	bl	8001b60 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e03f      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c8c:	4b22      	ldr	r3, [pc, #136]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1f0      	bne.n	8004c7a <HAL_RCC_OscConfig+0x44a>
 8004c98:	e037      	b.n	8004d0a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e032      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ca6:	4b1c      	ldr	r3, [pc, #112]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d028      	beq.n	8004d06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d121      	bne.n	8004d06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d11a      	bne.n	8004d06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cdc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d111      	bne.n	8004d06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	085b      	lsrs	r3, r3, #1
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d107      	bne.n	8004d06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d001      	beq.n	8004d0a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40007000 	.word	0x40007000
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	42470060 	.word	0x42470060

08004d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e0cc      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d34:	4b68      	ldr	r3, [pc, #416]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d90c      	bls.n	8004d5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d42:	4b65      	ldr	r3, [pc, #404]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d4a:	4b63      	ldr	r3, [pc, #396]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d001      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e0b8      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d020      	beq.n	8004daa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d74:	4b59      	ldr	r3, [pc, #356]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	4a58      	ldr	r2, [pc, #352]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d8c:	4b53      	ldr	r3, [pc, #332]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	4a52      	ldr	r2, [pc, #328]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004d92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d98:	4b50      	ldr	r3, [pc, #320]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	494d      	ldr	r1, [pc, #308]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d044      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d107      	bne.n	8004dce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dbe:	4b47      	ldr	r3, [pc, #284]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d119      	bne.n	8004dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e07f      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d003      	beq.n	8004dde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d107      	bne.n	8004dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dde:	4b3f      	ldr	r3, [pc, #252]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d109      	bne.n	8004dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e06f      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dee:	4b3b      	ldr	r3, [pc, #236]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e067      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dfe:	4b37      	ldr	r3, [pc, #220]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f023 0203 	bic.w	r2, r3, #3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	4934      	ldr	r1, [pc, #208]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e10:	f7fc fea6 	bl	8001b60 <HAL_GetTick>
 8004e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e16:	e00a      	b.n	8004e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e18:	f7fc fea2 	bl	8001b60 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e04f      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2e:	4b2b      	ldr	r3, [pc, #172]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 020c 	and.w	r2, r3, #12
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d1eb      	bne.n	8004e18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e40:	4b25      	ldr	r3, [pc, #148]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d20c      	bcs.n	8004e68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4e:	4b22      	ldr	r3, [pc, #136]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e56:	4b20      	ldr	r3, [pc, #128]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d001      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e032      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d008      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e74:	4b19      	ldr	r3, [pc, #100]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	4916      	ldr	r1, [pc, #88]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e92:	4b12      	ldr	r3, [pc, #72]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	490e      	ldr	r1, [pc, #56]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ea6:	f000 f821 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	4b0b      	ldr	r3, [pc, #44]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	091b      	lsrs	r3, r3, #4
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	490a      	ldr	r1, [pc, #40]	; (8004ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8004eb8:	5ccb      	ldrb	r3, [r1, r3]
 8004eba:	fa22 f303 	lsr.w	r3, r2, r3
 8004ebe:	4a09      	ldr	r2, [pc, #36]	; (8004ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ec2:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fc fe06 	bl	8001ad8 <HAL_InitTick>

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40023c00 	.word	0x40023c00
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	08021e28 	.word	0x08021e28
 8004ee4:	20000000 	.word	0x20000000
 8004ee8:	20000004 	.word	0x20000004

08004eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	607b      	str	r3, [r7, #4]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	2300      	movs	r3, #0
 8004efe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f04:	4b67      	ldr	r3, [pc, #412]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 030c 	and.w	r3, r3, #12
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d00d      	beq.n	8004f2c <HAL_RCC_GetSysClockFreq+0x40>
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	f200 80bd 	bhi.w	8005090 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <HAL_RCC_GetSysClockFreq+0x34>
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d003      	beq.n	8004f26 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f1e:	e0b7      	b.n	8005090 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f20:	4b61      	ldr	r3, [pc, #388]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f22:	60bb      	str	r3, [r7, #8]
       break;
 8004f24:	e0b7      	b.n	8005096 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f26:	4b61      	ldr	r3, [pc, #388]	; (80050ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004f28:	60bb      	str	r3, [r7, #8]
      break;
 8004f2a:	e0b4      	b.n	8005096 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f2c:	4b5d      	ldr	r3, [pc, #372]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f36:	4b5b      	ldr	r3, [pc, #364]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d04d      	beq.n	8004fde <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f42:	4b58      	ldr	r3, [pc, #352]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	099b      	lsrs	r3, r3, #6
 8004f48:	461a      	mov	r2, r3
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f52:	f04f 0100 	mov.w	r1, #0
 8004f56:	ea02 0800 	and.w	r8, r2, r0
 8004f5a:	ea03 0901 	and.w	r9, r3, r1
 8004f5e:	4640      	mov	r0, r8
 8004f60:	4649      	mov	r1, r9
 8004f62:	f04f 0200 	mov.w	r2, #0
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	014b      	lsls	r3, r1, #5
 8004f6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f70:	0142      	lsls	r2, r0, #5
 8004f72:	4610      	mov	r0, r2
 8004f74:	4619      	mov	r1, r3
 8004f76:	ebb0 0008 	subs.w	r0, r0, r8
 8004f7a:	eb61 0109 	sbc.w	r1, r1, r9
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	f04f 0300 	mov.w	r3, #0
 8004f86:	018b      	lsls	r3, r1, #6
 8004f88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f8c:	0182      	lsls	r2, r0, #6
 8004f8e:	1a12      	subs	r2, r2, r0
 8004f90:	eb63 0301 	sbc.w	r3, r3, r1
 8004f94:	f04f 0000 	mov.w	r0, #0
 8004f98:	f04f 0100 	mov.w	r1, #0
 8004f9c:	00d9      	lsls	r1, r3, #3
 8004f9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fa2:	00d0      	lsls	r0, r2, #3
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	eb12 0208 	adds.w	r2, r2, r8
 8004fac:	eb43 0309 	adc.w	r3, r3, r9
 8004fb0:	f04f 0000 	mov.w	r0, #0
 8004fb4:	f04f 0100 	mov.w	r1, #0
 8004fb8:	0259      	lsls	r1, r3, #9
 8004fba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004fbe:	0250      	lsls	r0, r2, #9
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	f7fb fe3a 	bl	8000c48 <__aeabi_uldivmod>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4613      	mov	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	e04a      	b.n	8005074 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fde:	4b31      	ldr	r3, [pc, #196]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	099b      	lsrs	r3, r3, #6
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	f04f 0300 	mov.w	r3, #0
 8004fea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004fee:	f04f 0100 	mov.w	r1, #0
 8004ff2:	ea02 0400 	and.w	r4, r2, r0
 8004ff6:	ea03 0501 	and.w	r5, r3, r1
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	014b      	lsls	r3, r1, #5
 8005008:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800500c:	0142      	lsls	r2, r0, #5
 800500e:	4610      	mov	r0, r2
 8005010:	4619      	mov	r1, r3
 8005012:	1b00      	subs	r0, r0, r4
 8005014:	eb61 0105 	sbc.w	r1, r1, r5
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	018b      	lsls	r3, r1, #6
 8005022:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005026:	0182      	lsls	r2, r0, #6
 8005028:	1a12      	subs	r2, r2, r0
 800502a:	eb63 0301 	sbc.w	r3, r3, r1
 800502e:	f04f 0000 	mov.w	r0, #0
 8005032:	f04f 0100 	mov.w	r1, #0
 8005036:	00d9      	lsls	r1, r3, #3
 8005038:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800503c:	00d0      	lsls	r0, r2, #3
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	1912      	adds	r2, r2, r4
 8005044:	eb45 0303 	adc.w	r3, r5, r3
 8005048:	f04f 0000 	mov.w	r0, #0
 800504c:	f04f 0100 	mov.w	r1, #0
 8005050:	0299      	lsls	r1, r3, #10
 8005052:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005056:	0290      	lsls	r0, r2, #10
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4610      	mov	r0, r2
 800505e:	4619      	mov	r1, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	461a      	mov	r2, r3
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	f7fb fdee 	bl	8000c48 <__aeabi_uldivmod>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4613      	mov	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005074:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	0c1b      	lsrs	r3, r3, #16
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	3301      	adds	r3, #1
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	fbb2 f3f3 	udiv	r3, r2, r3
 800508c:	60bb      	str	r3, [r7, #8]
      break;
 800508e:	e002      	b.n	8005096 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005092:	60bb      	str	r3, [r7, #8]
      break;
 8005094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005096:	68bb      	ldr	r3, [r7, #8]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80050a2:	bf00      	nop
 80050a4:	40023800 	.word	0x40023800
 80050a8:	00f42400 	.word	0x00f42400
 80050ac:	007a1200 	.word	0x007a1200

080050b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050b4:	4b03      	ldr	r3, [pc, #12]	; (80050c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050b6:	681b      	ldr	r3, [r3, #0]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	20000000 	.word	0x20000000

080050c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050cc:	f7ff fff0 	bl	80050b0 <HAL_RCC_GetHCLKFreq>
 80050d0:	4602      	mov	r2, r0
 80050d2:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	0a9b      	lsrs	r3, r3, #10
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	4903      	ldr	r1, [pc, #12]	; (80050ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80050de:	5ccb      	ldrb	r3, [r1, r3]
 80050e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40023800 	.word	0x40023800
 80050ec:	08021e38 	.word	0x08021e38

080050f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d105      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005114:	2b00      	cmp	r3, #0
 8005116:	d035      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005118:	4b62      	ldr	r3, [pc, #392]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800511e:	f7fc fd1f 	bl	8001b60 <HAL_GetTick>
 8005122:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005124:	e008      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005126:	f7fc fd1b 	bl	8001b60 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e0b0      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005138:	4b5b      	ldr	r3, [pc, #364]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1f0      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	019a      	lsls	r2, r3, #6
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	071b      	lsls	r3, r3, #28
 8005150:	4955      	ldr	r1, [pc, #340]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005158:	4b52      	ldr	r3, [pc, #328]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800515a:	2201      	movs	r2, #1
 800515c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800515e:	f7fc fcff 	bl	8001b60 <HAL_GetTick>
 8005162:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005164:	e008      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005166:	f7fc fcfb 	bl	8001b60 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e090      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005178:	4b4b      	ldr	r3, [pc, #300]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0f0      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 8083 	beq.w	8005298 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	4b44      	ldr	r3, [pc, #272]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	4a43      	ldr	r2, [pc, #268]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800519c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a0:	6413      	str	r3, [r2, #64]	; 0x40
 80051a2:	4b41      	ldr	r3, [pc, #260]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80051ae:	4b3f      	ldr	r3, [pc, #252]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a3e      	ldr	r2, [pc, #248]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051ba:	f7fc fcd1 	bl	8001b60 <HAL_GetTick>
 80051be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051c0:	e008      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80051c2:	f7fc fccd 	bl	8001b60 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e062      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051d4:	4b35      	ldr	r3, [pc, #212]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0f0      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051e0:	4b31      	ldr	r3, [pc, #196]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d02f      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d028      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051fe:	4b2a      	ldr	r3, [pc, #168]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005206:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005208:	4b29      	ldr	r3, [pc, #164]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800520a:	2201      	movs	r2, #1
 800520c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800520e:	4b28      	ldr	r3, [pc, #160]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005214:	4a24      	ldr	r2, [pc, #144]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800521a:	4b23      	ldr	r3, [pc, #140]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800521c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b01      	cmp	r3, #1
 8005224:	d114      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005226:	f7fc fc9b 	bl	8001b60 <HAL_GetTick>
 800522a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800522c:	e00a      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800522e:	f7fc fc97 	bl	8001b60 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	f241 3288 	movw	r2, #5000	; 0x1388
 800523c:	4293      	cmp	r3, r2
 800523e:	d901      	bls.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e02a      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005244:	4b18      	ldr	r3, [pc, #96]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0ee      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005258:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800525c:	d10d      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800525e:	4b12      	ldr	r3, [pc, #72]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800526e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005272:	490d      	ldr	r1, [pc, #52]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005274:	4313      	orrs	r3, r2
 8005276:	608b      	str	r3, [r1, #8]
 8005278:	e005      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800527a:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	4a0a      	ldr	r2, [pc, #40]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005280:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005284:	6093      	str	r3, [r2, #8]
 8005286:	4b08      	ldr	r3, [pc, #32]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005288:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005292:	4905      	ldr	r1, [pc, #20]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005294:	4313      	orrs	r3, r2
 8005296:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	42470068 	.word	0x42470068
 80052a8:	40023800 	.word	0x40023800
 80052ac:	40007000 	.word	0x40007000
 80052b0:	42470e40 	.word	0x42470e40

080052b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d13e      	bne.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80052d2:	4b23      	ldr	r3, [pc, #140]	; (8005360 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d005      	beq.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d12f      	bne.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80052e8:	4b1e      	ldr	r3, [pc, #120]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80052ea:	617b      	str	r3, [r7, #20]
          break;
 80052ec:	e02f      	b.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80052ee:	4b1c      	ldr	r3, [pc, #112]	; (8005360 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052fa:	d108      	bne.n	800530e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80052fc:	4b18      	ldr	r3, [pc, #96]	; (8005360 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005304:	4a18      	ldr	r2, [pc, #96]	; (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005306:	fbb2 f3f3 	udiv	r3, r2, r3
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	e007      	b.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800530e:	4b14      	ldr	r3, [pc, #80]	; (8005360 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005316:	4a15      	ldr	r2, [pc, #84]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005318:	fbb2 f3f3 	udiv	r3, r2, r3
 800531c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800531e:	4b10      	ldr	r3, [pc, #64]	; (8005360 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005324:	099b      	lsrs	r3, r3, #6
 8005326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	fb02 f303 	mul.w	r3, r2, r3
 8005330:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005332:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005338:	0f1b      	lsrs	r3, r3, #28
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	fbb2 f3f3 	udiv	r3, r2, r3
 8005344:	617b      	str	r3, [r7, #20]
          break;
 8005346:	e002      	b.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]
          break;
 800534c:	bf00      	nop
        }
      }
      break;
 800534e:	bf00      	nop
    }
  }
  return frequency;
 8005350:	697b      	ldr	r3, [r7, #20]
}
 8005352:	4618      	mov	r0, r3
 8005354:	371c      	adds	r7, #28
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40023800 	.word	0x40023800
 8005364:	00bb8000 	.word	0x00bb8000
 8005368:	007a1200 	.word	0x007a1200
 800536c:	00f42400 	.word	0x00f42400

08005370 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e07b      	b.n	800547a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	2b00      	cmp	r3, #0
 8005388:	d108      	bne.n	800539c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005392:	d009      	beq.n	80053a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	61da      	str	r2, [r3, #28]
 800539a:	e005      	b.n	80053a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d106      	bne.n	80053c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fc fa78 	bl	80018b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542c:	ea42 0103 	orr.w	r1, r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	0c1b      	lsrs	r3, r3, #16
 8005446:	f003 0104 	and.w	r1, r3, #4
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	f003 0210 	and.w	r2, r3, #16
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69da      	ldr	r2, [r3, #28]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005468:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005482:	b084      	sub	sp, #16
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	f107 001c 	add.w	r0, r7, #28
 8005490:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	2b01      	cmp	r3, #1
 8005498:	d122      	bne.n	80054e0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80054ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d105      	bne.n	80054d4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f99f 	bl	8005818 <USB_CoreReset>
 80054da:	4603      	mov	r3, r0
 80054dc:	73fb      	strb	r3, [r7, #15]
 80054de:	e01a      	b.n	8005516 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f993 	bl	8005818 <USB_CoreReset>
 80054f2:	4603      	mov	r3, r0
 80054f4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d106      	bne.n	800550a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	639a      	str	r2, [r3, #56]	; 0x38
 8005508:	e005      	b.n	8005516 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005518:	2b01      	cmp	r3, #1
 800551a:	d10b      	bne.n	8005534 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f043 0206 	orr.w	r2, r3, #6
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f043 0220 	orr.w	r2, r3, #32
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005534:	7bfb      	ldrb	r3, [r7, #15]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005540:	b004      	add	sp, #16
 8005542:	4770      	bx	lr

08005544 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f043 0201 	orr.w	r2, r3, #1
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f023 0201 	bic.w	r2, r3, #1
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d115      	bne.n	80055d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055b6:	2001      	movs	r0, #1
 80055b8:	f7fc fade 	bl	8001b78 <HAL_Delay>
      ms++;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3301      	adds	r3, #1
 80055c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f919 	bl	80057fa <USB_GetMode>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d01e      	beq.n	800560c <USB_SetCurrentMode+0x84>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b31      	cmp	r3, #49	; 0x31
 80055d2:	d9f0      	bls.n	80055b6 <USB_SetCurrentMode+0x2e>
 80055d4:	e01a      	b.n	800560c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055d6:	78fb      	ldrb	r3, [r7, #3]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d115      	bne.n	8005608 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055e8:	2001      	movs	r0, #1
 80055ea:	f7fc fac5 	bl	8001b78 <HAL_Delay>
      ms++;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	3301      	adds	r3, #1
 80055f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f900 	bl	80057fa <USB_GetMode>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d005      	beq.n	800560c <USB_SetCurrentMode+0x84>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b31      	cmp	r3, #49	; 0x31
 8005604:	d9f0      	bls.n	80055e8 <USB_SetCurrentMode+0x60>
 8005606:	e001      	b.n	800560c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e005      	b.n	8005618 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b32      	cmp	r3, #50	; 0x32
 8005610:	d101      	bne.n	8005616 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	019b      	lsls	r3, r3, #6
 8005632:	f043 0220 	orr.w	r2, r3, #32
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3301      	adds	r3, #1
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	4a08      	ldr	r2, [pc, #32]	; (8005664 <USB_FlushTxFifo+0x44>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d901      	bls.n	800564a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e006      	b.n	8005658 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b20      	cmp	r3, #32
 8005654:	d0f1      	beq.n	800563a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	00030d40 	.word	0x00030d40

08005668 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2210      	movs	r2, #16
 8005678:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3301      	adds	r3, #1
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	4a08      	ldr	r2, [pc, #32]	; (80056a4 <USB_FlushRxFifo+0x3c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d901      	bls.n	800568a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e006      	b.n	8005698 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f003 0310 	and.w	r3, r3, #16
 8005692:	2b10      	cmp	r3, #16
 8005694:	d0f1      	beq.n	800567a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	00030d40 	.word	0x00030d40

080056a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b089      	sub	sp, #36	; 0x24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	4611      	mov	r1, r2
 80056b4:	461a      	mov	r2, r3
 80056b6:	460b      	mov	r3, r1
 80056b8:	71fb      	strb	r3, [r7, #7]
 80056ba:	4613      	mov	r3, r2
 80056bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80056c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d123      	bne.n	8005716 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80056ce:	88bb      	ldrh	r3, [r7, #4]
 80056d0:	3303      	adds	r3, #3
 80056d2:	089b      	lsrs	r3, r3, #2
 80056d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80056d6:	2300      	movs	r3, #0
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	e018      	b.n	800570e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80056dc:	79fb      	ldrb	r3, [r7, #7]
 80056de:	031a      	lsls	r2, r3, #12
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e8:	461a      	mov	r2, r3
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	3301      	adds	r3, #1
 80056f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	3301      	adds	r3, #1
 80056fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	3301      	adds	r3, #1
 8005700:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	3301      	adds	r3, #1
 8005706:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	3301      	adds	r3, #1
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	429a      	cmp	r2, r3
 8005714:	d3e2      	bcc.n	80056dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3724      	adds	r7, #36	; 0x24
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005724:	b480      	push	{r7}
 8005726:	b08b      	sub	sp, #44	; 0x2c
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	4613      	mov	r3, r2
 8005730:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	089b      	lsrs	r3, r3, #2
 800573e:	b29b      	uxth	r3, r3
 8005740:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005742:	88fb      	ldrh	r3, [r7, #6]
 8005744:	f003 0303 	and.w	r3, r3, #3
 8005748:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800574a:	2300      	movs	r3, #0
 800574c:	623b      	str	r3, [r7, #32]
 800574e:	e014      	b.n	800577a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	601a      	str	r2, [r3, #0]
    pDest++;
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	3301      	adds	r3, #1
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	3301      	adds	r3, #1
 8005766:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	3301      	adds	r3, #1
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	3301      	adds	r3, #1
 8005772:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	3301      	adds	r3, #1
 8005778:	623b      	str	r3, [r7, #32]
 800577a:	6a3a      	ldr	r2, [r7, #32]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	429a      	cmp	r2, r3
 8005780:	d3e6      	bcc.n	8005750 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005782:	8bfb      	ldrh	r3, [r7, #30]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01e      	beq.n	80057c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005792:	461a      	mov	r2, r3
 8005794:	f107 0310 	add.w	r3, r7, #16
 8005798:	6812      	ldr	r2, [r2, #0]
 800579a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	fa22 f303 	lsr.w	r3, r2, r3
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	701a      	strb	r2, [r3, #0]
      i++;
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	3301      	adds	r3, #1
 80057b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	3301      	adds	r3, #1
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80057ba:	8bfb      	ldrh	r3, [r7, #30]
 80057bc:	3b01      	subs	r3, #1
 80057be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80057c0:	8bfb      	ldrh	r3, [r7, #30]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1ea      	bne.n	800579c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	372c      	adds	r7, #44	; 0x2c
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4013      	ands	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057ec:	68fb      	ldr	r3, [r7, #12]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f003 0301 	and.w	r3, r3, #1
}
 800580a:	4618      	mov	r0, r3
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
	...

08005818 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3301      	adds	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	4a13      	ldr	r2, [pc, #76]	; (8005878 <USB_CoreReset+0x60>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d901      	bls.n	8005834 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e01a      	b.n	800586a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	daf3      	bge.n	8005824 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	f043 0201 	orr.w	r2, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3301      	adds	r3, #1
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	4a09      	ldr	r2, [pc, #36]	; (8005878 <USB_CoreReset+0x60>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d901      	bls.n	800585c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e006      	b.n	800586a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b01      	cmp	r3, #1
 8005866:	d0f1      	beq.n	800584c <USB_CoreReset+0x34>

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	00030d40 	.word	0x00030d40

0800587c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800587c:	b084      	sub	sp, #16
 800587e:	b580      	push	{r7, lr}
 8005880:	b084      	sub	sp, #16
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	f107 001c 	add.w	r0, r7, #28
 800588a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005898:	461a      	mov	r2, r3
 800589a:	2300      	movs	r3, #0
 800589c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ae:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d018      	beq.n	8005900 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d10a      	bne.n	80058ea <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058e2:	f043 0304 	orr.w	r3, r3, #4
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	e014      	b.n	8005914 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058f8:	f023 0304 	bic.w	r3, r3, #4
 80058fc:	6013      	str	r3, [r2, #0]
 80058fe:	e009      	b.n	8005914 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800590e:	f023 0304 	bic.w	r3, r3, #4
 8005912:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005914:	2110      	movs	r1, #16
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7ff fe82 	bl	8005620 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7ff fea3 	bl	8005668 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	e015      	b.n	8005954 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	4413      	add	r3, r2
 8005930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005934:	461a      	mov	r2, r3
 8005936:	f04f 33ff 	mov.w	r3, #4294967295
 800593a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4413      	add	r3, r2
 8005944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005948:	461a      	mov	r2, r3
 800594a:	2300      	movs	r3, #0
 800594c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3301      	adds	r3, #1
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	429a      	cmp	r2, r3
 800595a:	d3e5      	bcc.n	8005928 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f04f 32ff 	mov.w	r2, #4294967295
 8005968:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00b      	beq.n	800598e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800597c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a13      	ldr	r2, [pc, #76]	; (80059d0 <USB_HostInit+0x154>)
 8005982:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a13      	ldr	r2, [pc, #76]	; (80059d4 <USB_HostInit+0x158>)
 8005988:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800598c:	e009      	b.n	80059a2 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2280      	movs	r2, #128	; 0x80
 8005992:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a10      	ldr	r2, [pc, #64]	; (80059d8 <USB_HostInit+0x15c>)
 8005998:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a0f      	ldr	r2, [pc, #60]	; (80059dc <USB_HostInit+0x160>)
 800599e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d105      	bne.n	80059b4 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	f043 0210 	orr.w	r2, r3, #16
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699a      	ldr	r2, [r3, #24]
 80059b8:	4b09      	ldr	r3, [pc, #36]	; (80059e0 <USB_HostInit+0x164>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059cc:	b004      	add	sp, #16
 80059ce:	4770      	bx	lr
 80059d0:	01000200 	.word	0x01000200
 80059d4:	00e00300 	.word	0x00e00300
 80059d8:	00600080 	.word	0x00600080
 80059dc:	004000e0 	.word	0x004000e0
 80059e0:	a3200008 	.word	0xa3200008

080059e4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	460b      	mov	r3, r1
 80059ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a02:	f023 0303 	bic.w	r3, r3, #3
 8005a06:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	78fb      	ldrb	r3, [r7, #3]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	68f9      	ldr	r1, [r7, #12]
 8005a18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d107      	bne.n	8005a36 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005a32:	6053      	str	r3, [r2, #4]
 8005a34:	e009      	b.n	8005a4a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005a36:	78fb      	ldrb	r3, [r7, #3]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d106      	bne.n	8005a4a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a42:	461a      	mov	r2, r3
 8005a44:	f241 7370 	movw	r3, #6000	; 0x1770
 8005a48:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a78:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a86:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005a88:	2064      	movs	r0, #100	; 0x64
 8005a8a:	f7fc f875 	bl	8001b78 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a9a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005a9c:	200a      	movs	r0, #10
 8005a9e:	f7fc f86b 	bl	8001b78 <HAL_Delay>

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ad0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d109      	bne.n	8005af0 <USB_DriveVbus+0x44>
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d106      	bne.n	8005af0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005aea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005aee:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005afa:	d109      	bne.n	8005b10 <USB_DriveVbus+0x64>
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b0e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b085      	sub	sp, #20
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	0c5b      	lsrs	r3, r3, #17
 8005b3c:	f003 0303 	and.w	r3, r3, #3
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	b29b      	uxth	r3, r3
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
	...

08005b70 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b088      	sub	sp, #32
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	4608      	mov	r0, r1
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	4603      	mov	r3, r0
 8005b80:	70fb      	strb	r3, [r7, #3]
 8005b82:	460b      	mov	r3, r1
 8005b84:	70bb      	strb	r3, [r7, #2]
 8005b86:	4613      	mov	r3, r2
 8005b88:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005b92:	78fb      	ldrb	r3, [r7, #3]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005ba6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d87e      	bhi.n	8005cac <USB_HC_Init+0x13c>
 8005bae:	a201      	add	r2, pc, #4	; (adr r2, 8005bb4 <USB_HC_Init+0x44>)
 8005bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb4:	08005bc5 	.word	0x08005bc5
 8005bb8:	08005c6f 	.word	0x08005c6f
 8005bbc:	08005bc5 	.word	0x08005bc5
 8005bc0:	08005c31 	.word	0x08005c31
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005bc4:	78fb      	ldrb	r3, [r7, #3]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	f240 439d 	movw	r3, #1181	; 0x49d
 8005bd6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005bd8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	da10      	bge.n	8005c02 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	78fa      	ldrb	r2, [r7, #3]
 8005bf0:	0151      	lsls	r1, r2, #5
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bfe:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005c00:	e057      	b.n	8005cb2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d051      	beq.n	8005cb2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005c0e:	78fb      	ldrb	r3, [r7, #3]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	78fa      	ldrb	r2, [r7, #3]
 8005c1e:	0151      	lsls	r1, r2, #5
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	440a      	add	r2, r1
 8005c24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c28:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c2c:	60d3      	str	r3, [r2, #12]
      break;
 8005c2e:	e040      	b.n	8005cb2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005c42:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	da34      	bge.n	8005cb6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c4c:	78fb      	ldrb	r3, [r7, #3]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	78fa      	ldrb	r2, [r7, #3]
 8005c5c:	0151      	lsls	r1, r2, #5
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	440a      	add	r2, r1
 8005c62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c6a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005c6c:	e023      	b.n	8005cb6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c6e:	78fb      	ldrb	r3, [r7, #3]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f240 2325 	movw	r3, #549	; 0x225
 8005c80:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c82:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	da17      	bge.n	8005cba <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005c8a:	78fb      	ldrb	r3, [r7, #3]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	78fa      	ldrb	r2, [r7, #3]
 8005c9a:	0151      	lsls	r1, r2, #5
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	440a      	add	r2, r1
 8005ca0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ca4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005ca8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005caa:	e006      	b.n	8005cba <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	77fb      	strb	r3, [r7, #31]
      break;
 8005cb0:	e004      	b.n	8005cbc <USB_HC_Init+0x14c>
      break;
 8005cb2:	bf00      	nop
 8005cb4:	e002      	b.n	8005cbc <USB_HC_Init+0x14c>
      break;
 8005cb6:	bf00      	nop
 8005cb8:	e000      	b.n	8005cbc <USB_HC_Init+0x14c>
      break;
 8005cba:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cc2:	699a      	ldr	r2, [r3, #24]
 8005cc4:	78fb      	ldrb	r3, [r7, #3]
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	2101      	movs	r1, #1
 8005ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd0:	6939      	ldr	r1, [r7, #16]
 8005cd2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005ce6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	da03      	bge.n	8005cf6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cf2:	61bb      	str	r3, [r7, #24]
 8005cf4:	e001      	b.n	8005cfa <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff ff0f 	bl	8005b1e <USB_GetHostSpeed>
 8005d00:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005d02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d106      	bne.n	8005d18 <USB_HC_Init+0x1a8>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d003      	beq.n	8005d18 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	e001      	b.n	8005d1c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d1c:	787b      	ldrb	r3, [r7, #1]
 8005d1e:	059b      	lsls	r3, r3, #22
 8005d20:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d24:	78bb      	ldrb	r3, [r7, #2]
 8005d26:	02db      	lsls	r3, r3, #11
 8005d28:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d2c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d32:	049b      	lsls	r3, r3, #18
 8005d34:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d38:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d3a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005d3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d40:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d46:	78fb      	ldrb	r3, [r7, #3]
 8005d48:	0159      	lsls	r1, r3, #5
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	440b      	add	r3, r1
 8005d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d52:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d58:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005d5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d10f      	bne.n	8005d82 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005d62:	78fb      	ldrb	r3, [r7, #3]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	78fa      	ldrb	r2, [r7, #3]
 8005d72:	0151      	lsls	r1, r2, #5
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	440a      	add	r2, r1
 8005d78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d80:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005d82:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3720      	adds	r7, #32
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08c      	sub	sp, #48	; 0x30
 8005d90:	af02      	add	r7, sp, #8
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	4613      	mov	r3, r2
 8005d98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	785b      	ldrb	r3, [r3, #1]
 8005da2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005da4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005da8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d02d      	beq.n	8005e12 <USB_HC_StartXfer+0x86>
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	791b      	ldrb	r3, [r3, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d129      	bne.n	8005e12 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005dbe:	79fb      	ldrb	r3, [r7, #7]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d117      	bne.n	8005df4 <USB_HC_StartXfer+0x68>
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	79db      	ldrb	r3, [r3, #7]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <USB_HC_StartXfer+0x48>
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	79db      	ldrb	r3, [r3, #7]
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d10f      	bne.n	8005df4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	0151      	lsls	r1, r2, #5
 8005de6:	6a3a      	ldr	r2, [r7, #32]
 8005de8:	440a      	add	r2, r1
 8005dea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005df4:	79fb      	ldrb	r3, [r7, #7]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10b      	bne.n	8005e12 <USB_HC_StartXfer+0x86>
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	795b      	ldrb	r3, [r3, #5]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d107      	bne.n	8005e12 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	785b      	ldrb	r3, [r3, #1]
 8005e06:	4619      	mov	r1, r3
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 fa2f 	bl	800626c <USB_DoPing>
      return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	e0f8      	b.n	8006004 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d018      	beq.n	8005e4c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	8912      	ldrh	r2, [r2, #8]
 8005e22:	4413      	add	r3, r2
 8005e24:	3b01      	subs	r3, #1
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	8912      	ldrh	r2, [r2, #8]
 8005e2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e2e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005e30:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005e32:	8b7b      	ldrh	r3, [r7, #26]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d90b      	bls.n	8005e50 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005e38:	8b7b      	ldrh	r3, [r7, #26]
 8005e3a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005e3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	8912      	ldrh	r2, [r2, #8]
 8005e42:	fb02 f203 	mul.w	r2, r2, r3
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	611a      	str	r2, [r3, #16]
 8005e4a:	e001      	b.n	8005e50 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	78db      	ldrb	r3, [r3, #3]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d007      	beq.n	8005e68 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005e58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	8912      	ldrh	r2, [r2, #8]
 8005e5e:	fb02 f203 	mul.w	r2, r2, r3
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	611a      	str	r2, [r3, #16]
 8005e66:	e003      	b.n	8005e70 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	695a      	ldr	r2, [r3, #20]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e7a:	04d9      	lsls	r1, r3, #19
 8005e7c:	4b63      	ldr	r3, [pc, #396]	; (800600c <USB_HC_StartXfer+0x280>)
 8005e7e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e80:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	7a9b      	ldrb	r3, [r3, #10]
 8005e86:	075b      	lsls	r3, r3, #29
 8005e88:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e8c:	69f9      	ldr	r1, [r7, #28]
 8005e8e:	0148      	lsls	r0, r1, #5
 8005e90:	6a39      	ldr	r1, [r7, #32]
 8005e92:	4401      	add	r1, r0
 8005e94:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e98:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e9a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005e9c:	79fb      	ldrb	r3, [r7, #7]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d009      	beq.n	8005eb6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	68d9      	ldr	r1, [r3, #12]
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb2:	460a      	mov	r2, r1
 8005eb4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	bf0c      	ite	eq
 8005ec6:	2301      	moveq	r3, #1
 8005ec8:	2300      	movne	r3, #0
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	69fa      	ldr	r2, [r7, #28]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	6a3a      	ldr	r2, [r7, #32]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ee8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005eec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	7e7b      	ldrb	r3, [r7, #25]
 8005efe:	075b      	lsls	r3, r3, #29
 8005f00:	69f9      	ldr	r1, [r7, #28]
 8005f02:	0148      	lsls	r0, r1, #5
 8005f04:	6a39      	ldr	r1, [r7, #32]
 8005f06:	4401      	add	r1, r0
 8005f08:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f26:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	78db      	ldrb	r3, [r3, #3]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d004      	beq.n	8005f3a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f36:	613b      	str	r3, [r7, #16]
 8005f38:	e003      	b.n	8005f42 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f40:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f48:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f56:	461a      	mov	r2, r3
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005f5c:	79fb      	ldrb	r3, [r7, #7]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	e04e      	b.n	8006004 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	78db      	ldrb	r3, [r3, #3]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d149      	bne.n	8006002 <USB_HC_StartXfer+0x276>
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d045      	beq.n	8006002 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	79db      	ldrb	r3, [r3, #7]
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d830      	bhi.n	8005fe0 <USB_HC_StartXfer+0x254>
 8005f7e:	a201      	add	r2, pc, #4	; (adr r2, 8005f84 <USB_HC_StartXfer+0x1f8>)
 8005f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f84:	08005f95 	.word	0x08005f95
 8005f88:	08005fb9 	.word	0x08005fb9
 8005f8c:	08005f95 	.word	0x08005f95
 8005f90:	08005fb9 	.word	0x08005fb9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	3303      	adds	r3, #3
 8005f9a:	089b      	lsrs	r3, r3, #2
 8005f9c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005f9e:	8afa      	ldrh	r2, [r7, #22]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d91c      	bls.n	8005fe4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	f043 0220 	orr.w	r2, r3, #32
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	619a      	str	r2, [r3, #24]
        }
        break;
 8005fb6:	e015      	b.n	8005fe4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	3303      	adds	r3, #3
 8005fbe:	089b      	lsrs	r3, r3, #2
 8005fc0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005fc2:	8afa      	ldrh	r2, [r7, #22]
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d90a      	bls.n	8005fe8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	619a      	str	r2, [r3, #24]
        }
        break;
 8005fde:	e003      	b.n	8005fe8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005fe0:	bf00      	nop
 8005fe2:	e002      	b.n	8005fea <USB_HC_StartXfer+0x25e>
        break;
 8005fe4:	bf00      	nop
 8005fe6:	e000      	b.n	8005fea <USB_HC_StartXfer+0x25e>
        break;
 8005fe8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	68d9      	ldr	r1, [r3, #12]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	785a      	ldrb	r2, [r3, #1]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	9000      	str	r0, [sp, #0]
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f7ff fb53 	bl	80056a8 <USB_WritePacket>
  }

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3728      	adds	r7, #40	; 0x28
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	1ff80000 	.word	0x1ff80000

08006010 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	b29b      	uxth	r3, r3
}
 8006026:	4618      	mov	r0, r3
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006032:	b480      	push	{r7}
 8006034:	b089      	sub	sp, #36	; 0x24
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	460b      	mov	r3, r1
 800603c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006042:	78fb      	ldrb	r3, [r7, #3]
 8006044:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	4413      	add	r3, r2
 8006052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	0c9b      	lsrs	r3, r3, #18
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	4413      	add	r3, r2
 8006068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	0fdb      	lsrs	r3, r3, #31
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b20      	cmp	r3, #32
 8006080:	d104      	bne.n	800608c <USB_HC_Halt+0x5a>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	e0e8      	b.n	800625e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <USB_HC_Halt+0x66>
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	2b02      	cmp	r3, #2
 8006096:	d173      	bne.n	8006180 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	0151      	lsls	r1, r2, #5
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	440a      	add	r2, r1
 80060ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060b6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 0320 	and.w	r3, r3, #32
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f040 80cb 	bne.w	800625c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d143      	bne.n	800615a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060f0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	0151      	lsls	r1, r2, #5
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	440a      	add	r2, r1
 8006108:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800610c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006110:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	4413      	add	r3, r2
 800611a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	0151      	lsls	r1, r2, #5
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	440a      	add	r2, r1
 8006128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800612c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006130:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	3301      	adds	r3, #1
 8006136:	61fb      	str	r3, [r7, #28]
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800613e:	d81d      	bhi.n	800617c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	4413      	add	r3, r2
 8006148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006152:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006156:	d0ec      	beq.n	8006132 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006158:	e080      	b.n	800625c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	4413      	add	r3, r2
 8006162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	0151      	lsls	r1, r2, #5
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	440a      	add	r2, r1
 8006170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006178:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800617a:	e06f      	b.n	800625c <USB_HC_Halt+0x22a>
            break;
 800617c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800617e:	e06d      	b.n	800625c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	4413      	add	r3, r2
 8006188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	0151      	lsls	r1, r2, #5
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	440a      	add	r2, r1
 8006196:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800619a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800619e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d143      	bne.n	8006238 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	0151      	lsls	r1, r2, #5
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	440a      	add	r2, r1
 80061c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061ce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	0151      	lsls	r1, r2, #5
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	440a      	add	r2, r1
 80061e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	0151      	lsls	r1, r2, #5
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	440a      	add	r2, r1
 8006206:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800620a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800620e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	3301      	adds	r3, #1
 8006214:	61fb      	str	r3, [r7, #28]
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800621c:	d81d      	bhi.n	800625a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	4413      	add	r3, r2
 8006226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006234:	d0ec      	beq.n	8006210 <USB_HC_Halt+0x1de>
 8006236:	e011      	b.n	800625c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	4413      	add	r3, r2
 8006240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	0151      	lsls	r1, r2, #5
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	440a      	add	r2, r1
 800624e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006252:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	e000      	b.n	800625c <USB_HC_Halt+0x22a>
          break;
 800625a:	bf00      	nop
    }
  }

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3724      	adds	r7, #36	; 0x24
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
	...

0800626c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800627c:	78fb      	ldrb	r3, [r7, #3]
 800627e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006280:	2301      	movs	r3, #1
 8006282:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	04da      	lsls	r2, r3, #19
 8006288:	4b15      	ldr	r3, [pc, #84]	; (80062e0 <USB_DoPing+0x74>)
 800628a:	4013      	ands	r3, r2
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	0151      	lsls	r1, r2, #5
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	440a      	add	r2, r1
 8006294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006298:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800629c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062b4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062bc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ca:	461a      	mov	r2, r3
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	371c      	adds	r7, #28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	1ff80000 	.word	0x1ff80000

080062e4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7ff f936 	bl	8005566 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80062fa:	2110      	movs	r1, #16
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff f98f 	bl	8005620 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7ff f9b0 	bl	8005668 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006308:	2300      	movs	r3, #0
 800630a:	613b      	str	r3, [r7, #16]
 800630c:	e01f      	b.n	800634e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4413      	add	r3, r2
 8006316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006324:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800632c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006334:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4413      	add	r3, r2
 800633e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006342:	461a      	mov	r2, r3
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	3301      	adds	r3, #1
 800634c:	613b      	str	r3, [r7, #16]
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b0f      	cmp	r3, #15
 8006352:	d9dc      	bls.n	800630e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006354:	2300      	movs	r3, #0
 8006356:	613b      	str	r3, [r7, #16]
 8006358:	e034      	b.n	80063c4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4413      	add	r3, r2
 8006362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006370:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006378:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006380:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4413      	add	r3, r2
 800638a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638e:	461a      	mov	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	3301      	adds	r3, #1
 8006398:	617b      	str	r3, [r7, #20]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063a0:	d80c      	bhi.n	80063bc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063b8:	d0ec      	beq.n	8006394 <USB_StopHost+0xb0>
 80063ba:	e000      	b.n	80063be <USB_StopHost+0xda>
        break;
 80063bc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	3301      	adds	r3, #1
 80063c2:	613b      	str	r3, [r7, #16]
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	2b0f      	cmp	r3, #15
 80063c8:	d9c7      	bls.n	800635a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063d0:	461a      	mov	r2, r3
 80063d2:	f04f 33ff 	mov.w	r3, #4294967295
 80063d6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f04f 32ff 	mov.w	r2, #4294967295
 80063de:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7ff f8af 	bl	8005544 <USB_EnableGlobalInt>

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3718      	adds	r7, #24
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <buf_to_float_normed>:
 * @param      *pInSignal   points to input signal buffer
 * @param      *pOutSignal  points to output signal buffer
 * @param      len          signal length
 */
void buf_to_float_normed(float32_t *pInSignal, float32_t *pOutSignal, uint32_t len)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
  for (uint32_t i = 0; i < len; i++)
 80063fc:	2300      	movs	r3, #0
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	e00c      	b.n	800641c <buf_to_float_normed+0x2c>
  {
//    pOutSignal[i] = (float32_t) pInSignal[i] / (1 << 15);
    pOutSignal[i] = pInSignal[i];
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	441a      	add	r2, r3
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	68b9      	ldr	r1, [r7, #8]
 8006410:	440b      	add	r3, r1
 8006412:	6812      	ldr	r2, [r2, #0]
 8006414:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < len; i++)
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	3301      	adds	r3, #1
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	429a      	cmp	r2, r3
 8006422:	d3ee      	bcc.n	8006402 <buf_to_float_normed+0x12>

  }
}
 8006424:	bf00      	nop
 8006426:	bf00      	nop
 8006428:	371c      	adds	r7, #28
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b08c      	sub	sp, #48	; 0x30
 8006436:	af00      	add	r7, sp, #0
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	607a      	str	r2, [r7, #4]
  uint32_t frame_len = S->FrameLen;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t n_fft = S->FFTLen;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *scratch_buffer = S->pScratch;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	623b      	str	r3, [r7, #32]
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6899      	ldr	r1, [r3, #8]
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	68b8      	ldr	r0, [r7, #8]
 800645a:	f008 fd7b 	bl	800ef54 <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	18d0      	adds	r0, r2, r3
 8006466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	461a      	mov	r2, r3
 800646e:	2100      	movs	r1, #0
 8006470:	f009 f9cc 	bl	800f80c <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6818      	ldr	r0, [r3, #0]
 8006478:	2300      	movs	r3, #0
 800647a:	6a3a      	ldr	r2, [r7, #32]
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	f008 f91b 	bl	800e6b8 <arm_rfft_fast_f32>

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	ed93 7a00 	vldr	s14, [r3]
 8006488:	6a3b      	ldr	r3, [r7, #32]
 800648a:	edd3 7a00 	vldr	s15, [r3]
 800648e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006492:	edc7 7a07 	vstr	s15, [r7, #28]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	3304      	adds	r3, #4
 800649a:	ed93 7a00 	vldr	s14, [r3]
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	3304      	adds	r3, #4
 80064a2:	edd3 7a00 	vldr	s15, [r3]
 80064a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064aa:	edc7 7a06 	vstr	s15, [r7, #24]
  pOutCol[0] = first_energy;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69fa      	ldr	r2, [r7, #28]
 80064b2:	601a      	str	r2, [r3, #0]
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	f103 0008 	add.w	r0, r3, #8
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	1d19      	adds	r1, r3, #4
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	085b      	lsrs	r3, r3, #1
 80064c2:	3b01      	subs	r3, #1
 80064c4:	461a      	mov	r2, r3
 80064c6:	f008 fcd5 	bl	800ee74 <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	085b      	lsrs	r3, r3, #1
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	4413      	add	r3, r2
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	601a      	str	r2, [r3, #0]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	791b      	ldrb	r3, [r3, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d12c      	bne.n	800653a <SpectrogramColumn+0x108>
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 80064e0:	2300      	movs	r3, #0
 80064e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064e4:	e023      	b.n	800652e <SpectrogramColumn+0xfc>
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 80064e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	4413      	add	r3, r2
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	6879      	ldr	r1, [r7, #4]
 80064f6:	440b      	add	r3, r1
 80064f8:	617a      	str	r2, [r7, #20]
 80064fa:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80064fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8006500:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006508:	db09      	blt.n	800651e <SpectrogramColumn+0xec>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800650a:	ed97 0a05 	vldr	s0, [r7, #20]
 800650e:	f00b fecd 	bl	80122ac <sqrtf>
 8006512:	eef0 7a40 	vmov.f32	s15, s0
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 800651c:	e004      	b.n	8006528 <SpectrogramColumn+0xf6>
    }
    else
    {
      *pOut = 0.0f;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8006526:	bf00      	nop
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652a:	3301      	adds	r3, #1
 800652c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	085b      	lsrs	r3, r3, #1
 8006532:	3301      	adds	r3, #1
 8006534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006536:	429a      	cmp	r2, r3
 8006538:	d3d5      	bcc.n	80064e6 <SpectrogramColumn+0xb4>
    }
  }
}
 800653a:	bf00      	nop
 800653c:	3730      	adds	r7, #48	; 0x30
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <MelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Mel Spectrogram column.
 * @return     None
 */
void MelSpectrogramColumn(MelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b086      	sub	sp, #24
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	607a      	str	r2, [r7, #4]
  float32_t *tmp_buffer = S->SpectrogramConf->pScratch;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	617b      	str	r3, [r7, #20]

  /* Power Spectrogram */
  SpectrogramColumn(S->SpectrogramConf, pInSignal, tmp_buffer);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	68b9      	ldr	r1, [r7, #8]
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff ff67 	bl	8006432 <SpectrogramColumn>

  /* Mel Filter Banks Application */
  MelFilterbank(S->MelFilter, tmp_buffer, pOutCol);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6979      	ldr	r1, [r7, #20]
 800656c:	4618      	mov	r0, r3
 800656e:	f000 f9a8 	bl	80068c2 <MelFilterbank>
}
 8006572:	bf00      	nop
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <MelFilterbank_Init>:
 *
 * @param      *MelFilterStruct  The Mel Filter configuration structure.
 * @return none.
 */
void MelFilterbank_Init(MelFilterTypeDef *MelFilterStruct)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b0a4      	sub	sp, #144	; 0x90
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  uint32_t normalize = MelFilterStruct->Normalize;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006586:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t mel_2_f = MelFilterStruct->Mel2F;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	65fb      	str	r3, [r7, #92]	; 0x5c
  MelFormulaTypedef formula = MelFilterStruct->Formula;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006594:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  uint32_t *fft_bin_numbers_start = MelFilterStruct->pStartIndices;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t *fft_bin_numbers_stop = MelFilterStruct->pStopIndices;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	653b      	str	r3, [r7, #80]	; 0x50
  int32_t start_index;
  int32_t stop_index;
  float32_t *weights = MelFilterStruct->pCoefficients;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t *n_coefficients = &MelFilterStruct->CoefficientsLength;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	330c      	adds	r3, #12
 80065b0:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t sr = MelFilterStruct->SampRate;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t n_mels = MelFilterStruct->NumMels;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t n_fft = MelFilterStruct->FFTLen;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t f_min =  MelFilterStruct->FMin;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t f_max =  MelFilterStruct->FMax;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	63bb      	str	r3, [r7, #56]	; 0x38

  float32_t enorm;

  // Algorithm based on librosa implementation with memory constraints

  mel_min = MelScale(f_min, formula);
 80065d0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80065d4:	4618      	mov	r0, r3
 80065d6:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80065da:	f000 f9c7 	bl	800696c <MelScale>
 80065de:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  mel_max = MelScale(f_max, formula);
 80065e2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80065e6:	4618      	mov	r0, r3
 80065e8:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80065ec:	f000 f9be 	bl	800696c <MelScale>
 80065f0:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
  // Then, create mel_bin_centers = np.linspace(mel_min, mel_max, n_mels + 2) // + 2 to get boundaries
  mel_step = (mel_max - mel_min) / (float32_t) (n_mels - 1 + 2);
 80065f4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80065f8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80065fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006602:	3301      	adds	r3, #1
 8006604:	ee07 3a90 	vmov	s15, r3
 8006608:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800660c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006610:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  /* Center frequencies of each FFT bin */
  // fftfreqs = librosa.fft_frequencies(sr=sr, n_fft=n_fft)
  //          = np.linspace(0, float(sr)/2), int(1 + n_fft//2), endpoint=True)
  //          = np.linspace(0, 8000, 513, endpoint=True) # With sr=16000, n_fft=1024
  // fftfreqs_step = (f_max - f_min) / (float32_t) (n_fft / 2);
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 8006614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006616:	ee07 3a90 	vmov	s15, r3
 800661a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800661e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006622:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006628:	085b      	lsrs	r3, r3, #1
 800662a:	ee07 3a90 	vmov	s15, r3
 800662e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006636:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  *n_coefficients = 0;
 800663a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]
  /* Create filterbanks */
  // The first filterbank will start at the first point,
  // reach its peak at the second point, then return to zero at the 3rd point.
  // The second filterbank will start at the 2nd point, reach its max at the 3rd,
  // then be zero at the 4th etc. A formula for calculating these is as follows:
  for (uint32_t i = 0; i < n_mels; i++)
 8006640:	2300      	movs	r3, #0
 8006642:	66bb      	str	r3, [r7, #104]	; 0x68
 8006644:	e133      	b.n	80068ae <MelFilterbank_Init+0x334>
  {
    /* Create bin */
    if (mel_2_f != 0) {
 8006646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d044      	beq.n	80066d6 <MelFilterbank_Init+0x15c>
      mel_f_lower = InverseMelScale(mel_step * i + mel_min, formula);
 800664c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800664e:	ee07 3a90 	vmov	s15, r3
 8006652:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006656:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800665a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800665e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006666:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800666a:	4618      	mov	r0, r3
 800666c:	eeb0 0a67 	vmov.f32	s0, s15
 8006670:	f000 f9ec 	bl	8006a4c <InverseMelScale>
 8006674:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
      mel_f_center = InverseMelScale(mel_step * (i + 1) + mel_min, formula);
 8006678:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800667a:	3301      	adds	r3, #1
 800667c:	ee07 3a90 	vmov	s15, r3
 8006680:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006684:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006688:	ee27 7a27 	vmul.f32	s14, s14, s15
 800668c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006694:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006698:	4618      	mov	r0, r3
 800669a:	eeb0 0a67 	vmov.f32	s0, s15
 800669e:	f000 f9d5 	bl	8006a4c <InverseMelScale>
 80066a2:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
      mel_f_upper = InverseMelScale(mel_step * (i + 2) + mel_min, formula);
 80066a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066a8:	3302      	adds	r3, #2
 80066aa:	ee07 3a90 	vmov	s15, r3
 80066ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80066b2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80066b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066ba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80066be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066c2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80066c6:	4618      	mov	r0, r3
 80066c8:	eeb0 0a67 	vmov.f32	s0, s15
 80066cc:	f000 f9be 	bl	8006a4c <InverseMelScale>
 80066d0:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
 80066d4:	e02e      	b.n	8006734 <MelFilterbank_Init+0x1ba>
    } else {
      mel_f_lower = mel_step * i + mel_min;
 80066d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066d8:	ee07 3a90 	vmov	s15, r3
 80066dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80066e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80066e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80066ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066f0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
      mel_f_center = mel_step * (i + 1) + mel_min;
 80066f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066f6:	3301      	adds	r3, #1
 80066f8:	ee07 3a90 	vmov	s15, r3
 80066fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006700:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006708:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800670c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006710:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
      mel_f_upper = mel_step * (i + 2) + mel_min;
 8006714:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006716:	3302      	adds	r3, #2
 8006718:	ee07 3a90 	vmov	s15, r3
 800671c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006720:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006728:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800672c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006730:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    /* Round frequencies to the nearest FFT bins */
    // Note: This could be used for future optimization but does not match when InverseMelScale is not used
    // fft_bin_numbers_start[i] = (uint32_t) (n_fft * mel_f_lower / sr) + 1;
    // fft_bin_numbers_stop[i] = (uint32_t) (n_fft * mel_f_upper / sr);

    fdiff_lower = mel_f_center - mel_f_lower;
 8006734:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8006738:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800673c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006740:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    fdiff_upper = mel_f_upper - mel_f_center;
 8006744:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8006748:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800674c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006750:	edc7 7a08 	vstr	s15, [r7, #32]

    start_index = -1;
 8006754:	f04f 33ff 	mov.w	r3, #4294967295
 8006758:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    stop_index = -1;
 800675c:	f04f 33ff 	mov.w	r3, #4294967295
 8006760:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    for (uint32_t j = 0; j < n_fft / 2; j++)
 8006764:	2300      	movs	r3, #0
 8006766:	667b      	str	r3, [r7, #100]	; 0x64
 8006768:	e098      	b.n	800689c <MelFilterbank_Init+0x322>
    {
      /* Center frequency for FFT bin */
      // fftfreq = j * fftfreqs_step + f_min;
      if (mel_2_f != 0) {
 800676a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00b      	beq.n	8006788 <MelFilterbank_Init+0x20e>
        fftfreq = j * fftfreqs_step;
 8006770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006772:	ee07 3a90 	vmov	s15, r3
 8006776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800677e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006782:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 8006786:	e011      	b.n	80067ac <MelFilterbank_Init+0x232>
      } else {
        fftfreq = MelScale(j * fftfreqs_step, formula);
 8006788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006792:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800679a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800679e:	4618      	mov	r0, r3
 80067a0:	eeb0 0a67 	vmov.f32	s0, s15
 80067a4:	f000 f8e2 	bl	800696c <MelScale>
 80067a8:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
      }

      ramp_lower = mel_f_lower - fftfreq;
 80067ac:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80067b0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80067b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067b8:	edc7 7a07 	vstr	s15, [r7, #28]
      ramp_upper = mel_f_upper - fftfreq;
 80067bc:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80067c0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80067c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067c8:	edc7 7a06 	vstr	s15, [r7, #24]
      /* Lower and upper slopes for current bin */
      lower = -ramp_lower / fdiff_lower;
 80067cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80067d0:	eef1 6a67 	vneg.f32	s13, s15
 80067d4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80067d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067dc:	edc7 7a05 	vstr	s15, [r7, #20]
      upper =  ramp_upper / fdiff_upper;
 80067e0:	edd7 6a06 	vldr	s13, [r7, #24]
 80067e4:	ed97 7a08 	vldr	s14, [r7, #32]
 80067e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ec:	edc7 7a04 	vstr	s15, [r7, #16]

      // # .. then intersect them with each other and zero
      // weights[i] = np.maximum(0, np.minimum(lower, upper))
      if (lower < upper) min = lower;
 80067f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80067f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80067f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006800:	d502      	bpl.n	8006808 <MelFilterbank_Init+0x28e>
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	673b      	str	r3, [r7, #112]	; 0x70
 8006806:	e001      	b.n	800680c <MelFilterbank_Init+0x292>
      else min = upper;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	673b      	str	r3, [r7, #112]	; 0x70

      // Only store non-zero values indexed by start and stop indexes
      if (min > 0)
 800680c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006810:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006818:	dd2f      	ble.n	800687a <MelFilterbank_Init+0x300>
      {
        weight = min;
 800681a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800681c:	66fb      	str	r3, [r7, #108]	; 0x6c
        // At this point, matching with:
        // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=None,htk=False)

        if (normalize != 0)
 800681e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006820:	2b00      	cmp	r3, #0
 8006822:	d013      	beq.n	800684c <MelFilterbank_Init+0x2d2>
          //     (area normalization).  Otherwise, leave all the triangles aiming for
          //     a peak value of 1.0
          // # Slaney-style mel is scaled to be approx constant energy per channel
          // enorm = 2.0 / (mel_f[2:n_mels+2] - mel_f[:n_mels])
          // weights *= enorm[:, np.newaxis]
          enorm = 2.0f / (mel_f_upper - mel_f_lower);
 8006824:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8006828:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800682c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006830:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006838:	edc7 7a03 	vstr	s15, [r7, #12]
          weight *= enorm;
 800683c:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8006840:	edd7 7a03 	vldr	s15, [r7, #12]
 8006844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006848:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          // At this point, should be matching with:
          // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=1,htk=False)
        }

        /* Store weight coefficient in Lookup table */
        *weights++ = weight;
 800684c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006850:	1d1a      	adds	r2, r3, #4
 8006852:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006856:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006858:	601a      	str	r2, [r3, #0]
        if (start_index == -1) {
 800685a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800685e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006862:	d102      	bne.n	800686a <MelFilterbank_Init+0x2f0>
          start_index = j;
 8006864:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006866:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
        stop_index = j;
 800686a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800686c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /* Increment coefficient counter */
        *n_coefficients = *n_coefficients + 1;
 8006870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006878:	601a      	str	r2, [r3, #0]
      }
      fft_bin_numbers_start[i] = start_index;
 800687a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006880:	4413      	add	r3, r2
 8006882:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006886:	601a      	str	r2, [r3, #0]
      fft_bin_numbers_stop[i] = stop_index;
 8006888:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800688e:	4413      	add	r3, r2
 8006890:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006894:	601a      	str	r2, [r3, #0]
    for (uint32_t j = 0; j < n_fft / 2; j++)
 8006896:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006898:	3301      	adds	r3, #1
 800689a:	667b      	str	r3, [r7, #100]	; 0x64
 800689c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80068a2:	429a      	cmp	r2, r3
 80068a4:	f4ff af61 	bcc.w	800676a <MelFilterbank_Init+0x1f0>
  for (uint32_t i = 0; i < n_mels; i++)
 80068a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068aa:	3301      	adds	r3, #1
 80068ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80068ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068b2:	429a      	cmp	r2, r3
 80068b4:	f4ff aec7 	bcc.w	8006646 <MelFilterbank_Init+0xcc>
    }
  }
}
 80068b8:	bf00      	nop
 80068ba:	bf00      	nop
 80068bc:	3790      	adds	r7, #144	; 0x90
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <MelFilterbank>:
 * @param      *M          points to an instance of the floating-point MelFilterbank structure.
 * @param      *pSpectrCol points to the input spectrogram slice of length FFTLen / 2.
 * @param      *pMelCol    points to the output mel energies in each filterbank.
 */
void MelFilterbank(MelFilterTypeDef *M, float32_t *pSpectrCol, float32_t *pMelCol)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b08d      	sub	sp, #52	; 0x34
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	60f8      	str	r0, [r7, #12]
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	607a      	str	r2, [r7, #4]
  uint16_t start_idx;
  uint16_t stop_idx;
  uint32_t *pStart_idxs = M->pStartIndices;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	61fb      	str	r3, [r7, #28]
  uint32_t *pStop_idxs = M->pStopIndices;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	61bb      	str	r3, [r7, #24]
  float32_t *pCoefs = M->pCoefficients;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t n_mels = M->NumMels;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	617b      	str	r3, [r7, #20]
  float32_t sum;

  for (uint32_t i = 0; i < n_mels; i++)
 80068e6:	2300      	movs	r3, #0
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
 80068ea:	e034      	b.n	8006956 <MelFilterbank+0x94>
  {
    start_idx = pStart_idxs[i];
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	69fa      	ldr	r2, [r7, #28]
 80068f2:	4413      	add	r3, r2
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	827b      	strh	r3, [r7, #18]
    stop_idx = pStop_idxs[i];
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	4413      	add	r3, r2
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	823b      	strh	r3, [r7, #16]
    sum = 0.0f;
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	62bb      	str	r3, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 800690a:	8a7b      	ldrh	r3, [r7, #18]
 800690c:	623b      	str	r3, [r7, #32]
 800690e:	e015      	b.n	800693c <MelFilterbank+0x7a>
    {
      sum += pSpectrCol[j] * (*pCoefs++);
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	4413      	add	r3, r2
 8006918:	ed93 7a00 	vldr	s14, [r3]
 800691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691e:	1d1a      	adds	r2, r3, #4
 8006920:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006922:	edd3 7a00 	vldr	s15, [r3]
 8006926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800692a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800692e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006932:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	3301      	adds	r3, #1
 800693a:	623b      	str	r3, [r7, #32]
 800693c:	8a3b      	ldrh	r3, [r7, #16]
 800693e:	6a3a      	ldr	r2, [r7, #32]
 8006940:	429a      	cmp	r2, r3
 8006942:	d9e5      	bls.n	8006910 <MelFilterbank+0x4e>
    }
    pMelCol[i] = sum;
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	4413      	add	r3, r2
 800694c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800694e:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++)
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	3301      	adds	r3, #1
 8006954:	627b      	str	r3, [r7, #36]	; 0x24
 8006956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	429a      	cmp	r2, r3
 800695c:	d3c6      	bcc.n	80068ec <MelFilterbank+0x2a>
  }
}
 800695e:	bf00      	nop
 8006960:	bf00      	nop
 8006962:	3734      	adds	r7, #52	; 0x34
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <MelScale>:

/* Private functions ---------------------------------------------------------*/

// based on librosa mel_to_hz()
static __INLINE float MelScale(float freq, MelFormulaTypedef type)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b088      	sub	sp, #32
 8006970:	af00      	add	r7, sp, #0
 8006972:	ed87 0a01 	vstr	s0, [r7, #4]
 8006976:	4603      	mov	r3, r0
 8006978:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 800697a:	78fb      	ldrb	r3, [r7, #3]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d042      	beq.n	8006a06 <MelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 8006980:	f04f 0300 	mov.w	r3, #0
 8006984:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 8006986:	4b2c      	ldr	r3, [pc, #176]	; (8006a38 <MelScale+0xcc>)
 8006988:	617b      	str	r3, [r7, #20]
    float mels = (freq - f_min) / f_sp;
 800698a:	ed97 7a01 	vldr	s14, [r7, #4]
 800698e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006992:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006996:	ed97 7a05 	vldr	s14, [r7, #20]
 800699a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800699e:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Fill in the log-scale part */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 80069a2:	4b26      	ldr	r3, [pc, #152]	; (8006a3c <MelScale+0xd0>)
 80069a4:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 80069a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80069aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80069ae:	ee77 6a67 	vsub.f32	s13, s14, s15
 80069b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80069b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069ba:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 80069be:	4b20      	ldr	r3, [pc, #128]	; (8006a40 <MelScale+0xd4>)
 80069c0:	60bb      	str	r3, [r7, #8]

    if (freq >= min_log_hz)
 80069c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80069c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80069ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d2:	db15      	blt.n	8006a00 <MelScale+0x94>
    {
      mels = min_log_mel + logf(freq / min_log_hz) / logstep;
 80069d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80069d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80069dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80069e0:	eeb0 0a66 	vmov.f32	s0, s13
 80069e4:	f00b fbf6 	bl	80121d4 <logf>
 80069e8:	eef0 6a40 	vmov.f32	s13, s0
 80069ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80069f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80069f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069fc:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return mels;
 8006a00:	edd7 7a07 	vldr	s15, [r7, #28]
 8006a04:	e013      	b.n	8006a2e <MelScale+0xc2>
  } else {
    /* HTK Formula */
    // The formula for converting from frequency to Mel scale is:
    // M(f) = 1127. * ln(1 + f / 700.)
    //      = 2595. * log10(1 + f / 700.)
    return 1127.0f * logf(1.0f + freq / 700.0f);
 8006a06:	ed97 7a01 	vldr	s14, [r7, #4]
 8006a0a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006a44 <MelScale+0xd8>
 8006a0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8006a1e:	f00b fbd9 	bl	80121d4 <logf>
 8006a22:	eef0 7a40 	vmov.f32	s15, s0
 8006a26:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006a48 <MelScale+0xdc>
 8006a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 8006a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8006a32:	3720      	adds	r7, #32
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	42855555 	.word	0x42855555
 8006a3c:	447a0000 	.word	0x447a0000
 8006a40:	3d8ccdbb 	.word	0x3d8ccdbb
 8006a44:	442f0000 	.word	0x442f0000
 8006a48:	448ce000 	.word	0x448ce000

08006a4c <InverseMelScale>:

// based on librosa hz_to_mel()
static __INLINE float InverseMelScale(float mel_freq, MelFormulaTypedef type)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b088      	sub	sp, #32
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	ed87 0a01 	vstr	s0, [r7, #4]
 8006a56:	4603      	mov	r3, r0
 8006a58:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 8006a5a:	78fb      	ldrb	r3, [r7, #3]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d042      	beq.n	8006ae6 <InverseMelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 8006a60:	f04f 0300 	mov.w	r3, #0
 8006a64:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 8006a66:	4b2c      	ldr	r3, [pc, #176]	; (8006b18 <InverseMelScale+0xcc>)
 8006a68:	617b      	str	r3, [r7, #20]
    float freq = f_min + f_sp * mel_freq;
 8006a6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8006a6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a76:	ed97 7a06 	vldr	s14, [r7, #24]
 8006a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a7e:	edc7 7a07 	vstr	s15, [r7, #28]

    /* And now the nonlinear scale */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 8006a82:	4b26      	ldr	r3, [pc, #152]	; (8006b1c <InverseMelScale+0xd0>)
 8006a84:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 8006a86:	ed97 7a04 	vldr	s14, [r7, #16]
 8006a8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8006a8e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006a92:	ed97 7a05 	vldr	s14, [r7, #20]
 8006a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a9a:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 8006a9e:	4b20      	ldr	r3, [pc, #128]	; (8006b20 <InverseMelScale+0xd4>)
 8006aa0:	60bb      	str	r3, [r7, #8]

    if (mel_freq >= min_log_mel)
 8006aa2:	ed97 7a01 	vldr	s14, [r7, #4]
 8006aa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8006aaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab2:	db15      	blt.n	8006ae0 <InverseMelScale+0x94>
    {
      // WARNING: Easy overflow with float32_t
      freq = min_log_hz * expf(logstep * (mel_freq - min_log_mel));
 8006ab4:	ed97 7a01 	vldr	s14, [r7, #4]
 8006ab8:	edd7 7a03 	vldr	s15, [r7, #12]
 8006abc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ac0:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8006acc:	f00b fb44 	bl	8012158 <expf>
 8006ad0:	eeb0 7a40 	vmov.f32	s14, s0
 8006ad4:	edd7 7a04 	vldr	s15, [r7, #16]
 8006ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006adc:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return freq;
 8006ae0:	edd7 7a07 	vldr	s15, [r7, #28]
 8006ae4:	e013      	b.n	8006b0e <InverseMelScale+0xc2>
  } else {
    /* HTK Formula */
    return 700.0f * (expf(mel_freq / 1127.0f) - 1.0f);
 8006ae6:	edd7 7a01 	vldr	s15, [r7, #4]
 8006aea:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006b24 <InverseMelScale+0xd8>
 8006aee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006af2:	eeb0 0a47 	vmov.f32	s0, s14
 8006af6:	f00b fb2f 	bl	8012158 <expf>
 8006afa:	eef0 7a40 	vmov.f32	s15, s0
 8006afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b06:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006b28 <InverseMelScale+0xdc>
 8006b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 8006b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8006b12:	3720      	adds	r7, #32
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	42855555 	.word	0x42855555
 8006b1c:	447a0000 	.word	0x447a0000
 8006b20:	3d8ccdbb 	.word	0x3d8ccdbb
 8006b24:	448ce000 	.word	0x448ce000
 8006b28:	442f0000 	.word	0x442f0000
 8006b2c:	00000000 	.word	0x00000000

08006b30 <Window_Init>:
 * @param      len    window length.
 * @param      type   window type.
 * @return     0 if successful or -1 if there is an error.
 */
int32_t Window_Init(float32_t *pDst, uint32_t len, WindowTypedef type)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	71fb      	strb	r3, [r7, #7]
  int32_t status = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]

  switch (type)
 8006b42:	79fb      	ldrb	r3, [r7, #7]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d01c      	beq.n	8006b82 <Window_Init+0x52>
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	dc25      	bgt.n	8006b98 <Window_Init+0x68>
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <Window_Init+0x26>
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d00b      	beq.n	8006b6c <Window_Init+0x3c>
 8006b54:	e020      	b.n	8006b98 <Window_Init+0x68>
  {
    case WINDOW_HANN:
      cosine_sum_window_create(pDst, len, 0.5, 0.5, 0.0);
 8006b56:	ed9f 2b16 	vldr	d2, [pc, #88]	; 8006bb0 <Window_Init+0x80>
 8006b5a:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8006bb8 <Window_Init+0x88>
 8006b5e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8006bb8 <Window_Init+0x88>
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 f83b 	bl	8006be0 <cosine_sum_window_create>
      break;
 8006b6a:	e019      	b.n	8006ba0 <Window_Init+0x70>
    case WINDOW_HAMMING:
      cosine_sum_window_create(pDst, len, 0.54, 0.46, 0.0);
 8006b6c:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8006bb0 <Window_Init+0x80>
 8006b70:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8006bc0 <Window_Init+0x90>
 8006b74:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8006bc8 <Window_Init+0x98>
 8006b78:	68b9      	ldr	r1, [r7, #8]
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f000 f830 	bl	8006be0 <cosine_sum_window_create>
      break;
 8006b80:	e00e      	b.n	8006ba0 <Window_Init+0x70>
    case WINDOW_BLACKMAN:
      cosine_sum_window_create(pDst, len, 0.42, 0.5, 0.08);
 8006b82:	ed9f 2b13 	vldr	d2, [pc, #76]	; 8006bd0 <Window_Init+0xa0>
 8006b86:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8006bb8 <Window_Init+0x88>
 8006b8a:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8006bd8 <Window_Init+0xa8>
 8006b8e:	68b9      	ldr	r1, [r7, #8]
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 f825 	bl	8006be0 <cosine_sum_window_create>
      break;
 8006b96:	e003      	b.n	8006ba0 <Window_Init+0x70>
    default:
      /* Window type is not implemented */
      status = -1;
 8006b98:	f04f 33ff 	mov.w	r3, #4294967295
 8006b9c:	617b      	str	r3, [r7, #20]
      break;
 8006b9e:	bf00      	nop
  }

  return status;
 8006ba0:	697b      	ldr	r3, [r7, #20]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	f3af 8000 	nop.w
	...
 8006bbc:	3fe00000 	.word	0x3fe00000
 8006bc0:	d70a3d71 	.word	0xd70a3d71
 8006bc4:	3fdd70a3 	.word	0x3fdd70a3
 8006bc8:	147ae148 	.word	0x147ae148
 8006bcc:	3fe147ae 	.word	0x3fe147ae
 8006bd0:	47ae147b 	.word	0x47ae147b
 8006bd4:	3fb47ae1 	.word	0x3fb47ae1
 8006bd8:	ae147ae1 	.word	0xae147ae1
 8006bdc:	3fdae147 	.word	0x3fdae147

08006be0 <cosine_sum_window_create>:

/**
 * @brief Helper function to create cosine-sum windows
 */
void cosine_sum_window_create(float32_t *pDst, uint32_t len, float64_t a0, float64_t a1, float64_t a2)
{
 8006be0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006be4:	b08a      	sub	sp, #40	; 0x28
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	61f8      	str	r0, [r7, #28]
 8006bea:	61b9      	str	r1, [r7, #24]
 8006bec:	ed87 0b04 	vstr	d0, [r7, #16]
 8006bf0:	ed87 1b02 	vstr	d1, [r7, #8]
 8006bf4:	ed87 2b00 	vstr	d2, [r7]

  for (uint32_t i = 0; i < len; i++)
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8006bfc:	e067      	b.n	8006cce <cosine_sum_window_create+0xee>
  {
    *pDst++ = a0
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 8006bfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c00:	f7f9 fc80 	bl	8000504 <__aeabi_ui2d>
 8006c04:	a338      	add	r3, pc, #224	; (adr r3, 8006ce8 <cosine_sum_window_create+0x108>)
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	f7f9 fcf5 	bl	80005f8 <__aeabi_dmul>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	4614      	mov	r4, r2
 8006c14:	461d      	mov	r5, r3
 8006c16:	69b8      	ldr	r0, [r7, #24]
 8006c18:	f7f9 fc74 	bl	8000504 <__aeabi_ui2d>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4620      	mov	r0, r4
 8006c22:	4629      	mov	r1, r5
 8006c24:	f7f9 fe12 	bl	800084c <__aeabi_ddiv>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	ec43 2b17 	vmov	d7, r2, r3
 8006c30:	eeb0 0a47 	vmov.f32	s0, s14
 8006c34:	eef0 0a67 	vmov.f32	s1, s15
 8006c38:	f00b fa3e 	bl	80120b8 <cos>
 8006c3c:	ec51 0b10 	vmov	r0, r1, d0
 8006c40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c44:	f7f9 fcd8 	bl	80005f8 <__aeabi_dmul>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006c50:	f7f9 fb1a 	bl	8000288 <__aeabi_dsub>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	4614      	mov	r4, r2
 8006c5a:	461d      	mov	r5, r3
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 8006c5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c5e:	f7f9 fc51 	bl	8000504 <__aeabi_ui2d>
 8006c62:	a323      	add	r3, pc, #140	; (adr r3, 8006cf0 <cosine_sum_window_create+0x110>)
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	f7f9 fcc6 	bl	80005f8 <__aeabi_dmul>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4690      	mov	r8, r2
 8006c72:	4699      	mov	r9, r3
 8006c74:	69b8      	ldr	r0, [r7, #24]
 8006c76:	f7f9 fc45 	bl	8000504 <__aeabi_ui2d>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4640      	mov	r0, r8
 8006c80:	4649      	mov	r1, r9
 8006c82:	f7f9 fde3 	bl	800084c <__aeabi_ddiv>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	ec43 2b17 	vmov	d7, r2, r3
 8006c8e:	eeb0 0a47 	vmov.f32	s0, s14
 8006c92:	eef0 0a67 	vmov.f32	s1, s15
 8006c96:	f00b fa0f 	bl	80120b8 <cos>
 8006c9a:	ec51 0b10 	vmov	r0, r1, d0
 8006c9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ca2:	f7f9 fca9 	bl	80005f8 <__aeabi_dmul>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4620      	mov	r0, r4
 8006cac:	4629      	mov	r1, r5
 8006cae:	f7f9 faed 	bl	800028c <__adddf3>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	4619      	mov	r1, r3
    *pDst++ = a0
 8006cba:	69fc      	ldr	r4, [r7, #28]
 8006cbc:	1d23      	adds	r3, r4, #4
 8006cbe:	61fb      	str	r3, [r7, #28]
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 8006cc0:	f7f9 ff72 	bl	8000ba8 <__aeabi_d2f>
 8006cc4:	4603      	mov	r3, r0
    *pDst++ = a0
 8006cc6:	6023      	str	r3, [r4, #0]
  for (uint32_t i = 0; i < len; i++)
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	3301      	adds	r3, #1
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d393      	bcc.n	8006bfe <cosine_sum_window_create+0x1e>
  }
}
 8006cd6:	bf00      	nop
 8006cd8:	bf00      	nop
 8006cda:	3728      	adds	r7, #40	; 0x28
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006ce2:	bf00      	nop
 8006ce4:	f3af 8000 	nop.w
 8006ce8:	54442d18 	.word	0x54442d18
 8006cec:	401921fb 	.word	0x401921fb
 8006cf0:	54442d18 	.word	0x54442d18
 8006cf4:	402921fb 	.word	0x402921fb

08006cf8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006cf8:	b590      	push	{r4, r7, lr}
 8006cfa:	b089      	sub	sp, #36	; 0x24
 8006cfc:	af04      	add	r7, sp, #16
 8006cfe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006d00:	2301      	movs	r3, #1
 8006d02:	2202      	movs	r2, #2
 8006d04:	2102      	movs	r1, #2
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fc66 	bl	80075d8 <USBH_FindInterface>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
 8006d12:	2bff      	cmp	r3, #255	; 0xff
 8006d14:	d002      	beq.n	8006d1c <USBH_CDC_InterfaceInit+0x24>
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d901      	bls.n	8006d20 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e13d      	b.n	8006f9c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fc3b 	bl	80075a0 <USBH_SelectInterface>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006d34:	2302      	movs	r3, #2
 8006d36:	e131      	b.n	8006f9c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006d3e:	2050      	movs	r0, #80	; 0x50
 8006d40:	f008 fd46 	bl	800f7d0 <malloc>
 8006d44:	4603      	mov	r3, r0
 8006d46:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e11f      	b.n	8006f9c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006d5c:	2250      	movs	r2, #80	; 0x50
 8006d5e:	2100      	movs	r1, #0
 8006d60:	68b8      	ldr	r0, [r7, #8]
 8006d62:	f008 fd53 	bl	800f80c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	211a      	movs	r1, #26
 8006d6c:	fb01 f303 	mul.w	r3, r1, r3
 8006d70:	4413      	add	r3, r2
 8006d72:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	b25b      	sxtb	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	da15      	bge.n	8006daa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	211a      	movs	r1, #26
 8006d84:	fb01 f303 	mul.w	r3, r1, r3
 8006d88:	4413      	add	r3, r2
 8006d8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d8e:	781a      	ldrb	r2, [r3, #0]
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	211a      	movs	r1, #26
 8006d9a:	fb01 f303 	mul.w	r3, r1, r3
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006da4:	881a      	ldrh	r2, [r3, #0]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	785b      	ldrb	r3, [r3, #1]
 8006dae:	4619      	mov	r1, r3
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f001 fe32 	bl	8008a1a <USBH_AllocPipe>
 8006db6:	4603      	mov	r3, r0
 8006db8:	461a      	mov	r2, r3
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	7819      	ldrb	r1, [r3, #0]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	7858      	ldrb	r0, [r3, #1]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	8952      	ldrh	r2, [r2, #10]
 8006dd6:	9202      	str	r2, [sp, #8]
 8006dd8:	2203      	movs	r2, #3
 8006dda:	9201      	str	r2, [sp, #4]
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	4623      	mov	r3, r4
 8006de0:	4602      	mov	r2, r0
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 fdea 	bl	80089bc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2200      	movs	r2, #0
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f002 f8f9 	bl	8008fe8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006df6:	2300      	movs	r3, #0
 8006df8:	2200      	movs	r2, #0
 8006dfa:	210a      	movs	r1, #10
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fbeb 	bl	80075d8 <USBH_FindInterface>
 8006e02:	4603      	mov	r3, r0
 8006e04:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
 8006e08:	2bff      	cmp	r3, #255	; 0xff
 8006e0a:	d002      	beq.n	8006e12 <USBH_CDC_InterfaceInit+0x11a>
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d901      	bls.n	8006e16 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e12:	2302      	movs	r3, #2
 8006e14:	e0c2      	b.n	8006f9c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006e16:	7bfb      	ldrb	r3, [r7, #15]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	211a      	movs	r1, #26
 8006e1c:	fb01 f303 	mul.w	r3, r1, r3
 8006e20:	4413      	add	r3, r2
 8006e22:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	b25b      	sxtb	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	da16      	bge.n	8006e5c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e2e:	7bfb      	ldrb	r3, [r7, #15]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	211a      	movs	r1, #26
 8006e34:	fb01 f303 	mul.w	r3, r1, r3
 8006e38:	4413      	add	r3, r2
 8006e3a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e3e:	781a      	ldrb	r2, [r3, #0]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	211a      	movs	r1, #26
 8006e4a:	fb01 f303 	mul.w	r3, r1, r3
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e54:	881a      	ldrh	r2, [r3, #0]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	835a      	strh	r2, [r3, #26]
 8006e5a:	e015      	b.n	8006e88 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	211a      	movs	r1, #26
 8006e62:	fb01 f303 	mul.w	r3, r1, r3
 8006e66:	4413      	add	r3, r2
 8006e68:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e6c:	781a      	ldrb	r2, [r3, #0]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	211a      	movs	r1, #26
 8006e78:	fb01 f303 	mul.w	r3, r1, r3
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e82:	881a      	ldrh	r2, [r3, #0]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	211a      	movs	r1, #26
 8006e8e:	fb01 f303 	mul.w	r3, r1, r3
 8006e92:	4413      	add	r3, r2
 8006e94:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	b25b      	sxtb	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	da16      	bge.n	8006ece <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	211a      	movs	r1, #26
 8006ea6:	fb01 f303 	mul.w	r3, r1, r3
 8006eaa:	4413      	add	r3, r2
 8006eac:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006eb0:	781a      	ldrb	r2, [r3, #0]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	211a      	movs	r1, #26
 8006ebc:	fb01 f303 	mul.w	r3, r1, r3
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006ec6:	881a      	ldrh	r2, [r3, #0]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	835a      	strh	r2, [r3, #26]
 8006ecc:	e015      	b.n	8006efa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	211a      	movs	r1, #26
 8006ed4:	fb01 f303 	mul.w	r3, r1, r3
 8006ed8:	4413      	add	r3, r2
 8006eda:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ede:	781a      	ldrb	r2, [r3, #0]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	211a      	movs	r1, #26
 8006eea:	fb01 f303 	mul.w	r3, r1, r3
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006ef4:	881a      	ldrh	r2, [r3, #0]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	7b9b      	ldrb	r3, [r3, #14]
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 fd8a 	bl	8008a1a <USBH_AllocPipe>
 8006f06:	4603      	mov	r3, r0
 8006f08:	461a      	mov	r2, r3
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	7bdb      	ldrb	r3, [r3, #15]
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f001 fd80 	bl	8008a1a <USBH_AllocPipe>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	7b59      	ldrb	r1, [r3, #13]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	7b98      	ldrb	r0, [r3, #14]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	8b12      	ldrh	r2, [r2, #24]
 8006f3a:	9202      	str	r2, [sp, #8]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	9201      	str	r2, [sp, #4]
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	4623      	mov	r3, r4
 8006f44:	4602      	mov	r2, r0
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 fd38 	bl	80089bc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	7b19      	ldrb	r1, [r3, #12]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	7bd8      	ldrb	r0, [r3, #15]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	8b52      	ldrh	r2, [r2, #26]
 8006f64:	9202      	str	r2, [sp, #8]
 8006f66:	2202      	movs	r2, #2
 8006f68:	9201      	str	r2, [sp, #4]
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	4623      	mov	r3, r4
 8006f6e:	4602      	mov	r2, r0
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f001 fd23 	bl	80089bc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	7b5b      	ldrb	r3, [r3, #13]
 8006f82:	2200      	movs	r2, #0
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f002 f82e 	bl	8008fe8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	7b1b      	ldrb	r3, [r3, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	4619      	mov	r1, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f002 f827 	bl	8008fe8 <USBH_LL_SetToggle>

  return USBH_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd90      	pop	{r4, r7, pc}

08006fa4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00e      	beq.n	8006fdc <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f001 fd18 	bl	80089fa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 fd43 	bl	8008a5c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	7b1b      	ldrb	r3, [r3, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00e      	beq.n	8007002 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	7b1b      	ldrb	r3, [r3, #12]
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f001 fd05 	bl	80089fa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	7b1b      	ldrb	r3, [r3, #12]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f001 fd30 	bl	8008a5c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	7b5b      	ldrb	r3, [r3, #13]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00e      	beq.n	8007028 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	7b5b      	ldrb	r3, [r3, #13]
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f001 fcf2 	bl	80089fa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	7b5b      	ldrb	r3, [r3, #13]
 800701a:	4619      	mov	r1, r3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f001 fd1d 	bl	8008a5c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800702e:	69db      	ldr	r3, [r3, #28]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00b      	beq.n	800704c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	4618      	mov	r0, r3
 800703e:	f008 fbcf 	bl	800f7e0 <free>
    phost->pActiveClass->pData = 0U;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007048:	2200      	movs	r2, #0
 800704a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b084      	sub	sp, #16
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	3340      	adds	r3, #64	; 0x40
 800706c:	4619      	mov	r1, r3
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f8b1 	bl	80071d6 <GetLineCoding>
 8007074:	4603      	mov	r3, r0
 8007076:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007078:	7afb      	ldrb	r3, [r7, #11]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d105      	bne.n	800708a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007084:	2102      	movs	r1, #2
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800708a:	7afb      	ldrb	r3, [r7, #11]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800709c:	2301      	movs	r3, #1
 800709e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80070a0:	2300      	movs	r3, #0
 80070a2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	d877      	bhi.n	80071a8 <USBH_CDC_Process+0x114>
 80070b8:	a201      	add	r2, pc, #4	; (adr r2, 80070c0 <USBH_CDC_Process+0x2c>)
 80070ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070be:	bf00      	nop
 80070c0:	080070d5 	.word	0x080070d5
 80070c4:	080070db 	.word	0x080070db
 80070c8:	0800710b 	.word	0x0800710b
 80070cc:	0800717f 	.word	0x0800717f
 80070d0:	0800718d 	.word	0x0800718d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	73fb      	strb	r3, [r7, #15]
      break;
 80070d8:	e06d      	b.n	80071b6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f897 	bl	8007214 <SetLineCoding>
 80070e6:	4603      	mov	r3, r0
 80070e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80070ea:	7bbb      	ldrb	r3, [r7, #14]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d104      	bne.n	80070fa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80070f8:	e058      	b.n	80071ac <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d055      	beq.n	80071ac <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2204      	movs	r2, #4
 8007104:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007108:	e050      	b.n	80071ac <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	3340      	adds	r3, #64	; 0x40
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f860 	bl	80071d6 <GetLineCoding>
 8007116:	4603      	mov	r3, r0
 8007118:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800711a:	7bbb      	ldrb	r3, [r7, #14]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d126      	bne.n	800716e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007132:	791b      	ldrb	r3, [r3, #4]
 8007134:	429a      	cmp	r2, r3
 8007136:	d13b      	bne.n	80071b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007142:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007144:	429a      	cmp	r2, r3
 8007146:	d133      	bne.n	80071b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007152:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007154:	429a      	cmp	r2, r3
 8007156:	d12b      	bne.n	80071b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007160:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007162:	429a      	cmp	r2, r3
 8007164:	d124      	bne.n	80071b0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f958 	bl	800741c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800716c:	e020      	b.n	80071b0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800716e:	7bbb      	ldrb	r3, [r7, #14]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d01d      	beq.n	80071b0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	2204      	movs	r2, #4
 8007178:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800717c:	e018      	b.n	80071b0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f867 	bl	8007252 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f8da 	bl	800733e <CDC_ProcessReception>
      break;
 800718a:	e014      	b.n	80071b6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800718c:	2100      	movs	r1, #0
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 ffe3 	bl	800815a <USBH_ClrFeature>
 8007194:	4603      	mov	r3, r0
 8007196:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007198:	7bbb      	ldrb	r3, [r7, #14]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10a      	bne.n	80071b4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80071a6:	e005      	b.n	80071b4 <USBH_CDC_Process+0x120>

    default:
      break;
 80071a8:	bf00      	nop
 80071aa:	e004      	b.n	80071b6 <USBH_CDC_Process+0x122>
      break;
 80071ac:	bf00      	nop
 80071ae:	e002      	b.n	80071b6 <USBH_CDC_Process+0x122>
      break;
 80071b0:	bf00      	nop
 80071b2:	e000      	b.n	80071b6 <USBH_CDC_Process+0x122>
      break;
 80071b4:	bf00      	nop

  }

  return status;
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b082      	sub	sp, #8
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	22a1      	movs	r2, #161	; 0xa1
 80071e4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2221      	movs	r2, #33	; 0x21
 80071ea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2207      	movs	r2, #7
 80071fc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2207      	movs	r2, #7
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f001 f988 	bl	800851a <USBH_CtlReq>
 800720a:	4603      	mov	r3, r0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2221      	movs	r2, #33	; 0x21
 8007222:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2220      	movs	r2, #32
 8007228:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2207      	movs	r2, #7
 800723a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2207      	movs	r2, #7
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f001 f969 	bl	800851a <USBH_CtlReq>
 8007248:	4603      	mov	r3, r0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b086      	sub	sp, #24
 8007256:	af02      	add	r7, sp, #8
 8007258:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007264:	2300      	movs	r3, #0
 8007266:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800726e:	2b01      	cmp	r3, #1
 8007270:	d002      	beq.n	8007278 <CDC_ProcessTransmission+0x26>
 8007272:	2b02      	cmp	r3, #2
 8007274:	d023      	beq.n	80072be <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007276:	e05e      	b.n	8007336 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	8b12      	ldrh	r2, [r2, #24]
 8007280:	4293      	cmp	r3, r2
 8007282:	d90b      	bls.n	800729c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	69d9      	ldr	r1, [r3, #28]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	8b1a      	ldrh	r2, [r3, #24]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	7b5b      	ldrb	r3, [r3, #13]
 8007290:	2001      	movs	r0, #1
 8007292:	9000      	str	r0, [sp, #0]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f001 fb4e 	bl	8008936 <USBH_BulkSendData>
 800729a:	e00b      	b.n	80072b4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	7b5b      	ldrb	r3, [r3, #13]
 80072aa:	2001      	movs	r0, #1
 80072ac:	9000      	str	r0, [sp, #0]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f001 fb41 	bl	8008936 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2202      	movs	r2, #2
 80072b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80072bc:	e03b      	b.n	8007336 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	7b5b      	ldrb	r3, [r3, #13]
 80072c2:	4619      	mov	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 fe65 	bl	8008f94 <USBH_LL_GetURBState>
 80072ca:	4603      	mov	r3, r0
 80072cc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80072ce:	7afb      	ldrb	r3, [r7, #11]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d128      	bne.n	8007326 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	8b12      	ldrh	r2, [r2, #24]
 80072dc:	4293      	cmp	r3, r2
 80072de:	d90e      	bls.n	80072fe <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	8b12      	ldrh	r2, [r2, #24]
 80072e8:	1a9a      	subs	r2, r3, r2
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	8b12      	ldrh	r2, [r2, #24]
 80072f6:	441a      	add	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	61da      	str	r2, [r3, #28]
 80072fc:	e002      	b.n	8007304 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	2b00      	cmp	r3, #0
 800730a:	d004      	beq.n	8007316 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007314:	e00e      	b.n	8007334 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f868 	bl	80073f4 <USBH_CDC_TransmitCallback>
      break;
 8007324:	e006      	b.n	8007334 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007326:	7afb      	ldrb	r3, [r7, #11]
 8007328:	2b02      	cmp	r3, #2
 800732a:	d103      	bne.n	8007334 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007334:	bf00      	nop
  }
}
 8007336:	bf00      	nop
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b086      	sub	sp, #24
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007350:	2300      	movs	r3, #0
 8007352:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800735a:	2b03      	cmp	r3, #3
 800735c:	d002      	beq.n	8007364 <CDC_ProcessReception+0x26>
 800735e:	2b04      	cmp	r3, #4
 8007360:	d00e      	beq.n	8007380 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007362:	e043      	b.n	80073ec <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	6a19      	ldr	r1, [r3, #32]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	8b5a      	ldrh	r2, [r3, #26]
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	7b1b      	ldrb	r3, [r3, #12]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f001 fb05 	bl	8008980 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2204      	movs	r2, #4
 800737a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800737e:	e035      	b.n	80073ec <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	7b1b      	ldrb	r3, [r3, #12]
 8007384:	4619      	mov	r1, r3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f001 fe04 	bl	8008f94 <USBH_LL_GetURBState>
 800738c:	4603      	mov	r3, r0
 800738e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007390:	7cfb      	ldrb	r3, [r7, #19]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d129      	bne.n	80073ea <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	7b1b      	ldrb	r3, [r3, #12]
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f001 fd67 	bl	8008e70 <USBH_LL_GetLastXferSize>
 80073a2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d016      	beq.n	80073dc <CDC_ProcessReception+0x9e>
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	8b5b      	ldrh	r3, [r3, #26]
 80073b2:	461a      	mov	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d910      	bls.n	80073dc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	1ad2      	subs	r2, r2, r3
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	6a1a      	ldr	r2, [r3, #32]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	441a      	add	r2, r3
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2203      	movs	r2, #3
 80073d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80073da:	e006      	b.n	80073ea <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f80f 	bl	8007408 <USBH_CDC_ReceiveCallback>
      break;
 80073ea:	bf00      	nop
  }
}
 80073ec:	bf00      	nop
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	4613      	mov	r3, r2
 800743c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d101      	bne.n	8007448 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007444:	2302      	movs	r3, #2
 8007446:	e029      	b.n	800749c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	79fa      	ldrb	r2, [r7, #7]
 800744c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 f81f 	bl	80074a4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d003      	beq.n	8007494 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f001 fc37 	bl	8008d08 <USBH_LL_Init>

  return USBH_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074b0:	2300      	movs	r3, #0
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	e009      	b.n	80074ca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	33e0      	adds	r3, #224	; 0xe0
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	2200      	movs	r2, #0
 80074c2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3301      	adds	r3, #1
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b0e      	cmp	r3, #14
 80074ce:	d9f2      	bls.n	80074b6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	e009      	b.n	80074ea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80074e0:	2200      	movs	r2, #0
 80074e2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	3301      	adds	r3, #1
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074f0:	d3f1      	bcc.n	80074d6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2240      	movs	r2, #64	; 0x40
 8007516:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d016      	beq.n	800758e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10e      	bne.n	8007588 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007570:	1c59      	adds	r1, r3, #1
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	33de      	adds	r3, #222	; 0xde
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]
 8007586:	e004      	b.n	8007592 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007588:	2302      	movs	r3, #2
 800758a:	73fb      	strb	r3, [r7, #15]
 800758c:	e001      	b.n	8007592 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800758e:	2302      	movs	r3, #2
 8007590:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007592:	7bfb      	ldrb	r3, [r7, #15]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80075b6:	78fa      	ldrb	r2, [r7, #3]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d204      	bcs.n	80075c6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	78fa      	ldrb	r2, [r7, #3]
 80075c0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80075c4:	e001      	b.n	80075ca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80075c6:	2302      	movs	r3, #2
 80075c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	4608      	mov	r0, r1
 80075e2:	4611      	mov	r1, r2
 80075e4:	461a      	mov	r2, r3
 80075e6:	4603      	mov	r3, r0
 80075e8:	70fb      	strb	r3, [r7, #3]
 80075ea:	460b      	mov	r3, r1
 80075ec:	70bb      	strb	r3, [r7, #2]
 80075ee:	4613      	mov	r3, r2
 80075f0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007600:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007602:	e025      	b.n	8007650 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007604:	7dfb      	ldrb	r3, [r7, #23]
 8007606:	221a      	movs	r2, #26
 8007608:	fb02 f303 	mul.w	r3, r2, r3
 800760c:	3308      	adds	r3, #8
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	4413      	add	r3, r2
 8007612:	3302      	adds	r3, #2
 8007614:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	795b      	ldrb	r3, [r3, #5]
 800761a:	78fa      	ldrb	r2, [r7, #3]
 800761c:	429a      	cmp	r2, r3
 800761e:	d002      	beq.n	8007626 <USBH_FindInterface+0x4e>
 8007620:	78fb      	ldrb	r3, [r7, #3]
 8007622:	2bff      	cmp	r3, #255	; 0xff
 8007624:	d111      	bne.n	800764a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800762a:	78ba      	ldrb	r2, [r7, #2]
 800762c:	429a      	cmp	r2, r3
 800762e:	d002      	beq.n	8007636 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007630:	78bb      	ldrb	r3, [r7, #2]
 8007632:	2bff      	cmp	r3, #255	; 0xff
 8007634:	d109      	bne.n	800764a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800763a:	787a      	ldrb	r2, [r7, #1]
 800763c:	429a      	cmp	r2, r3
 800763e:	d002      	beq.n	8007646 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007640:	787b      	ldrb	r3, [r7, #1]
 8007642:	2bff      	cmp	r3, #255	; 0xff
 8007644:	d101      	bne.n	800764a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007646:	7dfb      	ldrb	r3, [r7, #23]
 8007648:	e006      	b.n	8007658 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800764a:	7dfb      	ldrb	r3, [r7, #23]
 800764c:	3301      	adds	r3, #1
 800764e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007650:	7dfb      	ldrb	r3, [r7, #23]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d9d6      	bls.n	8007604 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007656:	23ff      	movs	r3, #255	; 0xff
}
 8007658:	4618      	mov	r0, r3
 800765a:	371c      	adds	r7, #28
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 fb87 	bl	8008d80 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007672:	2101      	movs	r1, #1
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f001 fca0 	bl	8008fba <USBH_LL_DriverVBUS>

  return USBH_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b088      	sub	sp, #32
 8007688:	af04      	add	r7, sp, #16
 800768a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800768c:	2302      	movs	r3, #2
 800768e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b01      	cmp	r3, #1
 800769e:	d102      	bne.n	80076a6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2203      	movs	r2, #3
 80076a4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b0b      	cmp	r3, #11
 80076ae:	f200 81b3 	bhi.w	8007a18 <USBH_Process+0x394>
 80076b2:	a201      	add	r2, pc, #4	; (adr r2, 80076b8 <USBH_Process+0x34>)
 80076b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b8:	080076e9 	.word	0x080076e9
 80076bc:	0800771b 	.word	0x0800771b
 80076c0:	08007783 	.word	0x08007783
 80076c4:	080079b3 	.word	0x080079b3
 80076c8:	08007a19 	.word	0x08007a19
 80076cc:	08007827 	.word	0x08007827
 80076d0:	08007959 	.word	0x08007959
 80076d4:	0800785d 	.word	0x0800785d
 80076d8:	0800787d 	.word	0x0800787d
 80076dc:	0800789d 	.word	0x0800789d
 80076e0:	080078cb 	.word	0x080078cb
 80076e4:	0800799b 	.word	0x0800799b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 8193 	beq.w	8007a1c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80076fc:	20c8      	movs	r0, #200	; 0xc8
 80076fe:	f001 fca3 	bl	8009048 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f001 fb99 	bl	8008e3a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007718:	e180      	b.n	8007a1c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007720:	2b01      	cmp	r3, #1
 8007722:	d107      	bne.n	8007734 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2202      	movs	r2, #2
 8007730:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007732:	e182      	b.n	8007a3a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800773a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800773e:	d914      	bls.n	800776a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007746:	3301      	adds	r3, #1
 8007748:	b2da      	uxtb	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007756:	2b03      	cmp	r3, #3
 8007758:	d903      	bls.n	8007762 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	220d      	movs	r2, #13
 800775e:	701a      	strb	r2, [r3, #0]
      break;
 8007760:	e16b      	b.n	8007a3a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	701a      	strb	r2, [r3, #0]
      break;
 8007768:	e167      	b.n	8007a3a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007770:	f103 020a 	add.w	r2, r3, #10
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800777a:	200a      	movs	r0, #10
 800777c:	f001 fc64 	bl	8009048 <USBH_Delay>
      break;
 8007780:	e15b      	b.n	8007a3a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007788:	2b00      	cmp	r3, #0
 800778a:	d005      	beq.n	8007798 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007792:	2104      	movs	r1, #4
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007798:	2064      	movs	r0, #100	; 0x64
 800779a:	f001 fc55 	bl	8009048 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f001 fb24 	bl	8008dec <USBH_LL_GetSpeed>
 80077a4:	4603      	mov	r3, r0
 80077a6:	461a      	mov	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2205      	movs	r2, #5
 80077b2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80077b4:	2100      	movs	r1, #0
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f001 f92f 	bl	8008a1a <USBH_AllocPipe>
 80077bc:	4603      	mov	r3, r0
 80077be:	461a      	mov	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80077c4:	2180      	movs	r1, #128	; 0x80
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f001 f927 	bl	8008a1a <USBH_AllocPipe>
 80077cc:	4603      	mov	r3, r0
 80077ce:	461a      	mov	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	7919      	ldrb	r1, [r3, #4]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80077e8:	b292      	uxth	r2, r2
 80077ea:	9202      	str	r2, [sp, #8]
 80077ec:	2200      	movs	r2, #0
 80077ee:	9201      	str	r2, [sp, #4]
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	4603      	mov	r3, r0
 80077f4:	2280      	movs	r2, #128	; 0x80
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f001 f8e0 	bl	80089bc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	7959      	ldrb	r1, [r3, #5]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007810:	b292      	uxth	r2, r2
 8007812:	9202      	str	r2, [sp, #8]
 8007814:	2200      	movs	r2, #0
 8007816:	9201      	str	r2, [sp, #4]
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	4603      	mov	r3, r0
 800781c:	2200      	movs	r2, #0
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 f8cc 	bl	80089bc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007824:	e109      	b.n	8007a3a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f90c 	bl	8007a44 <USBH_HandleEnum>
 800782c:	4603      	mov	r3, r0
 800782e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007830:	7bbb      	ldrb	r3, [r7, #14]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b00      	cmp	r3, #0
 8007836:	f040 80f3 	bne.w	8007a20 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007848:	2b01      	cmp	r3, #1
 800784a:	d103      	bne.n	8007854 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2208      	movs	r2, #8
 8007850:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007852:	e0e5      	b.n	8007a20 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2207      	movs	r2, #7
 8007858:	701a      	strb	r2, [r3, #0]
      break;
 800785a:	e0e1      	b.n	8007a20 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 80de 	beq.w	8007a24 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800786e:	2101      	movs	r1, #1
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2208      	movs	r2, #8
 8007878:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800787a:	e0d3      	b.n	8007a24 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007882:	b29b      	uxth	r3, r3
 8007884:	4619      	mov	r1, r3
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fc20 	bl	80080cc <USBH_SetCfg>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	f040 80ca 	bne.w	8007a28 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2209      	movs	r2, #9
 8007898:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800789a:	e0c5      	b.n	8007a28 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80078a2:	f003 0320 	and.w	r3, r3, #32
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00b      	beq.n	80078c2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80078aa:	2101      	movs	r1, #1
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fc30 	bl	8008112 <USBH_SetFeature>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f040 80b9 	bne.w	8007a2c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	220a      	movs	r2, #10
 80078be:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078c0:	e0b4      	b.n	8007a2c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	220a      	movs	r2, #10
 80078c6:	701a      	strb	r2, [r3, #0]
      break;
 80078c8:	e0b0      	b.n	8007a2c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 80ad 	beq.w	8007a30 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80078de:	2300      	movs	r3, #0
 80078e0:	73fb      	strb	r3, [r7, #15]
 80078e2:	e016      	b.n	8007912 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80078e4:	7bfa      	ldrb	r2, [r7, #15]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	32de      	adds	r2, #222	; 0xde
 80078ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ee:	791a      	ldrb	r2, [r3, #4]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d108      	bne.n	800790c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80078fa:	7bfa      	ldrb	r2, [r7, #15]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	32de      	adds	r2, #222	; 0xde
 8007900:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800790a:	e005      	b.n	8007918 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800790c:	7bfb      	ldrb	r3, [r7, #15]
 800790e:	3301      	adds	r3, #1
 8007910:	73fb      	strb	r3, [r7, #15]
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d0e5      	beq.n	80078e4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800791e:	2b00      	cmp	r3, #0
 8007920:	d016      	beq.n	8007950 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	4798      	blx	r3
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d109      	bne.n	8007948 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2206      	movs	r2, #6
 8007938:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007940:	2103      	movs	r1, #3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007946:	e073      	b.n	8007a30 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	220d      	movs	r2, #13
 800794c:	701a      	strb	r2, [r3, #0]
      break;
 800794e:	e06f      	b.n	8007a30 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	220d      	movs	r2, #13
 8007954:	701a      	strb	r2, [r3, #0]
      break;
 8007956:	e06b      	b.n	8007a30 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800795e:	2b00      	cmp	r3, #0
 8007960:	d017      	beq.n	8007992 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	4798      	blx	r3
 800796e:	4603      	mov	r3, r0
 8007970:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007972:	7bbb      	ldrb	r3, [r7, #14]
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d103      	bne.n	8007982 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	220b      	movs	r2, #11
 800797e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007980:	e058      	b.n	8007a34 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007982:	7bbb      	ldrb	r3, [r7, #14]
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b02      	cmp	r3, #2
 8007988:	d154      	bne.n	8007a34 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	220d      	movs	r2, #13
 800798e:	701a      	strb	r2, [r3, #0]
      break;
 8007990:	e050      	b.n	8007a34 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	220d      	movs	r2, #13
 8007996:	701a      	strb	r2, [r3, #0]
      break;
 8007998:	e04c      	b.n	8007a34 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d049      	beq.n	8007a38 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	4798      	blx	r3
      }
      break;
 80079b0:	e042      	b.n	8007a38 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7ff fd72 	bl	80074a4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d009      	beq.n	80079de <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d005      	beq.n	80079f4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079ee:	2105      	movs	r1, #5
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d107      	bne.n	8007a10 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7ff fe2b 	bl	8007664 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a0e:	e014      	b.n	8007a3a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f001 f9b5 	bl	8008d80 <USBH_LL_Start>
      break;
 8007a16:	e010      	b.n	8007a3a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007a18:	bf00      	nop
 8007a1a:	e00e      	b.n	8007a3a <USBH_Process+0x3b6>
      break;
 8007a1c:	bf00      	nop
 8007a1e:	e00c      	b.n	8007a3a <USBH_Process+0x3b6>
      break;
 8007a20:	bf00      	nop
 8007a22:	e00a      	b.n	8007a3a <USBH_Process+0x3b6>
    break;
 8007a24:	bf00      	nop
 8007a26:	e008      	b.n	8007a3a <USBH_Process+0x3b6>
      break;
 8007a28:	bf00      	nop
 8007a2a:	e006      	b.n	8007a3a <USBH_Process+0x3b6>
      break;
 8007a2c:	bf00      	nop
 8007a2e:	e004      	b.n	8007a3a <USBH_Process+0x3b6>
      break;
 8007a30:	bf00      	nop
 8007a32:	e002      	b.n	8007a3a <USBH_Process+0x3b6>
      break;
 8007a34:	bf00      	nop
 8007a36:	e000      	b.n	8007a3a <USBH_Process+0x3b6>
      break;
 8007a38:	bf00      	nop
  }
  return USBH_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b088      	sub	sp, #32
 8007a48:	af04      	add	r7, sp, #16
 8007a4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007a50:	2301      	movs	r3, #1
 8007a52:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	785b      	ldrb	r3, [r3, #1]
 8007a58:	2b07      	cmp	r3, #7
 8007a5a:	f200 81c1 	bhi.w	8007de0 <USBH_HandleEnum+0x39c>
 8007a5e:	a201      	add	r2, pc, #4	; (adr r2, 8007a64 <USBH_HandleEnum+0x20>)
 8007a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a64:	08007a85 	.word	0x08007a85
 8007a68:	08007b43 	.word	0x08007b43
 8007a6c:	08007bad 	.word	0x08007bad
 8007a70:	08007c3b 	.word	0x08007c3b
 8007a74:	08007ca5 	.word	0x08007ca5
 8007a78:	08007d15 	.word	0x08007d15
 8007a7c:	08007d5b 	.word	0x08007d5b
 8007a80:	08007da1 	.word	0x08007da1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007a84:	2108      	movs	r1, #8
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fa50 	bl	8007f2c <USBH_Get_DevDesc>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d130      	bne.n	8007af8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	7919      	ldrb	r1, [r3, #4]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007aba:	b292      	uxth	r2, r2
 8007abc:	9202      	str	r2, [sp, #8]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	9201      	str	r2, [sp, #4]
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2280      	movs	r2, #128	; 0x80
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 ff77 	bl	80089bc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	7959      	ldrb	r1, [r3, #5]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ae2:	b292      	uxth	r2, r2
 8007ae4:	9202      	str	r2, [sp, #8]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	9201      	str	r2, [sp, #4]
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	4603      	mov	r3, r0
 8007aee:	2200      	movs	r2, #0
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 ff63 	bl	80089bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007af6:	e175      	b.n	8007de4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007af8:	7bbb      	ldrb	r3, [r7, #14]
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	f040 8172 	bne.w	8007de4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b06:	3301      	adds	r3, #1
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d903      	bls.n	8007b22 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	220d      	movs	r2, #13
 8007b1e:	701a      	strb	r2, [r3, #0]
      break;
 8007b20:	e160      	b.n	8007de4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	795b      	ldrb	r3, [r3, #5]
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 ff97 	bl	8008a5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	791b      	ldrb	r3, [r3, #4]
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 ff91 	bl	8008a5c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	701a      	strb	r2, [r3, #0]
      break;
 8007b40:	e150      	b.n	8007de4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007b42:	2112      	movs	r1, #18
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f9f1 	bl	8007f2c <USBH_Get_DevDesc>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d103      	bne.n	8007b5c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2202      	movs	r2, #2
 8007b58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b5a:	e145      	b.n	8007de8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
 8007b5e:	2b03      	cmp	r3, #3
 8007b60:	f040 8142 	bne.w	8007de8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	b2da      	uxtb	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	d903      	bls.n	8007b86 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	220d      	movs	r2, #13
 8007b82:	701a      	strb	r2, [r3, #0]
      break;
 8007b84:	e130      	b.n	8007de8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	795b      	ldrb	r3, [r3, #5]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 ff65 	bl	8008a5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	791b      	ldrb	r3, [r3, #4]
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 ff5f 	bl	8008a5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	701a      	strb	r2, [r3, #0]
      break;
 8007baa:	e11d      	b.n	8007de8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007bac:	2101      	movs	r1, #1
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fa68 	bl	8008084 <USBH_SetAddress>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bb8:	7bbb      	ldrb	r3, [r7, #14]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d132      	bne.n	8007c24 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007bbe:	2002      	movs	r0, #2
 8007bc0:	f001 fa42 	bl	8009048 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2203      	movs	r2, #3
 8007bd0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	7919      	ldrb	r1, [r3, #4]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007be6:	b292      	uxth	r2, r2
 8007be8:	9202      	str	r2, [sp, #8]
 8007bea:	2200      	movs	r2, #0
 8007bec:	9201      	str	r2, [sp, #4]
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2280      	movs	r2, #128	; 0x80
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fee1 	bl	80089bc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	7959      	ldrb	r1, [r3, #5]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c0e:	b292      	uxth	r2, r2
 8007c10:	9202      	str	r2, [sp, #8]
 8007c12:	2200      	movs	r2, #0
 8007c14:	9201      	str	r2, [sp, #4]
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fecd 	bl	80089bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c22:	e0e3      	b.n	8007dec <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	f040 80e0 	bne.w	8007dec <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	220d      	movs	r2, #13
 8007c30:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	705a      	strb	r2, [r3, #1]
      break;
 8007c38:	e0d8      	b.n	8007dec <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007c3a:	2109      	movs	r1, #9
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f99d 	bl	8007f7c <USBH_Get_CfgDesc>
 8007c42:	4603      	mov	r3, r0
 8007c44:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d103      	bne.n	8007c54 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2204      	movs	r2, #4
 8007c50:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c52:	e0cd      	b.n	8007df0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c54:	7bbb      	ldrb	r3, [r7, #14]
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	f040 80ca 	bne.w	8007df0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c62:	3301      	adds	r3, #1
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d903      	bls.n	8007c7e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	220d      	movs	r2, #13
 8007c7a:	701a      	strb	r2, [r3, #0]
      break;
 8007c7c:	e0b8      	b.n	8007df0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	795b      	ldrb	r3, [r3, #5]
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fee9 	bl	8008a5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	791b      	ldrb	r3, [r3, #4]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fee3 	bl	8008a5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	701a      	strb	r2, [r3, #0]
      break;
 8007ca2:	e0a5      	b.n	8007df0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f965 	bl	8007f7c <USBH_Get_CfgDesc>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cb6:	7bbb      	ldrb	r3, [r7, #14]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d103      	bne.n	8007cc4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2205      	movs	r2, #5
 8007cc0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007cc2:	e097      	b.n	8007df4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cc4:	7bbb      	ldrb	r3, [r7, #14]
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	f040 8094 	bne.w	8007df4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	b2da      	uxtb	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ce2:	2b03      	cmp	r3, #3
 8007ce4:	d903      	bls.n	8007cee <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	220d      	movs	r2, #13
 8007cea:	701a      	strb	r2, [r3, #0]
      break;
 8007cec:	e082      	b.n	8007df4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	795b      	ldrb	r3, [r3, #5]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 feb1 	bl	8008a5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	791b      	ldrb	r3, [r3, #4]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 feab 	bl	8008a5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	701a      	strb	r2, [r3, #0]
      break;
 8007d12:	e06f      	b.n	8007df4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d019      	beq.n	8007d52 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d2a:	23ff      	movs	r3, #255	; 0xff
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f949 	bl	8007fc4 <USBH_Get_StringDesc>
 8007d32:	4603      	mov	r3, r0
 8007d34:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d36:	7bbb      	ldrb	r3, [r7, #14]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d103      	bne.n	8007d44 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2206      	movs	r2, #6
 8007d40:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007d42:	e059      	b.n	8007df8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d44:	7bbb      	ldrb	r3, [r7, #14]
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d156      	bne.n	8007df8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2206      	movs	r2, #6
 8007d4e:	705a      	strb	r2, [r3, #1]
      break;
 8007d50:	e052      	b.n	8007df8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2206      	movs	r2, #6
 8007d56:	705a      	strb	r2, [r3, #1]
      break;
 8007d58:	e04e      	b.n	8007df8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d019      	beq.n	8007d98 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d70:	23ff      	movs	r3, #255	; 0xff
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f926 	bl	8007fc4 <USBH_Get_StringDesc>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d7c:	7bbb      	ldrb	r3, [r7, #14]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d103      	bne.n	8007d8a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2207      	movs	r2, #7
 8007d86:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007d88:	e038      	b.n	8007dfc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d8a:	7bbb      	ldrb	r3, [r7, #14]
 8007d8c:	2b03      	cmp	r3, #3
 8007d8e:	d135      	bne.n	8007dfc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2207      	movs	r2, #7
 8007d94:	705a      	strb	r2, [r3, #1]
      break;
 8007d96:	e031      	b.n	8007dfc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2207      	movs	r2, #7
 8007d9c:	705a      	strb	r2, [r3, #1]
      break;
 8007d9e:	e02d      	b.n	8007dfc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d017      	beq.n	8007dda <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007db6:	23ff      	movs	r3, #255	; 0xff
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f903 	bl	8007fc4 <USBH_Get_StringDesc>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d102      	bne.n	8007dce <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007dcc:	e018      	b.n	8007e00 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	2b03      	cmp	r3, #3
 8007dd2:	d115      	bne.n	8007e00 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8007dd8:	e012      	b.n	8007e00 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73fb      	strb	r3, [r7, #15]
      break;
 8007dde:	e00f      	b.n	8007e00 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007de0:	bf00      	nop
 8007de2:	e00e      	b.n	8007e02 <USBH_HandleEnum+0x3be>
      break;
 8007de4:	bf00      	nop
 8007de6:	e00c      	b.n	8007e02 <USBH_HandleEnum+0x3be>
      break;
 8007de8:	bf00      	nop
 8007dea:	e00a      	b.n	8007e02 <USBH_HandleEnum+0x3be>
      break;
 8007dec:	bf00      	nop
 8007dee:	e008      	b.n	8007e02 <USBH_HandleEnum+0x3be>
      break;
 8007df0:	bf00      	nop
 8007df2:	e006      	b.n	8007e02 <USBH_HandleEnum+0x3be>
      break;
 8007df4:	bf00      	nop
 8007df6:	e004      	b.n	8007e02 <USBH_HandleEnum+0x3be>
      break;
 8007df8:	bf00      	nop
 8007dfa:	e002      	b.n	8007e02 <USBH_HandleEnum+0x3be>
      break;
 8007dfc:	bf00      	nop
 8007dfe:	e000      	b.n	8007e02 <USBH_HandleEnum+0x3be>
      break;
 8007e00:	bf00      	nop
  }
  return Status;
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007e1e:	bf00      	nop
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e38:	1c5a      	adds	r2, r3, #1
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f804 	bl	8007e4e <USBH_HandleSof>
}
 8007e46:	bf00      	nop
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b082      	sub	sp, #8
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b0b      	cmp	r3, #11
 8007e5e:	d10a      	bne.n	8007e76 <USBH_HandleSof+0x28>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d005      	beq.n	8007e76 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	4798      	blx	r3
  }
}
 8007e76:	bf00      	nop
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b083      	sub	sp, #12
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007e8e:	bf00      	nop
}
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007eaa:	bf00      	nop
}
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 ff56 	bl	8008db6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	791b      	ldrb	r3, [r3, #4]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fda3 	bl	8008a5c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	795b      	ldrb	r3, [r3, #5]
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fd9d 	bl	8008a5c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af02      	add	r7, sp, #8
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007f3e:	78fb      	ldrb	r3, [r7, #3]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	4613      	mov	r3, r2
 8007f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f864 	bl	800801a <USBH_GetDescriptor>
 8007f52:	4603      	mov	r3, r0
 8007f54:	73fb      	strb	r3, [r7, #15]
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10a      	bne.n	8007f72 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f68:	78fa      	ldrb	r2, [r7, #3]
 8007f6a:	b292      	uxth	r2, r2
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	f000 f918 	bl	80081a2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af02      	add	r7, sp, #8
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	460b      	mov	r3, r1
 8007f86:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	331c      	adds	r3, #28
 8007f8c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007f8e:	887b      	ldrh	r3, [r7, #2]
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f98:	2100      	movs	r1, #0
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f83d 	bl	800801a <USBH_GetDescriptor>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	72fb      	strb	r3, [r7, #11]
 8007fa4:	7afb      	ldrb	r3, [r7, #11]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d107      	bne.n	8007fba <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007fb0:	887a      	ldrh	r2, [r7, #2]
 8007fb2:	68f9      	ldr	r1, [r7, #12]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 f964 	bl	8008282 <USBH_ParseCfgDesc>
  }

  return status;
 8007fba:	7afb      	ldrb	r3, [r7, #11]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b088      	sub	sp, #32
 8007fc8:	af02      	add	r7, sp, #8
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	607a      	str	r2, [r7, #4]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	72fb      	strb	r3, [r7, #11]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007fd8:	7afb      	ldrb	r3, [r7, #11]
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007fe0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007fe8:	893b      	ldrh	r3, [r7, #8]
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	460b      	mov	r3, r1
 8007fee:	2100      	movs	r1, #0
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f000 f812 	bl	800801a <USBH_GetDescriptor>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	75fb      	strb	r3, [r7, #23]
 8007ffa:	7dfb      	ldrb	r3, [r7, #23]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d107      	bne.n	8008010 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008006:	893a      	ldrh	r2, [r7, #8]
 8008008:	6879      	ldr	r1, [r7, #4]
 800800a:	4618      	mov	r0, r3
 800800c:	f000 fa37 	bl	800847e <USBH_ParseStringDesc>
  }

  return status;
 8008010:	7dfb      	ldrb	r3, [r7, #23]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	607b      	str	r3, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	72fb      	strb	r3, [r7, #11]
 8008028:	4613      	mov	r3, r2
 800802a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	789b      	ldrb	r3, [r3, #2]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d11c      	bne.n	800806e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008034:	7afb      	ldrb	r3, [r7, #11]
 8008036:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800803a:	b2da      	uxtb	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2206      	movs	r2, #6
 8008044:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	893a      	ldrh	r2, [r7, #8]
 800804a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800804c:	893b      	ldrh	r3, [r7, #8]
 800804e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008056:	d104      	bne.n	8008062 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f240 4209 	movw	r2, #1033	; 0x409
 800805e:	829a      	strh	r2, [r3, #20]
 8008060:	e002      	b.n	8008068 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	8b3a      	ldrh	r2, [r7, #24]
 800806c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800806e:	8b3b      	ldrh	r3, [r7, #24]
 8008070:	461a      	mov	r2, r3
 8008072:	6879      	ldr	r1, [r7, #4]
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 fa50 	bl	800851a <USBH_CtlReq>
 800807a:	4603      	mov	r3, r0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	460b      	mov	r3, r1
 800808e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	789b      	ldrb	r3, [r3, #2]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d10f      	bne.n	80080b8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2205      	movs	r2, #5
 80080a2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80080a4:	78fb      	ldrb	r3, [r7, #3]
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80080b8:	2200      	movs	r2, #0
 80080ba:	2100      	movs	r1, #0
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fa2c 	bl	800851a <USBH_CtlReq>
 80080c2:	4603      	mov	r3, r0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	460b      	mov	r3, r1
 80080d6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	789b      	ldrb	r3, [r3, #2]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d10e      	bne.n	80080fe <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2209      	movs	r2, #9
 80080ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	887a      	ldrh	r2, [r7, #2]
 80080f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80080fe:	2200      	movs	r2, #0
 8008100:	2100      	movs	r1, #0
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fa09 	bl	800851a <USBH_CtlReq>
 8008108:	4603      	mov	r3, r0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	460b      	mov	r3, r1
 800811c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	789b      	ldrb	r3, [r3, #2]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d10f      	bne.n	8008146 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2203      	movs	r2, #3
 8008130:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008132:	78fb      	ldrb	r3, [r7, #3]
 8008134:	b29a      	uxth	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008146:	2200      	movs	r2, #0
 8008148:	2100      	movs	r1, #0
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f9e5 	bl	800851a <USBH_CtlReq>
 8008150:	4603      	mov	r3, r0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b082      	sub	sp, #8
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	460b      	mov	r3, r1
 8008164:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	789b      	ldrb	r3, [r3, #2]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d10f      	bne.n	800818e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2202      	movs	r2, #2
 8008172:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008180:	78fb      	ldrb	r3, [r7, #3]
 8008182:	b29a      	uxth	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800818e:	2200      	movs	r2, #0
 8008190:	2100      	movs	r1, #0
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f9c1 	bl	800851a <USBH_CtlReq>
 8008198:	4603      	mov	r3, r0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b085      	sub	sp, #20
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	60f8      	str	r0, [r7, #12]
 80081aa:	60b9      	str	r1, [r7, #8]
 80081ac:	4613      	mov	r3, r2
 80081ae:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	781a      	ldrb	r2, [r3, #0]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	785a      	ldrb	r2, [r3, #1]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	3302      	adds	r3, #2
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	3303      	adds	r3, #3
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	021b      	lsls	r3, r3, #8
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	4313      	orrs	r3, r2
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	791a      	ldrb	r2, [r3, #4]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	795a      	ldrb	r2, [r3, #5]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	799a      	ldrb	r2, [r3, #6]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	79da      	ldrb	r2, [r3, #7]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80081fc:	88fb      	ldrh	r3, [r7, #6]
 80081fe:	2b08      	cmp	r3, #8
 8008200:	d939      	bls.n	8008276 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	3308      	adds	r3, #8
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	b29a      	uxth	r2, r3
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	3309      	adds	r3, #9
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	b29b      	uxth	r3, r3
 8008212:	021b      	lsls	r3, r3, #8
 8008214:	b29b      	uxth	r3, r3
 8008216:	4313      	orrs	r3, r2
 8008218:	b29a      	uxth	r2, r3
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	330a      	adds	r3, #10
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	b29a      	uxth	r2, r3
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	330b      	adds	r3, #11
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	b29b      	uxth	r3, r3
 800822e:	021b      	lsls	r3, r3, #8
 8008230:	b29b      	uxth	r3, r3
 8008232:	4313      	orrs	r3, r2
 8008234:	b29a      	uxth	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	330c      	adds	r3, #12
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	b29a      	uxth	r2, r3
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	330d      	adds	r3, #13
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	b29b      	uxth	r3, r3
 800824a:	021b      	lsls	r3, r3, #8
 800824c:	b29b      	uxth	r3, r3
 800824e:	4313      	orrs	r3, r2
 8008250:	b29a      	uxth	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	7b9a      	ldrb	r2, [r3, #14]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	7bda      	ldrb	r2, [r3, #15]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	7c1a      	ldrb	r2, [r3, #16]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	7c5a      	ldrb	r2, [r3, #17]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	745a      	strb	r2, [r3, #17]
  }
}
 8008276:	bf00      	nop
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b08a      	sub	sp, #40	; 0x28
 8008286:	af00      	add	r7, sp, #0
 8008288:	60f8      	str	r0, [r7, #12]
 800828a:	60b9      	str	r1, [r7, #8]
 800828c:	4613      	mov	r3, r2
 800828e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008294:	2300      	movs	r3, #0
 8008296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	781a      	ldrb	r2, [r3, #0]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	785a      	ldrb	r2, [r3, #1]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	3302      	adds	r3, #2
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	3303      	adds	r3, #3
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	021b      	lsls	r3, r3, #8
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	4313      	orrs	r3, r2
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	791a      	ldrb	r2, [r3, #4]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	795a      	ldrb	r2, [r3, #5]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	799a      	ldrb	r2, [r3, #6]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	79da      	ldrb	r2, [r3, #7]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	7a1a      	ldrb	r2, [r3, #8]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80082f8:	88fb      	ldrh	r3, [r7, #6]
 80082fa:	2b09      	cmp	r3, #9
 80082fc:	d95f      	bls.n	80083be <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80082fe:	2309      	movs	r3, #9
 8008300:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008302:	2300      	movs	r3, #0
 8008304:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008306:	e051      	b.n	80083ac <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008308:	f107 0316 	add.w	r3, r7, #22
 800830c:	4619      	mov	r1, r3
 800830e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008310:	f000 f8e8 	bl	80084e4 <USBH_GetNextDesc>
 8008314:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008318:	785b      	ldrb	r3, [r3, #1]
 800831a:	2b04      	cmp	r3, #4
 800831c:	d146      	bne.n	80083ac <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800831e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008322:	221a      	movs	r2, #26
 8008324:	fb02 f303 	mul.w	r3, r2, r3
 8008328:	3308      	adds	r3, #8
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	4413      	add	r3, r2
 800832e:	3302      	adds	r3, #2
 8008330:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008332:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008334:	69f8      	ldr	r0, [r7, #28]
 8008336:	f000 f846 	bl	80083c6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800833a:	2300      	movs	r3, #0
 800833c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008340:	2300      	movs	r3, #0
 8008342:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008344:	e022      	b.n	800838c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008346:	f107 0316 	add.w	r3, r7, #22
 800834a:	4619      	mov	r1, r3
 800834c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800834e:	f000 f8c9 	bl	80084e4 <USBH_GetNextDesc>
 8008352:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008356:	785b      	ldrb	r3, [r3, #1]
 8008358:	2b05      	cmp	r3, #5
 800835a:	d117      	bne.n	800838c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800835c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008360:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008364:	3201      	adds	r2, #1
 8008366:	00d2      	lsls	r2, r2, #3
 8008368:	211a      	movs	r1, #26
 800836a:	fb01 f303 	mul.w	r3, r1, r3
 800836e:	4413      	add	r3, r2
 8008370:	3308      	adds	r3, #8
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	4413      	add	r3, r2
 8008376:	3304      	adds	r3, #4
 8008378:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800837a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800837c:	69b8      	ldr	r0, [r7, #24]
 800837e:	f000 f851 	bl	8008424 <USBH_ParseEPDesc>
            ep_ix++;
 8008382:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008386:	3301      	adds	r3, #1
 8008388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	791b      	ldrb	r3, [r3, #4]
 8008390:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008394:	429a      	cmp	r2, r3
 8008396:	d204      	bcs.n	80083a2 <USBH_ParseCfgDesc+0x120>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	885a      	ldrh	r2, [r3, #2]
 800839c:	8afb      	ldrh	r3, [r7, #22]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d8d1      	bhi.n	8008346 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80083a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083a6:	3301      	adds	r3, #1
 80083a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80083ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d804      	bhi.n	80083be <USBH_ParseCfgDesc+0x13c>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	885a      	ldrh	r2, [r3, #2]
 80083b8:	8afb      	ldrh	r3, [r7, #22]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d8a4      	bhi.n	8008308 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80083be:	bf00      	nop
 80083c0:	3728      	adds	r7, #40	; 0x28
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b083      	sub	sp, #12
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	781a      	ldrb	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	785a      	ldrb	r2, [r3, #1]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	789a      	ldrb	r2, [r3, #2]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	78da      	ldrb	r2, [r3, #3]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	791a      	ldrb	r2, [r3, #4]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	795a      	ldrb	r2, [r3, #5]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	799a      	ldrb	r2, [r3, #6]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	79da      	ldrb	r2, [r3, #7]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	7a1a      	ldrb	r2, [r3, #8]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	721a      	strb	r2, [r3, #8]
}
 8008418:	bf00      	nop
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	781a      	ldrb	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	785a      	ldrb	r2, [r3, #1]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	789a      	ldrb	r2, [r3, #2]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	78da      	ldrb	r2, [r3, #3]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	3304      	adds	r3, #4
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	b29a      	uxth	r2, r3
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	3305      	adds	r3, #5
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	b29b      	uxth	r3, r3
 800845e:	021b      	lsls	r3, r3, #8
 8008460:	b29b      	uxth	r3, r3
 8008462:	4313      	orrs	r3, r2
 8008464:	b29a      	uxth	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	799a      	ldrb	r2, [r3, #6]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	719a      	strb	r2, [r3, #6]
}
 8008472:	bf00      	nop
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800847e:	b480      	push	{r7}
 8008480:	b087      	sub	sp, #28
 8008482:	af00      	add	r7, sp, #0
 8008484:	60f8      	str	r0, [r7, #12]
 8008486:	60b9      	str	r1, [r7, #8]
 8008488:	4613      	mov	r3, r2
 800848a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	3301      	adds	r3, #1
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	2b03      	cmp	r3, #3
 8008494:	d120      	bne.n	80084d8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	1e9a      	subs	r2, r3, #2
 800849c:	88fb      	ldrh	r3, [r7, #6]
 800849e:	4293      	cmp	r3, r2
 80084a0:	bf28      	it	cs
 80084a2:	4613      	movcs	r3, r2
 80084a4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	3302      	adds	r3, #2
 80084aa:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80084ac:	2300      	movs	r3, #0
 80084ae:	82fb      	strh	r3, [r7, #22]
 80084b0:	e00b      	b.n	80084ca <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80084b2:	8afb      	ldrh	r3, [r7, #22]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	4413      	add	r3, r2
 80084b8:	781a      	ldrb	r2, [r3, #0]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	701a      	strb	r2, [r3, #0]
      pdest++;
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	3301      	adds	r3, #1
 80084c2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80084c4:	8afb      	ldrh	r3, [r7, #22]
 80084c6:	3302      	adds	r3, #2
 80084c8:	82fb      	strh	r3, [r7, #22]
 80084ca:	8afa      	ldrh	r2, [r7, #22]
 80084cc:	8abb      	ldrh	r3, [r7, #20]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d3ef      	bcc.n	80084b2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	2200      	movs	r2, #0
 80084d6:	701a      	strb	r2, [r3, #0]
  }
}
 80084d8:	bf00      	nop
 80084da:	371c      	adds	r7, #28
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	881a      	ldrh	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	4413      	add	r3, r2
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4413      	add	r3, r2
 800850a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800850c:	68fb      	ldr	r3, [r7, #12]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b086      	sub	sp, #24
 800851e:	af00      	add	r7, sp, #0
 8008520:	60f8      	str	r0, [r7, #12]
 8008522:	60b9      	str	r1, [r7, #8]
 8008524:	4613      	mov	r3, r2
 8008526:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008528:	2301      	movs	r3, #1
 800852a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	789b      	ldrb	r3, [r3, #2]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d002      	beq.n	800853a <USBH_CtlReq+0x20>
 8008534:	2b02      	cmp	r3, #2
 8008536:	d00f      	beq.n	8008558 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008538:	e027      	b.n	800858a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	88fa      	ldrh	r2, [r7, #6]
 8008544:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2201      	movs	r2, #1
 800854a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2202      	movs	r2, #2
 8008550:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008552:	2301      	movs	r3, #1
 8008554:	75fb      	strb	r3, [r7, #23]
      break;
 8008556:	e018      	b.n	800858a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 f81b 	bl	8008594 <USBH_HandleControl>
 800855e:	4603      	mov	r3, r0
 8008560:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008562:	7dfb      	ldrb	r3, [r7, #23]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <USBH_CtlReq+0x54>
 8008568:	7dfb      	ldrb	r3, [r7, #23]
 800856a:	2b03      	cmp	r3, #3
 800856c:	d106      	bne.n	800857c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2201      	movs	r2, #1
 8008572:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	761a      	strb	r2, [r3, #24]
      break;
 800857a:	e005      	b.n	8008588 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800857c:	7dfb      	ldrb	r3, [r7, #23]
 800857e:	2b02      	cmp	r3, #2
 8008580:	d102      	bne.n	8008588 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2201      	movs	r2, #1
 8008586:	709a      	strb	r2, [r3, #2]
      break;
 8008588:	bf00      	nop
  }
  return status;
 800858a:	7dfb      	ldrb	r3, [r7, #23]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af02      	add	r7, sp, #8
 800859a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800859c:	2301      	movs	r3, #1
 800859e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	7e1b      	ldrb	r3, [r3, #24]
 80085a8:	3b01      	subs	r3, #1
 80085aa:	2b0a      	cmp	r3, #10
 80085ac:	f200 8156 	bhi.w	800885c <USBH_HandleControl+0x2c8>
 80085b0:	a201      	add	r2, pc, #4	; (adr r2, 80085b8 <USBH_HandleControl+0x24>)
 80085b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b6:	bf00      	nop
 80085b8:	080085e5 	.word	0x080085e5
 80085bc:	080085ff 	.word	0x080085ff
 80085c0:	08008669 	.word	0x08008669
 80085c4:	0800868f 	.word	0x0800868f
 80085c8:	080086c7 	.word	0x080086c7
 80085cc:	080086f1 	.word	0x080086f1
 80085d0:	08008743 	.word	0x08008743
 80085d4:	08008765 	.word	0x08008765
 80085d8:	080087a1 	.word	0x080087a1
 80085dc:	080087c7 	.word	0x080087c7
 80085e0:	08008805 	.word	0x08008805
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f103 0110 	add.w	r1, r3, #16
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	795b      	ldrb	r3, [r3, #5]
 80085ee:	461a      	mov	r2, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f943 	bl	800887c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2202      	movs	r2, #2
 80085fa:	761a      	strb	r2, [r3, #24]
      break;
 80085fc:	e139      	b.n	8008872 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	795b      	ldrb	r3, [r3, #5]
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fcc5 	bl	8008f94 <USBH_LL_GetURBState>
 800860a:	4603      	mov	r3, r0
 800860c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800860e:	7bbb      	ldrb	r3, [r7, #14]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d11e      	bne.n	8008652 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	7c1b      	ldrb	r3, [r3, #16]
 8008618:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800861c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	8adb      	ldrh	r3, [r3, #22]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00a      	beq.n	800863c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008626:	7b7b      	ldrb	r3, [r7, #13]
 8008628:	2b80      	cmp	r3, #128	; 0x80
 800862a:	d103      	bne.n	8008634 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2203      	movs	r2, #3
 8008630:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008632:	e115      	b.n	8008860 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2205      	movs	r2, #5
 8008638:	761a      	strb	r2, [r3, #24]
      break;
 800863a:	e111      	b.n	8008860 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800863c:	7b7b      	ldrb	r3, [r7, #13]
 800863e:	2b80      	cmp	r3, #128	; 0x80
 8008640:	d103      	bne.n	800864a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2209      	movs	r2, #9
 8008646:	761a      	strb	r2, [r3, #24]
      break;
 8008648:	e10a      	b.n	8008860 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2207      	movs	r2, #7
 800864e:	761a      	strb	r2, [r3, #24]
      break;
 8008650:	e106      	b.n	8008860 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008652:	7bbb      	ldrb	r3, [r7, #14]
 8008654:	2b04      	cmp	r3, #4
 8008656:	d003      	beq.n	8008660 <USBH_HandleControl+0xcc>
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	2b02      	cmp	r3, #2
 800865c:	f040 8100 	bne.w	8008860 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	220b      	movs	r2, #11
 8008664:	761a      	strb	r2, [r3, #24]
      break;
 8008666:	e0fb      	b.n	8008860 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800866e:	b29a      	uxth	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6899      	ldr	r1, [r3, #8]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	899a      	ldrh	r2, [r3, #12]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	791b      	ldrb	r3, [r3, #4]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f93a 	bl	80088fa <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2204      	movs	r2, #4
 800868a:	761a      	strb	r2, [r3, #24]
      break;
 800868c:	e0f1      	b.n	8008872 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	791b      	ldrb	r3, [r3, #4]
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fc7d 	bl	8008f94 <USBH_LL_GetURBState>
 800869a:	4603      	mov	r3, r0
 800869c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d102      	bne.n	80086aa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2209      	movs	r2, #9
 80086a8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	2b05      	cmp	r3, #5
 80086ae:	d102      	bne.n	80086b6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80086b0:	2303      	movs	r3, #3
 80086b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80086b4:	e0d6      	b.n	8008864 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	2b04      	cmp	r3, #4
 80086ba:	f040 80d3 	bne.w	8008864 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	220b      	movs	r2, #11
 80086c2:	761a      	strb	r2, [r3, #24]
      break;
 80086c4:	e0ce      	b.n	8008864 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6899      	ldr	r1, [r3, #8]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	899a      	ldrh	r2, [r3, #12]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	795b      	ldrb	r3, [r3, #5]
 80086d2:	2001      	movs	r0, #1
 80086d4:	9000      	str	r0, [sp, #0]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f8ea 	bl	80088b0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2206      	movs	r2, #6
 80086ec:	761a      	strb	r2, [r3, #24]
      break;
 80086ee:	e0c0      	b.n	8008872 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	795b      	ldrb	r3, [r3, #5]
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fc4c 	bl	8008f94 <USBH_LL_GetURBState>
 80086fc:	4603      	mov	r3, r0
 80086fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008700:	7bbb      	ldrb	r3, [r7, #14]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d103      	bne.n	800870e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2207      	movs	r2, #7
 800870a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800870c:	e0ac      	b.n	8008868 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800870e:	7bbb      	ldrb	r3, [r7, #14]
 8008710:	2b05      	cmp	r3, #5
 8008712:	d105      	bne.n	8008720 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	220c      	movs	r2, #12
 8008718:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800871a:	2303      	movs	r3, #3
 800871c:	73fb      	strb	r3, [r7, #15]
      break;
 800871e:	e0a3      	b.n	8008868 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008720:	7bbb      	ldrb	r3, [r7, #14]
 8008722:	2b02      	cmp	r3, #2
 8008724:	d103      	bne.n	800872e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2205      	movs	r2, #5
 800872a:	761a      	strb	r2, [r3, #24]
      break;
 800872c:	e09c      	b.n	8008868 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800872e:	7bbb      	ldrb	r3, [r7, #14]
 8008730:	2b04      	cmp	r3, #4
 8008732:	f040 8099 	bne.w	8008868 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	220b      	movs	r2, #11
 800873a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800873c:	2302      	movs	r3, #2
 800873e:	73fb      	strb	r3, [r7, #15]
      break;
 8008740:	e092      	b.n	8008868 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	791b      	ldrb	r3, [r3, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	2100      	movs	r1, #0
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f8d5 	bl	80088fa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008756:	b29a      	uxth	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2208      	movs	r2, #8
 8008760:	761a      	strb	r2, [r3, #24]

      break;
 8008762:	e086      	b.n	8008872 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	791b      	ldrb	r3, [r3, #4]
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fc12 	bl	8008f94 <USBH_LL_GetURBState>
 8008770:	4603      	mov	r3, r0
 8008772:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008774:	7bbb      	ldrb	r3, [r7, #14]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d105      	bne.n	8008786 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	220d      	movs	r2, #13
 800877e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008780:	2300      	movs	r3, #0
 8008782:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008784:	e072      	b.n	800886c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008786:	7bbb      	ldrb	r3, [r7, #14]
 8008788:	2b04      	cmp	r3, #4
 800878a:	d103      	bne.n	8008794 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	220b      	movs	r2, #11
 8008790:	761a      	strb	r2, [r3, #24]
      break;
 8008792:	e06b      	b.n	800886c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008794:	7bbb      	ldrb	r3, [r7, #14]
 8008796:	2b05      	cmp	r3, #5
 8008798:	d168      	bne.n	800886c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800879a:	2303      	movs	r3, #3
 800879c:	73fb      	strb	r3, [r7, #15]
      break;
 800879e:	e065      	b.n	800886c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	795b      	ldrb	r3, [r3, #5]
 80087a4:	2201      	movs	r2, #1
 80087a6:	9200      	str	r2, [sp, #0]
 80087a8:	2200      	movs	r2, #0
 80087aa:	2100      	movs	r1, #0
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f87f 	bl	80088b0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	220a      	movs	r2, #10
 80087c2:	761a      	strb	r2, [r3, #24]
      break;
 80087c4:	e055      	b.n	8008872 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	795b      	ldrb	r3, [r3, #5]
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fbe1 	bl	8008f94 <USBH_LL_GetURBState>
 80087d2:	4603      	mov	r3, r0
 80087d4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d105      	bne.n	80087e8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	220d      	movs	r2, #13
 80087e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80087e6:	e043      	b.n	8008870 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80087e8:	7bbb      	ldrb	r3, [r7, #14]
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d103      	bne.n	80087f6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2209      	movs	r2, #9
 80087f2:	761a      	strb	r2, [r3, #24]
      break;
 80087f4:	e03c      	b.n	8008870 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80087f6:	7bbb      	ldrb	r3, [r7, #14]
 80087f8:	2b04      	cmp	r3, #4
 80087fa:	d139      	bne.n	8008870 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	220b      	movs	r2, #11
 8008800:	761a      	strb	r2, [r3, #24]
      break;
 8008802:	e035      	b.n	8008870 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	7e5b      	ldrb	r3, [r3, #25]
 8008808:	3301      	adds	r3, #1
 800880a:	b2da      	uxtb	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	765a      	strb	r2, [r3, #25]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	7e5b      	ldrb	r3, [r3, #25]
 8008814:	2b02      	cmp	r3, #2
 8008816:	d806      	bhi.n	8008826 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008824:	e025      	b.n	8008872 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800882c:	2106      	movs	r1, #6
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	795b      	ldrb	r3, [r3, #5]
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f90c 	bl	8008a5c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	791b      	ldrb	r3, [r3, #4]
 8008848:	4619      	mov	r1, r3
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f906 	bl	8008a5c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008856:	2302      	movs	r3, #2
 8008858:	73fb      	strb	r3, [r7, #15]
      break;
 800885a:	e00a      	b.n	8008872 <USBH_HandleControl+0x2de>

    default:
      break;
 800885c:	bf00      	nop
 800885e:	e008      	b.n	8008872 <USBH_HandleControl+0x2de>
      break;
 8008860:	bf00      	nop
 8008862:	e006      	b.n	8008872 <USBH_HandleControl+0x2de>
      break;
 8008864:	bf00      	nop
 8008866:	e004      	b.n	8008872 <USBH_HandleControl+0x2de>
      break;
 8008868:	bf00      	nop
 800886a:	e002      	b.n	8008872 <USBH_HandleControl+0x2de>
      break;
 800886c:	bf00      	nop
 800886e:	e000      	b.n	8008872 <USBH_HandleControl+0x2de>
      break;
 8008870:	bf00      	nop
  }

  return status;
 8008872:	7bfb      	ldrb	r3, [r7, #15]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b088      	sub	sp, #32
 8008880:	af04      	add	r7, sp, #16
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	4613      	mov	r3, r2
 8008888:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800888a:	79f9      	ldrb	r1, [r7, #7]
 800888c:	2300      	movs	r3, #0
 800888e:	9303      	str	r3, [sp, #12]
 8008890:	2308      	movs	r3, #8
 8008892:	9302      	str	r3, [sp, #8]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	9301      	str	r3, [sp, #4]
 8008898:	2300      	movs	r3, #0
 800889a:	9300      	str	r3, [sp, #0]
 800889c:	2300      	movs	r3, #0
 800889e:	2200      	movs	r2, #0
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 fb46 	bl	8008f32 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b088      	sub	sp, #32
 80088b4:	af04      	add	r7, sp, #16
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	4611      	mov	r1, r2
 80088bc:	461a      	mov	r2, r3
 80088be:	460b      	mov	r3, r1
 80088c0:	80fb      	strh	r3, [r7, #6]
 80088c2:	4613      	mov	r3, r2
 80088c4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d001      	beq.n	80088d4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80088d4:	7979      	ldrb	r1, [r7, #5]
 80088d6:	7e3b      	ldrb	r3, [r7, #24]
 80088d8:	9303      	str	r3, [sp, #12]
 80088da:	88fb      	ldrh	r3, [r7, #6]
 80088dc:	9302      	str	r3, [sp, #8]
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	9301      	str	r3, [sp, #4]
 80088e2:	2301      	movs	r3, #1
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	2300      	movs	r3, #0
 80088e8:	2200      	movs	r2, #0
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 fb21 	bl	8008f32 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b088      	sub	sp, #32
 80088fe:	af04      	add	r7, sp, #16
 8008900:	60f8      	str	r0, [r7, #12]
 8008902:	60b9      	str	r1, [r7, #8]
 8008904:	4611      	mov	r1, r2
 8008906:	461a      	mov	r2, r3
 8008908:	460b      	mov	r3, r1
 800890a:	80fb      	strh	r3, [r7, #6]
 800890c:	4613      	mov	r3, r2
 800890e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008910:	7979      	ldrb	r1, [r7, #5]
 8008912:	2300      	movs	r3, #0
 8008914:	9303      	str	r3, [sp, #12]
 8008916:	88fb      	ldrh	r3, [r7, #6]
 8008918:	9302      	str	r3, [sp, #8]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	2301      	movs	r3, #1
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	2300      	movs	r3, #0
 8008924:	2201      	movs	r2, #1
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f000 fb03 	bl	8008f32 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800892c:	2300      	movs	r3, #0

}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b088      	sub	sp, #32
 800893a:	af04      	add	r7, sp, #16
 800893c:	60f8      	str	r0, [r7, #12]
 800893e:	60b9      	str	r1, [r7, #8]
 8008940:	4611      	mov	r1, r2
 8008942:	461a      	mov	r2, r3
 8008944:	460b      	mov	r3, r1
 8008946:	80fb      	strh	r3, [r7, #6]
 8008948:	4613      	mov	r3, r2
 800894a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008956:	2300      	movs	r3, #0
 8008958:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800895a:	7979      	ldrb	r1, [r7, #5]
 800895c:	7e3b      	ldrb	r3, [r7, #24]
 800895e:	9303      	str	r3, [sp, #12]
 8008960:	88fb      	ldrh	r3, [r7, #6]
 8008962:	9302      	str	r3, [sp, #8]
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	9301      	str	r3, [sp, #4]
 8008968:	2301      	movs	r3, #1
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	2302      	movs	r3, #2
 800896e:	2200      	movs	r2, #0
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 fade 	bl	8008f32 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b088      	sub	sp, #32
 8008984:	af04      	add	r7, sp, #16
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	4611      	mov	r1, r2
 800898c:	461a      	mov	r2, r3
 800898e:	460b      	mov	r3, r1
 8008990:	80fb      	strh	r3, [r7, #6]
 8008992:	4613      	mov	r3, r2
 8008994:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008996:	7979      	ldrb	r1, [r7, #5]
 8008998:	2300      	movs	r3, #0
 800899a:	9303      	str	r3, [sp, #12]
 800899c:	88fb      	ldrh	r3, [r7, #6]
 800899e:	9302      	str	r3, [sp, #8]
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	9301      	str	r3, [sp, #4]
 80089a4:	2301      	movs	r3, #1
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	2302      	movs	r3, #2
 80089aa:	2201      	movs	r2, #1
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f000 fac0 	bl	8008f32 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b086      	sub	sp, #24
 80089c0:	af04      	add	r7, sp, #16
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	4608      	mov	r0, r1
 80089c6:	4611      	mov	r1, r2
 80089c8:	461a      	mov	r2, r3
 80089ca:	4603      	mov	r3, r0
 80089cc:	70fb      	strb	r3, [r7, #3]
 80089ce:	460b      	mov	r3, r1
 80089d0:	70bb      	strb	r3, [r7, #2]
 80089d2:	4613      	mov	r3, r2
 80089d4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80089d6:	7878      	ldrb	r0, [r7, #1]
 80089d8:	78ba      	ldrb	r2, [r7, #2]
 80089da:	78f9      	ldrb	r1, [r7, #3]
 80089dc:	8b3b      	ldrh	r3, [r7, #24]
 80089de:	9302      	str	r3, [sp, #8]
 80089e0:	7d3b      	ldrb	r3, [r7, #20]
 80089e2:	9301      	str	r3, [sp, #4]
 80089e4:	7c3b      	ldrb	r3, [r7, #16]
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	4603      	mov	r3, r0
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fa53 	bl	8008e96 <USBH_LL_OpenPipe>

  return USBH_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b082      	sub	sp, #8
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	460b      	mov	r3, r1
 8008a04:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008a06:	78fb      	ldrb	r3, [r7, #3]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fa72 	bl	8008ef4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	460b      	mov	r3, r1
 8008a24:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 f836 	bl	8008a98 <USBH_GetFreePipe>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008a30:	89fb      	ldrh	r3, [r7, #14]
 8008a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d00a      	beq.n	8008a50 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008a3a:	78fa      	ldrb	r2, [r7, #3]
 8008a3c:	89fb      	ldrh	r3, [r7, #14]
 8008a3e:	f003 030f 	and.w	r3, r3, #15
 8008a42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a46:	6879      	ldr	r1, [r7, #4]
 8008a48:	33e0      	adds	r3, #224	; 0xe0
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	440b      	add	r3, r1
 8008a4e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008a50:	89fb      	ldrh	r3, [r7, #14]
 8008a52:	b2db      	uxtb	r3, r3
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	460b      	mov	r3, r1
 8008a66:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008a68:	78fb      	ldrb	r3, [r7, #3]
 8008a6a:	2b0a      	cmp	r3, #10
 8008a6c:	d80d      	bhi.n	8008a8a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008a6e:	78fb      	ldrb	r3, [r7, #3]
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	33e0      	adds	r3, #224	; 0xe0
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	685a      	ldr	r2, [r3, #4]
 8008a7a:	78fb      	ldrb	r3, [r7, #3]
 8008a7c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008a80:	6879      	ldr	r1, [r7, #4]
 8008a82:	33e0      	adds	r3, #224	; 0xe0
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	440b      	add	r3, r1
 8008a88:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	73fb      	strb	r3, [r7, #15]
 8008aa8:	e00f      	b.n	8008aca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	33e0      	adds	r3, #224	; 0xe0
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d102      	bne.n	8008ac4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	e007      	b.n	8008ad4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	73fb      	strb	r3, [r7, #15]
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
 8008acc:	2b0a      	cmp	r3, #10
 8008ace:	d9ec      	bls.n	8008aaa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	490e      	ldr	r1, [pc, #56]	; (8008b20 <MX_USB_HOST_Init+0x40>)
 8008ae8:	480e      	ldr	r0, [pc, #56]	; (8008b24 <MX_USB_HOST_Init+0x44>)
 8008aea:	f7fe fca1 	bl	8007430 <USBH_Init>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008af4:	f7f8 fdc8 	bl	8001688 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008af8:	490b      	ldr	r1, [pc, #44]	; (8008b28 <MX_USB_HOST_Init+0x48>)
 8008afa:	480a      	ldr	r0, [pc, #40]	; (8008b24 <MX_USB_HOST_Init+0x44>)
 8008afc:	f7fe fd26 	bl	800754c <USBH_RegisterClass>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d001      	beq.n	8008b0a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008b06:	f7f8 fdbf 	bl	8001688 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008b0a:	4806      	ldr	r0, [pc, #24]	; (8008b24 <MX_USB_HOST_Init+0x44>)
 8008b0c:	f7fe fdaa 	bl	8007664 <USBH_Start>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008b16:	f7f8 fdb7 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008b1a:	bf00      	nop
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	08008b41 	.word	0x08008b41
 8008b24:	20019304 	.word	0x20019304
 8008b28:	2000000c 	.word	0x2000000c

08008b2c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008b30:	4802      	ldr	r0, [pc, #8]	; (8008b3c <MX_USB_HOST_Process+0x10>)
 8008b32:	f7fe fda7 	bl	8007684 <USBH_Process>
}
 8008b36:	bf00      	nop
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	20019304 	.word	0x20019304

08008b40 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008b4c:	78fb      	ldrb	r3, [r7, #3]
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	2b04      	cmp	r3, #4
 8008b52:	d819      	bhi.n	8008b88 <USBH_UserProcess+0x48>
 8008b54:	a201      	add	r2, pc, #4	; (adr r2, 8008b5c <USBH_UserProcess+0x1c>)
 8008b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5a:	bf00      	nop
 8008b5c:	08008b89 	.word	0x08008b89
 8008b60:	08008b79 	.word	0x08008b79
 8008b64:	08008b89 	.word	0x08008b89
 8008b68:	08008b81 	.word	0x08008b81
 8008b6c:	08008b71 	.word	0x08008b71
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008b70:	4b09      	ldr	r3, [pc, #36]	; (8008b98 <USBH_UserProcess+0x58>)
 8008b72:	2203      	movs	r2, #3
 8008b74:	701a      	strb	r2, [r3, #0]
  break;
 8008b76:	e008      	b.n	8008b8a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008b78:	4b07      	ldr	r3, [pc, #28]	; (8008b98 <USBH_UserProcess+0x58>)
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	701a      	strb	r2, [r3, #0]
  break;
 8008b7e:	e004      	b.n	8008b8a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008b80:	4b05      	ldr	r3, [pc, #20]	; (8008b98 <USBH_UserProcess+0x58>)
 8008b82:	2201      	movs	r2, #1
 8008b84:	701a      	strb	r2, [r3, #0]
  break;
 8008b86:	e000      	b.n	8008b8a <USBH_UserProcess+0x4a>

  default:
  break;
 8008b88:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008b8a:	bf00      	nop
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	2000327c 	.word	0x2000327c

08008b9c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b08a      	sub	sp, #40	; 0x28
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ba4:	f107 0314 	add.w	r3, r7, #20
 8008ba8:	2200      	movs	r2, #0
 8008baa:	601a      	str	r2, [r3, #0]
 8008bac:	605a      	str	r2, [r3, #4]
 8008bae:	609a      	str	r2, [r3, #8]
 8008bb0:	60da      	str	r2, [r3, #12]
 8008bb2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bbc:	d147      	bne.n	8008c4e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	613b      	str	r3, [r7, #16]
 8008bc2:	4b25      	ldr	r3, [pc, #148]	; (8008c58 <HAL_HCD_MspInit+0xbc>)
 8008bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc6:	4a24      	ldr	r2, [pc, #144]	; (8008c58 <HAL_HCD_MspInit+0xbc>)
 8008bc8:	f043 0301 	orr.w	r3, r3, #1
 8008bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8008bce:	4b22      	ldr	r3, [pc, #136]	; (8008c58 <HAL_HCD_MspInit+0xbc>)
 8008bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	613b      	str	r3, [r7, #16]
 8008bd8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008be0:	2300      	movs	r3, #0
 8008be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008be4:	2300      	movs	r3, #0
 8008be6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008be8:	f107 0314 	add.w	r3, r7, #20
 8008bec:	4619      	mov	r1, r3
 8008bee:	481b      	ldr	r0, [pc, #108]	; (8008c5c <HAL_HCD_MspInit+0xc0>)
 8008bf0:	f7f9 f914 	bl	8001e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008bf4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c02:	2300      	movs	r3, #0
 8008c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c06:	230a      	movs	r3, #10
 8008c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c0a:	f107 0314 	add.w	r3, r7, #20
 8008c0e:	4619      	mov	r1, r3
 8008c10:	4812      	ldr	r0, [pc, #72]	; (8008c5c <HAL_HCD_MspInit+0xc0>)
 8008c12:	f7f9 f903 	bl	8001e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c16:	4b10      	ldr	r3, [pc, #64]	; (8008c58 <HAL_HCD_MspInit+0xbc>)
 8008c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1a:	4a0f      	ldr	r2, [pc, #60]	; (8008c58 <HAL_HCD_MspInit+0xbc>)
 8008c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c20:	6353      	str	r3, [r2, #52]	; 0x34
 8008c22:	2300      	movs	r3, #0
 8008c24:	60fb      	str	r3, [r7, #12]
 8008c26:	4b0c      	ldr	r3, [pc, #48]	; (8008c58 <HAL_HCD_MspInit+0xbc>)
 8008c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c2a:	4a0b      	ldr	r2, [pc, #44]	; (8008c58 <HAL_HCD_MspInit+0xbc>)
 8008c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c30:	6453      	str	r3, [r2, #68]	; 0x44
 8008c32:	4b09      	ldr	r3, [pc, #36]	; (8008c58 <HAL_HCD_MspInit+0xbc>)
 8008c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c3e:	2200      	movs	r2, #0
 8008c40:	2100      	movs	r1, #0
 8008c42:	2043      	movs	r0, #67	; 0x43
 8008c44:	f7f9 f897 	bl	8001d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c48:	2043      	movs	r0, #67	; 0x43
 8008c4a:	f7f9 f8b0 	bl	8001dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c4e:	bf00      	nop
 8008c50:	3728      	adds	r7, #40	; 0x28
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	40023800 	.word	0x40023800
 8008c5c:	40020000 	.word	0x40020000

08008c60 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7ff f8db 	bl	8007e2a <USBH_LL_IncTimer>
}
 8008c74:	bf00      	nop
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7ff f913 	bl	8007eb6 <USBH_LL_Connect>
}
 8008c90:	bf00      	nop
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7ff f91c 	bl	8007ee4 <USBH_LL_Disconnect>
}
 8008cac:	bf00      	nop
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	70fb      	strb	r3, [r7, #3]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7ff f8cd 	bl	8007e7e <USBH_LL_PortEnabled>
}
 8008ce4:	bf00      	nop
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7ff f8cd 	bl	8007e9a <USBH_LL_PortDisabled>
}
 8008d00:	bf00      	nop
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d12a      	bne.n	8008d70 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008d1a:	4a18      	ldr	r2, [pc, #96]	; (8008d7c <USBH_LL_Init+0x74>)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a15      	ldr	r2, [pc, #84]	; (8008d7c <USBH_LL_Init+0x74>)
 8008d26:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d2a:	4b14      	ldr	r3, [pc, #80]	; (8008d7c <USBH_LL_Init+0x74>)
 8008d2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008d30:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008d32:	4b12      	ldr	r3, [pc, #72]	; (8008d7c <USBH_LL_Init+0x74>)
 8008d34:	2208      	movs	r2, #8
 8008d36:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008d38:	4b10      	ldr	r3, [pc, #64]	; (8008d7c <USBH_LL_Init+0x74>)
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d3e:	4b0f      	ldr	r3, [pc, #60]	; (8008d7c <USBH_LL_Init+0x74>)
 8008d40:	2200      	movs	r2, #0
 8008d42:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008d44:	4b0d      	ldr	r3, [pc, #52]	; (8008d7c <USBH_LL_Init+0x74>)
 8008d46:	2202      	movs	r2, #2
 8008d48:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d4a:	4b0c      	ldr	r3, [pc, #48]	; (8008d7c <USBH_LL_Init+0x74>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008d50:	480a      	ldr	r0, [pc, #40]	; (8008d7c <USBH_LL_Init+0x74>)
 8008d52:	f7f9 fa18 	bl	8002186 <HAL_HCD_Init>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d001      	beq.n	8008d60 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008d5c:	f7f8 fc94 	bl	8001688 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008d60:	4806      	ldr	r0, [pc, #24]	; (8008d7c <USBH_LL_Init+0x74>)
 8008d62:	f7f9 fdfc 	bl	800295e <HAL_HCD_GetCurrentFrame>
 8008d66:	4603      	mov	r3, r0
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7ff f84e 	bl	8007e0c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	200196dc 	.word	0x200196dc

08008d80 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7f9 fd6b 	bl	8002872 <HAL_HCD_Start>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 f95c 	bl	8009060 <USBH_Get_USB_Status>
 8008da8:	4603      	mov	r3, r0
 8008daa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dac:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b084      	sub	sp, #16
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7f9 fd73 	bl	80028b8 <HAL_HCD_Stop>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 f941 	bl	8009060 <USBH_Get_USB_Status>
 8008dde:	4603      	mov	r3, r0
 8008de0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008de2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008df4:	2301      	movs	r3, #1
 8008df6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7f9 fdbb 	bl	800297a <HAL_HCD_GetCurrentSpeed>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d00c      	beq.n	8008e24 <USBH_LL_GetSpeed+0x38>
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d80d      	bhi.n	8008e2a <USBH_LL_GetSpeed+0x3e>
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d002      	beq.n	8008e18 <USBH_LL_GetSpeed+0x2c>
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d003      	beq.n	8008e1e <USBH_LL_GetSpeed+0x32>
 8008e16:	e008      	b.n	8008e2a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e1c:	e008      	b.n	8008e30 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	73fb      	strb	r3, [r7, #15]
    break;
 8008e22:	e005      	b.n	8008e30 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008e24:	2302      	movs	r3, #2
 8008e26:	73fb      	strb	r3, [r7, #15]
    break;
 8008e28:	e002      	b.n	8008e30 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e2e:	bf00      	nop
  }
  return  speed;
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7f9 fd4e 	bl	80028f2 <HAL_HCD_ResetPort>
 8008e56:	4603      	mov	r3, r0
 8008e58:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e5a:	7bfb      	ldrb	r3, [r7, #15]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f000 f8ff 	bl	8009060 <USBH_Get_USB_Status>
 8008e62:	4603      	mov	r3, r0
 8008e64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e66:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e82:	78fa      	ldrb	r2, [r7, #3]
 8008e84:	4611      	mov	r1, r2
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7f9 fd55 	bl	8002936 <HAL_HCD_HC_GetXferCount>
 8008e8c:	4603      	mov	r3, r0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e96:	b590      	push	{r4, r7, lr}
 8008e98:	b089      	sub	sp, #36	; 0x24
 8008e9a:	af04      	add	r7, sp, #16
 8008e9c:	6078      	str	r0, [r7, #4]
 8008e9e:	4608      	mov	r0, r1
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	70fb      	strb	r3, [r7, #3]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	70bb      	strb	r3, [r7, #2]
 8008eac:	4613      	mov	r3, r2
 8008eae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008ebe:	787c      	ldrb	r4, [r7, #1]
 8008ec0:	78ba      	ldrb	r2, [r7, #2]
 8008ec2:	78f9      	ldrb	r1, [r7, #3]
 8008ec4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ec6:	9302      	str	r3, [sp, #8]
 8008ec8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ecc:	9301      	str	r3, [sp, #4]
 8008ece:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	4623      	mov	r3, r4
 8008ed6:	f7f9 f9b8 	bl	800224a <HAL_HCD_HC_Init>
 8008eda:	4603      	mov	r3, r0
 8008edc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f000 f8bd 	bl	8009060 <USBH_Get_USB_Status>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eea:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3714      	adds	r7, #20
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd90      	pop	{r4, r7, pc}

08008ef4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	460b      	mov	r3, r1
 8008efe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f0e:	78fa      	ldrb	r2, [r7, #3]
 8008f10:	4611      	mov	r1, r2
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7f9 fa28 	bl	8002368 <HAL_HCD_HC_Halt>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 f89e 	bl	8009060 <USBH_Get_USB_Status>
 8008f24:	4603      	mov	r3, r0
 8008f26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008f32:	b590      	push	{r4, r7, lr}
 8008f34:	b089      	sub	sp, #36	; 0x24
 8008f36:	af04      	add	r7, sp, #16
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	4608      	mov	r0, r1
 8008f3c:	4611      	mov	r1, r2
 8008f3e:	461a      	mov	r2, r3
 8008f40:	4603      	mov	r3, r0
 8008f42:	70fb      	strb	r3, [r7, #3]
 8008f44:	460b      	mov	r3, r1
 8008f46:	70bb      	strb	r3, [r7, #2]
 8008f48:	4613      	mov	r3, r2
 8008f4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008f5a:	787c      	ldrb	r4, [r7, #1]
 8008f5c:	78ba      	ldrb	r2, [r7, #2]
 8008f5e:	78f9      	ldrb	r1, [r7, #3]
 8008f60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008f64:	9303      	str	r3, [sp, #12]
 8008f66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008f68:	9302      	str	r3, [sp, #8]
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	9301      	str	r3, [sp, #4]
 8008f6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f72:	9300      	str	r3, [sp, #0]
 8008f74:	4623      	mov	r3, r4
 8008f76:	f7f9 fa1b 	bl	80023b0 <HAL_HCD_HC_SubmitRequest>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 f86d 	bl	8009060 <USBH_Get_USB_Status>
 8008f86:	4603      	mov	r3, r0
 8008f88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3714      	adds	r7, #20
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd90      	pop	{r4, r7, pc}

08008f94 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fa6:	78fa      	ldrb	r2, [r7, #3]
 8008fa8:	4611      	mov	r1, r2
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7f9 fcaf 	bl	800290e <HAL_HCD_HC_GetURBState>
 8008fb0:	4603      	mov	r3, r0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b082      	sub	sp, #8
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d103      	bne.n	8008fd8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008fd0:	78fb      	ldrb	r3, [r7, #3]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 f870 	bl	80090b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008fd8:	20c8      	movs	r0, #200	; 0xc8
 8008fda:	f7f8 fdcd 	bl	8001b78 <HAL_Delay>
  return USBH_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	70fb      	strb	r3, [r7, #3]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ffe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009000:	78fb      	ldrb	r3, [r7, #3]
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	212c      	movs	r1, #44	; 0x2c
 8009006:	fb01 f303 	mul.w	r3, r1, r3
 800900a:	4413      	add	r3, r2
 800900c:	333b      	adds	r3, #59	; 0x3b
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d009      	beq.n	8009028 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009014:	78fb      	ldrb	r3, [r7, #3]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	212c      	movs	r1, #44	; 0x2c
 800901a:	fb01 f303 	mul.w	r3, r1, r3
 800901e:	4413      	add	r3, r2
 8009020:	3354      	adds	r3, #84	; 0x54
 8009022:	78ba      	ldrb	r2, [r7, #2]
 8009024:	701a      	strb	r2, [r3, #0]
 8009026:	e008      	b.n	800903a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009028:	78fb      	ldrb	r3, [r7, #3]
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	212c      	movs	r1, #44	; 0x2c
 800902e:	fb01 f303 	mul.w	r3, r1, r3
 8009032:	4413      	add	r3, r2
 8009034:	3355      	adds	r3, #85	; 0x55
 8009036:	78ba      	ldrb	r2, [r7, #2]
 8009038:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f7f8 fd91 	bl	8001b78 <HAL_Delay>
}
 8009056:	bf00      	nop
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
	...

08009060 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	4603      	mov	r3, r0
 8009068:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800906e:	79fb      	ldrb	r3, [r7, #7]
 8009070:	2b03      	cmp	r3, #3
 8009072:	d817      	bhi.n	80090a4 <USBH_Get_USB_Status+0x44>
 8009074:	a201      	add	r2, pc, #4	; (adr r2, 800907c <USBH_Get_USB_Status+0x1c>)
 8009076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907a:	bf00      	nop
 800907c:	0800908d 	.word	0x0800908d
 8009080:	08009093 	.word	0x08009093
 8009084:	08009099 	.word	0x08009099
 8009088:	0800909f 	.word	0x0800909f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800908c:	2300      	movs	r3, #0
 800908e:	73fb      	strb	r3, [r7, #15]
    break;
 8009090:	e00b      	b.n	80090aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009092:	2302      	movs	r3, #2
 8009094:	73fb      	strb	r3, [r7, #15]
    break;
 8009096:	e008      	b.n	80090aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009098:	2301      	movs	r3, #1
 800909a:	73fb      	strb	r3, [r7, #15]
    break;
 800909c:	e005      	b.n	80090aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800909e:	2302      	movs	r3, #2
 80090a0:	73fb      	strb	r3, [r7, #15]
    break;
 80090a2:	e002      	b.n	80090aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80090a4:	2302      	movs	r3, #2
 80090a6:	73fb      	strb	r3, [r7, #15]
    break;
 80090a8:	bf00      	nop
  }
  return usb_status;
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80090c2:	79fb      	ldrb	r3, [r7, #7]
 80090c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80090c6:	79fb      	ldrb	r3, [r7, #7]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d102      	bne.n	80090d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80090cc:	2301      	movs	r3, #1
 80090ce:	73fb      	strb	r3, [r7, #15]
 80090d0:	e001      	b.n	80090d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80090d2:	2300      	movs	r3, #0
 80090d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
 80090d8:	461a      	mov	r2, r3
 80090da:	2101      	movs	r1, #1
 80090dc:	4803      	ldr	r0, [pc, #12]	; (80090ec <MX_DriverVbusFS+0x34>)
 80090de:	f7f9 f839 	bl	8002154 <HAL_GPIO_WritePin>
}
 80090e2:	bf00      	nop
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	40020800 	.word	0x40020800

080090f0 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d009      	beq.n	8009114 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8009100:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8009102:	461a      	mov	r2, r3
        err.type, err.code);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	4806      	ldr	r0, [pc, #24]	; (8009128 <ai_log_err+0x38>)
 800910e:	f007 f899 	bl	8010244 <iprintf>
 8009112:	e008      	b.n	8009126 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8009114:	793b      	ldrb	r3, [r7, #4]
 8009116:	4619      	mov	r1, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800911e:	461a      	mov	r2, r3
 8009120:	4802      	ldr	r0, [pc, #8]	; (800912c <ai_log_err+0x3c>)
 8009122:	f007 f88f 	bl	8010244 <iprintf>

  do {} while (1);
 8009126:	e7fe      	b.n	8009126 <ai_log_err+0x36>
 8009128:	08021d14 	.word	0x08021d14
 800912c:	08021d48 	.word	0x08021d48

08009130 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8009138:	2200      	movs	r2, #0
 800913a:	6879      	ldr	r1, [r7, #4]
 800913c:	4828      	ldr	r0, [pc, #160]	; (80091e0 <ai_boostrap+0xb0>)
 800913e:	f000 fb17 	bl	8009770 <ai_network_create_and_init>
 8009142:	4603      	mov	r3, r0
 8009144:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8009146:	7b3b      	ldrb	r3, [r7, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d006      	beq.n	800915a <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_create_and_init");
 800914c:	4925      	ldr	r1, [pc, #148]	; (80091e4 <ai_boostrap+0xb4>)
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f7ff ffce 	bl	80090f0 <ai_log_err>
    return -1;
 8009154:	f04f 33ff 	mov.w	r3, #4294967295
 8009158:	e03e      	b.n	80091d8 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 800915a:	4b21      	ldr	r3, [pc, #132]	; (80091e0 <ai_boostrap+0xb0>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2100      	movs	r1, #0
 8009160:	4618      	mov	r0, r3
 8009162:	f000 fb79 	bl	8009858 <ai_network_inputs_get>
 8009166:	4603      	mov	r3, r0
 8009168:	4a1f      	ldr	r2, [pc, #124]	; (80091e8 <ai_boostrap+0xb8>)
 800916a:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 800916c:	4b1c      	ldr	r3, [pc, #112]	; (80091e0 <ai_boostrap+0xb0>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2100      	movs	r1, #0
 8009172:	4618      	mov	r0, r3
 8009174:	f000 fb8a 	bl	800988c <ai_network_outputs_get>
 8009178:	4603      	mov	r3, r0
 800917a:	4a1c      	ldr	r2, [pc, #112]	; (80091ec <ai_boostrap+0xbc>)
 800917c:	6013      	str	r3, [r2, #0]
   */
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
	data_ins[idx] = ai_input[idx].data;
  }
#else
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 800917e:	2300      	movs	r3, #0
 8009180:	617b      	str	r3, [r7, #20]
 8009182:	e00f      	b.n	80091a4 <ai_boostrap+0x74>
	  ai_input[idx].data = data_ins[idx];
 8009184:	4b18      	ldr	r3, [pc, #96]	; (80091e8 <ai_boostrap+0xb8>)
 8009186:	6819      	ldr	r1, [r3, #0]
 8009188:	697a      	ldr	r2, [r7, #20]
 800918a:	4613      	mov	r3, r2
 800918c:	00db      	lsls	r3, r3, #3
 800918e:	1a9b      	subs	r3, r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	440b      	add	r3, r1
 8009194:	4916      	ldr	r1, [pc, #88]	; (80091f0 <ai_boostrap+0xc0>)
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800919c:	605a      	str	r2, [r3, #4]
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	3301      	adds	r3, #1
 80091a2:	617b      	str	r3, [r7, #20]
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	ddec      	ble.n	8009184 <ai_boostrap+0x54>
   */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
	data_outs[idx] = ai_output[idx].data;
  }
#else
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 80091aa:	2300      	movs	r3, #0
 80091ac:	613b      	str	r3, [r7, #16]
 80091ae:	e00f      	b.n	80091d0 <ai_boostrap+0xa0>
	ai_output[idx].data = data_outs[idx];
 80091b0:	4b0e      	ldr	r3, [pc, #56]	; (80091ec <ai_boostrap+0xbc>)
 80091b2:	6819      	ldr	r1, [r3, #0]
 80091b4:	693a      	ldr	r2, [r7, #16]
 80091b6:	4613      	mov	r3, r2
 80091b8:	00db      	lsls	r3, r3, #3
 80091ba:	1a9b      	subs	r3, r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	440b      	add	r3, r1
 80091c0:	490c      	ldr	r1, [pc, #48]	; (80091f4 <ai_boostrap+0xc4>)
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80091c8:	605a      	str	r2, [r3, #4]
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	3301      	adds	r3, #1
 80091ce:	613b      	str	r3, [r7, #16]
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	ddec      	ble.n	80091b0 <ai_boostrap+0x80>
  }
#endif

  return 0;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3718      	adds	r7, #24
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	200162c0 	.word	0x200162c0
 80091e4:	08021d78 	.word	0x08021d78
 80091e8:	200162c4 	.word	0x200162c4
 80091ec:	200162c8 	.word	0x200162c8
 80091f0:	2000002c 	.word	0x2000002c
 80091f4:	20000030 	.word	0x20000030

080091f8 <ai_run>:

static int ai_run(void)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_network_run(network, ai_input, ai_output);
 80091fe:	4b0f      	ldr	r3, [pc, #60]	; (800923c <ai_run+0x44>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a0f      	ldr	r2, [pc, #60]	; (8009240 <ai_run+0x48>)
 8009204:	6811      	ldr	r1, [r2, #0]
 8009206:	4a0f      	ldr	r2, [pc, #60]	; (8009244 <ai_run+0x4c>)
 8009208:	6812      	ldr	r2, [r2, #0]
 800920a:	4618      	mov	r0, r3
 800920c:	f000 fb94 	bl	8009938 <ai_network_run>
 8009210:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d00c      	beq.n	8009232 <ai_run+0x3a>
    ai_log_err(ai_network_get_error(network),
 8009218:	4b08      	ldr	r3, [pc, #32]	; (800923c <ai_run+0x44>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4618      	mov	r0, r3
 800921e:	f000 fa85 	bl	800972c <ai_network_get_error>
 8009222:	4603      	mov	r3, r0
 8009224:	4908      	ldr	r1, [pc, #32]	; (8009248 <ai_run+0x50>)
 8009226:	4618      	mov	r0, r3
 8009228:	f7ff ff62 	bl	80090f0 <ai_log_err>
        "ai_network_run");
    return -1;
 800922c:	f04f 33ff 	mov.w	r3, #4294967295
 8009230:	e000      	b.n	8009234 <ai_run+0x3c>
  }

  return 0;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3708      	adds	r7, #8
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	200162c0 	.word	0x200162c0
 8009240:	200162c4 	.word	0x200162c4
 8009244:	200162c8 	.word	0x200162c8
 8009248:	08021d94 	.word	0x08021d94

0800924c <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_float *pInSignal, uint32_t len)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  memcpy(data_ins[0], pInSignal, len);
 8009256:	4b06      	ldr	r3, [pc, #24]	; (8009270 <acquire_and_process_data+0x24>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	683a      	ldr	r2, [r7, #0]
 800925c:	6879      	ldr	r1, [r7, #4]
 800925e:	4618      	mov	r0, r3
 8009260:	f006 fac6 	bl	800f7f0 <memcpy>
  {
      data[idx] = ....
  }

  */
  return 0;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	2000002c 	.word	0x2000002c

08009274 <post_process>:

int post_process(ai_i8* data[])
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
	...

0800928c <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8009290:	4803      	ldr	r0, [pc, #12]	; (80092a0 <MX_X_CUBE_AI_Init+0x14>)
 8009292:	f007 f85d 	bl	8010350 <puts>

  ai_boostrap(data_activations0);
 8009296:	4803      	ldr	r0, [pc, #12]	; (80092a4 <MX_X_CUBE_AI_Init+0x18>)
 8009298:	f7ff ff4a 	bl	8009130 <ai_boostrap>
    /* USER CODE END 5 */
}
 800929c:	bf00      	nop
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	08021da4 	.word	0x08021da4
 80092a4:	20000038 	.word	0x20000038

080092a8 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 80092ae:	f04f 33ff 	mov.w	r3, #4294967295
 80092b2:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 80092b4:	4815      	ldr	r0, [pc, #84]	; (800930c <MX_X_CUBE_AI_Process+0x64>)
 80092b6:	f007 f84b 	bl	8010350 <puts>

  if (network) {
 80092ba:	4b15      	ldr	r3, [pc, #84]	; (8009310 <MX_X_CUBE_AI_Process+0x68>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d011      	beq.n	80092e6 <MX_X_CUBE_AI_Process+0x3e>

    do {
      /* 1 - acquire and pre-process input data */
      res = 0;
 80092c2:	2300      	movs	r3, #0
 80092c4:	607b      	str	r3, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d102      	bne.n	80092d2 <MX_X_CUBE_AI_Process+0x2a>
        res = ai_run();
 80092cc:	f7ff ff94 	bl	80091f8 <ai_run>
 80092d0:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d103      	bne.n	80092e0 <MX_X_CUBE_AI_Process+0x38>
        res = post_process(data_outs);
 80092d8:	480e      	ldr	r0, [pc, #56]	; (8009314 <MX_X_CUBE_AI_Process+0x6c>)
 80092da:	f7ff ffcb 	bl	8009274 <post_process>
 80092de:	6078      	str	r0, [r7, #4]
    } while (res==0);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d0ed      	beq.n	80092c2 <MX_X_CUBE_AI_Process+0x1a>
  }

  if (res) {
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00a      	beq.n	8009302 <MX_X_CUBE_AI_Process+0x5a>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 80092ec:	2311      	movs	r3, #17
 80092ee:	703b      	strb	r3, [r7, #0]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	2210      	movs	r2, #16
 80092f4:	f362 231f 	bfi	r3, r2, #8, #24
 80092f8:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 80092fa:	4907      	ldr	r1, [pc, #28]	; (8009318 <MX_X_CUBE_AI_Process+0x70>)
 80092fc:	6838      	ldr	r0, [r7, #0]
 80092fe:	f7ff fef7 	bl	80090f0 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 8009302:	bf00      	nop
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	08021dc4 	.word	0x08021dc4
 8009310:	200162c0 	.word	0x200162c0
 8009314:	20000030 	.word	0x20000030
 8009318:	08021de0 	.word	0x08021de0

0800931c <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8009326:	2300      	movs	r3, #0
 8009328:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 800932a:	f107 030c 	add.w	r3, r7, #12
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	2101      	movs	r1, #1
 8009332:	4618      	mov	r0, r3
 8009334:	f000 fbd8 	bl	8009ae8 <ai_platform_get_activations_map>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d065      	beq.n	800940a <network_configure_activations+0xee>
    /* Updating activations (byte) offsets */
    node_17_output_array.data = AI_PTR(activations_map[0] + 33088);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f503 4301 	add.w	r3, r3, #33024	; 0x8100
 8009344:	3340      	adds	r3, #64	; 0x40
 8009346:	4a36      	ldr	r2, [pc, #216]	; (8009420 <network_configure_activations+0x104>)
 8009348:	6093      	str	r3, [r2, #8]
    node_17_output_array.data_start = AI_PTR(activations_map[0] + 33088);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f503 4301 	add.w	r3, r3, #33024	; 0x8100
 8009350:	3340      	adds	r3, #64	; 0x40
 8009352:	4a33      	ldr	r2, [pc, #204]	; (8009420 <network_configure_activations+0x104>)
 8009354:	60d3      	str	r3, [r2, #12]
    node_18_output_array.data = AI_PTR(activations_map[0] + 31552);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f503 43f6 	add.w	r3, r3, #31488	; 0x7b00
 800935c:	3340      	adds	r3, #64	; 0x40
 800935e:	4a31      	ldr	r2, [pc, #196]	; (8009424 <network_configure_activations+0x108>)
 8009360:	6093      	str	r3, [r2, #8]
    node_18_output_array.data_start = AI_PTR(activations_map[0] + 31552);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f503 43f6 	add.w	r3, r3, #31488	; 0x7b00
 8009368:	3340      	adds	r3, #64	; 0x40
 800936a:	4a2e      	ldr	r2, [pc, #184]	; (8009424 <network_configure_activations+0x108>)
 800936c:	60d3      	str	r3, [r2, #12]
    node_20_output_array.data = AI_PTR(activations_map[0] + 1280);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009374:	4a2c      	ldr	r2, [pc, #176]	; (8009428 <network_configure_activations+0x10c>)
 8009376:	6093      	str	r3, [r2, #8]
    node_20_output_array.data_start = AI_PTR(activations_map[0] + 1280);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800937e:	4a2a      	ldr	r2, [pc, #168]	; (8009428 <network_configure_activations+0x10c>)
 8009380:	60d3      	str	r3, [r2, #12]
    node_21_scratch0_array.data = AI_PTR(activations_map[0] + 65792);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009388:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800938c:	4a27      	ldr	r2, [pc, #156]	; (800942c <network_configure_activations+0x110>)
 800938e:	6093      	str	r3, [r2, #8]
    node_21_scratch0_array.data_start = AI_PTR(activations_map[0] + 65792);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009396:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800939a:	4a24      	ldr	r2, [pc, #144]	; (800942c <network_configure_activations+0x110>)
 800939c:	60d3      	str	r3, [r2, #12]
    node_21_output_array.data = AI_PTR(activations_map[0] + 0);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	4a23      	ldr	r2, [pc, #140]	; (8009430 <network_configure_activations+0x114>)
 80093a2:	6093      	str	r3, [r2, #8]
    node_21_output_array.data_start = AI_PTR(activations_map[0] + 0);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	4a22      	ldr	r2, [pc, #136]	; (8009430 <network_configure_activations+0x114>)
 80093a8:	60d3      	str	r3, [r2, #12]
    node_24_output_array.data = AI_PTR(activations_map[0] + 12672);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f503 5346 	add.w	r3, r3, #12672	; 0x3180
 80093b0:	4a20      	ldr	r2, [pc, #128]	; (8009434 <network_configure_activations+0x118>)
 80093b2:	6093      	str	r3, [r2, #8]
    node_24_output_array.data_start = AI_PTR(activations_map[0] + 12672);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f503 5346 	add.w	r3, r3, #12672	; 0x3180
 80093ba:	4a1e      	ldr	r2, [pc, #120]	; (8009434 <network_configure_activations+0x118>)
 80093bc:	60d3      	str	r3, [r2, #12]
    node_25_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	4a1d      	ldr	r2, [pc, #116]	; (8009438 <network_configure_activations+0x11c>)
 80093c2:	6093      	str	r3, [r2, #8]
    node_25_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	4a1c      	ldr	r2, [pc, #112]	; (8009438 <network_configure_activations+0x11c>)
 80093c8:	60d3      	str	r3, [r2, #12]
    node_25_output_array.data = AI_PTR(activations_map[0] + 2560);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 80093d0:	4a1a      	ldr	r2, [pc, #104]	; (800943c <network_configure_activations+0x120>)
 80093d2:	6093      	str	r3, [r2, #8]
    node_25_output_array.data_start = AI_PTR(activations_map[0] + 2560);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 80093da:	4a18      	ldr	r2, [pc, #96]	; (800943c <network_configure_activations+0x120>)
 80093dc:	60d3      	str	r3, [r2, #12]
    node_28_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	4a17      	ldr	r2, [pc, #92]	; (8009440 <network_configure_activations+0x124>)
 80093e2:	6093      	str	r3, [r2, #8]
    node_28_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	4a16      	ldr	r2, [pc, #88]	; (8009440 <network_configure_activations+0x124>)
 80093e8:	60d3      	str	r3, [r2, #12]
    node_28_output_array.data = AI_PTR(activations_map[0] + 32);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	3320      	adds	r3, #32
 80093ee:	4a15      	ldr	r2, [pc, #84]	; (8009444 <network_configure_activations+0x128>)
 80093f0:	6093      	str	r3, [r2, #8]
    node_28_output_array.data_start = AI_PTR(activations_map[0] + 32);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	3320      	adds	r3, #32
 80093f6:	4a13      	ldr	r2, [pc, #76]	; (8009444 <network_configure_activations+0x128>)
 80093f8:	60d3      	str	r3, [r2, #12]
    node_33_output_array.data = AI_PTR(activations_map[0] + 0);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	4a12      	ldr	r2, [pc, #72]	; (8009448 <network_configure_activations+0x12c>)
 80093fe:	6093      	str	r3, [r2, #8]
    node_33_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	4a11      	ldr	r2, [pc, #68]	; (8009448 <network_configure_activations+0x12c>)
 8009404:	60d3      	str	r3, [r2, #12]
    
    return true;
 8009406:	2301      	movs	r3, #1
 8009408:	e005      	b.n	8009416 <network_configure_activations+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800940a:	2213      	movs	r2, #19
 800940c:	2130      	movs	r1, #48	; 0x30
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fc52 	bl	8009cb8 <ai_platform_network_set_error>
  return false;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	2000004c 	.word	0x2000004c
 8009424:	2000005c 	.word	0x2000005c
 8009428:	2000006c 	.word	0x2000006c
 800942c:	200001fc 	.word	0x200001fc
 8009430:	2000007c 	.word	0x2000007c
 8009434:	2000008c 	.word	0x2000008c
 8009438:	2000020c 	.word	0x2000020c
 800943c:	2000009c 	.word	0x2000009c
 8009440:	2000021c 	.word	0x2000021c
 8009444:	200000ac 	.word	0x200000ac
 8009448:	200000cc 	.word	0x200000cc

0800944c <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8009456:	2300      	movs	r3, #0
 8009458:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 800945a:	f107 030c 	add.w	r3, r7, #12
 800945e:	683a      	ldr	r2, [r7, #0]
 8009460:	2101      	movs	r1, #1
 8009462:	4618      	mov	r0, r3
 8009464:	f000 faf0 	bl	8009a48 <ai_platform_get_weights_map>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	f000 8132 	beq.w	80096d4 <network_configure_weights+0x288>
    /* Updating weights (byte) offsets */
    
    node_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8009470:	4b9d      	ldr	r3, [pc, #628]	; (80096e8 <network_configure_weights+0x29c>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009478:	4a9b      	ldr	r2, [pc, #620]	; (80096e8 <network_configure_weights+0x29c>)
 800947a:	6013      	str	r3, [r2, #0]
    node_17_weights_array.data = AI_PTR(weights_map[0] + 0);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	4a9a      	ldr	r2, [pc, #616]	; (80096e8 <network_configure_weights+0x29c>)
 8009480:	6093      	str	r3, [r2, #8]
    node_17_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	4a98      	ldr	r2, [pc, #608]	; (80096e8 <network_configure_weights+0x29c>)
 8009486:	60d3      	str	r3, [r2, #12]
    node_17_bias_array.format |= AI_FMT_FLAG_CONST;
 8009488:	4b98      	ldr	r3, [pc, #608]	; (80096ec <network_configure_weights+0x2a0>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009490:	4a96      	ldr	r2, [pc, #600]	; (80096ec <network_configure_weights+0x2a0>)
 8009492:	6013      	str	r3, [r2, #0]
    node_17_bias_array.data = AI_PTR(weights_map[0] + 576);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800949a:	4a94      	ldr	r2, [pc, #592]	; (80096ec <network_configure_weights+0x2a0>)
 800949c:	6093      	str	r3, [r2, #8]
    node_17_bias_array.data_start = AI_PTR(weights_map[0] + 576);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80094a4:	4a91      	ldr	r2, [pc, #580]	; (80096ec <network_configure_weights+0x2a0>)
 80094a6:	60d3      	str	r3, [r2, #12]
    node_18_weights_array.format |= AI_FMT_FLAG_CONST;
 80094a8:	4b91      	ldr	r3, [pc, #580]	; (80096f0 <network_configure_weights+0x2a4>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094b0:	4a8f      	ldr	r2, [pc, #572]	; (80096f0 <network_configure_weights+0x2a4>)
 80094b2:	6013      	str	r3, [r2, #0]
    node_18_weights_array.data = AI_PTR(weights_map[0] + 640);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80094ba:	4a8d      	ldr	r2, [pc, #564]	; (80096f0 <network_configure_weights+0x2a4>)
 80094bc:	6093      	str	r3, [r2, #8]
    node_18_weights_array.data_start = AI_PTR(weights_map[0] + 640);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80094c4:	4a8a      	ldr	r2, [pc, #552]	; (80096f0 <network_configure_weights+0x2a4>)
 80094c6:	60d3      	str	r3, [r2, #12]
    node_18_bias_array.format |= AI_FMT_FLAG_CONST;
 80094c8:	4b8a      	ldr	r3, [pc, #552]	; (80096f4 <network_configure_weights+0x2a8>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094d0:	4a88      	ldr	r2, [pc, #544]	; (80096f4 <network_configure_weights+0x2a8>)
 80094d2:	6013      	str	r3, [r2, #0]
    node_18_bias_array.data = AI_PTR(weights_map[0] + 9856);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 80094da:	4a86      	ldr	r2, [pc, #536]	; (80096f4 <network_configure_weights+0x2a8>)
 80094dc:	6093      	str	r3, [r2, #8]
    node_18_bias_array.data_start = AI_PTR(weights_map[0] + 9856);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 80094e4:	4a83      	ldr	r2, [pc, #524]	; (80096f4 <network_configure_weights+0x2a8>)
 80094e6:	60d3      	str	r3, [r2, #12]
    node_20_weights_array.format |= AI_FMT_FLAG_CONST;
 80094e8:	4b83      	ldr	r3, [pc, #524]	; (80096f8 <network_configure_weights+0x2ac>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094f0:	4a81      	ldr	r2, [pc, #516]	; (80096f8 <network_configure_weights+0x2ac>)
 80094f2:	6013      	str	r3, [r2, #0]
    node_20_weights_array.data = AI_PTR(weights_map[0] + 9920);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f503 531b 	add.w	r3, r3, #9920	; 0x26c0
 80094fa:	4a7f      	ldr	r2, [pc, #508]	; (80096f8 <network_configure_weights+0x2ac>)
 80094fc:	6093      	str	r3, [r2, #8]
    node_20_weights_array.data_start = AI_PTR(weights_map[0] + 9920);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f503 531b 	add.w	r3, r3, #9920	; 0x26c0
 8009504:	4a7c      	ldr	r2, [pc, #496]	; (80096f8 <network_configure_weights+0x2ac>)
 8009506:	60d3      	str	r3, [r2, #12]
    node_20_bias_array.format |= AI_FMT_FLAG_CONST;
 8009508:	4b7c      	ldr	r3, [pc, #496]	; (80096fc <network_configure_weights+0x2b0>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009510:	4a7a      	ldr	r2, [pc, #488]	; (80096fc <network_configure_weights+0x2b0>)
 8009512:	6013      	str	r3, [r2, #0]
    node_20_bias_array.data = AI_PTR(weights_map[0] + 28352);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 800951a:	3340      	adds	r3, #64	; 0x40
 800951c:	4a77      	ldr	r2, [pc, #476]	; (80096fc <network_configure_weights+0x2b0>)
 800951e:	6093      	str	r3, [r2, #8]
    node_20_bias_array.data_start = AI_PTR(weights_map[0] + 28352);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 8009526:	3340      	adds	r3, #64	; 0x40
 8009528:	4a74      	ldr	r2, [pc, #464]	; (80096fc <network_configure_weights+0x2b0>)
 800952a:	60d3      	str	r3, [r2, #12]
    node_21_weights_array.format |= AI_FMT_FLAG_CONST;
 800952c:	4b74      	ldr	r3, [pc, #464]	; (8009700 <network_configure_weights+0x2b4>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009534:	4a72      	ldr	r2, [pc, #456]	; (8009700 <network_configure_weights+0x2b4>)
 8009536:	6013      	str	r3, [r2, #0]
    node_21_weights_array.data = AI_PTR(weights_map[0] + 28480);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f503 43de 	add.w	r3, r3, #28416	; 0x6f00
 800953e:	3340      	adds	r3, #64	; 0x40
 8009540:	4a6f      	ldr	r2, [pc, #444]	; (8009700 <network_configure_weights+0x2b4>)
 8009542:	6093      	str	r3, [r2, #8]
    node_21_weights_array.data_start = AI_PTR(weights_map[0] + 28480);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f503 43de 	add.w	r3, r3, #28416	; 0x6f00
 800954a:	3340      	adds	r3, #64	; 0x40
 800954c:	4a6c      	ldr	r2, [pc, #432]	; (8009700 <network_configure_weights+0x2b4>)
 800954e:	60d3      	str	r3, [r2, #12]
    node_21_bias_array.format |= AI_FMT_FLAG_CONST;
 8009550:	4b6c      	ldr	r3, [pc, #432]	; (8009704 <network_configure_weights+0x2b8>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009558:	4a6a      	ldr	r2, [pc, #424]	; (8009704 <network_configure_weights+0x2b8>)
 800955a:	6013      	str	r3, [r2, #0]
    node_21_bias_array.data = AI_PTR(weights_map[0] + 65344);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8009562:	3340      	adds	r3, #64	; 0x40
 8009564:	4a67      	ldr	r2, [pc, #412]	; (8009704 <network_configure_weights+0x2b8>)
 8009566:	6093      	str	r3, [r2, #8]
    node_21_bias_array.data_start = AI_PTR(weights_map[0] + 65344);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800956e:	3340      	adds	r3, #64	; 0x40
 8009570:	4a64      	ldr	r2, [pc, #400]	; (8009704 <network_configure_weights+0x2b8>)
 8009572:	60d3      	str	r3, [r2, #12]
    node_24_weights_array.format |= AI_FMT_FLAG_CONST;
 8009574:	4b64      	ldr	r3, [pc, #400]	; (8009708 <network_configure_weights+0x2bc>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800957c:	4a62      	ldr	r2, [pc, #392]	; (8009708 <network_configure_weights+0x2bc>)
 800957e:	6013      	str	r3, [r2, #0]
    node_24_weights_array.data = AI_PTR(weights_map[0] + 65472);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8009586:	33c0      	adds	r3, #192	; 0xc0
 8009588:	4a5f      	ldr	r2, [pc, #380]	; (8009708 <network_configure_weights+0x2bc>)
 800958a:	6093      	str	r3, [r2, #8]
    node_24_weights_array.data_start = AI_PTR(weights_map[0] + 65472);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8009592:	33c0      	adds	r3, #192	; 0xc0
 8009594:	4a5c      	ldr	r2, [pc, #368]	; (8009708 <network_configure_weights+0x2bc>)
 8009596:	60d3      	str	r3, [r2, #12]
    node_24_bias_array.format |= AI_FMT_FLAG_CONST;
 8009598:	4b5c      	ldr	r3, [pc, #368]	; (800970c <network_configure_weights+0x2c0>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095a0:	4a5a      	ldr	r2, [pc, #360]	; (800970c <network_configure_weights+0x2c0>)
 80095a2:	6013      	str	r3, [r2, #0]
    node_24_bias_array.data = AI_PTR(weights_map[0] + 139200);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f503 3307 	add.w	r3, r3, #138240	; 0x21c00
 80095aa:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 80095ae:	4a57      	ldr	r2, [pc, #348]	; (800970c <network_configure_weights+0x2c0>)
 80095b0:	6093      	str	r3, [r2, #8]
    node_24_bias_array.data_start = AI_PTR(weights_map[0] + 139200);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f503 3307 	add.w	r3, r3, #138240	; 0x21c00
 80095b8:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 80095bc:	4a53      	ldr	r2, [pc, #332]	; (800970c <network_configure_weights+0x2c0>)
 80095be:	60d3      	str	r3, [r2, #12]
    node_25_weights_array.format |= AI_FMT_FLAG_CONST;
 80095c0:	4b53      	ldr	r3, [pc, #332]	; (8009710 <network_configure_weights+0x2c4>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095c8:	4a51      	ldr	r2, [pc, #324]	; (8009710 <network_configure_weights+0x2c4>)
 80095ca:	6013      	str	r3, [r2, #0]
    node_25_weights_array.data = AI_PTR(weights_map[0] + 139456);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 80095d2:	33c0      	adds	r3, #192	; 0xc0
 80095d4:	4a4e      	ldr	r2, [pc, #312]	; (8009710 <network_configure_weights+0x2c4>)
 80095d6:	6093      	str	r3, [r2, #8]
    node_25_weights_array.data_start = AI_PTR(weights_map[0] + 139456);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 80095de:	33c0      	adds	r3, #192	; 0xc0
 80095e0:	4a4b      	ldr	r2, [pc, #300]	; (8009710 <network_configure_weights+0x2c4>)
 80095e2:	60d3      	str	r3, [r2, #12]
    node_25_bias_array.format |= AI_FMT_FLAG_CONST;
 80095e4:	4b4b      	ldr	r3, [pc, #300]	; (8009714 <network_configure_weights+0x2c8>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095ec:	4a49      	ldr	r2, [pc, #292]	; (8009714 <network_configure_weights+0x2c8>)
 80095ee:	6013      	str	r3, [r2, #0]
    node_25_bias_array.data = AI_PTR(weights_map[0] + 286912);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f503 238c 	add.w	r3, r3, #286720	; 0x46000
 80095f6:	33c0      	adds	r3, #192	; 0xc0
 80095f8:	4a46      	ldr	r2, [pc, #280]	; (8009714 <network_configure_weights+0x2c8>)
 80095fa:	6093      	str	r3, [r2, #8]
    node_25_bias_array.data_start = AI_PTR(weights_map[0] + 286912);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f503 238c 	add.w	r3, r3, #286720	; 0x46000
 8009602:	33c0      	adds	r3, #192	; 0xc0
 8009604:	4a43      	ldr	r2, [pc, #268]	; (8009714 <network_configure_weights+0x2c8>)
 8009606:	60d3      	str	r3, [r2, #12]
    node_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8009608:	4b43      	ldr	r3, [pc, #268]	; (8009718 <network_configure_weights+0x2cc>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009610:	4a41      	ldr	r2, [pc, #260]	; (8009718 <network_configure_weights+0x2cc>)
 8009612:	6013      	str	r3, [r2, #0]
    node_28_weights_array.data = AI_PTR(weights_map[0] + 287168);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f503 238c 	add.w	r3, r3, #286720	; 0x46000
 800961a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800961e:	4a3e      	ldr	r2, [pc, #248]	; (8009718 <network_configure_weights+0x2cc>)
 8009620:	6093      	str	r3, [r2, #8]
    node_28_weights_array.data_start = AI_PTR(weights_map[0] + 287168);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f503 238c 	add.w	r3, r3, #286720	; 0x46000
 8009628:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800962c:	4a3a      	ldr	r2, [pc, #232]	; (8009718 <network_configure_weights+0x2cc>)
 800962e:	60d3      	str	r3, [r2, #12]
    node_28_bias_array.format |= AI_FMT_FLAG_CONST;
 8009630:	4b3a      	ldr	r3, [pc, #232]	; (800971c <network_configure_weights+0x2d0>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009638:	4a38      	ldr	r2, [pc, #224]	; (800971c <network_configure_weights+0x2d0>)
 800963a:	6013      	str	r3, [r2, #0]
    node_28_bias_array.data = AI_PTR(weights_map[0] + 287680);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f503 238c 	add.w	r3, r3, #286720	; 0x46000
 8009642:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8009646:	4a35      	ldr	r2, [pc, #212]	; (800971c <network_configure_weights+0x2d0>)
 8009648:	6093      	str	r3, [r2, #8]
    node_28_bias_array.data_start = AI_PTR(weights_map[0] + 287680);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f503 238c 	add.w	r3, r3, #286720	; 0x46000
 8009650:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8009654:	4a31      	ldr	r2, [pc, #196]	; (800971c <network_configure_weights+0x2d0>)
 8009656:	60d3      	str	r3, [r2, #12]
    node_34_array.format |= AI_FMT_FLAG_CONST;
 8009658:	4b31      	ldr	r3, [pc, #196]	; (8009720 <network_configure_weights+0x2d4>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009660:	4a2f      	ldr	r2, [pc, #188]	; (8009720 <network_configure_weights+0x2d4>)
 8009662:	6013      	str	r3, [r2, #0]
    node_34_array.data = AI_PTR(weights_map[0] + 287688);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f503 238c 	add.w	r3, r3, #286720	; 0x46000
 800966a:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800966e:	4a2c      	ldr	r2, [pc, #176]	; (8009720 <network_configure_weights+0x2d4>)
 8009670:	6093      	str	r3, [r2, #8]
    node_34_array.data_start = AI_PTR(weights_map[0] + 287688);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f503 238c 	add.w	r3, r3, #286720	; 0x46000
 8009678:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800967c:	4a28      	ldr	r2, [pc, #160]	; (8009720 <network_configure_weights+0x2d4>)
 800967e:	60d3      	str	r3, [r2, #12]
    linear_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8009680:	4b28      	ldr	r3, [pc, #160]	; (8009724 <network_configure_weights+0x2d8>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009688:	4a26      	ldr	r2, [pc, #152]	; (8009724 <network_configure_weights+0x2d8>)
 800968a:	6013      	str	r3, [r2, #0]
    linear_1_bias_array.data = AI_PTR(weights_map[0] + 287692);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f503 238c 	add.w	r3, r3, #286720	; 0x46000
 8009692:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 8009696:	4a23      	ldr	r2, [pc, #140]	; (8009724 <network_configure_weights+0x2d8>)
 8009698:	6093      	str	r3, [r2, #8]
    linear_1_bias_array.data_start = AI_PTR(weights_map[0] + 287692);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f503 238c 	add.w	r3, r3, #286720	; 0x46000
 80096a0:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 80096a4:	4a1f      	ldr	r2, [pc, #124]	; (8009724 <network_configure_weights+0x2d8>)
 80096a6:	60d3      	str	r3, [r2, #12]
    linear_1_weight_array.format |= AI_FMT_FLAG_CONST;
 80096a8:	4b1f      	ldr	r3, [pc, #124]	; (8009728 <network_configure_weights+0x2dc>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096b0:	4a1d      	ldr	r2, [pc, #116]	; (8009728 <network_configure_weights+0x2dc>)
 80096b2:	6013      	str	r3, [r2, #0]
    linear_1_weight_array.data = AI_PTR(weights_map[0] + 287696);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f503 238c 	add.w	r3, r3, #286720	; 0x46000
 80096ba:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80096be:	4a1a      	ldr	r2, [pc, #104]	; (8009728 <network_configure_weights+0x2dc>)
 80096c0:	6093      	str	r3, [r2, #8]
    linear_1_weight_array.data_start = AI_PTR(weights_map[0] + 287696);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f503 238c 	add.w	r3, r3, #286720	; 0x46000
 80096c8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80096cc:	4a16      	ldr	r2, [pc, #88]	; (8009728 <network_configure_weights+0x2dc>)
 80096ce:	60d3      	str	r3, [r2, #12]
    return true;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e005      	b.n	80096e0 <network_configure_weights+0x294>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80096d4:	2212      	movs	r2, #18
 80096d6:	2130      	movs	r1, #48	; 0x30
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 faed 	bl	8009cb8 <ai_platform_network_set_error>
  return false;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	200000ec 	.word	0x200000ec
 80096ec:	200000fc 	.word	0x200000fc
 80096f0:	2000010c 	.word	0x2000010c
 80096f4:	2000011c 	.word	0x2000011c
 80096f8:	2000012c 	.word	0x2000012c
 80096fc:	2000013c 	.word	0x2000013c
 8009700:	2000014c 	.word	0x2000014c
 8009704:	2000015c 	.word	0x2000015c
 8009708:	2000016c 	.word	0x2000016c
 800970c:	2000017c 	.word	0x2000017c
 8009710:	2000018c 	.word	0x2000018c
 8009714:	2000019c 	.word	0x2000019c
 8009718:	200001ac 	.word	0x200001ac
 800971c:	200001bc 	.word	0x200001bc
 8009720:	200001cc 	.word	0x200001cc
 8009724:	200001dc 	.word	0x200001dc
 8009728:	200001ec 	.word	0x200001ec

0800972c <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fa45 	bl	8009bc4 <ai_platform_network_get_error>
 800973a:	4603      	mov	r3, r0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3708      	adds	r7, #8
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af02      	add	r7, sp, #8
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800974e:	2300      	movs	r3, #0
 8009750:	9301      	str	r3, [sp, #4]
 8009752:	2305      	movs	r3, #5
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	2301      	movs	r3, #1
 8009758:	4a04      	ldr	r2, [pc, #16]	; (800976c <ai_network_create+0x28>)
 800975a:	6839      	ldr	r1, [r7, #0]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fc9f 	bl	800a0a0 <ai_platform_network_create>
 8009762:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8009764:	4618      	mov	r0, r3
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	20000f5c 	.word	0x20000f5c

08009770 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b096      	sub	sp, #88	; 0x58
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800977c:	2100      	movs	r1, #0
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f7ff ffe0 	bl	8009744 <ai_network_create>
 8009784:	4603      	mov	r3, r0
 8009786:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8009788:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800978c:	2b00      	cmp	r3, #0
 800978e:	d001      	beq.n	8009794 <ai_network_create_and_init+0x24>
        return err;
 8009790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009792:	e05d      	b.n	8009850 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8009794:	f107 0314 	add.w	r3, r7, #20
 8009798:	4618      	mov	r0, r3
 800979a:	f000 f8dd 	bl	8009958 <ai_network_data_params_get>
 800979e:	4603      	mov	r3, r0
 80097a0:	f083 0301 	eor.w	r3, r3, #1
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d008      	beq.n	80097bc <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff ffbc 	bl	800972c <ai_network_get_error>
 80097b4:	4603      	mov	r3, r0
 80097b6:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 80097b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ba:	e049      	b.n	8009850 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d016      	beq.n	80097f0 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 80097c2:	2300      	movs	r3, #0
 80097c4:	657b      	str	r3, [r7, #84]	; 0x54
 80097c6:	e00e      	b.n	80097e6 <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80097c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80097ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	4413      	add	r3, r2
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	f107 0314 	add.w	r3, r7, #20
 80097d8:	330c      	adds	r3, #12
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 f91e 	bl	8009a1c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 80097e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097e2:	3301      	adds	r3, #1
 80097e4:	657b      	str	r3, [r7, #84]	; 0x54
 80097e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80097e8:	461a      	mov	r2, r3
 80097ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097ec:	4293      	cmp	r3, r2
 80097ee:	dbeb      	blt.n	80097c8 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d016      	beq.n	8009824 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 80097f6:	2300      	movs	r3, #0
 80097f8:	653b      	str	r3, [r7, #80]	; 0x50
 80097fa:	e00e      	b.n	800981a <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80097fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80097fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	4413      	add	r3, r2
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	f107 0314 	add.w	r3, r7, #20
 800980c:	3304      	adds	r3, #4
 800980e:	4618      	mov	r0, r3
 8009810:	f000 f904 	bl	8009a1c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8009814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009816:	3301      	adds	r3, #1
 8009818:	653b      	str	r3, [r7, #80]	; 0x50
 800981a:	8b7b      	ldrh	r3, [r7, #26]
 800981c:	461a      	mov	r2, r3
 800981e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009820:	4293      	cmp	r3, r2
 8009822:	dbeb      	blt.n	80097fc <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f107 0214 	add.w	r2, r7, #20
 800982c:	4611      	mov	r1, r2
 800982e:	4618      	mov	r0, r3
 8009830:	f000 f846 	bl	80098c0 <ai_network_init>
 8009834:	4603      	mov	r3, r0
 8009836:	f083 0301 	eor.w	r3, r3, #1
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b00      	cmp	r3, #0
 800983e:	d006      	beq.n	800984e <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4618      	mov	r0, r3
 8009846:	f7ff ff71 	bl	800972c <ai_network_get_error>
 800984a:	4603      	mov	r3, r0
 800984c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 800984e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009850:	4618      	mov	r0, r3
 8009852:	3758      	adds	r7, #88	; 0x58
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d104      	bne.n	8009872 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8009868:	4b06      	ldr	r3, [pc, #24]	; (8009884 <ai_network_inputs_get+0x2c>)
 800986a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a06      	ldr	r2, [pc, #24]	; (8009888 <ai_network_inputs_get+0x30>)
 8009870:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fa25 	bl	8009cc4 <ai_platform_inputs_get>
 800987a:	4603      	mov	r3, r0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	20000f5c 	.word	0x20000f5c
 8009888:	a1c00100 	.word	0xa1c00100

0800988c <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d104      	bne.n	80098a6 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800989c:	4b06      	ldr	r3, [pc, #24]	; (80098b8 <ai_network_outputs_get+0x2c>)
 800989e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a06      	ldr	r2, [pc, #24]	; (80098bc <ai_network_outputs_get+0x30>)
 80098a4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 faff 	bl	8009eac <ai_platform_outputs_get>
 80098ae:	4603      	mov	r3, r0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	20000f5c 	.word	0x20000f5c
 80098bc:	a1c00100 	.word	0xa1c00100

080098c0 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80098ca:	6839      	ldr	r1, [r7, #0]
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 fcc7 	bl	800a260 <ai_platform_network_init>
 80098d2:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <ai_network_init+0x1e>
 80098da:	2300      	movs	r3, #0
 80098dc:	e028      	b.n	8009930 <ai_network_init+0x70>

  ai_bool ok = true;
 80098de:	2301      	movs	r3, #1
 80098e0:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 80098e2:	6839      	ldr	r1, [r7, #0]
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f7ff fdb1 	bl	800944c <network_configure_weights>
 80098ea:	4603      	mov	r3, r0
 80098ec:	461a      	mov	r2, r3
 80098ee:	7afb      	ldrb	r3, [r7, #11]
 80098f0:	4013      	ands	r3, r2
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	bf14      	ite	ne
 80098f6:	2301      	movne	r3, #1
 80098f8:	2300      	moveq	r3, #0
 80098fa:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f7ff fd0c 	bl	800931c <network_configure_activations>
 8009904:	4603      	mov	r3, r0
 8009906:	461a      	mov	r2, r3
 8009908:	7afb      	ldrb	r3, [r7, #11]
 800990a:	4013      	ands	r3, r2
 800990c:	2b00      	cmp	r3, #0
 800990e:	bf14      	ite	ne
 8009910:	2301      	movne	r3, #1
 8009912:	2300      	moveq	r3, #0
 8009914:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fdae 	bl	800a478 <ai_platform_network_post_init>
 800991c:	4603      	mov	r3, r0
 800991e:	461a      	mov	r2, r3
 8009920:	7afb      	ldrb	r3, [r7, #11]
 8009922:	4013      	ands	r3, r2
 8009924:	2b00      	cmp	r3, #0
 8009926:	bf14      	ite	ne
 8009928:	2301      	movne	r3, #1
 800992a:	2300      	moveq	r3, #0
 800992c:	72fb      	strb	r3, [r7, #11]

  return ok;
 800992e:	7afb      	ldrb	r3, [r7, #11]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	68b9      	ldr	r1, [r7, #8]
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f000 fe29 	bl	800a5a0 <ai_platform_network_process>
 800994e:	4603      	mov	r3, r0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d101      	bne.n	800996a <ai_network_data_params_get+0x12>
 8009966:	2300      	movs	r3, #0
 8009968:	e016      	b.n	8009998 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800996a:	4a0d      	ldr	r2, [pc, #52]	; (80099a0 <ai_network_data_params_get+0x48>)
 800996c:	f107 0310 	add.w	r3, r7, #16
 8009970:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009974:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8009978:	4a0a      	ldr	r2, [pc, #40]	; (80099a4 <ai_network_data_params_get+0x4c>)
 800997a:	f107 0308 	add.w	r3, r7, #8
 800997e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009982:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8009986:	f107 0210 	add.w	r2, r7, #16
 800998a:	f107 0308 	add.w	r3, r7, #8
 800998e:	4619      	mov	r1, r3
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f8fb 	bl	8009b8c <ai_platform_bind_network_params>
 8009996:	4603      	mov	r3, r0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3718      	adds	r7, #24
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	08021e14 	.word	0x08021e14
 80099a4:	08021e1c 	.word	0x08021e1c

080099a8 <ai_buffer_get_size>:
 80099a8:	b358      	cbz	r0, 8009a02 <ai_buffer_get_size+0x5a>
 80099aa:	b430      	push	{r4, r5}
 80099ac:	6803      	ldr	r3, [r0, #0]
 80099ae:	4d15      	ldr	r5, [pc, #84]	; (8009a04 <ai_buffer_get_size+0x5c>)
 80099b0:	6984      	ldr	r4, [r0, #24]
 80099b2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80099b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80099ba:	42ab      	cmp	r3, r5
 80099bc:	6862      	ldr	r2, [r4, #4]
 80099be:	d01a      	beq.n	80099f6 <ai_buffer_get_size+0x4e>
 80099c0:	7d03      	ldrb	r3, [r0, #20]
 80099c2:	6941      	ldr	r1, [r0, #20]
 80099c4:	f1a3 0301 	sub.w	r3, r3, #1
 80099c8:	fab3 f383 	clz	r3, r3
 80099cc:	095b      	lsrs	r3, r3, #5
 80099ce:	f3c1 2117 	ubfx	r1, r1, #8, #24
 80099d2:	428b      	cmp	r3, r1
 80099d4:	da0b      	bge.n	80099ee <ai_buffer_get_size+0x46>
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d102      	bne.n	80099e0 <ai_buffer_get_size+0x38>
 80099da:	2902      	cmp	r1, #2
 80099dc:	d007      	beq.n	80099ee <ai_buffer_get_size+0x46>
 80099de:	2302      	movs	r3, #2
 80099e0:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80099e4:	3301      	adds	r3, #1
 80099e6:	428b      	cmp	r3, r1
 80099e8:	fb00 f202 	mul.w	r2, r0, r2
 80099ec:	d1f3      	bne.n	80099d6 <ai_buffer_get_size+0x2e>
 80099ee:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80099f2:	bc30      	pop	{r4, r5}
 80099f4:	4770      	bx	lr
 80099f6:	2900      	cmp	r1, #0
 80099f8:	d0e2      	beq.n	80099c0 <ai_buffer_get_size+0x18>
 80099fa:	321f      	adds	r2, #31
 80099fc:	f022 021f 	bic.w	r2, r2, #31
 8009a00:	e7de      	b.n	80099c0 <ai_buffer_get_size+0x18>
 8009a02:	4770      	bx	lr
 8009a04:	000400c0 	.word	0x000400c0

08009a08 <ai_buffer_array_sane>:
 8009a08:	b138      	cbz	r0, 8009a1a <ai_buffer_array_sane+0x12>
 8009a0a:	6843      	ldr	r3, [r0, #4]
 8009a0c:	b123      	cbz	r3, 8009a18 <ai_buffer_array_sane+0x10>
 8009a0e:	8840      	ldrh	r0, [r0, #2]
 8009a10:	3000      	adds	r0, #0
 8009a12:	bf18      	it	ne
 8009a14:	2001      	movne	r0, #1
 8009a16:	4770      	bx	lr
 8009a18:	4618      	mov	r0, r3
 8009a1a:	4770      	bx	lr

08009a1c <ai_buffer_array_item_set_address>:
 8009a1c:	b120      	cbz	r0, 8009a28 <ai_buffer_array_item_set_address+0xc>
 8009a1e:	6843      	ldr	r3, [r0, #4]
 8009a20:	b11b      	cbz	r3, 8009a2a <ai_buffer_array_item_set_address+0xe>
 8009a22:	8840      	ldrh	r0, [r0, #2]
 8009a24:	b918      	cbnz	r0, 8009a2e <ai_buffer_array_item_set_address+0x12>
 8009a26:	4770      	bx	lr
 8009a28:	4770      	bx	lr
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	4770      	bx	lr
 8009a2e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8009a32:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 8009a36:	d0f7      	beq.n	8009a28 <ai_buffer_array_item_set_address+0xc>
 8009a38:	6042      	str	r2, [r0, #4]
 8009a3a:	2001      	movs	r0, #1
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop

08009a40 <_ai_platform_acquire_crc>:
 8009a40:	2001      	movs	r0, #1
 8009a42:	4770      	bx	lr

08009a44 <_ai_platform_release_crc>:
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop

08009a48 <ai_platform_get_weights_map>:
 8009a48:	b192      	cbz	r2, 8009a70 <ai_platform_get_weights_map+0x28>
 8009a4a:	b188      	cbz	r0, 8009a70 <ai_platform_get_weights_map+0x28>
 8009a4c:	b181      	cbz	r1, 8009a70 <ai_platform_get_weights_map+0x28>
 8009a4e:	b570      	push	{r4, r5, r6, lr}
 8009a50:	4b24      	ldr	r3, [pc, #144]	; (8009ae4 <ai_platform_get_weights_map+0x9c>)
 8009a52:	6814      	ldr	r4, [r2, #0]
 8009a54:	429c      	cmp	r4, r3
 8009a56:	d00d      	beq.n	8009a74 <ai_platform_get_weights_map+0x2c>
 8009a58:	6854      	ldr	r4, [r2, #4]
 8009a5a:	b194      	cbz	r4, 8009a82 <ai_platform_get_weights_map+0x3a>
 8009a5c:	6825      	ldr	r5, [r4, #0]
 8009a5e:	429d      	cmp	r5, r3
 8009a60:	d027      	beq.n	8009ab2 <ai_platform_get_weights_map+0x6a>
 8009a62:	6004      	str	r4, [r0, #0]
 8009a64:	f1a1 0001 	sub.w	r0, r1, #1
 8009a68:	fab0 f080 	clz	r0, r0
 8009a6c:	0940      	lsrs	r0, r0, #5
 8009a6e:	bd70      	pop	{r4, r5, r6, pc}
 8009a70:	2000      	movs	r0, #0
 8009a72:	4770      	bx	lr
 8009a74:	4605      	mov	r5, r0
 8009a76:	1d10      	adds	r0, r2, #4
 8009a78:	4616      	mov	r6, r2
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	f7ff ffc4 	bl	8009a08 <ai_buffer_array_sane>
 8009a80:	b908      	cbnz	r0, 8009a86 <ai_platform_get_weights_map+0x3e>
 8009a82:	2000      	movs	r0, #0
 8009a84:	bd70      	pop	{r4, r5, r6, pc}
 8009a86:	88f3      	ldrh	r3, [r6, #6]
 8009a88:	429c      	cmp	r4, r3
 8009a8a:	d1fa      	bne.n	8009a82 <ai_platform_get_weights_map+0x3a>
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	1f2b      	subs	r3, r5, #4
 8009a90:	4608      	mov	r0, r1
 8009a92:	68b2      	ldr	r2, [r6, #8]
 8009a94:	440a      	add	r2, r1
 8009a96:	311c      	adds	r1, #28
 8009a98:	6852      	ldr	r2, [r2, #4]
 8009a9a:	b12a      	cbz	r2, 8009aa8 <ai_platform_get_weights_map+0x60>
 8009a9c:	3001      	adds	r0, #1
 8009a9e:	4284      	cmp	r4, r0
 8009aa0:	f843 2f04 	str.w	r2, [r3, #4]!
 8009aa4:	d1f5      	bne.n	8009a92 <ai_platform_get_weights_map+0x4a>
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	1a20      	subs	r0, r4, r0
 8009aaa:	fab0 f080 	clz	r0, r0
 8009aae:	0940      	lsrs	r0, r0, #5
 8009ab0:	bd70      	pop	{r4, r5, r6, pc}
 8009ab2:	6863      	ldr	r3, [r4, #4]
 8009ab4:	42ab      	cmp	r3, r5
 8009ab6:	f104 0404 	add.w	r4, r4, #4
 8009aba:	d0e2      	beq.n	8009a82 <ai_platform_get_weights_map+0x3a>
 8009abc:	3804      	subs	r0, #4
 8009abe:	4626      	mov	r6, r4
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	e003      	b.n	8009acc <ai_platform_get_weights_map+0x84>
 8009ac4:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8009ac8:	42ab      	cmp	r3, r5
 8009aca:	d0da      	beq.n	8009a82 <ai_platform_get_weights_map+0x3a>
 8009acc:	3201      	adds	r2, #1
 8009ace:	4291      	cmp	r1, r2
 8009ad0:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ad4:	d1f6      	bne.n	8009ac4 <ai_platform_get_weights_map+0x7c>
 8009ad6:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8009ada:	4b02      	ldr	r3, [pc, #8]	; (8009ae4 <ai_platform_get_weights_map+0x9c>)
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d1d0      	bne.n	8009a82 <ai_platform_get_weights_map+0x3a>
 8009ae0:	2001      	movs	r0, #1
 8009ae2:	bd70      	pop	{r4, r5, r6, pc}
 8009ae4:	a1facade 	.word	0xa1facade

08009ae8 <ai_platform_get_activations_map>:
 8009ae8:	b192      	cbz	r2, 8009b10 <ai_platform_get_activations_map+0x28>
 8009aea:	b188      	cbz	r0, 8009b10 <ai_platform_get_activations_map+0x28>
 8009aec:	b181      	cbz	r1, 8009b10 <ai_platform_get_activations_map+0x28>
 8009aee:	b570      	push	{r4, r5, r6, lr}
 8009af0:	4b25      	ldr	r3, [pc, #148]	; (8009b88 <ai_platform_get_activations_map+0xa0>)
 8009af2:	6814      	ldr	r4, [r2, #0]
 8009af4:	429c      	cmp	r4, r3
 8009af6:	d00d      	beq.n	8009b14 <ai_platform_get_activations_map+0x2c>
 8009af8:	6a14      	ldr	r4, [r2, #32]
 8009afa:	b19c      	cbz	r4, 8009b24 <ai_platform_get_activations_map+0x3c>
 8009afc:	6825      	ldr	r5, [r4, #0]
 8009afe:	429d      	cmp	r5, r3
 8009b00:	d028      	beq.n	8009b54 <ai_platform_get_activations_map+0x6c>
 8009b02:	6004      	str	r4, [r0, #0]
 8009b04:	f1a1 0001 	sub.w	r0, r1, #1
 8009b08:	fab0 f080 	clz	r0, r0
 8009b0c:	0940      	lsrs	r0, r0, #5
 8009b0e:	bd70      	pop	{r4, r5, r6, pc}
 8009b10:	2000      	movs	r0, #0
 8009b12:	4770      	bx	lr
 8009b14:	4605      	mov	r5, r0
 8009b16:	f102 000c 	add.w	r0, r2, #12
 8009b1a:	4616      	mov	r6, r2
 8009b1c:	460c      	mov	r4, r1
 8009b1e:	f7ff ff73 	bl	8009a08 <ai_buffer_array_sane>
 8009b22:	b908      	cbnz	r0, 8009b28 <ai_platform_get_activations_map+0x40>
 8009b24:	2000      	movs	r0, #0
 8009b26:	bd70      	pop	{r4, r5, r6, pc}
 8009b28:	89f3      	ldrh	r3, [r6, #14]
 8009b2a:	429c      	cmp	r4, r3
 8009b2c:	d1fa      	bne.n	8009b24 <ai_platform_get_activations_map+0x3c>
 8009b2e:	2100      	movs	r1, #0
 8009b30:	1f2b      	subs	r3, r5, #4
 8009b32:	4608      	mov	r0, r1
 8009b34:	6932      	ldr	r2, [r6, #16]
 8009b36:	440a      	add	r2, r1
 8009b38:	311c      	adds	r1, #28
 8009b3a:	6852      	ldr	r2, [r2, #4]
 8009b3c:	b12a      	cbz	r2, 8009b4a <ai_platform_get_activations_map+0x62>
 8009b3e:	3001      	adds	r0, #1
 8009b40:	4284      	cmp	r4, r0
 8009b42:	f843 2f04 	str.w	r2, [r3, #4]!
 8009b46:	d1f5      	bne.n	8009b34 <ai_platform_get_activations_map+0x4c>
 8009b48:	4620      	mov	r0, r4
 8009b4a:	1a20      	subs	r0, r4, r0
 8009b4c:	fab0 f080 	clz	r0, r0
 8009b50:	0940      	lsrs	r0, r0, #5
 8009b52:	bd70      	pop	{r4, r5, r6, pc}
 8009b54:	6863      	ldr	r3, [r4, #4]
 8009b56:	42ab      	cmp	r3, r5
 8009b58:	f104 0404 	add.w	r4, r4, #4
 8009b5c:	d0e2      	beq.n	8009b24 <ai_platform_get_activations_map+0x3c>
 8009b5e:	3804      	subs	r0, #4
 8009b60:	4626      	mov	r6, r4
 8009b62:	2200      	movs	r2, #0
 8009b64:	e003      	b.n	8009b6e <ai_platform_get_activations_map+0x86>
 8009b66:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8009b6a:	42ab      	cmp	r3, r5
 8009b6c:	d0da      	beq.n	8009b24 <ai_platform_get_activations_map+0x3c>
 8009b6e:	3201      	adds	r2, #1
 8009b70:	4291      	cmp	r1, r2
 8009b72:	f840 3f04 	str.w	r3, [r0, #4]!
 8009b76:	d1f6      	bne.n	8009b66 <ai_platform_get_activations_map+0x7e>
 8009b78:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8009b7c:	4b02      	ldr	r3, [pc, #8]	; (8009b88 <ai_platform_get_activations_map+0xa0>)
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d1d0      	bne.n	8009b24 <ai_platform_get_activations_map+0x3c>
 8009b82:	2001      	movs	r0, #1
 8009b84:	bd70      	pop	{r4, r5, r6, pc}
 8009b86:	bf00      	nop
 8009b88:	a1facade 	.word	0xa1facade

08009b8c <ai_platform_bind_network_params>:
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	b190      	cbz	r0, 8009bb6 <ai_platform_bind_network_params+0x2a>
 8009b90:	b1a1      	cbz	r1, 8009bbc <ai_platform_bind_network_params+0x30>
 8009b92:	b18a      	cbz	r2, 8009bb8 <ai_platform_bind_network_params+0x2c>
 8009b94:	b410      	push	{r4}
 8009b96:	4604      	mov	r4, r0
 8009b98:	4809      	ldr	r0, [pc, #36]	; (8009bc0 <ai_platform_bind_network_params+0x34>)
 8009b9a:	f844 0b04 	str.w	r0, [r4], #4
 8009b9e:	c903      	ldmia	r1, {r0, r1}
 8009ba0:	e884 0003 	stmia.w	r4, {r0, r1}
 8009ba4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ba8:	330c      	adds	r3, #12
 8009baa:	e883 0003 	stmia.w	r3, {r0, r1}
 8009bae:	2001      	movs	r0, #1
 8009bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bb4:	4770      	bx	lr
 8009bb6:	4770      	bx	lr
 8009bb8:	4610      	mov	r0, r2
 8009bba:	4770      	bx	lr
 8009bbc:	4608      	mov	r0, r1
 8009bbe:	4770      	bx	lr
 8009bc0:	a1facade 	.word	0xa1facade

08009bc4 <ai_platform_network_get_error>:
 8009bc4:	b510      	push	{r4, lr}
 8009bc6:	b120      	cbz	r0, 8009bd2 <ai_platform_network_get_error+0xe>
 8009bc8:	4b32      	ldr	r3, [pc, #200]	; (8009c94 <ai_platform_network_get_error+0xd0>)
 8009bca:	6802      	ldr	r2, [r0, #0]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	4604      	mov	r4, r0
 8009bd0:	d02e      	beq.n	8009c30 <ai_platform_network_get_error+0x6c>
 8009bd2:	4a31      	ldr	r2, [pc, #196]	; (8009c98 <ai_platform_network_get_error+0xd4>)
 8009bd4:	6813      	ldr	r3, [r2, #0]
 8009bd6:	f023 0301 	bic.w	r3, r3, #1
 8009bda:	6013      	str	r3, [r2, #0]
 8009bdc:	f7ff ff30 	bl	8009a40 <_ai_platform_acquire_crc>
 8009be0:	4b2e      	ldr	r3, [pc, #184]	; (8009c9c <ai_platform_network_get_error+0xd8>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bec:	d00d      	beq.n	8009c0a <ai_platform_network_get_error+0x46>
 8009bee:	4b2c      	ldr	r3, [pc, #176]	; (8009ca0 <ai_platform_network_get_error+0xdc>)
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	601a      	str	r2, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	2a00      	cmp	r2, #0
 8009bf8:	d1fc      	bne.n	8009bf4 <ai_platform_network_get_error+0x30>
 8009bfa:	4b2a      	ldr	r3, [pc, #168]	; (8009ca4 <ai_platform_network_get_error+0xe0>)
 8009bfc:	4a2a      	ldr	r2, [pc, #168]	; (8009ca8 <ai_platform_network_get_error+0xe4>)
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	4b2a      	ldr	r3, [pc, #168]	; (8009cac <ai_platform_network_get_error+0xe8>)
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d00d      	beq.n	8009c24 <ai_platform_network_get_error+0x60>
 8009c08:	e7fe      	b.n	8009c08 <ai_platform_network_get_error+0x44>
 8009c0a:	4b29      	ldr	r3, [pc, #164]	; (8009cb0 <ai_platform_network_get_error+0xec>)
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	601a      	str	r2, [r3, #0]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	2a00      	cmp	r2, #0
 8009c14:	d1fc      	bne.n	8009c10 <ai_platform_network_get_error+0x4c>
 8009c16:	4b27      	ldr	r3, [pc, #156]	; (8009cb4 <ai_platform_network_get_error+0xf0>)
 8009c18:	4a23      	ldr	r2, [pc, #140]	; (8009ca8 <ai_platform_network_get_error+0xe4>)
 8009c1a:	601a      	str	r2, [r3, #0]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	4b23      	ldr	r3, [pc, #140]	; (8009cac <ai_platform_network_get_error+0xe8>)
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d104      	bne.n	8009c2e <ai_platform_network_get_error+0x6a>
 8009c24:	f7ff ff0e 	bl	8009a44 <_ai_platform_release_crc>
 8009c28:	f241 0010 	movw	r0, #4112	; 0x1010
 8009c2c:	bd10      	pop	{r4, pc}
 8009c2e:	e7fe      	b.n	8009c2e <ai_platform_network_get_error+0x6a>
 8009c30:	4a19      	ldr	r2, [pc, #100]	; (8009c98 <ai_platform_network_get_error+0xd4>)
 8009c32:	6813      	ldr	r3, [r2, #0]
 8009c34:	f023 0301 	bic.w	r3, r3, #1
 8009c38:	6013      	str	r3, [r2, #0]
 8009c3a:	f7ff ff01 	bl	8009a40 <_ai_platform_acquire_crc>
 8009c3e:	4b17      	ldr	r3, [pc, #92]	; (8009c9c <ai_platform_network_get_error+0xd8>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c4a:	d00d      	beq.n	8009c68 <ai_platform_network_get_error+0xa4>
 8009c4c:	4b14      	ldr	r3, [pc, #80]	; (8009ca0 <ai_platform_network_get_error+0xdc>)
 8009c4e:	2201      	movs	r2, #1
 8009c50:	601a      	str	r2, [r3, #0]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	2a00      	cmp	r2, #0
 8009c56:	d1fc      	bne.n	8009c52 <ai_platform_network_get_error+0x8e>
 8009c58:	4b12      	ldr	r3, [pc, #72]	; (8009ca4 <ai_platform_network_get_error+0xe0>)
 8009c5a:	4a13      	ldr	r2, [pc, #76]	; (8009ca8 <ai_platform_network_get_error+0xe4>)
 8009c5c:	601a      	str	r2, [r3, #0]
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	4b12      	ldr	r3, [pc, #72]	; (8009cac <ai_platform_network_get_error+0xe8>)
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d00e      	beq.n	8009c84 <ai_platform_network_get_error+0xc0>
 8009c66:	e7fe      	b.n	8009c66 <ai_platform_network_get_error+0xa2>
 8009c68:	4b11      	ldr	r3, [pc, #68]	; (8009cb0 <ai_platform_network_get_error+0xec>)
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	601a      	str	r2, [r3, #0]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	2a00      	cmp	r2, #0
 8009c72:	d1fc      	bne.n	8009c6e <ai_platform_network_get_error+0xaa>
 8009c74:	4b0f      	ldr	r3, [pc, #60]	; (8009cb4 <ai_platform_network_get_error+0xf0>)
 8009c76:	4a0c      	ldr	r2, [pc, #48]	; (8009ca8 <ai_platform_network_get_error+0xe4>)
 8009c78:	601a      	str	r2, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	4b0b      	ldr	r3, [pc, #44]	; (8009cac <ai_platform_network_get_error+0xe8>)
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d000      	beq.n	8009c84 <ai_platform_network_get_error+0xc0>
 8009c82:	e7fe      	b.n	8009c82 <ai_platform_network_get_error+0xbe>
 8009c84:	f7ff fede 	bl	8009a44 <_ai_platform_release_crc>
 8009c88:	f104 0010 	add.w	r0, r4, #16
 8009c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c90:	f000 bef4 	b.w	800aa7c <core_get_error>
 8009c94:	a1c00100 	.word	0xa1c00100
 8009c98:	e0002000 	.word	0xe0002000
 8009c9c:	e0042000 	.word	0xe0042000
 8009ca0:	58024c08 	.word	0x58024c08
 8009ca4:	58024c00 	.word	0x58024c00
 8009ca8:	f407a5c2 	.word	0xf407a5c2
 8009cac:	b5e8b5cd 	.word	0xb5e8b5cd
 8009cb0:	40023008 	.word	0x40023008
 8009cb4:	40023000 	.word	0x40023000

08009cb8 <ai_platform_network_set_error>:
 8009cb8:	b110      	cbz	r0, 8009cc0 <ai_platform_network_set_error+0x8>
 8009cba:	3010      	adds	r0, #16
 8009cbc:	f000 bee4 	b.w	800aa88 <core_set_error>
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop

08009cc4 <ai_platform_inputs_get>:
 8009cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc8:	b085      	sub	sp, #20
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	f000 80a1 	beq.w	8009e12 <ai_platform_inputs_get+0x14e>
 8009cd0:	4b6d      	ldr	r3, [pc, #436]	; (8009e88 <ai_platform_inputs_get+0x1c4>)
 8009cd2:	6802      	ldr	r2, [r0, #0]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	4607      	mov	r7, r0
 8009cd8:	f040 809b 	bne.w	8009e12 <ai_platform_inputs_get+0x14e>
 8009cdc:	4a6b      	ldr	r2, [pc, #428]	; (8009e8c <ai_platform_inputs_get+0x1c8>)
 8009cde:	6813      	ldr	r3, [r2, #0]
 8009ce0:	f023 0301 	bic.w	r3, r3, #1
 8009ce4:	6013      	str	r3, [r2, #0]
 8009ce6:	468b      	mov	fp, r1
 8009ce8:	f7ff feaa 	bl	8009a40 <_ai_platform_acquire_crc>
 8009cec:	4b68      	ldr	r3, [pc, #416]	; (8009e90 <ai_platform_inputs_get+0x1cc>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cf8:	d00d      	beq.n	8009d16 <ai_platform_inputs_get+0x52>
 8009cfa:	4b66      	ldr	r3, [pc, #408]	; (8009e94 <ai_platform_inputs_get+0x1d0>)
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	601a      	str	r2, [r3, #0]
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	2a00      	cmp	r2, #0
 8009d04:	d1fc      	bne.n	8009d00 <ai_platform_inputs_get+0x3c>
 8009d06:	4b64      	ldr	r3, [pc, #400]	; (8009e98 <ai_platform_inputs_get+0x1d4>)
 8009d08:	4a64      	ldr	r2, [pc, #400]	; (8009e9c <ai_platform_inputs_get+0x1d8>)
 8009d0a:	601a      	str	r2, [r3, #0]
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	4b64      	ldr	r3, [pc, #400]	; (8009ea0 <ai_platform_inputs_get+0x1dc>)
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d00d      	beq.n	8009d30 <ai_platform_inputs_get+0x6c>
 8009d14:	e7fe      	b.n	8009d14 <ai_platform_inputs_get+0x50>
 8009d16:	4b63      	ldr	r3, [pc, #396]	; (8009ea4 <ai_platform_inputs_get+0x1e0>)
 8009d18:	2201      	movs	r2, #1
 8009d1a:	601a      	str	r2, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	2a00      	cmp	r2, #0
 8009d20:	d1fc      	bne.n	8009d1c <ai_platform_inputs_get+0x58>
 8009d22:	4b61      	ldr	r3, [pc, #388]	; (8009ea8 <ai_platform_inputs_get+0x1e4>)
 8009d24:	4a5d      	ldr	r2, [pc, #372]	; (8009e9c <ai_platform_inputs_get+0x1d8>)
 8009d26:	601a      	str	r2, [r3, #0]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	4b5d      	ldr	r3, [pc, #372]	; (8009ea0 <ai_platform_inputs_get+0x1dc>)
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d16f      	bne.n	8009e10 <ai_platform_inputs_get+0x14c>
 8009d30:	f7ff fe88 	bl	8009a44 <_ai_platform_release_crc>
 8009d34:	f1bb 0f00 	cmp.w	fp, #0
 8009d38:	d002      	beq.n	8009d40 <ai_platform_inputs_get+0x7c>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	f8ab 3000 	strh.w	r3, [fp]
 8009d40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	f000 8081 	beq.w	8009e4a <ai_platform_inputs_get+0x186>
 8009d48:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8009d4a:	2e00      	cmp	r6, #0
 8009d4c:	d07d      	beq.n	8009e4a <ai_platform_inputs_get+0x186>
 8009d4e:	8833      	ldrh	r3, [r6, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d07a      	beq.n	8009e4a <ai_platform_inputs_get+0x186>
 8009d54:	6873      	ldr	r3, [r6, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d077      	beq.n	8009e4a <ai_platform_inputs_get+0x186>
 8009d5a:	681d      	ldr	r5, [r3, #0]
 8009d5c:	2d00      	cmp	r5, #0
 8009d5e:	d074      	beq.n	8009e4a <ai_platform_inputs_get+0x186>
 8009d60:	f04f 0800 	mov.w	r8, #0
 8009d64:	f8cd b008 	str.w	fp, [sp, #8]
 8009d68:	46c1      	mov	r9, r8
 8009d6a:	46bb      	mov	fp, r7
 8009d6c:	68b0      	ldr	r0, [r6, #8]
 8009d6e:	69aa      	ldr	r2, [r5, #24]
 8009d70:	68ab      	ldr	r3, [r5, #8]
 8009d72:	6844      	ldr	r4, [r0, #4]
 8009d74:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8009d78:	6810      	ldr	r0, [r2, #0]
 8009d7a:	68ef      	ldr	r7, [r5, #12]
 8009d7c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8009d80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009d84:	9301      	str	r3, [sp, #4]
 8009d86:	9203      	str	r2, [sp, #12]
 8009d88:	f003 feca 	bl	800db20 <ai_array_to_buffer_fmt>
 8009d8c:	9a03      	ldr	r2, [sp, #12]
 8009d8e:	4601      	mov	r1, r0
 8009d90:	69a8      	ldr	r0, [r5, #24]
 8009d92:	eb0a 0302 	add.w	r3, sl, r2
 8009d96:	4444      	add	r4, r8
 8009d98:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8009d9c:	b16b      	cbz	r3, 8009dba <ai_platform_inputs_get+0xf6>
 8009d9e:	2000      	movs	r0, #0
 8009da0:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8009da4:	6828      	ldr	r0, [r5, #0]
 8009da6:	6058      	str	r0, [r3, #4]
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d058      	beq.n	8009e5e <ai_platform_inputs_get+0x19a>
 8009dac:	8840      	ldrh	r0, [r0, #2]
 8009dae:	2800      	cmp	r0, #0
 8009db0:	d055      	beq.n	8009e5e <ai_platform_inputs_get+0x19a>
 8009db2:	2001      	movs	r0, #1
 8009db4:	f84a 0002 	str.w	r0, [sl, r2]
 8009db8:	69a8      	ldr	r0, [r5, #24]
 8009dba:	6842      	ldr	r2, [r0, #4]
 8009dbc:	6122      	str	r2, [r4, #16]
 8009dbe:	f04f 0001 	mov.w	r0, #1
 8009dc2:	7520      	strb	r0, [r4, #20]
 8009dc4:	9a01      	ldr	r2, [sp, #4]
 8009dc6:	6960      	ldr	r0, [r4, #20]
 8009dc8:	60a3      	str	r3, [r4, #8]
 8009dca:	f362 201f 	bfi	r0, r2, #8, #24
 8009dce:	e9c4 1e00 	strd	r1, lr, [r4]
 8009dd2:	e9c4 0705 	strd	r0, r7, [r4, #20]
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	60e3      	str	r3, [r4, #12]
 8009dda:	8830      	ldrh	r0, [r6, #0]
 8009ddc:	f109 0301 	add.w	r3, r9, #1
 8009de0:	4283      	cmp	r3, r0
 8009de2:	4699      	mov	r9, r3
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	d207      	bcs.n	8009df8 <ai_platform_inputs_get+0x134>
 8009de8:	6870      	ldr	r0, [r6, #4]
 8009dea:	b128      	cbz	r0, 8009df8 <ai_platform_inputs_get+0x134>
 8009dec:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8009df0:	f108 081c 	add.w	r8, r8, #28
 8009df4:	2d00      	cmp	r5, #0
 8009df6:	d1b9      	bne.n	8009d6c <ai_platform_inputs_get+0xa8>
 8009df8:	465f      	mov	r7, fp
 8009dfa:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009dfe:	b322      	cbz	r2, 8009e4a <ai_platform_inputs_get+0x186>
 8009e00:	68b3      	ldr	r3, [r6, #8]
 8009e02:	6858      	ldr	r0, [r3, #4]
 8009e04:	f1bb 0f00 	cmp.w	fp, #0
 8009e08:	d026      	beq.n	8009e58 <ai_platform_inputs_get+0x194>
 8009e0a:	f8ab 2000 	strh.w	r2, [fp]
 8009e0e:	e023      	b.n	8009e58 <ai_platform_inputs_get+0x194>
 8009e10:	e7fe      	b.n	8009e10 <ai_platform_inputs_get+0x14c>
 8009e12:	4a1e      	ldr	r2, [pc, #120]	; (8009e8c <ai_platform_inputs_get+0x1c8>)
 8009e14:	6813      	ldr	r3, [r2, #0]
 8009e16:	f023 0301 	bic.w	r3, r3, #1
 8009e1a:	6013      	str	r3, [r2, #0]
 8009e1c:	f7ff fe10 	bl	8009a40 <_ai_platform_acquire_crc>
 8009e20:	4b1b      	ldr	r3, [pc, #108]	; (8009e90 <ai_platform_inputs_get+0x1cc>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e2c:	d01a      	beq.n	8009e64 <ai_platform_inputs_get+0x1a0>
 8009e2e:	4b19      	ldr	r3, [pc, #100]	; (8009e94 <ai_platform_inputs_get+0x1d0>)
 8009e30:	2201      	movs	r2, #1
 8009e32:	601a      	str	r2, [r3, #0]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	2a00      	cmp	r2, #0
 8009e38:	d1fc      	bne.n	8009e34 <ai_platform_inputs_get+0x170>
 8009e3a:	4b17      	ldr	r3, [pc, #92]	; (8009e98 <ai_platform_inputs_get+0x1d4>)
 8009e3c:	4a17      	ldr	r2, [pc, #92]	; (8009e9c <ai_platform_inputs_get+0x1d8>)
 8009e3e:	601a      	str	r2, [r3, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	4b17      	ldr	r3, [pc, #92]	; (8009ea0 <ai_platform_inputs_get+0x1dc>)
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d01b      	beq.n	8009e80 <ai_platform_inputs_get+0x1bc>
 8009e48:	e7fe      	b.n	8009e48 <ai_platform_inputs_get+0x184>
 8009e4a:	f107 0010 	add.w	r0, r7, #16
 8009e4e:	2218      	movs	r2, #24
 8009e50:	2111      	movs	r1, #17
 8009e52:	f000 fe19 	bl	800aa88 <core_set_error>
 8009e56:	2000      	movs	r0, #0
 8009e58:	b005      	add	sp, #20
 8009e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5e:	69a8      	ldr	r0, [r5, #24]
 8009e60:	2300      	movs	r3, #0
 8009e62:	e7aa      	b.n	8009dba <ai_platform_inputs_get+0xf6>
 8009e64:	4b0f      	ldr	r3, [pc, #60]	; (8009ea4 <ai_platform_inputs_get+0x1e0>)
 8009e66:	2201      	movs	r2, #1
 8009e68:	601a      	str	r2, [r3, #0]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	2a00      	cmp	r2, #0
 8009e6e:	d1fc      	bne.n	8009e6a <ai_platform_inputs_get+0x1a6>
 8009e70:	4b0d      	ldr	r3, [pc, #52]	; (8009ea8 <ai_platform_inputs_get+0x1e4>)
 8009e72:	4a0a      	ldr	r2, [pc, #40]	; (8009e9c <ai_platform_inputs_get+0x1d8>)
 8009e74:	601a      	str	r2, [r3, #0]
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	4b09      	ldr	r3, [pc, #36]	; (8009ea0 <ai_platform_inputs_get+0x1dc>)
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d000      	beq.n	8009e80 <ai_platform_inputs_get+0x1bc>
 8009e7e:	e7fe      	b.n	8009e7e <ai_platform_inputs_get+0x1ba>
 8009e80:	f7ff fde0 	bl	8009a44 <_ai_platform_release_crc>
 8009e84:	2000      	movs	r0, #0
 8009e86:	e7e7      	b.n	8009e58 <ai_platform_inputs_get+0x194>
 8009e88:	a1c00100 	.word	0xa1c00100
 8009e8c:	e0002000 	.word	0xe0002000
 8009e90:	e0042000 	.word	0xe0042000
 8009e94:	58024c08 	.word	0x58024c08
 8009e98:	58024c00 	.word	0x58024c00
 8009e9c:	f407a5c2 	.word	0xf407a5c2
 8009ea0:	b5e8b5cd 	.word	0xb5e8b5cd
 8009ea4:	40023008 	.word	0x40023008
 8009ea8:	40023000 	.word	0x40023000

08009eac <ai_platform_outputs_get>:
 8009eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb0:	b085      	sub	sp, #20
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	f000 80a9 	beq.w	800a00a <ai_platform_outputs_get+0x15e>
 8009eb8:	4b70      	ldr	r3, [pc, #448]	; (800a07c <ai_platform_outputs_get+0x1d0>)
 8009eba:	6802      	ldr	r2, [r0, #0]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	4607      	mov	r7, r0
 8009ec0:	f040 80a3 	bne.w	800a00a <ai_platform_outputs_get+0x15e>
 8009ec4:	4a6e      	ldr	r2, [pc, #440]	; (800a080 <ai_platform_outputs_get+0x1d4>)
 8009ec6:	6813      	ldr	r3, [r2, #0]
 8009ec8:	f023 0301 	bic.w	r3, r3, #1
 8009ecc:	6013      	str	r3, [r2, #0]
 8009ece:	468b      	mov	fp, r1
 8009ed0:	f7ff fdb6 	bl	8009a40 <_ai_platform_acquire_crc>
 8009ed4:	4b6b      	ldr	r3, [pc, #428]	; (800a084 <ai_platform_outputs_get+0x1d8>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ee0:	d00d      	beq.n	8009efe <ai_platform_outputs_get+0x52>
 8009ee2:	4b69      	ldr	r3, [pc, #420]	; (800a088 <ai_platform_outputs_get+0x1dc>)
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	601a      	str	r2, [r3, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	2a00      	cmp	r2, #0
 8009eec:	d1fc      	bne.n	8009ee8 <ai_platform_outputs_get+0x3c>
 8009eee:	4b67      	ldr	r3, [pc, #412]	; (800a08c <ai_platform_outputs_get+0x1e0>)
 8009ef0:	4a67      	ldr	r2, [pc, #412]	; (800a090 <ai_platform_outputs_get+0x1e4>)
 8009ef2:	601a      	str	r2, [r3, #0]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	4b67      	ldr	r3, [pc, #412]	; (800a094 <ai_platform_outputs_get+0x1e8>)
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d00d      	beq.n	8009f18 <ai_platform_outputs_get+0x6c>
 8009efc:	e7fe      	b.n	8009efc <ai_platform_outputs_get+0x50>
 8009efe:	4b66      	ldr	r3, [pc, #408]	; (800a098 <ai_platform_outputs_get+0x1ec>)
 8009f00:	2201      	movs	r2, #1
 8009f02:	601a      	str	r2, [r3, #0]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	2a00      	cmp	r2, #0
 8009f08:	d1fc      	bne.n	8009f04 <ai_platform_outputs_get+0x58>
 8009f0a:	4b64      	ldr	r3, [pc, #400]	; (800a09c <ai_platform_outputs_get+0x1f0>)
 8009f0c:	4a60      	ldr	r2, [pc, #384]	; (800a090 <ai_platform_outputs_get+0x1e4>)
 8009f0e:	601a      	str	r2, [r3, #0]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	4b60      	ldr	r3, [pc, #384]	; (800a094 <ai_platform_outputs_get+0x1e8>)
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d177      	bne.n	800a008 <ai_platform_outputs_get+0x15c>
 8009f18:	f7ff fd94 	bl	8009a44 <_ai_platform_release_crc>
 8009f1c:	f1bb 0f00 	cmp.w	fp, #0
 8009f20:	d002      	beq.n	8009f28 <ai_platform_outputs_get+0x7c>
 8009f22:	2300      	movs	r3, #0
 8009f24:	f8ab 3000 	strh.w	r3, [fp]
 8009f28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	f240 809a 	bls.w	800a064 <ai_platform_outputs_get+0x1b8>
 8009f30:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8009f32:	f116 0f0c 	cmn.w	r6, #12
 8009f36:	f000 8095 	beq.w	800a064 <ai_platform_outputs_get+0x1b8>
 8009f3a:	89b3      	ldrh	r3, [r6, #12]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f000 8091 	beq.w	800a064 <ai_platform_outputs_get+0x1b8>
 8009f42:	6933      	ldr	r3, [r6, #16]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f000 808d 	beq.w	800a064 <ai_platform_outputs_get+0x1b8>
 8009f4a:	681d      	ldr	r5, [r3, #0]
 8009f4c:	2d00      	cmp	r5, #0
 8009f4e:	f000 8089 	beq.w	800a064 <ai_platform_outputs_get+0x1b8>
 8009f52:	f04f 0800 	mov.w	r8, #0
 8009f56:	f8cd b008 	str.w	fp, [sp, #8]
 8009f5a:	46c1      	mov	r9, r8
 8009f5c:	46bb      	mov	fp, r7
 8009f5e:	6970      	ldr	r0, [r6, #20]
 8009f60:	69aa      	ldr	r2, [r5, #24]
 8009f62:	68ab      	ldr	r3, [r5, #8]
 8009f64:	6844      	ldr	r4, [r0, #4]
 8009f66:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8009f6a:	6810      	ldr	r0, [r2, #0]
 8009f6c:	68ef      	ldr	r7, [r5, #12]
 8009f6e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8009f72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009f76:	9301      	str	r3, [sp, #4]
 8009f78:	9203      	str	r2, [sp, #12]
 8009f7a:	f003 fdd1 	bl	800db20 <ai_array_to_buffer_fmt>
 8009f7e:	9a03      	ldr	r2, [sp, #12]
 8009f80:	4601      	mov	r1, r0
 8009f82:	69a8      	ldr	r0, [r5, #24]
 8009f84:	eb0a 0302 	add.w	r3, sl, r2
 8009f88:	4444      	add	r4, r8
 8009f8a:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8009f8e:	b16b      	cbz	r3, 8009fac <ai_platform_outputs_get+0x100>
 8009f90:	2000      	movs	r0, #0
 8009f92:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8009f96:	6828      	ldr	r0, [r5, #0]
 8009f98:	6058      	str	r0, [r3, #4]
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	d051      	beq.n	800a042 <ai_platform_outputs_get+0x196>
 8009f9e:	8840      	ldrh	r0, [r0, #2]
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	d04e      	beq.n	800a042 <ai_platform_outputs_get+0x196>
 8009fa4:	2001      	movs	r0, #1
 8009fa6:	f84a 0002 	str.w	r0, [sl, r2]
 8009faa:	69a8      	ldr	r0, [r5, #24]
 8009fac:	6842      	ldr	r2, [r0, #4]
 8009fae:	6122      	str	r2, [r4, #16]
 8009fb0:	f04f 0001 	mov.w	r0, #1
 8009fb4:	7520      	strb	r0, [r4, #20]
 8009fb6:	9a01      	ldr	r2, [sp, #4]
 8009fb8:	6960      	ldr	r0, [r4, #20]
 8009fba:	60a3      	str	r3, [r4, #8]
 8009fbc:	f362 201f 	bfi	r0, r2, #8, #24
 8009fc0:	e9c4 1e00 	strd	r1, lr, [r4]
 8009fc4:	e9c4 0705 	strd	r0, r7, [r4, #20]
 8009fc8:	2300      	movs	r3, #0
 8009fca:	60e3      	str	r3, [r4, #12]
 8009fcc:	89b0      	ldrh	r0, [r6, #12]
 8009fce:	f109 0301 	add.w	r3, r9, #1
 8009fd2:	4283      	cmp	r3, r0
 8009fd4:	4699      	mov	r9, r3
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	d207      	bcs.n	8009fea <ai_platform_outputs_get+0x13e>
 8009fda:	6930      	ldr	r0, [r6, #16]
 8009fdc:	b128      	cbz	r0, 8009fea <ai_platform_outputs_get+0x13e>
 8009fde:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8009fe2:	f108 081c 	add.w	r8, r8, #28
 8009fe6:	2d00      	cmp	r5, #0
 8009fe8:	d1b9      	bne.n	8009f5e <ai_platform_outputs_get+0xb2>
 8009fea:	465f      	mov	r7, fp
 8009fec:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009ff0:	2a00      	cmp	r2, #0
 8009ff2:	d037      	beq.n	800a064 <ai_platform_outputs_get+0x1b8>
 8009ff4:	6973      	ldr	r3, [r6, #20]
 8009ff6:	6858      	ldr	r0, [r3, #4]
 8009ff8:	f1bb 0f00 	cmp.w	fp, #0
 8009ffc:	d001      	beq.n	800a002 <ai_platform_outputs_get+0x156>
 8009ffe:	f8ab 2000 	strh.w	r2, [fp]
 800a002:	b005      	add	sp, #20
 800a004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a008:	e7fe      	b.n	800a008 <ai_platform_outputs_get+0x15c>
 800a00a:	4a1d      	ldr	r2, [pc, #116]	; (800a080 <ai_platform_outputs_get+0x1d4>)
 800a00c:	6813      	ldr	r3, [r2, #0]
 800a00e:	f023 0301 	bic.w	r3, r3, #1
 800a012:	6013      	str	r3, [r2, #0]
 800a014:	f7ff fd14 	bl	8009a40 <_ai_platform_acquire_crc>
 800a018:	4b1a      	ldr	r3, [pc, #104]	; (800a084 <ai_platform_outputs_get+0x1d8>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a024:	d010      	beq.n	800a048 <ai_platform_outputs_get+0x19c>
 800a026:	4b18      	ldr	r3, [pc, #96]	; (800a088 <ai_platform_outputs_get+0x1dc>)
 800a028:	2201      	movs	r2, #1
 800a02a:	601a      	str	r2, [r3, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	2a00      	cmp	r2, #0
 800a030:	d1fc      	bne.n	800a02c <ai_platform_outputs_get+0x180>
 800a032:	4b16      	ldr	r3, [pc, #88]	; (800a08c <ai_platform_outputs_get+0x1e0>)
 800a034:	4a16      	ldr	r2, [pc, #88]	; (800a090 <ai_platform_outputs_get+0x1e4>)
 800a036:	601a      	str	r2, [r3, #0]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	4b16      	ldr	r3, [pc, #88]	; (800a094 <ai_platform_outputs_get+0x1e8>)
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d019      	beq.n	800a074 <ai_platform_outputs_get+0x1c8>
 800a040:	e7fe      	b.n	800a040 <ai_platform_outputs_get+0x194>
 800a042:	69a8      	ldr	r0, [r5, #24]
 800a044:	2300      	movs	r3, #0
 800a046:	e7b1      	b.n	8009fac <ai_platform_outputs_get+0x100>
 800a048:	4b13      	ldr	r3, [pc, #76]	; (800a098 <ai_platform_outputs_get+0x1ec>)
 800a04a:	2201      	movs	r2, #1
 800a04c:	601a      	str	r2, [r3, #0]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	2a00      	cmp	r2, #0
 800a052:	d1fc      	bne.n	800a04e <ai_platform_outputs_get+0x1a2>
 800a054:	4b11      	ldr	r3, [pc, #68]	; (800a09c <ai_platform_outputs_get+0x1f0>)
 800a056:	4a0e      	ldr	r2, [pc, #56]	; (800a090 <ai_platform_outputs_get+0x1e4>)
 800a058:	601a      	str	r2, [r3, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	4b0d      	ldr	r3, [pc, #52]	; (800a094 <ai_platform_outputs_get+0x1e8>)
 800a05e:	429a      	cmp	r2, r3
 800a060:	d008      	beq.n	800a074 <ai_platform_outputs_get+0x1c8>
 800a062:	e7fe      	b.n	800a062 <ai_platform_outputs_get+0x1b6>
 800a064:	f107 0010 	add.w	r0, r7, #16
 800a068:	2218      	movs	r2, #24
 800a06a:	2111      	movs	r1, #17
 800a06c:	f000 fd0c 	bl	800aa88 <core_set_error>
 800a070:	2000      	movs	r0, #0
 800a072:	e7c6      	b.n	800a002 <ai_platform_outputs_get+0x156>
 800a074:	f7ff fce6 	bl	8009a44 <_ai_platform_release_crc>
 800a078:	2000      	movs	r0, #0
 800a07a:	e7c2      	b.n	800a002 <ai_platform_outputs_get+0x156>
 800a07c:	a1c00100 	.word	0xa1c00100
 800a080:	e0002000 	.word	0xe0002000
 800a084:	e0042000 	.word	0xe0042000
 800a088:	58024c08 	.word	0x58024c08
 800a08c:	58024c00 	.word	0x58024c00
 800a090:	f407a5c2 	.word	0xf407a5c2
 800a094:	b5e8b5cd 	.word	0xb5e8b5cd
 800a098:	40023008 	.word	0x40023008
 800a09c:	40023000 	.word	0x40023000

0800a0a0 <ai_platform_network_create>:
 800a0a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0a4:	b083      	sub	sp, #12
 800a0a6:	4606      	mov	r6, r0
 800a0a8:	4615      	mov	r5, r2
 800a0aa:	461f      	mov	r7, r3
 800a0ac:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 800a0b0:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 800a0b4:	f7ff fcc4 	bl	8009a40 <_ai_platform_acquire_crc>
 800a0b8:	b178      	cbz	r0, 800a0da <ai_platform_network_create+0x3a>
 800a0ba:	4b5f      	ldr	r3, [pc, #380]	; (800a238 <ai_platform_network_create+0x198>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	d00d      	beq.n	800a0e6 <ai_platform_network_create+0x46>
 800a0ca:	4b5c      	ldr	r3, [pc, #368]	; (800a23c <ai_platform_network_create+0x19c>)
 800a0cc:	2118      	movs	r1, #24
 800a0ce:	6019      	str	r1, [r3, #0]
 800a0d0:	6819      	ldr	r1, [r3, #0]
 800a0d2:	2918      	cmp	r1, #24
 800a0d4:	d01a      	beq.n	800a10c <ai_platform_network_create+0x6c>
 800a0d6:	f7ff fcb5 	bl	8009a44 <_ai_platform_release_crc>
 800a0da:	f244 1333 	movw	r3, #16691	; 0x4133
 800a0de:	4618      	mov	r0, r3
 800a0e0:	b003      	add	sp, #12
 800a0e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0e6:	4b56      	ldr	r3, [pc, #344]	; (800a240 <ai_platform_network_create+0x1a0>)
 800a0e8:	2101      	movs	r1, #1
 800a0ea:	6019      	str	r1, [r3, #0]
 800a0ec:	2114      	movs	r1, #20
 800a0ee:	e001      	b.n	800a0f4 <ai_platform_network_create+0x54>
 800a0f0:	3901      	subs	r1, #1
 800a0f2:	d002      	beq.n	800a0fa <ai_platform_network_create+0x5a>
 800a0f4:	6818      	ldr	r0, [r3, #0]
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	d1fa      	bne.n	800a0f0 <ai_platform_network_create+0x50>
 800a0fa:	4b51      	ldr	r3, [pc, #324]	; (800a240 <ai_platform_network_create+0x1a0>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	b91b      	cbnz	r3, 800a108 <ai_platform_network_create+0x68>
 800a100:	4b50      	ldr	r3, [pc, #320]	; (800a244 <ai_platform_network_create+0x1a4>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	3301      	adds	r3, #1
 800a106:	d006      	beq.n	800a116 <ai_platform_network_create+0x76>
 800a108:	4610      	mov	r0, r2
 800a10a:	e7e4      	b.n	800a0d6 <ai_platform_network_create+0x36>
 800a10c:	2101      	movs	r1, #1
 800a10e:	6019      	str	r1, [r3, #0]
 800a110:	6819      	ldr	r1, [r3, #0]
 800a112:	2900      	cmp	r1, #0
 800a114:	d1fc      	bne.n	800a110 <ai_platform_network_create+0x70>
 800a116:	4610      	mov	r0, r2
 800a118:	f7ff fc94 	bl	8009a44 <_ai_platform_release_crc>
 800a11c:	4a4a      	ldr	r2, [pc, #296]	; (800a248 <ai_platform_network_create+0x1a8>)
 800a11e:	6813      	ldr	r3, [r2, #0]
 800a120:	f023 0301 	bic.w	r3, r3, #1
 800a124:	6013      	str	r3, [r2, #0]
 800a126:	f7ff fc8b 	bl	8009a40 <_ai_platform_acquire_crc>
 800a12a:	4b43      	ldr	r3, [pc, #268]	; (800a238 <ai_platform_network_create+0x198>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a136:	d00d      	beq.n	800a154 <ai_platform_network_create+0xb4>
 800a138:	4b40      	ldr	r3, [pc, #256]	; (800a23c <ai_platform_network_create+0x19c>)
 800a13a:	2201      	movs	r2, #1
 800a13c:	601a      	str	r2, [r3, #0]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	2a00      	cmp	r2, #0
 800a142:	d1fc      	bne.n	800a13e <ai_platform_network_create+0x9e>
 800a144:	4b41      	ldr	r3, [pc, #260]	; (800a24c <ai_platform_network_create+0x1ac>)
 800a146:	4a42      	ldr	r2, [pc, #264]	; (800a250 <ai_platform_network_create+0x1b0>)
 800a148:	601a      	str	r2, [r3, #0]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	4b41      	ldr	r3, [pc, #260]	; (800a254 <ai_platform_network_create+0x1b4>)
 800a14e:	429a      	cmp	r2, r3
 800a150:	d00e      	beq.n	800a170 <ai_platform_network_create+0xd0>
 800a152:	e7fe      	b.n	800a152 <ai_platform_network_create+0xb2>
 800a154:	4b3a      	ldr	r3, [pc, #232]	; (800a240 <ai_platform_network_create+0x1a0>)
 800a156:	2201      	movs	r2, #1
 800a158:	601a      	str	r2, [r3, #0]
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	2a00      	cmp	r2, #0
 800a15e:	d1fc      	bne.n	800a15a <ai_platform_network_create+0xba>
 800a160:	4b38      	ldr	r3, [pc, #224]	; (800a244 <ai_platform_network_create+0x1a4>)
 800a162:	4a3b      	ldr	r2, [pc, #236]	; (800a250 <ai_platform_network_create+0x1b0>)
 800a164:	601a      	str	r2, [r3, #0]
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	4b3a      	ldr	r3, [pc, #232]	; (800a254 <ai_platform_network_create+0x1b4>)
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d000      	beq.n	800a170 <ai_platform_network_create+0xd0>
 800a16e:	e7fe      	b.n	800a16e <ai_platform_network_create+0xce>
 800a170:	f7ff fc68 	bl	8009a44 <_ai_platform_release_crc>
 800a174:	b1ae      	cbz	r6, 800a1a2 <ai_platform_network_create+0x102>
 800a176:	4b38      	ldr	r3, [pc, #224]	; (800a258 <ai_platform_network_create+0x1b8>)
 800a178:	602b      	str	r3, [r5, #0]
 800a17a:	6035      	str	r5, [r6, #0]
 800a17c:	f000 fc7c 	bl	800aa78 <core_init>
 800a180:	b990      	cbnz	r0, 800a1a8 <ai_platform_network_create+0x108>
 800a182:	2430      	movs	r4, #48	; 0x30
 800a184:	2300      	movs	r3, #0
 800a186:	6033      	str	r3, [r6, #0]
 800a188:	2610      	movs	r6, #16
 800a18a:	464a      	mov	r2, r9
 800a18c:	4641      	mov	r1, r8
 800a18e:	4638      	mov	r0, r7
 800a190:	f003 fcac 	bl	800daec <ai_version_get>
 800a194:	2300      	movs	r3, #0
 800a196:	f364 0307 	bfi	r3, r4, #0, #8
 800a19a:	6468      	str	r0, [r5, #68]	; 0x44
 800a19c:	f366 231f 	bfi	r3, r6, #8, #24
 800a1a0:	e79d      	b.n	800a0de <ai_platform_network_create+0x3e>
 800a1a2:	f241 0310 	movw	r3, #4112	; 0x1010
 800a1a6:	e79a      	b.n	800a0de <ai_platform_network_create+0x3e>
 800a1a8:	4a27      	ldr	r2, [pc, #156]	; (800a248 <ai_platform_network_create+0x1a8>)
 800a1aa:	6813      	ldr	r3, [r2, #0]
 800a1ac:	f023 0301 	bic.w	r3, r3, #1
 800a1b0:	6013      	str	r3, [r2, #0]
 800a1b2:	f7ff fc45 	bl	8009a40 <_ai_platform_acquire_crc>
 800a1b6:	4b20      	ldr	r3, [pc, #128]	; (800a238 <ai_platform_network_create+0x198>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1c2:	d00d      	beq.n	800a1e0 <ai_platform_network_create+0x140>
 800a1c4:	4b1d      	ldr	r3, [pc, #116]	; (800a23c <ai_platform_network_create+0x19c>)
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	601a      	str	r2, [r3, #0]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	2a00      	cmp	r2, #0
 800a1ce:	d1fc      	bne.n	800a1ca <ai_platform_network_create+0x12a>
 800a1d0:	4b1e      	ldr	r3, [pc, #120]	; (800a24c <ai_platform_network_create+0x1ac>)
 800a1d2:	4a1f      	ldr	r2, [pc, #124]	; (800a250 <ai_platform_network_create+0x1b0>)
 800a1d4:	601a      	str	r2, [r3, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	4b1e      	ldr	r3, [pc, #120]	; (800a254 <ai_platform_network_create+0x1b4>)
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d00e      	beq.n	800a1fc <ai_platform_network_create+0x15c>
 800a1de:	e7fe      	b.n	800a1de <ai_platform_network_create+0x13e>
 800a1e0:	4b17      	ldr	r3, [pc, #92]	; (800a240 <ai_platform_network_create+0x1a0>)
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	601a      	str	r2, [r3, #0]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	2a00      	cmp	r2, #0
 800a1ea:	d1fc      	bne.n	800a1e6 <ai_platform_network_create+0x146>
 800a1ec:	4b15      	ldr	r3, [pc, #84]	; (800a244 <ai_platform_network_create+0x1a4>)
 800a1ee:	4a18      	ldr	r2, [pc, #96]	; (800a250 <ai_platform_network_create+0x1b0>)
 800a1f0:	601a      	str	r2, [r3, #0]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	4b17      	ldr	r3, [pc, #92]	; (800a254 <ai_platform_network_create+0x1b4>)
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d000      	beq.n	800a1fc <ai_platform_network_create+0x15c>
 800a1fa:	e7fe      	b.n	800a1fa <ai_platform_network_create+0x15a>
 800a1fc:	f7ff fc22 	bl	8009a44 <_ai_platform_release_crc>
 800a200:	2200      	movs	r2, #0
 800a202:	4641      	mov	r1, r8
 800a204:	4638      	mov	r0, r7
 800a206:	f003 fc71 	bl	800daec <ai_version_get>
 800a20a:	2200      	movs	r2, #0
 800a20c:	4604      	mov	r4, r0
 800a20e:	2105      	movs	r1, #5
 800a210:	2001      	movs	r0, #1
 800a212:	f003 fc6b 	bl	800daec <ai_version_get>
 800a216:	4284      	cmp	r4, r0
 800a218:	d001      	beq.n	800a21e <ai_platform_network_create+0x17e>
 800a21a:	2401      	movs	r4, #1
 800a21c:	e7b2      	b.n	800a184 <ai_platform_network_create+0xe4>
 800a21e:	a802      	add	r0, sp, #8
 800a220:	4b0e      	ldr	r3, [pc, #56]	; (800a25c <ai_platform_network_create+0x1bc>)
 800a222:	f840 3d04 	str.w	r3, [r0, #-4]!
 800a226:	f003 fbb9 	bl	800d99c <ai_check_custom_types>
 800a22a:	b110      	cbz	r0, 800a232 <ai_platform_network_create+0x192>
 800a22c:	2600      	movs	r6, #0
 800a22e:	4634      	mov	r4, r6
 800a230:	e7ab      	b.n	800a18a <ai_platform_network_create+0xea>
 800a232:	2402      	movs	r4, #2
 800a234:	e7a6      	b.n	800a184 <ai_platform_network_create+0xe4>
 800a236:	bf00      	nop
 800a238:	e0042000 	.word	0xe0042000
 800a23c:	58024c08 	.word	0x58024c08
 800a240:	40023008 	.word	0x40023008
 800a244:	40023000 	.word	0x40023000
 800a248:	e0002000 	.word	0xe0002000
 800a24c:	58024c00 	.word	0x58024c00
 800a250:	f407a5c2 	.word	0xf407a5c2
 800a254:	b5e8b5cd 	.word	0xb5e8b5cd
 800a258:	a1c00100 	.word	0xa1c00100
 800a25c:	84048403 	.word	0x84048403

0800a260 <ai_platform_network_init>:
 800a260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a264:	2800      	cmp	r0, #0
 800a266:	d04b      	beq.n	800a300 <ai_platform_network_init+0xa0>
 800a268:	4b79      	ldr	r3, [pc, #484]	; (800a450 <ai_platform_network_init+0x1f0>)
 800a26a:	6802      	ldr	r2, [r0, #0]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	4604      	mov	r4, r0
 800a270:	d146      	bne.n	800a300 <ai_platform_network_init+0xa0>
 800a272:	4a78      	ldr	r2, [pc, #480]	; (800a454 <ai_platform_network_init+0x1f4>)
 800a274:	6813      	ldr	r3, [r2, #0]
 800a276:	f023 0301 	bic.w	r3, r3, #1
 800a27a:	6013      	str	r3, [r2, #0]
 800a27c:	460e      	mov	r6, r1
 800a27e:	f7ff fbdf 	bl	8009a40 <_ai_platform_acquire_crc>
 800a282:	4b75      	ldr	r3, [pc, #468]	; (800a458 <ai_platform_network_init+0x1f8>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a28a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a28e:	d00d      	beq.n	800a2ac <ai_platform_network_init+0x4c>
 800a290:	4b72      	ldr	r3, [pc, #456]	; (800a45c <ai_platform_network_init+0x1fc>)
 800a292:	2201      	movs	r2, #1
 800a294:	601a      	str	r2, [r3, #0]
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	2a00      	cmp	r2, #0
 800a29a:	d1fc      	bne.n	800a296 <ai_platform_network_init+0x36>
 800a29c:	4b70      	ldr	r3, [pc, #448]	; (800a460 <ai_platform_network_init+0x200>)
 800a29e:	4a71      	ldr	r2, [pc, #452]	; (800a464 <ai_platform_network_init+0x204>)
 800a2a0:	601a      	str	r2, [r3, #0]
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	4b70      	ldr	r3, [pc, #448]	; (800a468 <ai_platform_network_init+0x208>)
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d00d      	beq.n	800a2c6 <ai_platform_network_init+0x66>
 800a2aa:	e7fe      	b.n	800a2aa <ai_platform_network_init+0x4a>
 800a2ac:	4b6f      	ldr	r3, [pc, #444]	; (800a46c <ai_platform_network_init+0x20c>)
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	601a      	str	r2, [r3, #0]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	2a00      	cmp	r2, #0
 800a2b6:	d1fc      	bne.n	800a2b2 <ai_platform_network_init+0x52>
 800a2b8:	4b6d      	ldr	r3, [pc, #436]	; (800a470 <ai_platform_network_init+0x210>)
 800a2ba:	4a6a      	ldr	r2, [pc, #424]	; (800a464 <ai_platform_network_init+0x204>)
 800a2bc:	601a      	str	r2, [r3, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	4b69      	ldr	r3, [pc, #420]	; (800a468 <ai_platform_network_init+0x208>)
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d11b      	bne.n	800a2fe <ai_platform_network_init+0x9e>
 800a2c6:	f7ff fbbd 	bl	8009a44 <_ai_platform_release_crc>
 800a2ca:	2e00      	cmp	r6, #0
 800a2cc:	d034      	beq.n	800a338 <ai_platform_network_init+0xd8>
 800a2ce:	4b69      	ldr	r3, [pc, #420]	; (800a474 <ai_platform_network_init+0x214>)
 800a2d0:	6832      	ldr	r2, [r6, #0]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d149      	bne.n	800a36a <ai_platform_network_init+0x10a>
 800a2d6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800a2da:	6930      	ldr	r0, [r6, #16]
 800a2dc:	89b3      	ldrh	r3, [r6, #12]
 800a2de:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 800a2e2:	62a0      	str	r0, [r4, #40]	; 0x28
 800a2e4:	e9c4 2107 	strd	r2, r1, [r4, #28]
 800a2e8:	2203      	movs	r2, #3
 800a2ea:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800a2ee:	84a3      	strh	r3, [r4, #36]	; 0x24
 800a2f0:	60e2      	str	r2, [r4, #12]
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f003 fb7c 	bl	800d9f0 <ai_layers_init_all>
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2fe:	e7fe      	b.n	800a2fe <ai_platform_network_init+0x9e>
 800a300:	4a54      	ldr	r2, [pc, #336]	; (800a454 <ai_platform_network_init+0x1f4>)
 800a302:	6813      	ldr	r3, [r2, #0]
 800a304:	f023 0301 	bic.w	r3, r3, #1
 800a308:	6013      	str	r3, [r2, #0]
 800a30a:	f7ff fb99 	bl	8009a40 <_ai_platform_acquire_crc>
 800a30e:	4b52      	ldr	r3, [pc, #328]	; (800a458 <ai_platform_network_init+0x1f8>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a31a:	d015      	beq.n	800a348 <ai_platform_network_init+0xe8>
 800a31c:	4b4f      	ldr	r3, [pc, #316]	; (800a45c <ai_platform_network_init+0x1fc>)
 800a31e:	2201      	movs	r2, #1
 800a320:	601a      	str	r2, [r3, #0]
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	2a00      	cmp	r2, #0
 800a326:	d1fc      	bne.n	800a322 <ai_platform_network_init+0xc2>
 800a328:	4b4d      	ldr	r3, [pc, #308]	; (800a460 <ai_platform_network_init+0x200>)
 800a32a:	4a4e      	ldr	r2, [pc, #312]	; (800a464 <ai_platform_network_init+0x204>)
 800a32c:	601a      	str	r2, [r3, #0]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	4b4d      	ldr	r3, [pc, #308]	; (800a468 <ai_platform_network_init+0x208>)
 800a332:	429a      	cmp	r2, r3
 800a334:	d015      	beq.n	800a362 <ai_platform_network_init+0x102>
 800a336:	e7fe      	b.n	800a336 <ai_platform_network_init+0xd6>
 800a338:	f104 0010 	add.w	r0, r4, #16
 800a33c:	2211      	movs	r2, #17
 800a33e:	2110      	movs	r1, #16
 800a340:	4634      	mov	r4, r6
 800a342:	f000 fba1 	bl	800aa88 <core_set_error>
 800a346:	e7d7      	b.n	800a2f8 <ai_platform_network_init+0x98>
 800a348:	4b48      	ldr	r3, [pc, #288]	; (800a46c <ai_platform_network_init+0x20c>)
 800a34a:	2201      	movs	r2, #1
 800a34c:	601a      	str	r2, [r3, #0]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	2a00      	cmp	r2, #0
 800a352:	d1fc      	bne.n	800a34e <ai_platform_network_init+0xee>
 800a354:	4b46      	ldr	r3, [pc, #280]	; (800a470 <ai_platform_network_init+0x210>)
 800a356:	4a43      	ldr	r2, [pc, #268]	; (800a464 <ai_platform_network_init+0x204>)
 800a358:	601a      	str	r2, [r3, #0]
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	4b42      	ldr	r3, [pc, #264]	; (800a468 <ai_platform_network_init+0x208>)
 800a35e:	429a      	cmp	r2, r3
 800a360:	d16d      	bne.n	800a43e <ai_platform_network_init+0x1de>
 800a362:	f7ff fb6f 	bl	8009a44 <_ai_platform_release_crc>
 800a366:	2400      	movs	r4, #0
 800a368:	e7c6      	b.n	800a2f8 <ai_platform_network_init+0x98>
 800a36a:	4630      	mov	r0, r6
 800a36c:	2101      	movs	r1, #1
 800a36e:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800a372:	f7ff fb19 	bl	80099a8 <ai_buffer_get_size>
 800a376:	4635      	mov	r5, r6
 800a378:	f106 071c 	add.w	r7, r6, #28
 800a37c:	2101      	movs	r1, #1
 800a37e:	4606      	mov	r6, r0
 800a380:	4638      	mov	r0, r7
 800a382:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800a386:	f7ff fb0f 	bl	80099a8 <ai_buffer_get_size>
 800a38a:	2e00      	cmp	r6, #0
 800a38c:	bf0a      	itet	eq
 800a38e:	46b6      	moveq	lr, r6
 800a390:	f04f 0e01 	movne.w	lr, #1
 800a394:	4635      	moveq	r5, r6
 800a396:	2800      	cmp	r0, #0
 800a398:	d14b      	bne.n	800a432 <ai_platform_network_init+0x1d2>
 800a39a:	4607      	mov	r7, r0
 800a39c:	4684      	mov	ip, r0
 800a39e:	f1b8 0f00 	cmp.w	r8, #0
 800a3a2:	d023      	beq.n	800a3ec <ai_platform_network_init+0x18c>
 800a3a4:	8be3      	ldrh	r3, [r4, #30]
 800a3a6:	4573      	cmp	r3, lr
 800a3a8:	d207      	bcs.n	800a3ba <ai_platform_network_init+0x15a>
 800a3aa:	f104 0010 	add.w	r0, r4, #16
 800a3ae:	2212      	movs	r2, #18
 800a3b0:	2116      	movs	r1, #22
 800a3b2:	f000 fb69 	bl	800aa88 <core_set_error>
 800a3b6:	2400      	movs	r4, #0
 800a3b8:	e79e      	b.n	800a2f8 <ai_platform_network_init+0x98>
 800a3ba:	f1be 0f00 	cmp.w	lr, #0
 800a3be:	d006      	beq.n	800a3ce <ai_platform_network_init+0x16e>
 800a3c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3c2:	6a26      	ldr	r6, [r4, #32]
 800a3c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a3c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a3ca:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800a3ce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800a3d0:	f8a4 e01e 	strh.w	lr, [r4, #30]
 800a3d4:	2600      	movs	r6, #0
 800a3d6:	4563      	cmp	r3, ip
 800a3d8:	83a6      	strh	r6, [r4, #28]
 800a3da:	d211      	bcs.n	800a400 <ai_platform_network_init+0x1a0>
 800a3dc:	f104 0010 	add.w	r0, r4, #16
 800a3e0:	2213      	movs	r2, #19
 800a3e2:	2116      	movs	r1, #22
 800a3e4:	f000 fb50 	bl	800aa88 <core_set_error>
 800a3e8:	4634      	mov	r4, r6
 800a3ea:	e785      	b.n	800a2f8 <ai_platform_network_init+0x98>
 800a3ec:	2e00      	cmp	r6, #0
 800a3ee:	d0d9      	beq.n	800a3a4 <ai_platform_network_init+0x144>
 800a3f0:	f104 0010 	add.w	r0, r4, #16
 800a3f4:	2212      	movs	r2, #18
 800a3f6:	2110      	movs	r1, #16
 800a3f8:	4644      	mov	r4, r8
 800a3fa:	f000 fb45 	bl	800aa88 <core_set_error>
 800a3fe:	e77b      	b.n	800a2f8 <ai_platform_network_init+0x98>
 800a400:	f1bc 0f00 	cmp.w	ip, #0
 800a404:	d013      	beq.n	800a42e <ai_platform_network_init+0x1ce>
 800a406:	f04f 081c 	mov.w	r8, #28
 800a40a:	fb08 f80c 	mul.w	r8, r8, ip
 800a40e:	eb07 0e06 	add.w	lr, r7, r6
 800a412:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a416:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800a418:	4435      	add	r5, r6
 800a41a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a41c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800a420:	361c      	adds	r6, #28
 800a422:	4546      	cmp	r6, r8
 800a424:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a428:	d1f1      	bne.n	800a40e <ai_platform_network_init+0x1ae>
 800a42a:	2300      	movs	r3, #0
 800a42c:	e75c      	b.n	800a2e8 <ai_platform_network_init+0x88>
 800a42e:	4663      	mov	r3, ip
 800a430:	e75a      	b.n	800a2e8 <ai_platform_network_init+0x88>
 800a432:	f1b9 0f00 	cmp.w	r9, #0
 800a436:	d003      	beq.n	800a440 <ai_platform_network_init+0x1e0>
 800a438:	f04f 0c01 	mov.w	ip, #1
 800a43c:	e7af      	b.n	800a39e <ai_platform_network_init+0x13e>
 800a43e:	e7fe      	b.n	800a43e <ai_platform_network_init+0x1de>
 800a440:	f104 0010 	add.w	r0, r4, #16
 800a444:	2213      	movs	r2, #19
 800a446:	2110      	movs	r1, #16
 800a448:	464c      	mov	r4, r9
 800a44a:	f000 fb1d 	bl	800aa88 <core_set_error>
 800a44e:	e753      	b.n	800a2f8 <ai_platform_network_init+0x98>
 800a450:	a1c00100 	.word	0xa1c00100
 800a454:	e0002000 	.word	0xe0002000
 800a458:	e0042000 	.word	0xe0042000
 800a45c:	58024c08 	.word	0x58024c08
 800a460:	58024c00 	.word	0x58024c00
 800a464:	f407a5c2 	.word	0xf407a5c2
 800a468:	b5e8b5cd 	.word	0xb5e8b5cd
 800a46c:	40023008 	.word	0x40023008
 800a470:	40023000 	.word	0x40023000
 800a474:	a1facade 	.word	0xa1facade

0800a478 <ai_platform_network_post_init>:
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	b120      	cbz	r0, 800a486 <ai_platform_network_post_init+0xe>
 800a47c:	4b3f      	ldr	r3, [pc, #252]	; (800a57c <ai_platform_network_post_init+0x104>)
 800a47e:	6802      	ldr	r2, [r0, #0]
 800a480:	429a      	cmp	r2, r3
 800a482:	4604      	mov	r4, r0
 800a484:	d02d      	beq.n	800a4e2 <ai_platform_network_post_init+0x6a>
 800a486:	4a3e      	ldr	r2, [pc, #248]	; (800a580 <ai_platform_network_post_init+0x108>)
 800a488:	6813      	ldr	r3, [r2, #0]
 800a48a:	f023 0301 	bic.w	r3, r3, #1
 800a48e:	6013      	str	r3, [r2, #0]
 800a490:	f7ff fad6 	bl	8009a40 <_ai_platform_acquire_crc>
 800a494:	4b3b      	ldr	r3, [pc, #236]	; (800a584 <ai_platform_network_post_init+0x10c>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a49c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4a0:	d00d      	beq.n	800a4be <ai_platform_network_post_init+0x46>
 800a4a2:	4b39      	ldr	r3, [pc, #228]	; (800a588 <ai_platform_network_post_init+0x110>)
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	601a      	str	r2, [r3, #0]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	2a00      	cmp	r2, #0
 800a4ac:	d1fc      	bne.n	800a4a8 <ai_platform_network_post_init+0x30>
 800a4ae:	4b37      	ldr	r3, [pc, #220]	; (800a58c <ai_platform_network_post_init+0x114>)
 800a4b0:	4a37      	ldr	r2, [pc, #220]	; (800a590 <ai_platform_network_post_init+0x118>)
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	4b37      	ldr	r3, [pc, #220]	; (800a594 <ai_platform_network_post_init+0x11c>)
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d00d      	beq.n	800a4d8 <ai_platform_network_post_init+0x60>
 800a4bc:	e7fe      	b.n	800a4bc <ai_platform_network_post_init+0x44>
 800a4be:	4b36      	ldr	r3, [pc, #216]	; (800a598 <ai_platform_network_post_init+0x120>)
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	601a      	str	r2, [r3, #0]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	2a00      	cmp	r2, #0
 800a4c8:	d1fc      	bne.n	800a4c4 <ai_platform_network_post_init+0x4c>
 800a4ca:	4b34      	ldr	r3, [pc, #208]	; (800a59c <ai_platform_network_post_init+0x124>)
 800a4cc:	4a30      	ldr	r2, [pc, #192]	; (800a590 <ai_platform_network_post_init+0x118>)
 800a4ce:	601a      	str	r2, [r3, #0]
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	4b30      	ldr	r3, [pc, #192]	; (800a594 <ai_platform_network_post_init+0x11c>)
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d103      	bne.n	800a4e0 <ai_platform_network_post_init+0x68>
 800a4d8:	f7ff fab4 	bl	8009a44 <_ai_platform_release_crc>
 800a4dc:	2000      	movs	r0, #0
 800a4de:	bd38      	pop	{r3, r4, r5, pc}
 800a4e0:	e7fe      	b.n	800a4e0 <ai_platform_network_post_init+0x68>
 800a4e2:	4a27      	ldr	r2, [pc, #156]	; (800a580 <ai_platform_network_post_init+0x108>)
 800a4e4:	6813      	ldr	r3, [r2, #0]
 800a4e6:	f023 0301 	bic.w	r3, r3, #1
 800a4ea:	6013      	str	r3, [r2, #0]
 800a4ec:	f7ff faa8 	bl	8009a40 <_ai_platform_acquire_crc>
 800a4f0:	4b24      	ldr	r3, [pc, #144]	; (800a584 <ai_platform_network_post_init+0x10c>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a4f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4fc:	d00d      	beq.n	800a51a <ai_platform_network_post_init+0xa2>
 800a4fe:	4b22      	ldr	r3, [pc, #136]	; (800a588 <ai_platform_network_post_init+0x110>)
 800a500:	2201      	movs	r2, #1
 800a502:	601a      	str	r2, [r3, #0]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	2a00      	cmp	r2, #0
 800a508:	d1fc      	bne.n	800a504 <ai_platform_network_post_init+0x8c>
 800a50a:	4b20      	ldr	r3, [pc, #128]	; (800a58c <ai_platform_network_post_init+0x114>)
 800a50c:	4a20      	ldr	r2, [pc, #128]	; (800a590 <ai_platform_network_post_init+0x118>)
 800a50e:	601a      	str	r2, [r3, #0]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	4b20      	ldr	r3, [pc, #128]	; (800a594 <ai_platform_network_post_init+0x11c>)
 800a514:	429a      	cmp	r2, r3
 800a516:	d00e      	beq.n	800a536 <ai_platform_network_post_init+0xbe>
 800a518:	e7fe      	b.n	800a518 <ai_platform_network_post_init+0xa0>
 800a51a:	4b1f      	ldr	r3, [pc, #124]	; (800a598 <ai_platform_network_post_init+0x120>)
 800a51c:	2201      	movs	r2, #1
 800a51e:	601a      	str	r2, [r3, #0]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	2a00      	cmp	r2, #0
 800a524:	d1fc      	bne.n	800a520 <ai_platform_network_post_init+0xa8>
 800a526:	4b1d      	ldr	r3, [pc, #116]	; (800a59c <ai_platform_network_post_init+0x124>)
 800a528:	4a19      	ldr	r2, [pc, #100]	; (800a590 <ai_platform_network_post_init+0x118>)
 800a52a:	601a      	str	r2, [r3, #0]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	4b19      	ldr	r3, [pc, #100]	; (800a594 <ai_platform_network_post_init+0x11c>)
 800a530:	429a      	cmp	r2, r3
 800a532:	d000      	beq.n	800a536 <ai_platform_network_post_init+0xbe>
 800a534:	e7fe      	b.n	800a534 <ai_platform_network_post_init+0xbc>
 800a536:	f7ff fa85 	bl	8009a44 <_ai_platform_release_crc>
 800a53a:	68e3      	ldr	r3, [r4, #12]
 800a53c:	f013 0502 	ands.w	r5, r3, #2
 800a540:	d011      	beq.n	800a566 <ai_platform_network_post_init+0xee>
 800a542:	4620      	mov	r0, r4
 800a544:	f003 fa68 	bl	800da18 <ai_layers_post_init_all>
 800a548:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a54a:	b1a3      	cbz	r3, 800a576 <ai_platform_network_post_init+0xfe>
 800a54c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800a54e:	b195      	cbz	r5, 800a576 <ai_platform_network_post_init+0xfe>
 800a550:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a552:	4629      	mov	r1, r5
 800a554:	2000      	movs	r0, #0
 800a556:	4798      	blx	r3
 800a558:	692b      	ldr	r3, [r5, #16]
 800a55a:	42ab      	cmp	r3, r5
 800a55c:	d00b      	beq.n	800a576 <ai_platform_network_post_init+0xfe>
 800a55e:	461d      	mov	r5, r3
 800a560:	b14b      	cbz	r3, 800a576 <ai_platform_network_post_init+0xfe>
 800a562:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a564:	e7f4      	b.n	800a550 <ai_platform_network_post_init+0xd8>
 800a566:	f104 0010 	add.w	r0, r4, #16
 800a56a:	2210      	movs	r2, #16
 800a56c:	2111      	movs	r1, #17
 800a56e:	f000 fa8b 	bl	800aa88 <core_set_error>
 800a572:	4628      	mov	r0, r5
 800a574:	bd38      	pop	{r3, r4, r5, pc}
 800a576:	2001      	movs	r0, #1
 800a578:	bd38      	pop	{r3, r4, r5, pc}
 800a57a:	bf00      	nop
 800a57c:	a1c00100 	.word	0xa1c00100
 800a580:	e0002000 	.word	0xe0002000
 800a584:	e0042000 	.word	0xe0042000
 800a588:	58024c08 	.word	0x58024c08
 800a58c:	58024c00 	.word	0x58024c00
 800a590:	f407a5c2 	.word	0xf407a5c2
 800a594:	b5e8b5cd 	.word	0xb5e8b5cd
 800a598:	40023008 	.word	0x40023008
 800a59c:	40023000 	.word	0x40023000

0800a5a0 <ai_platform_network_process>:
 800a5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a4:	b085      	sub	sp, #20
 800a5a6:	460d      	mov	r5, r1
 800a5a8:	9202      	str	r2, [sp, #8]
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	b120      	cbz	r0, 800a5b8 <ai_platform_network_process+0x18>
 800a5ae:	4b73      	ldr	r3, [pc, #460]	; (800a77c <ai_platform_network_process+0x1dc>)
 800a5b0:	6802      	ldr	r2, [r0, #0]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	bf18      	it	ne
 800a5b6:	2400      	movne	r4, #0
 800a5b8:	4a71      	ldr	r2, [pc, #452]	; (800a780 <ai_platform_network_process+0x1e0>)
 800a5ba:	6813      	ldr	r3, [r2, #0]
 800a5bc:	f023 0301 	bic.w	r3, r3, #1
 800a5c0:	6013      	str	r3, [r2, #0]
 800a5c2:	f7ff fa3d 	bl	8009a40 <_ai_platform_acquire_crc>
 800a5c6:	4b6f      	ldr	r3, [pc, #444]	; (800a784 <ai_platform_network_process+0x1e4>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5d2:	d00d      	beq.n	800a5f0 <ai_platform_network_process+0x50>
 800a5d4:	4b6c      	ldr	r3, [pc, #432]	; (800a788 <ai_platform_network_process+0x1e8>)
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	601a      	str	r2, [r3, #0]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	2a00      	cmp	r2, #0
 800a5de:	d1fc      	bne.n	800a5da <ai_platform_network_process+0x3a>
 800a5e0:	4b6a      	ldr	r3, [pc, #424]	; (800a78c <ai_platform_network_process+0x1ec>)
 800a5e2:	4a6b      	ldr	r2, [pc, #428]	; (800a790 <ai_platform_network_process+0x1f0>)
 800a5e4:	601a      	str	r2, [r3, #0]
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	4b6a      	ldr	r3, [pc, #424]	; (800a794 <ai_platform_network_process+0x1f4>)
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d00e      	beq.n	800a60c <ai_platform_network_process+0x6c>
 800a5ee:	e7fe      	b.n	800a5ee <ai_platform_network_process+0x4e>
 800a5f0:	4b69      	ldr	r3, [pc, #420]	; (800a798 <ai_platform_network_process+0x1f8>)
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	601a      	str	r2, [r3, #0]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	2a00      	cmp	r2, #0
 800a5fa:	d1fc      	bne.n	800a5f6 <ai_platform_network_process+0x56>
 800a5fc:	4b67      	ldr	r3, [pc, #412]	; (800a79c <ai_platform_network_process+0x1fc>)
 800a5fe:	4a64      	ldr	r2, [pc, #400]	; (800a790 <ai_platform_network_process+0x1f0>)
 800a600:	601a      	str	r2, [r3, #0]
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	4b63      	ldr	r3, [pc, #396]	; (800a794 <ai_platform_network_process+0x1f4>)
 800a606:	429a      	cmp	r2, r3
 800a608:	d000      	beq.n	800a60c <ai_platform_network_process+0x6c>
 800a60a:	e7fe      	b.n	800a60a <ai_platform_network_process+0x6a>
 800a60c:	f7ff fa1a 	bl	8009a44 <_ai_platform_release_crc>
 800a610:	2c00      	cmp	r4, #0
 800a612:	f000 8089 	beq.w	800a728 <ai_platform_network_process+0x188>
 800a616:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 800a618:	2f00      	cmp	r7, #0
 800a61a:	f040 822b 	bne.w	800aa74 <ai_platform_network_process+0x4d4>
 800a61e:	68e3      	ldr	r3, [r4, #12]
 800a620:	f003 0303 	and.w	r3, r3, #3
 800a624:	2600      	movs	r6, #0
 800a626:	2b03      	cmp	r3, #3
 800a628:	6166      	str	r6, [r4, #20]
 800a62a:	f040 821b 	bne.w	800aa64 <ai_platform_network_process+0x4c4>
 800a62e:	2d00      	cmp	r5, #0
 800a630:	f000 809c 	beq.w	800a76c <ai_platform_network_process+0x1cc>
 800a634:	2f00      	cmp	r7, #0
 800a636:	f000 8099 	beq.w	800a76c <ai_platform_network_process+0x1cc>
 800a63a:	883b      	ldrh	r3, [r7, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f000 8095 	beq.w	800a76c <ai_platform_network_process+0x1cc>
 800a642:	69aa      	ldr	r2, [r5, #24]
 800a644:	9401      	str	r4, [sp, #4]
 800a646:	f8d2 8000 	ldr.w	r8, [r2]
 800a64a:	429e      	cmp	r6, r3
 800a64c:	f080 80a8 	bcs.w	800a7a0 <ai_platform_network_process+0x200>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2b00      	cmp	r3, #0
 800a654:	f000 80a4 	beq.w	800a7a0 <ai_platform_network_process+0x200>
 800a658:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800a65c:	2c00      	cmp	r4, #0
 800a65e:	f000 809f 	beq.w	800a7a0 <ai_platform_network_process+0x200>
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	f8d3 b000 	ldr.w	fp, [r3]
 800a668:	ea4f 1906 	mov.w	r9, r6, lsl #4
 800a66c:	eb1b 0a09 	adds.w	sl, fp, r9
 800a670:	d07b      	beq.n	800a76a <ai_platform_network_process+0x1ca>
 800a672:	69a3      	ldr	r3, [r4, #24]
 800a674:	2101      	movs	r1, #1
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	9303      	str	r3, [sp, #12]
 800a67a:	4628      	mov	r0, r5
 800a67c:	f7ff f994 	bl	80099a8 <ai_buffer_get_size>
 800a680:	9b03      	ldr	r3, [sp, #12]
 800a682:	4283      	cmp	r3, r0
 800a684:	d368      	bcc.n	800a758 <ai_platform_network_process+0x1b8>
 800a686:	68e0      	ldr	r0, [r4, #12]
 800a688:	69a9      	ldr	r1, [r5, #24]
 800a68a:	68c2      	ldr	r2, [r0, #12]
 800a68c:	68cb      	ldr	r3, [r1, #12]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d162      	bne.n	800a758 <ai_platform_network_process+0x1b8>
 800a692:	6882      	ldr	r2, [r0, #8]
 800a694:	688b      	ldr	r3, [r1, #8]
 800a696:	429a      	cmp	r2, r3
 800a698:	d15e      	bne.n	800a758 <ai_platform_network_process+0x1b8>
 800a69a:	6842      	ldr	r2, [r0, #4]
 800a69c:	684b      	ldr	r3, [r1, #4]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d15a      	bne.n	800a758 <ai_platform_network_process+0x1b8>
 800a6a2:	69a3      	ldr	r3, [r4, #24]
 800a6a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a6a8:	f003 fab4 	bl	800dc14 <ai_array_get_data_byte_size>
 800a6ac:	9003      	str	r0, [sp, #12]
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	f003 fa22 	bl	800daf8 <get_tensor_byte_size>
 800a6b4:	9b03      	ldr	r3, [sp, #12]
 800a6b6:	4283      	cmp	r3, r0
 800a6b8:	d34e      	bcc.n	800a758 <ai_platform_network_process+0x1b8>
 800a6ba:	69a3      	ldr	r3, [r4, #24]
 800a6bc:	6818      	ldr	r0, [r3, #0]
 800a6be:	f003 fa2f 	bl	800db20 <ai_array_to_buffer_fmt>
 800a6c2:	682b      	ldr	r3, [r5, #0]
 800a6c4:	4043      	eors	r3, r0
 800a6c6:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800a6ca:	d13c      	bne.n	800a746 <ai_platform_network_process+0x1a6>
 800a6cc:	686b      	ldr	r3, [r5, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d04b      	beq.n	800a76a <ai_platform_network_process+0x1ca>
 800a6d2:	69ab      	ldr	r3, [r5, #24]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	b362      	cbz	r2, 800a732 <ai_platform_network_process+0x192>
 800a6d8:	4620      	mov	r0, r4
 800a6da:	9203      	str	r2, [sp, #12]
 800a6dc:	f003 fa0c 	bl	800daf8 <get_tensor_byte_size>
 800a6e0:	f8ca 0008 	str.w	r0, [sl, #8]
 800a6e4:	69ab      	ldr	r3, [r5, #24]
 800a6e6:	9a03      	ldr	r2, [sp, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	fb03 f000 	mul.w	r0, r3, r0
 800a6ee:	f8ca 000c 	str.w	r0, [sl, #12]
 800a6f2:	6869      	ldr	r1, [r5, #4]
 800a6f4:	f8ca 1004 	str.w	r1, [sl, #4]
 800a6f8:	686b      	ldr	r3, [r5, #4]
 800a6fa:	4403      	add	r3, r0
 800a6fc:	f84b 3009 	str.w	r3, [fp, r9]
 800a700:	69a0      	ldr	r0, [r4, #24]
 800a702:	6803      	ldr	r3, [r0, #0]
 800a704:	4590      	cmp	r8, r2
 800a706:	bf38      	it	cc
 800a708:	4690      	movcc	r8, r2
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	d408      	bmi.n	800a720 <ai_platform_network_process+0x180>
 800a70e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a712:	1a9b      	subs	r3, r3, r2
 800a714:	4419      	add	r1, r3
 800a716:	6081      	str	r1, [r0, #8]
 800a718:	69a3      	ldr	r3, [r4, #24]
 800a71a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800a71e:	60da      	str	r2, [r3, #12]
 800a720:	883b      	ldrh	r3, [r7, #0]
 800a722:	3601      	adds	r6, #1
 800a724:	351c      	adds	r5, #28
 800a726:	e790      	b.n	800a64a <ai_platform_network_process+0xaa>
 800a728:	4623      	mov	r3, r4
 800a72a:	4618      	mov	r0, r3
 800a72c:	b005      	add	sp, #20
 800a72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a732:	9c01      	ldr	r4, [sp, #4]
 800a734:	4692      	mov	sl, r2
 800a736:	f104 0010 	add.w	r0, r4, #16
 800a73a:	2221      	movs	r2, #33	; 0x21
 800a73c:	2112      	movs	r1, #18
 800a73e:	f000 f9a3 	bl	800aa88 <core_set_error>
 800a742:	4653      	mov	r3, sl
 800a744:	e7f1      	b.n	800a72a <ai_platform_network_process+0x18a>
 800a746:	9c01      	ldr	r4, [sp, #4]
 800a748:	2219      	movs	r2, #25
 800a74a:	f104 0010 	add.w	r0, r4, #16
 800a74e:	2112      	movs	r1, #18
 800a750:	f000 f99a 	bl	800aa88 <core_set_error>
 800a754:	2300      	movs	r3, #0
 800a756:	e7e8      	b.n	800a72a <ai_platform_network_process+0x18a>
 800a758:	9c01      	ldr	r4, [sp, #4]
 800a75a:	2218      	movs	r2, #24
 800a75c:	f104 0010 	add.w	r0, r4, #16
 800a760:	2112      	movs	r1, #18
 800a762:	f000 f991 	bl	800aa88 <core_set_error>
 800a766:	2300      	movs	r3, #0
 800a768:	e7df      	b.n	800a72a <ai_platform_network_process+0x18a>
 800a76a:	9c01      	ldr	r4, [sp, #4]
 800a76c:	f104 0010 	add.w	r0, r4, #16
 800a770:	2217      	movs	r2, #23
 800a772:	2112      	movs	r1, #18
 800a774:	f000 f988 	bl	800aa88 <core_set_error>
 800a778:	2300      	movs	r3, #0
 800a77a:	e7d6      	b.n	800a72a <ai_platform_network_process+0x18a>
 800a77c:	a1c00100 	.word	0xa1c00100
 800a780:	e0002000 	.word	0xe0002000
 800a784:	e0042000 	.word	0xe0042000
 800a788:	58024c08 	.word	0x58024c08
 800a78c:	58024c00 	.word	0x58024c00
 800a790:	f407a5c2 	.word	0xf407a5c2
 800a794:	b5e8b5cd 	.word	0xb5e8b5cd
 800a798:	40023008 	.word	0x40023008
 800a79c:	40023000 	.word	0x40023000
 800a7a0:	9c01      	ldr	r4, [sp, #4]
 800a7a2:	9a02      	ldr	r2, [sp, #8]
 800a7a4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800a7a6:	2a00      	cmp	r2, #0
 800a7a8:	f000 80ab 	beq.w	800a902 <ai_platform_network_process+0x362>
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	f240 809e 	bls.w	800a8ee <ai_platform_network_process+0x34e>
 800a7b2:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 800a7b6:	f119 0f0c 	cmn.w	r9, #12
 800a7ba:	f000 8098 	beq.w	800a8ee <ai_platform_network_process+0x34e>
 800a7be:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f000 8093 	beq.w	800a8ee <ai_platform_network_process+0x34e>
 800a7c8:	9d02      	ldr	r5, [sp, #8]
 800a7ca:	9401      	str	r4, [sp, #4]
 800a7cc:	2700      	movs	r7, #0
 800a7ce:	429f      	cmp	r7, r3
 800a7d0:	f080 8095 	bcs.w	800a8fe <ai_platform_network_process+0x35e>
 800a7d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f000 8090 	beq.w	800a8fe <ai_platform_network_process+0x35e>
 800a7de:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800a7e2:	2c00      	cmp	r4, #0
 800a7e4:	f000 808b 	beq.w	800a8fe <ai_platform_network_process+0x35e>
 800a7e8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a7ec:	f8d3 b000 	ldr.w	fp, [r3]
 800a7f0:	013e      	lsls	r6, r7, #4
 800a7f2:	eb1b 0a06 	adds.w	sl, fp, r6
 800a7f6:	f000 812c 	beq.w	800aa52 <ai_platform_network_process+0x4b2>
 800a7fa:	69a3      	ldr	r3, [r4, #24]
 800a7fc:	2101      	movs	r1, #1
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	9302      	str	r3, [sp, #8]
 800a802:	4628      	mov	r0, r5
 800a804:	f7ff f8d0 	bl	80099a8 <ai_buffer_get_size>
 800a808:	9b02      	ldr	r3, [sp, #8]
 800a80a:	4283      	cmp	r3, r0
 800a80c:	d36e      	bcc.n	800a8ec <ai_platform_network_process+0x34c>
 800a80e:	68e0      	ldr	r0, [r4, #12]
 800a810:	69a9      	ldr	r1, [r5, #24]
 800a812:	68c2      	ldr	r2, [r0, #12]
 800a814:	68cb      	ldr	r3, [r1, #12]
 800a816:	429a      	cmp	r2, r3
 800a818:	d168      	bne.n	800a8ec <ai_platform_network_process+0x34c>
 800a81a:	6882      	ldr	r2, [r0, #8]
 800a81c:	688b      	ldr	r3, [r1, #8]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d164      	bne.n	800a8ec <ai_platform_network_process+0x34c>
 800a822:	6842      	ldr	r2, [r0, #4]
 800a824:	684b      	ldr	r3, [r1, #4]
 800a826:	429a      	cmp	r2, r3
 800a828:	d160      	bne.n	800a8ec <ai_platform_network_process+0x34c>
 800a82a:	69a3      	ldr	r3, [r4, #24]
 800a82c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a830:	f003 f9f0 	bl	800dc14 <ai_array_get_data_byte_size>
 800a834:	9002      	str	r0, [sp, #8]
 800a836:	4620      	mov	r0, r4
 800a838:	f003 f95e 	bl	800daf8 <get_tensor_byte_size>
 800a83c:	9b02      	ldr	r3, [sp, #8]
 800a83e:	4283      	cmp	r3, r0
 800a840:	d354      	bcc.n	800a8ec <ai_platform_network_process+0x34c>
 800a842:	69a3      	ldr	r3, [r4, #24]
 800a844:	6818      	ldr	r0, [r3, #0]
 800a846:	f003 f96b 	bl	800db20 <ai_array_to_buffer_fmt>
 800a84a:	682b      	ldr	r3, [r5, #0]
 800a84c:	4043      	eors	r3, r0
 800a84e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800a852:	d142      	bne.n	800a8da <ai_platform_network_process+0x33a>
 800a854:	686b      	ldr	r3, [r5, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d035      	beq.n	800a8c6 <ai_platform_network_process+0x326>
 800a85a:	69ab      	ldr	r3, [r5, #24]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	b342      	cbz	r2, 800a8b2 <ai_platform_network_process+0x312>
 800a860:	4620      	mov	r0, r4
 800a862:	9202      	str	r2, [sp, #8]
 800a864:	f003 f948 	bl	800daf8 <get_tensor_byte_size>
 800a868:	f8ca 0008 	str.w	r0, [sl, #8]
 800a86c:	69ab      	ldr	r3, [r5, #24]
 800a86e:	9a02      	ldr	r2, [sp, #8]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	fb03 f000 	mul.w	r0, r3, r0
 800a876:	f8ca 000c 	str.w	r0, [sl, #12]
 800a87a:	6869      	ldr	r1, [r5, #4]
 800a87c:	f8ca 1004 	str.w	r1, [sl, #4]
 800a880:	686b      	ldr	r3, [r5, #4]
 800a882:	4403      	add	r3, r0
 800a884:	f84b 3006 	str.w	r3, [fp, r6]
 800a888:	69a0      	ldr	r0, [r4, #24]
 800a88a:	6803      	ldr	r3, [r0, #0]
 800a88c:	4590      	cmp	r8, r2
 800a88e:	bf38      	it	cc
 800a890:	4690      	movcc	r8, r2
 800a892:	009e      	lsls	r6, r3, #2
 800a894:	d408      	bmi.n	800a8a8 <ai_platform_network_process+0x308>
 800a896:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a89a:	1a9b      	subs	r3, r3, r2
 800a89c:	4419      	add	r1, r3
 800a89e:	6081      	str	r1, [r0, #8]
 800a8a0:	69a3      	ldr	r3, [r4, #24]
 800a8a2:	f8da 2004 	ldr.w	r2, [sl, #4]
 800a8a6:	60da      	str	r2, [r3, #12]
 800a8a8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a8ac:	3701      	adds	r7, #1
 800a8ae:	351c      	adds	r5, #28
 800a8b0:	e78d      	b.n	800a7ce <ai_platform_network_process+0x22e>
 800a8b2:	9c01      	ldr	r4, [sp, #4]
 800a8b4:	4692      	mov	sl, r2
 800a8b6:	f104 0010 	add.w	r0, r4, #16
 800a8ba:	2221      	movs	r2, #33	; 0x21
 800a8bc:	2113      	movs	r1, #19
 800a8be:	f000 f8e3 	bl	800aa88 <core_set_error>
 800a8c2:	4653      	mov	r3, sl
 800a8c4:	e731      	b.n	800a72a <ai_platform_network_process+0x18a>
 800a8c6:	9c01      	ldr	r4, [sp, #4]
 800a8c8:	469a      	mov	sl, r3
 800a8ca:	f104 0010 	add.w	r0, r4, #16
 800a8ce:	2217      	movs	r2, #23
 800a8d0:	2113      	movs	r1, #19
 800a8d2:	f000 f8d9 	bl	800aa88 <core_set_error>
 800a8d6:	4653      	mov	r3, sl
 800a8d8:	e727      	b.n	800a72a <ai_platform_network_process+0x18a>
 800a8da:	9c01      	ldr	r4, [sp, #4]
 800a8dc:	2219      	movs	r2, #25
 800a8de:	f104 0010 	add.w	r0, r4, #16
 800a8e2:	2113      	movs	r1, #19
 800a8e4:	f000 f8d0 	bl	800aa88 <core_set_error>
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	e71e      	b.n	800a72a <ai_platform_network_process+0x18a>
 800a8ec:	9c01      	ldr	r4, [sp, #4]
 800a8ee:	f104 0010 	add.w	r0, r4, #16
 800a8f2:	2218      	movs	r2, #24
 800a8f4:	2113      	movs	r1, #19
 800a8f6:	f000 f8c7 	bl	800aa88 <core_set_error>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	e715      	b.n	800a72a <ai_platform_network_process+0x18a>
 800a8fe:	9c01      	ldr	r4, [sp, #4]
 800a900:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800a902:	f8a4 8014 	strh.w	r8, [r4, #20]
 800a906:	2b00      	cmp	r3, #0
 800a908:	f000 80a0 	beq.w	800aa4c <ai_platform_network_process+0x4ac>
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800a910:	f240 809a 	bls.w	800aa48 <ai_platform_network_process+0x4a8>
 800a914:	f105 070c 	add.w	r7, r5, #12
 800a918:	8ae3      	ldrh	r3, [r4, #22]
 800a91a:	8aa2      	ldrh	r2, [r4, #20]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	f67f af04 	bls.w	800a72a <ai_platform_network_process+0x18a>
 800a922:	46a3      	mov	fp, r4
 800a924:	2d00      	cmp	r5, #0
 800a926:	d036      	beq.n	800a996 <ai_platform_network_process+0x3f6>
 800a928:	882b      	ldrh	r3, [r5, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d033      	beq.n	800a996 <ai_platform_network_process+0x3f6>
 800a92e:	686b      	ldr	r3, [r5, #4]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d030      	beq.n	800a996 <ai_platform_network_process+0x3f6>
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f04f 0800 	mov.w	r8, #0
 800a93a:	b9db      	cbnz	r3, 800a974 <ai_platform_network_process+0x3d4>
 800a93c:	e02b      	b.n	800a996 <ai_platform_network_process+0x3f6>
 800a93e:	68d4      	ldr	r4, [r2, #12]
 800a940:	1b00      	subs	r0, r0, r4
 800a942:	4401      	add	r1, r0
 800a944:	6091      	str	r1, [r2, #8]
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	6872      	ldr	r2, [r6, #4]
 800a94a:	60da      	str	r2, [r3, #12]
 800a94c:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800a950:	f85a 2009 	ldr.w	r2, [sl, r9]
 800a954:	440b      	add	r3, r1
 800a956:	4293      	cmp	r3, r2
 800a958:	bf24      	itt	cs
 800a95a:	68f3      	ldrcs	r3, [r6, #12]
 800a95c:	1ad3      	subcs	r3, r2, r3
 800a95e:	6073      	str	r3, [r6, #4]
 800a960:	882b      	ldrh	r3, [r5, #0]
 800a962:	f108 0801 	add.w	r8, r8, #1
 800a966:	4598      	cmp	r8, r3
 800a968:	d215      	bcs.n	800a996 <ai_platform_network_process+0x3f6>
 800a96a:	686b      	ldr	r3, [r5, #4]
 800a96c:	b19b      	cbz	r3, 800a996 <ai_platform_network_process+0x3f6>
 800a96e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a972:	b183      	cbz	r3, 800a996 <ai_platform_network_process+0x3f6>
 800a974:	68a9      	ldr	r1, [r5, #8]
 800a976:	699a      	ldr	r2, [r3, #24]
 800a978:	f8d1 a000 	ldr.w	sl, [r1]
 800a97c:	6814      	ldr	r4, [r2, #0]
 800a97e:	6890      	ldr	r0, [r2, #8]
 800a980:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800a984:	eb0a 0609 	add.w	r6, sl, r9
 800a988:	00a4      	lsls	r4, r4, #2
 800a98a:	6871      	ldr	r1, [r6, #4]
 800a98c:	d5d7      	bpl.n	800a93e <ai_platform_network_process+0x39e>
 800a98e:	68b2      	ldr	r2, [r6, #8]
 800a990:	f004 ff2e 	bl	800f7f0 <memcpy>
 800a994:	e7da      	b.n	800a94c <ai_platform_network_process+0x3ac>
 800a996:	4658      	mov	r0, fp
 800a998:	f003 f856 	bl	800da48 <ai_layers_forward_all>
 800a99c:	2f00      	cmp	r7, #0
 800a99e:	d047      	beq.n	800aa30 <ai_platform_network_process+0x490>
 800a9a0:	883b      	ldrh	r3, [r7, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d044      	beq.n	800aa30 <ai_platform_network_process+0x490>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d041      	beq.n	800aa30 <ai_platform_network_process+0x490>
 800a9ac:	6818      	ldr	r0, [r3, #0]
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d03e      	beq.n	800aa30 <ai_platform_network_process+0x490>
 800a9b2:	f04f 0800 	mov.w	r8, #0
 800a9b6:	e019      	b.n	800a9ec <ai_platform_network_process+0x44c>
 800a9b8:	f85a 2009 	ldr.w	r2, [sl, r9]
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	bf24      	itt	cs
 800a9c0:	68f3      	ldrcs	r3, [r6, #12]
 800a9c2:	1ad3      	subcs	r3, r2, r3
 800a9c4:	6073      	str	r3, [r6, #4]
 800a9c6:	6981      	ldr	r1, [r0, #24]
 800a9c8:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800a9cc:	1b12      	subs	r2, r2, r4
 800a9ce:	4413      	add	r3, r2
 800a9d0:	608b      	str	r3, [r1, #8]
 800a9d2:	6983      	ldr	r3, [r0, #24]
 800a9d4:	6872      	ldr	r2, [r6, #4]
 800a9d6:	60da      	str	r2, [r3, #12]
 800a9d8:	883b      	ldrh	r3, [r7, #0]
 800a9da:	f108 0801 	add.w	r8, r8, #1
 800a9de:	4598      	cmp	r8, r3
 800a9e0:	d226      	bcs.n	800aa30 <ai_platform_network_process+0x490>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	b323      	cbz	r3, 800aa30 <ai_platform_network_process+0x490>
 800a9e6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a9ea:	b308      	cbz	r0, 800aa30 <ai_platform_network_process+0x490>
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	6981      	ldr	r1, [r0, #24]
 800a9f0:	f8d3 a000 	ldr.w	sl, [r3]
 800a9f4:	680c      	ldr	r4, [r1, #0]
 800a9f6:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800a9fa:	eb0a 0609 	add.w	r6, sl, r9
 800a9fe:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800aa02:	00a4      	lsls	r4, r4, #2
 800aa04:	eb0c 0302 	add.w	r3, ip, r2
 800aa08:	d5d6      	bpl.n	800a9b8 <ai_platform_network_process+0x418>
 800aa0a:	6889      	ldr	r1, [r1, #8]
 800aa0c:	4660      	mov	r0, ip
 800aa0e:	f004 feef 	bl	800f7f0 <memcpy>
 800aa12:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800aa16:	f85a 2009 	ldr.w	r2, [sl, r9]
 800aa1a:	440b      	add	r3, r1
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	bf24      	itt	cs
 800aa20:	68f3      	ldrcs	r3, [r6, #12]
 800aa22:	1ad3      	subcs	r3, r2, r3
 800aa24:	6073      	str	r3, [r6, #4]
 800aa26:	883b      	ldrh	r3, [r7, #0]
 800aa28:	f108 0801 	add.w	r8, r8, #1
 800aa2c:	4598      	cmp	r8, r3
 800aa2e:	d3d8      	bcc.n	800a9e2 <ai_platform_network_process+0x442>
 800aa30:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 800aa34:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	f8ab 3016 	strh.w	r3, [fp, #22]
 800aa42:	f63f af6f 	bhi.w	800a924 <ai_platform_network_process+0x384>
 800aa46:	e670      	b.n	800a72a <ai_platform_network_process+0x18a>
 800aa48:	2700      	movs	r7, #0
 800aa4a:	e765      	b.n	800a918 <ai_platform_network_process+0x378>
 800aa4c:	461d      	mov	r5, r3
 800aa4e:	461f      	mov	r7, r3
 800aa50:	e762      	b.n	800a918 <ai_platform_network_process+0x378>
 800aa52:	9c01      	ldr	r4, [sp, #4]
 800aa54:	2217      	movs	r2, #23
 800aa56:	f104 0010 	add.w	r0, r4, #16
 800aa5a:	2113      	movs	r1, #19
 800aa5c:	f000 f814 	bl	800aa88 <core_set_error>
 800aa60:	4653      	mov	r3, sl
 800aa62:	e662      	b.n	800a72a <ai_platform_network_process+0x18a>
 800aa64:	f104 0010 	add.w	r0, r4, #16
 800aa68:	2230      	movs	r2, #48	; 0x30
 800aa6a:	2111      	movs	r1, #17
 800aa6c:	f000 f80c 	bl	800aa88 <core_set_error>
 800aa70:	4633      	mov	r3, r6
 800aa72:	e65a      	b.n	800a72a <ai_platform_network_process+0x18a>
 800aa74:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800aa76:	e5d2      	b.n	800a61e <ai_platform_network_process+0x7e>

0800aa78 <core_init>:
 800aa78:	2001      	movs	r0, #1
 800aa7a:	4770      	bx	lr

0800aa7c <core_get_error>:
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2200      	movs	r2, #0
 800aa80:	6800      	ldr	r0, [r0, #0]
 800aa82:	601a      	str	r2, [r3, #0]
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop

0800aa88 <core_set_error>:
 800aa88:	7803      	ldrb	r3, [r0, #0]
 800aa8a:	b933      	cbnz	r3, 800aa9a <core_set_error+0x12>
 800aa8c:	7001      	strb	r1, [r0, #0]
 800aa8e:	6803      	ldr	r3, [r0, #0]
 800aa90:	f362 231f 	bfi	r3, r2, #8, #24
 800aa94:	6003      	str	r3, [r0, #0]
 800aa96:	2001      	movs	r0, #1
 800aa98:	4770      	bx	lr
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop

0800aaa0 <ai_greater>:
 800aaa0:	ed91 7a00 	vldr	s14, [r1]
 800aaa4:	edd2 7a00 	vldr	s15, [r2]
 800aaa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aaac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aab0:	bfcc      	ite	gt
 800aab2:	2301      	movgt	r3, #1
 800aab4:	2300      	movle	r3, #0
 800aab6:	7003      	strb	r3, [r0, #0]
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop

0800aabc <ai_greater_buffer>:
 800aabc:	4403      	add	r3, r0
 800aabe:	4298      	cmp	r0, r3
 800aac0:	d212      	bcs.n	800aae8 <ai_greater_buffer+0x2c>
 800aac2:	b410      	push	{r4}
 800aac4:	ecb1 7a01 	vldmia	r1!, {s14}
 800aac8:	ecf2 7a01 	vldmia	r2!, {s15}
 800aacc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aad4:	bfcc      	ite	gt
 800aad6:	2401      	movgt	r4, #1
 800aad8:	2400      	movle	r4, #0
 800aada:	f800 4b01 	strb.w	r4, [r0], #1
 800aade:	4283      	cmp	r3, r0
 800aae0:	d1f0      	bne.n	800aac4 <ai_greater_buffer+0x8>
 800aae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aae6:	4770      	bx	lr
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop

0800aaec <func_dummy>:
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop

0800aaf0 <ai_dict_decompress_f32>:
 800aaf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aaf4:	9f08      	ldr	r7, [sp, #32]
 800aaf6:	2b04      	cmp	r3, #4
 800aaf8:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800aafc:	d00e      	beq.n	800ab1c <ai_dict_decompress_f32+0x2c>
 800aafe:	2b08      	cmp	r3, #8
 800ab00:	d10a      	bne.n	800ab18 <ai_dict_decompress_f32+0x28>
 800ab02:	42b8      	cmp	r0, r7
 800ab04:	d208      	bcs.n	800ab18 <ai_dict_decompress_f32+0x28>
 800ab06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f840 3b04 	str.w	r3, [r0], #4
 800ab14:	4287      	cmp	r7, r0
 800ab16:	d8f6      	bhi.n	800ab06 <ai_dict_decompress_f32+0x16>
 800ab18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab1c:	9b07      	ldr	r3, [sp, #28]
 800ab1e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800ab22:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 800ab26:	f10c 38ff 	add.w	r8, ip, #4294967295
 800ab2a:	f003 0e01 	and.w	lr, r3, #1
 800ab2e:	42b8      	cmp	r0, r7
 800ab30:	d2f2      	bcs.n	800ab18 <ai_dict_decompress_f32+0x28>
 800ab32:	f1bc 0f00 	cmp.w	ip, #0
 800ab36:	d01a      	beq.n	800ab6e <ai_dict_decompress_f32+0x7e>
 800ab38:	f100 0508 	add.w	r5, r0, #8
 800ab3c:	1e4c      	subs	r4, r1, #1
 800ab3e:	eb01 0608 	add.w	r6, r1, r8
 800ab42:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ab46:	091b      	lsrs	r3, r3, #4
 800ab48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab4c:	42a6      	cmp	r6, r4
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f845 3c08 	str.w	r3, [r5, #-8]
 800ab54:	7823      	ldrb	r3, [r4, #0]
 800ab56:	f003 030f 	and.w	r3, r3, #15
 800ab5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab5e:	f105 0508 	add.w	r5, r5, #8
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f845 3c0c 	str.w	r3, [r5, #-12]
 800ab68:	d1eb      	bne.n	800ab42 <ai_dict_decompress_f32+0x52>
 800ab6a:	4461      	add	r1, ip
 800ab6c:	4448      	add	r0, r9
 800ab6e:	f1be 0f00 	cmp.w	lr, #0
 800ab72:	d103      	bne.n	800ab7c <ai_dict_decompress_f32+0x8c>
 800ab74:	4287      	cmp	r7, r0
 800ab76:	d8dc      	bhi.n	800ab32 <ai_dict_decompress_f32+0x42>
 800ab78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab7c:	780b      	ldrb	r3, [r1, #0]
 800ab7e:	091b      	lsrs	r3, r3, #4
 800ab80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab84:	3101      	adds	r1, #1
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	6003      	str	r3, [r0, #0]
 800ab8a:	3004      	adds	r0, #4
 800ab8c:	e7cf      	b.n	800ab2e <ai_dict_decompress_f32+0x3e>
 800ab8e:	bf00      	nop

0800ab90 <forward_conv2d>:
 800ab90:	6983      	ldr	r3, [r0, #24]
 800ab92:	881a      	ldrh	r2, [r3, #0]
 800ab94:	2a00      	cmp	r2, #0
 800ab96:	f000 87c7 	beq.w	800bb28 <forward_conv2d+0xf98>
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	6859      	ldr	r1, [r3, #4]
 800ab9e:	b101      	cbz	r1, 800aba2 <forward_conv2d+0x12>
 800aba0:	6809      	ldr	r1, [r1, #0]
 800aba2:	2a01      	cmp	r2, #1
 800aba4:	f240 87bd 	bls.w	800bb22 <forward_conv2d+0xf92>
 800aba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abac:	ed2d 8b10 	vpush	{d8-d15}
 800abb0:	b0cb      	sub	sp, #300	; 0x12c
 800abb2:	691c      	ldr	r4, [r3, #16]
 800abb4:	af02      	add	r7, sp, #8
 800abb6:	2c00      	cmp	r4, #0
 800abb8:	f000 87af 	beq.w	800bb1a <forward_conv2d+0xf8a>
 800abbc:	6824      	ldr	r4, [r4, #0]
 800abbe:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 800abc2:	2a02      	cmp	r2, #2
 800abc4:	f000 87a4 	beq.w	800bb10 <forward_conv2d+0xf80>
 800abc8:	69dd      	ldr	r5, [r3, #28]
 800abca:	2d00      	cmp	r5, #0
 800abcc:	f000 8799 	beq.w	800bb02 <forward_conv2d+0xf72>
 800abd0:	f113 0218 	adds.w	r2, r3, #24
 800abd4:	682c      	ldr	r4, [r5, #0]
 800abd6:	d004      	beq.n	800abe2 <forward_conv2d+0x52>
 800abd8:	8b1b      	ldrh	r3, [r3, #24]
 800abda:	2b01      	cmp	r3, #1
 800abdc:	f240 87a6 	bls.w	800bb2c <forward_conv2d+0xf9c>
 800abe0:	686a      	ldr	r2, [r5, #4]
 800abe2:	68ab      	ldr	r3, [r5, #8]
 800abe4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800abe8:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800abec:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800abf0:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800abf4:	68ce      	ldr	r6, [r1, #12]
 800abf6:	69a1      	ldr	r1, [r4, #24]
 800abf8:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800abfc:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800ac00:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800ac04:	f8de 1004 	ldr.w	r1, [lr, #4]
 800ac08:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800ac0c:	f8de 100c 	ldr.w	r1, [lr, #12]
 800ac10:	6479      	str	r1, [r7, #68]	; 0x44
 800ac12:	f8de 1008 	ldr.w	r1, [lr, #8]
 800ac16:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 800ac1a:	6871      	ldr	r1, [r6, #4]
 800ac1c:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800ac20:	68f1      	ldr	r1, [r6, #12]
 800ac22:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800ac26:	68b1      	ldr	r1, [r6, #8]
 800ac28:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800ac2c:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800ac30:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800ac34:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ac38:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800ac3c:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800ac40:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800ac42:	6889      	ldr	r1, [r1, #8]
 800ac44:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800ac48:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800ac4a:	e9d5 ba00 	ldrd	fp, sl, [r5]
 800ac4e:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800ac52:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800ac54:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800ac58:	69c1      	ldr	r1, [r0, #28]
 800ac5a:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800ac5e:	e9d0 980c 	ldrd	r9, r8, [r0, #48]	; 0x30
 800ac62:	2a00      	cmp	r2, #0
 800ac64:	f000 8749 	beq.w	800bafa <forward_conv2d+0xf6a>
 800ac68:	6992      	ldr	r2, [r2, #24]
 800ac6a:	6892      	ldr	r2, [r2, #8]
 800ac6c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800ac70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ac74:	6992      	ldr	r2, [r2, #24]
 800ac76:	6892      	ldr	r2, [r2, #8]
 800ac78:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800ac7c:	4606      	mov	r6, r0
 800ac7e:	6a00      	ldr	r0, [r0, #32]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f000 872c 	beq.w	800bade <forward_conv2d+0xf4e>
 800ac86:	699a      	ldr	r2, [r3, #24]
 800ac88:	2a00      	cmp	r2, #0
 800ac8a:	f000 8594 	beq.w	800b7b6 <forward_conv2d+0xc26>
 800ac8e:	695b      	ldr	r3, [r3, #20]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ac96:	e9d2 0100 	ldrd	r0, r1, [r2]
 800ac9a:	6893      	ldr	r3, [r2, #8]
 800ac9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aca0:	f002 ff94 	bl	800dbcc <ai_array_get_byte_size>
 800aca4:	69a3      	ldr	r3, [r4, #24]
 800aca6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 800acaa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800acb4:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800acb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800acba:	f3c3 5441 	ubfx	r4, r3, #21, #2
 800acbe:	f3c3 15c6 	ubfx	r5, r3, #7, #7
 800acc2:	fa1f f088 	uxth.w	r0, r8
 800acc6:	4125      	asrs	r5, r4
 800acc8:	3801      	subs	r0, #1
 800acca:	1e4c      	subs	r4, r1, #1
 800accc:	fb04 1100 	mla	r1, r4, r0, r1
 800acd0:	6439      	str	r1, [r7, #64]	; 0x40
 800acd2:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800acd6:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 800b078 <forward_conv2d+0x4e8>
 800acda:	fa1f f289 	uxth.w	r2, r9
 800acde:	3a01      	subs	r2, #1
 800ace0:	1e48      	subs	r0, r1, #1
 800ace2:	fb00 1102 	mla	r1, r0, r2, r1
 800ace6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800acea:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800acee:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800acf2:	4610      	mov	r0, r2
 800acf4:	2a00      	cmp	r2, #0
 800acf6:	bf08      	it	eq
 800acf8:	4660      	moveq	r0, ip
 800acfa:	2b04      	cmp	r3, #4
 800acfc:	b2ad      	uxth	r5, r5
 800acfe:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800ad02:	f000 8533 	beq.w	800b76c <forward_conv2d+0xbdc>
 800ad06:	2b08      	cmp	r3, #8
 800ad08:	f000 8530 	beq.w	800b76c <forward_conv2d+0xbdc>
 800ad0c:	fa1f f38b 	uxth.w	r3, fp
 800ad10:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ad14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ad18:	425b      	negs	r3, r3
 800ad1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ad1e:	2900      	cmp	r1, #0
 800ad20:	f000 8242 	beq.w	800b1a8 <forward_conv2d+0x618>
 800ad24:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800ad28:	f8d7 50c8 	ldr.w	r5, [r7, #200]	; 0xc8
 800ad2c:	ed9f 8ad1 	vldr	s16, [pc, #836]	; 800b074 <forward_conv2d+0x4e4>
 800ad30:	fb00 f305 	mul.w	r3, r0, r5
 800ad34:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
 800ad38:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 800ad3c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800ad40:	f8b7 50f0 	ldrh.w	r5, [r7, #240]	; 0xf0
 800ad44:	663d      	str	r5, [r7, #96]	; 0x60
 800ad46:	fa0f f288 	sxth.w	r2, r8
 800ad4a:	fb03 f400 	mul.w	r4, r3, r0
 800ad4e:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800ad52:	fa1f f18a 	uxth.w	r1, sl
 800ad56:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800ad5a:	67bc      	str	r4, [r7, #120]	; 0x78
 800ad5c:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800ad60:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800ad64:	4249      	negs	r1, r1
 800ad66:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800ad6a:	0092      	lsls	r2, r2, #2
 800ad6c:	0081      	lsls	r1, r0, #2
 800ad6e:	4605      	mov	r5, r0
 800ad70:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800ad74:	fb04 f200 	mul.w	r2, r4, r0
 800ad78:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800ad7c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800ad80:	fb01 fc00 	mul.w	ip, r1, r0
 800ad84:	f8c7 c05c 	str.w	ip, [r7, #92]	; 0x5c
 800ad88:	fb01 fc03 	mul.w	ip, r1, r3
 800ad8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad8e:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ad98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad9c:	fa0f f689 	sxth.w	r6, r9
 800ada0:	469c      	mov	ip, r3
 800ada2:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 800ada6:	4633      	mov	r3, r6
 800ada8:	fb0c f606 	mul.w	r6, ip, r6
 800adac:	677e      	str	r6, [r7, #116]	; 0x74
 800adae:	4666      	mov	r6, ip
 800adb0:	fb04 f606 	mul.w	r6, r4, r6
 800adb4:	4686      	mov	lr, r0
 800adb6:	4620      	mov	r0, r4
 800adb8:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 800adbc:	62be      	str	r6, [r7, #40]	; 0x28
 800adbe:	fb01 f404 	mul.w	r4, r1, r4
 800adc2:	fb03 f605 	mul.w	r6, r3, r5
 800adc6:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 800adc8:	66bc      	str	r4, [r7, #104]	; 0x68
 800adca:	460b      	mov	r3, r1
 800adcc:	4604      	mov	r4, r0
 800adce:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800add2:	627e      	str	r6, [r7, #36]	; 0x24
 800add4:	fb05 f404 	mul.w	r4, r5, r4
 800add8:	617c      	str	r4, [r7, #20]
 800adda:	460c      	mov	r4, r1
 800addc:	fb04 f403 	mul.w	r4, r4, r3
 800ade0:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800ade4:	65bc      	str	r4, [r7, #88]	; 0x58
 800ade6:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800adea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800adee:	fb01 f104 	mul.w	r1, r1, r4
 800adf2:	61b9      	str	r1, [r7, #24]
 800adf4:	0091      	lsls	r1, r2, #2
 800adf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800adfa:	64b9      	str	r1, [r7, #72]	; 0x48
 800adfc:	fb00 f202 	mul.w	r2, r0, r2
 800ae00:	0081      	lsls	r1, r0, #2
 800ae02:	61f9      	str	r1, [r7, #28]
 800ae04:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800ae08:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800ae0c:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800ae10:	011a      	lsls	r2, r3, #4
 800ae12:	00db      	lsls	r3, r3, #3
 800ae14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ae18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ae1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ae20:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 800ae24:	2300      	movs	r3, #0
 800ae26:	63f9      	str	r1, [r7, #60]	; 0x3c
 800ae28:	607a      	str	r2, [r7, #4]
 800ae2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ae2c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800ae30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ae34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae36:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ae38:	2900      	cmp	r1, #0
 800ae3a:	441a      	add	r2, r3
 800ae3c:	bfb4      	ite	lt
 800ae3e:	2100      	movlt	r1, #0
 800ae40:	2300      	movge	r3, #0
 800ae42:	4282      	cmp	r2, r0
 800ae44:	bf28      	it	cs
 800ae46:	4602      	movcs	r2, r0
 800ae48:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800ae4c:	2801      	cmp	r0, #1
 800ae4e:	f000 8320 	beq.w	800b492 <forward_conv2d+0x902>
 800ae52:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800ae56:	4281      	cmp	r1, r0
 800ae58:	f000 81c3 	beq.w	800b1e2 <forward_conv2d+0x652>
 800ae5c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800ae60:	2900      	cmp	r1, #0
 800ae62:	f000 8182 	beq.w	800b16a <forward_conv2d+0x5da>
 800ae66:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800ae6a:	fb93 f1f0 	sdiv	r1, r3, r0
 800ae6e:	fb00 3111 	mls	r1, r0, r1, r3
 800ae72:	1a41      	subs	r1, r0, r1
 800ae74:	1ad2      	subs	r2, r2, r3
 800ae76:	fb91 f5f0 	sdiv	r5, r1, r0
 800ae7a:	fb00 1515 	mls	r5, r0, r5, r1
 800ae7e:	1b52      	subs	r2, r2, r5
 800ae80:	4601      	mov	r1, r0
 800ae82:	4402      	add	r2, r0
 800ae84:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800ae88:	f8d7 60c8 	ldr.w	r6, [r7, #200]	; 0xc8
 800ae8c:	f8c7 b020 	str.w	fp, [r7, #32]
 800ae90:	4604      	mov	r4, r0
 800ae92:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800ae96:	fbb4 f4f0 	udiv	r4, r4, r0
 800ae9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae9c:	3a01      	subs	r2, #1
 800ae9e:	fb92 f8f1 	sdiv	r8, r2, r1
 800aea2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800aea6:	eba0 0c04 	sub.w	ip, r0, r4
 800aeaa:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800aeae:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800aeb2:	4614      	mov	r4, r2
 800aeb4:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800aeb8:	fbb4 f2f2 	udiv	r2, r4, r2
 800aebc:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800aec0:	657a      	str	r2, [r7, #84]	; 0x54
 800aec2:	441d      	add	r5, r3
 800aec4:	fb0e f000 	mul.w	r0, lr, r0
 800aec8:	440b      	add	r3, r1
 800aeca:	eba6 0608 	sub.w	r6, r6, r8
 800aece:	fb04 f505 	mul.w	r5, r4, r5
 800aed2:	3b01      	subs	r3, #1
 800aed4:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800aed8:	fb93 f3f4 	sdiv	r3, r3, r4
 800aedc:	fb00 f406 	mul.w	r4, r0, r6
 800aee0:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800aee4:	66fd      	str	r5, [r7, #108]	; 0x6c
 800aee6:	0091      	lsls	r1, r2, #2
 800aee8:	fb00 f003 	mul.w	r0, r0, r3
 800aeec:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 800aef0:	6538      	str	r0, [r7, #80]	; 0x50
 800aef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aef6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800aefa:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 800aefe:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800af02:	1ac3      	subs	r3, r0, r3
 800af04:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800af08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af0c:	008b      	lsls	r3, r1, #2
 800af0e:	637b      	str	r3, [r7, #52]	; 0x34
 800af10:	00d3      	lsls	r3, r2, #3
 800af12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800af18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800af1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800af20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af24:	2300      	movs	r3, #0
 800af26:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800af2a:	673b      	str	r3, [r7, #112]	; 0x70
 800af2c:	46c2      	mov	sl, r8
 800af2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af32:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800af36:	eb03 0c02 	add.w	ip, r3, r2
 800af3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f2c0 813b 	blt.w	800b1ba <forward_conv2d+0x62a>
 800af44:	2000      	movs	r0, #0
 800af46:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800af48:	f8d7 80a4 	ldr.w	r8, [r7, #164]	; 0xa4
 800af4c:	4605      	mov	r5, r0
 800af4e:	4606      	mov	r6, r0
 800af50:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800af54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af58:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800af5c:	4413      	add	r3, r2
 800af5e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800af62:	440a      	add	r2, r1
 800af64:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800af68:	428b      	cmp	r3, r1
 800af6a:	bf94      	ite	ls
 800af6c:	ebc6 0303 	rsbls	r3, r6, r3
 800af70:	ebc6 0301 	rsbhi	r3, r6, r1
 800af74:	4415      	add	r5, r2
 800af76:	1a1b      	subs	r3, r3, r0
 800af78:	00a4      	lsls	r4, r4, #2
 800af7a:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800af7e:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 800af82:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800af86:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800af88:	4602      	mov	r2, r0
 800af8a:	2800      	cmp	r0, #0
 800af8c:	bf08      	it	eq
 800af8e:	4662      	moveq	r2, ip
 800af90:	f108 31ff 	add.w	r1, r8, #4294967295
 800af94:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800af98:	fb91 f1f0 	sdiv	r1, r1, r0
 800af9c:	4429      	add	r1, r5
 800af9e:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 800afa2:	fb0e 5501 	mla	r5, lr, r1, r5
 800afa6:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800afaa:	4403      	add	r3, r0
 800afac:	fb01 6104 	mla	r1, r1, r4, r6
 800afb0:	3b01      	subs	r3, #1
 800afb2:	fb93 f6f0 	sdiv	r6, r3, r0
 800afb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb8:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800afbc:	fb06 3110 	mls	r1, r6, r0, r3
 800afc0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800afc4:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800afc8:	4562      	cmp	r2, ip
 800afca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800afce:	bf08      	it	eq
 800afd0:	eeb0 6a48 	vmoveq.f32	s12, s16
 800afd4:	1b9b      	subs	r3, r3, r6
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d076      	beq.n	800b0c8 <forward_conv2d+0x538>
 800afda:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800afde:	fb0e f803 	mul.w	r8, lr, r3
 800afe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afe4:	fb00 fb01 	mul.w	fp, r0, r1
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d06d      	beq.n	800b0c8 <forward_conv2d+0x538>
 800afec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aff0:	18d3      	adds	r3, r2, r3
 800aff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800affa:	1a9b      	subs	r3, r3, r2
 800affc:	633b      	str	r3, [r7, #48]	; 0x30
 800affe:	2300      	movs	r3, #0
 800b000:	667b      	str	r3, [r7, #100]	; 0x64
 800b002:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b008:	4413      	add	r3, r2
 800b00a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b00c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800b010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b012:	4413      	add	r3, r2
 800b014:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b018:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b01c:	ecf3 7a01 	vldmia	r3!, {s15}
 800b020:	f1ba 0f00 	cmp.w	sl, #0
 800b024:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800b028:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b02c:	f340 80c3 	ble.w	800b1b6 <forward_conv2d+0x626>
 800b030:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800b034:	f04f 0c00 	mov.w	ip, #0
 800b038:	2e00      	cmp	r6, #0
 800b03a:	dd1f      	ble.n	800b07c <forward_conv2d+0x4ec>
 800b03c:	2100      	movs	r1, #0
 800b03e:	eb00 040e 	add.w	r4, r0, lr
 800b042:	4284      	cmp	r4, r0
 800b044:	d910      	bls.n	800b068 <forward_conv2d+0x4d8>
 800b046:	4603      	mov	r3, r0
 800b048:	462a      	mov	r2, r5
 800b04a:	ecb3 7a01 	vldmia	r3!, {s14}
 800b04e:	ecf2 6a01 	vldmia	r2!, {s13}
 800b052:	429c      	cmp	r4, r3
 800b054:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b058:	d8f7      	bhi.n	800b04a <forward_conv2d+0x4ba>
 800b05a:	43c3      	mvns	r3, r0
 800b05c:	441c      	add	r4, r3
 800b05e:	f024 0403 	bic.w	r4, r4, #3
 800b062:	3404      	adds	r4, #4
 800b064:	4425      	add	r5, r4
 800b066:	4420      	add	r0, r4
 800b068:	3101      	adds	r1, #1
 800b06a:	428e      	cmp	r6, r1
 800b06c:	4448      	add	r0, r9
 800b06e:	d1e6      	bne.n	800b03e <forward_conv2d+0x4ae>
 800b070:	e004      	b.n	800b07c <forward_conv2d+0x4ec>
 800b072:	bf00      	nop
 800b074:	00000000 	.word	0x00000000
 800b078:	0800aaed 	.word	0x0800aaed
 800b07c:	f10c 0c01 	add.w	ip, ip, #1
 800b080:	45e2      	cmp	sl, ip
 800b082:	4458      	add	r0, fp
 800b084:	4445      	add	r5, r8
 800b086:	d1d7      	bne.n	800b038 <forward_conv2d+0x4a8>
 800b088:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800b08c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b090:	441d      	add	r5, r3
 800b092:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b096:	ece3 7a01 	vstmia	r3!, {s15}
 800b09a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b09e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d1b8      	bne.n	800b018 <forward_conv2d+0x488>
 800b0a6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800b0aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0ae:	4472      	add	r2, lr
 800b0b0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b0b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0b6:	1a52      	subs	r2, r2, r1
 800b0b8:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800b0bc:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	667b      	str	r3, [r7, #100]	; 0x64
 800b0c6:	d19c      	bne.n	800b002 <forward_conv2d+0x472>
 800b0c8:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800b0cc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800b0d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b0d2:	4608      	mov	r0, r1
 800b0d4:	4410      	add	r0, r2
 800b0d6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800b0da:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800b0de:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b0e2:	4401      	add	r1, r0
 800b0e4:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800b0e8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800b0ec:	1a8a      	subs	r2, r1, r2
 800b0ee:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800b0f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	673b      	str	r3, [r7, #112]	; 0x70
 800b0fc:	f47f af17 	bne.w	800af2e <forward_conv2d+0x39e>
 800b100:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800b104:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b108:	b37b      	cbz	r3, 800b16a <forward_conv2d+0x5da>
 800b10a:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800b10e:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
 800b112:	f8d7 80dc 	ldr.w	r8, [r7, #220]	; 0xdc
 800b116:	f8d7 90e8 	ldr.w	r9, [r7, #232]	; 0xe8
 800b11a:	2500      	movs	r5, #0
 800b11c:	46a2      	mov	sl, r4
 800b11e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800b122:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800b126:	f8c2 a008 	str.w	sl, [r2, #8]
 800b12a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800b12e:	4633      	mov	r3, r6
 800b130:	4641      	mov	r1, r8
 800b132:	4416      	add	r6, r2
 800b134:	4640      	mov	r0, r8
 800b136:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800b13a:	47a0      	blx	r4
 800b13c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800b140:	4492      	add	sl, r2
 800b142:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800b146:	eba6 0309 	sub.w	r3, r6, r9
 800b14a:	4293      	cmp	r3, r2
 800b14c:	bfa8      	it	ge
 800b14e:	464e      	movge	r6, r9
 800b150:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b154:	3501      	adds	r5, #1
 800b156:	42ab      	cmp	r3, r5
 800b158:	d1e1      	bne.n	800b11e <forward_conv2d+0x58e>
 800b15a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b15e:	69ba      	ldr	r2, [r7, #24]
 800b160:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
 800b164:	4413      	add	r3, r2
 800b166:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b16a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b16e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b170:	699b      	ldr	r3, [r3, #24]
 800b172:	68da      	ldr	r2, [r3, #12]
 800b174:	609a      	str	r2, [r3, #8]
 800b176:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b17a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b17c:	4610      	mov	r0, r2
 800b17e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b182:	4418      	add	r0, r3
 800b184:	1ad3      	subs	r3, r2, r3
 800b186:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b18a:	697a      	ldr	r2, [r7, #20]
 800b18c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b190:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800b194:	4413      	add	r3, r2
 800b196:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b19a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b19e:	3101      	adds	r1, #1
 800b1a0:	428b      	cmp	r3, r1
 800b1a2:	67f9      	str	r1, [r7, #124]	; 0x7c
 800b1a4:	f47f ae42 	bne.w	800ae2c <forward_conv2d+0x29c>
 800b1a8:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	ecbd 8b10 	vpop	{d8-d15}
 800b1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	e768      	b.n	800b08c <forward_conv2d+0x4fc>
 800b1ba:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b1be:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800b1c2:	fb90 f3f2 	sdiv	r3, r0, r2
 800b1c6:	fb02 0313 	mls	r3, r2, r3, r0
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	4605      	mov	r5, r0
 800b1ce:	fb93 f0f2 	sdiv	r0, r3, r2
 800b1d2:	fb02 3010 	mls	r0, r2, r0, r3
 800b1d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1d8:	462e      	mov	r6, r5
 800b1da:	18c4      	adds	r4, r0, r3
 800b1dc:	eb02 0805 	add.w	r8, r2, r5
 800b1e0:	e6b6      	b.n	800af50 <forward_conv2d+0x3c0>
 800b1e2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800b1e4:	2901      	cmp	r1, #1
 800b1e6:	f47f ae39 	bne.w	800ae5c <forward_conv2d+0x2cc>
 800b1ea:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800b1ee:	2900      	cmp	r1, #0
 800b1f0:	d0bb      	beq.n	800b16a <forward_conv2d+0x5da>
 800b1f2:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800b1f6:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800b1fa:	f8d7 6110 	ldr.w	r6, [r7, #272]	; 0x110
 800b1fe:	fbb1 f5f0 	udiv	r5, r1, r0
 800b202:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800b206:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800b20a:	633d      	str	r5, [r7, #48]	; 0x30
 800b20c:	1ad2      	subs	r2, r2, r3
 800b20e:	1a8c      	subs	r4, r1, r2
 800b210:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b214:	00b2      	lsls	r2, r6, #2
 800b216:	fb02 f204 	mul.w	r2, r2, r4
 800b21a:	ebc5 7085 	rsb	r0, r5, r5, lsl #30
 800b21e:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 800b222:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b224:	0082      	lsls	r2, r0, #2
 800b226:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b228:	00ca      	lsls	r2, r1, #3
 800b22a:	603a      	str	r2, [r7, #0]
 800b22c:	00aa      	lsls	r2, r5, #2
 800b22e:	60ba      	str	r2, [r7, #8]
 800b230:	fb03 f206 	mul.w	r2, r3, r6
 800b234:	673a      	str	r2, [r7, #112]	; 0x70
 800b236:	69fa      	ldr	r2, [r7, #28]
 800b238:	fb02 f303 	mul.w	r3, r2, r3
 800b23c:	637b      	str	r3, [r7, #52]	; 0x34
 800b23e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b242:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b24a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800b24e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b252:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b256:	2300      	movs	r3, #0
 800b258:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b25c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b260:	2b00      	cmp	r3, #0
 800b262:	f2c0 8110 	blt.w	800b486 <forward_conv2d+0x8f6>
 800b266:	2100      	movs	r1, #0
 800b268:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b26a:	460a      	mov	r2, r1
 800b26c:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 800b270:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800b274:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
 800b278:	4420      	add	r0, r4
 800b27a:	4408      	add	r0, r1
 800b27c:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800b280:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800b284:	190c      	adds	r4, r1, r4
 800b286:	42ac      	cmp	r4, r5
 800b288:	bf28      	it	cs
 800b28a:	462c      	movcs	r4, r5
 800b28c:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 800b290:	0080      	lsls	r0, r0, #2
 800b292:	1aa4      	subs	r4, r4, r2
 800b294:	2d00      	cmp	r5, #0
 800b296:	f000 80e7 	beq.w	800b468 <forward_conv2d+0x8d8>
 800b29a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800b29e:	f8d7 611c 	ldr.w	r6, [r7, #284]	; 0x11c
 800b2a2:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800b2a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b2aa:	42b5      	cmp	r5, r6
 800b2ac:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800b2b0:	eba3 0204 	sub.w	r2, r3, r4
 800b2b4:	eba1 0104 	sub.w	r1, r1, r4
 800b2b8:	bf08      	it	eq
 800b2ba:	eef0 3a48 	vmoveq.f32	s7, s16
 800b2be:	462b      	mov	r3, r5
 800b2c0:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800b2c2:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 800b2c6:	4428      	add	r0, r5
 800b2c8:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 800b2cc:	fb05 6e00 	mla	lr, r5, r0, r6
 800b2d0:	eb0e 000b 	add.w	r0, lr, fp
 800b2d4:	4586      	cmp	lr, r0
 800b2d6:	6238      	str	r0, [r7, #32]
 800b2d8:	f080 80a5 	bcs.w	800b426 <forward_conv2d+0x896>
 800b2dc:	0092      	lsls	r2, r2, #2
 800b2de:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b2e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2e4:	fb0b f101 	mul.w	r1, fp, r1
 800b2e8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800b2ec:	f024 0803 	bic.w	r8, r4, #3
 800b2f0:	2a00      	cmp	r2, #0
 800b2f2:	f000 8098 	beq.w	800b426 <forward_conv2d+0x896>
 800b2f6:	f108 32ff 	add.w	r2, r8, #4294967295
 800b2fa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b2fc:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800b300:	0892      	lsrs	r2, r2, #2
 800b302:	3201      	adds	r2, #1
 800b304:	4401      	add	r1, r0
 800b306:	fb02 f00a 	mul.w	r0, r2, sl
 800b30a:	6578      	str	r0, [r7, #84]	; 0x54
 800b30c:	0110      	lsls	r0, r2, #4
 800b30e:	0092      	lsls	r2, r2, #2
 800b310:	653a      	str	r2, [r7, #80]	; 0x50
 800b312:	1aca      	subs	r2, r1, r3
 800b314:	613a      	str	r2, [r7, #16]
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	6678      	str	r0, [r7, #100]	; 0x64
 800b31a:	4413      	add	r3, r2
 800b31c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b320:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b326:	4413      	add	r3, r2
 800b328:	60fb      	str	r3, [r7, #12]
 800b32a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	4413      	add	r3, r2
 800b332:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b338:	ecf3 6a01 	vldmia	r3!, {s13}
 800b33c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b340:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b344:	2b00      	cmp	r3, #0
 800b346:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800b34a:	dd57      	ble.n	800b3fc <forward_conv2d+0x86c>
 800b34c:	4676      	mov	r6, lr
 800b34e:	f04f 0c00 	mov.w	ip, #0
 800b352:	f1b8 0f00 	cmp.w	r8, #0
 800b356:	f340 8085 	ble.w	800b464 <forward_conv2d+0x8d4>
 800b35a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b35e:	f109 0310 	add.w	r3, r9, #16
 800b362:	18b1      	adds	r1, r6, r2
 800b364:	2000      	movs	r0, #0
 800b366:	4632      	mov	r2, r6
 800b368:	eb02 050b 	add.w	r5, r2, fp
 800b36c:	ed95 7a00 	vldr	s14, [r5]
 800b370:	ed53 7a03 	vldr	s15, [r3, #-12]
 800b374:	ed92 4a00 	vldr	s8, [r2]
 800b378:	ed53 4a04 	vldr	s9, [r3, #-16]
 800b37c:	ed91 5a00 	vldr	s10, [r1]
 800b380:	ed53 5a02 	vldr	s11, [r3, #-8]
 800b384:	ed13 6a01 	vldr	s12, [r3, #-4]
 800b388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b38c:	eb01 050b 	add.w	r5, r1, fp
 800b390:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b394:	3004      	adds	r0, #4
 800b396:	4540      	cmp	r0, r8
 800b398:	ed95 7a00 	vldr	s14, [r5]
 800b39c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b3a0:	4452      	add	r2, sl
 800b3a2:	4451      	add	r1, sl
 800b3a4:	f103 0310 	add.w	r3, r3, #16
 800b3a8:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b3ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b3b0:	dbda      	blt.n	800b368 <forward_conv2d+0x7d8>
 800b3b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3b4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b3b6:	441e      	add	r6, r3
 800b3b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3ba:	4499      	add	r9, r3
 800b3bc:	42a0      	cmp	r0, r4
 800b3be:	da11      	bge.n	800b3e4 <forward_conv2d+0x854>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	4633      	mov	r3, r6
 800b3c4:	4649      	mov	r1, r9
 800b3c6:	edd3 7a00 	vldr	s15, [r3]
 800b3ca:	ecb1 7a01 	vldmia	r1!, {s14}
 800b3ce:	3201      	adds	r2, #1
 800b3d0:	42a2      	cmp	r2, r4
 800b3d2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b3d6:	445b      	add	r3, fp
 800b3d8:	d1f5      	bne.n	800b3c6 <forward_conv2d+0x836>
 800b3da:	1a20      	subs	r0, r4, r0
 800b3dc:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800b3e0:	fb00 660b 	mla	r6, r0, fp, r6
 800b3e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b3e8:	441e      	add	r6, r3
 800b3ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b3ee:	4499      	add	r9, r3
 800b3f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b3f4:	f10c 0c01 	add.w	ip, ip, #1
 800b3f8:	4563      	cmp	r3, ip
 800b3fa:	d1aa      	bne.n	800b352 <forward_conv2d+0x7c2>
 800b3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fe:	4499      	add	r9, r3
 800b400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b402:	ece3 6a01 	vstmia	r3!, {s13}
 800b406:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b408:	e9d7 232b 	ldrd	r2, r3, [r7, #172]	; 0xac
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d191      	bne.n	800b334 <forward_conv2d+0x7a4>
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	1a9b      	subs	r3, r3, r2
 800b416:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	f10e 0e04 	add.w	lr, lr, #4
 800b420:	459e      	cmp	lr, r3
 800b422:	f4ff af7d 	bcc.w	800b320 <forward_conv2d+0x790>
 800b426:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800b42a:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800b42e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b432:	440a      	add	r2, r1
 800b434:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800b438:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800b43c:	4608      	mov	r0, r1
 800b43e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800b442:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800b446:	4410      	add	r0, r2
 800b448:	1a8a      	subs	r2, r1, r2
 800b44a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800b44e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800b452:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 800b456:	3301      	adds	r3, #1
 800b458:	429a      	cmp	r2, r3
 800b45a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b45e:	f47f aefd 	bne.w	800b25c <forward_conv2d+0x6cc>
 800b462:	e64f      	b.n	800b104 <forward_conv2d+0x574>
 800b464:	2000      	movs	r0, #0
 800b466:	e7a9      	b.n	800b3bc <forward_conv2d+0x82c>
 800b468:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800b46c:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800b470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b474:	1b19      	subs	r1, r3, r4
 800b476:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b47a:	eef0 3a48 	vmov.f32	s7, s16
 800b47e:	1b1a      	subs	r2, r3, r4
 800b480:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b484:	e71c      	b.n	800b2c0 <forward_conv2d+0x730>
 800b486:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800b48a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b48c:	460a      	mov	r2, r1
 800b48e:	440b      	add	r3, r1
 800b490:	e6ec      	b.n	800b26c <forward_conv2d+0x6dc>
 800b492:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b494:	2801      	cmp	r0, #1
 800b496:	f47f ace1 	bne.w	800ae5c <forward_conv2d+0x2cc>
 800b49a:	1ad2      	subs	r2, r2, r3
 800b49c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b49e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800b4a2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800b4a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4a8:	fb00 4101 	mla	r1, r0, r1, r4
 800b4ac:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800b4b0:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800b4b4:	f080 8191 	bcs.w	800b7da <forward_conv2d+0xc4a>
 800b4b8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800b4bc:	2a00      	cmp	r2, #0
 800b4be:	f43f ae21 	beq.w	800b104 <forward_conv2d+0x574>
 800b4c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b4c4:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
 800b4c8:	fb02 f303 	mul.w	r3, r2, r3
 800b4cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b4ce:	667b      	str	r3, [r7, #100]	; 0x64
 800b4d0:	1a9b      	subs	r3, r3, r2
 800b4d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b4d4:	188b      	adds	r3, r1, r2
 800b4d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b4dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b4e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b4e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b4f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f000 8133 	beq.w	800b766 <forward_conv2d+0xbd6>
 800b500:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b504:	ed93 6a00 	vldr	s12, [r3]
 800b508:	3304      	adds	r3, #4
 800b50a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b50e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b512:	2b00      	cmp	r3, #0
 800b514:	f000 8101 	beq.w	800b71a <forward_conv2d+0xb8a>
 800b518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b51c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b520:	eb03 0802 	add.w	r8, r3, r2
 800b524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b526:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b52a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b52c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b534:	673b      	str	r3, [r7, #112]	; 0x70
 800b536:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b53a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b53e:	f04f 0b00 	mov.w	fp, #0
 800b542:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b546:	2b00      	cmp	r3, #0
 800b548:	f2c0 8104 	blt.w	800b754 <forward_conv2d+0xbc4>
 800b54c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800b550:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b552:	2300      	movs	r3, #0
 800b554:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 800b558:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800b55c:	eb02 0c04 	add.w	ip, r2, r4
 800b560:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800b564:	4540      	cmp	r0, r8
 800b566:	bf94      	ite	ls
 800b568:	ebc3 0300 	rsbls	r3, r3, r0
 800b56c:	ebc3 0308 	rsbhi	r3, r3, r8
 800b570:	eba2 0903 	sub.w	r9, r2, r3
 800b574:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800b578:	1ac4      	subs	r4, r0, r3
 800b57a:	fb03 f302 	mul.w	r3, r3, r2
 800b57e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800b582:	2a00      	cmp	r2, #0
 800b584:	f340 80e3 	ble.w	800b74e <forward_conv2d+0xbbe>
 800b588:	f023 050f 	bic.w	r5, r3, #15
 800b58c:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 800b590:	1e68      	subs	r0, r5, #1
 800b592:	0900      	lsrs	r0, r0, #4
 800b594:	3001      	adds	r0, #1
 800b596:	fb06 f204 	mul.w	r2, r6, r4
 800b59a:	657a      	str	r2, [r7, #84]	; 0x54
 800b59c:	0102      	lsls	r2, r0, #4
 800b59e:	653a      	str	r2, [r7, #80]	; 0x50
 800b5a0:	fb06 f909 	mul.w	r9, r6, r9
 800b5a4:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800b5a8:	eef0 6a46 	vmov.f32	s13, s12
 800b5ac:	f04f 0e00 	mov.w	lr, #0
 800b5b0:	4662      	mov	r2, ip
 800b5b2:	2d00      	cmp	r5, #0
 800b5b4:	f340 80c9 	ble.w	800b74a <forward_conv2d+0xbba>
 800b5b8:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800b5bc:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800b5c0:	2600      	movs	r6, #0
 800b5c2:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800b5c6:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800b5ca:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800b5ce:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800b5d2:	ed10 ea0e 	vldr	s28, [r0, #-56]	; 0xffffffc8
 800b5d6:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800b5da:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800b5de:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800b5e2:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800b5e6:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800b5ea:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800b5ee:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800b5f2:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800b5f6:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800b5fa:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800b5fe:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 800b602:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800b606:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800b60a:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800b60e:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800b612:	ed10 2a06 	vldr	s4, [r0, #-24]	; 0xffffffe8
 800b616:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800b61a:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 800b61e:	ed50 3a04 	vldr	s7, [r0, #-16]
 800b622:	ed14 4a04 	vldr	s8, [r4, #-16]
 800b626:	ed50 4a03 	vldr	s9, [r0, #-12]
 800b62a:	ed14 5a03 	vldr	s10, [r4, #-12]
 800b62e:	ed50 5a02 	vldr	s11, [r0, #-8]
 800b632:	ed14 7a02 	vldr	s14, [r4, #-8]
 800b636:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800b63a:	ed54 fa0e 	vldr	s31, [r4, #-56]	; 0xffffffc8
 800b63e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800b642:	3610      	adds	r6, #16
 800b644:	42ae      	cmp	r6, r5
 800b646:	ed14 fa01 	vldr	s30, [r4, #-4]
 800b64a:	ed50 ea01 	vldr	s29, [r0, #-4]
 800b64e:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800b652:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800b656:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800b65a:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800b65e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800b662:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800b666:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800b66a:	eee9 7a89 	vfma.f32	s15, s19, s18
 800b66e:	eee8 7a80 	vfma.f32	s15, s17, s0
 800b672:	eee0 7a81 	vfma.f32	s15, s1, s2
 800b676:	eee1 7a82 	vfma.f32	s15, s3, s4
 800b67a:	eee2 7a83 	vfma.f32	s15, s5, s6
 800b67e:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b682:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b686:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b68a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800b68e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b692:	db96      	blt.n	800b5c2 <forward_conv2d+0xa32>
 800b694:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b696:	4451      	add	r1, sl
 800b698:	4452      	add	r2, sl
 800b69a:	4283      	cmp	r3, r0
 800b69c:	dd0f      	ble.n	800b6be <forward_conv2d+0xb2e>
 800b69e:	4604      	mov	r4, r0
 800b6a0:	468c      	mov	ip, r1
 800b6a2:	4616      	mov	r6, r2
 800b6a4:	ecb6 7a01 	vldmia	r6!, {s14}
 800b6a8:	ecfc 7a01 	vldmia	ip!, {s15}
 800b6ac:	3401      	adds	r4, #1
 800b6ae:	42a3      	cmp	r3, r4
 800b6b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b6b4:	d1f6      	bne.n	800b6a4 <forward_conv2d+0xb14>
 800b6b6:	1a18      	subs	r0, r3, r0
 800b6b8:	0080      	lsls	r0, r0, #2
 800b6ba:	4402      	add	r2, r0
 800b6bc:	4401      	add	r1, r0
 800b6be:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b6c0:	4402      	add	r2, r0
 800b6c2:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800b6c6:	f10e 0e01 	add.w	lr, lr, #1
 800b6ca:	4570      	cmp	r0, lr
 800b6cc:	4449      	add	r1, r9
 800b6ce:	f47f af70 	bne.w	800b5b2 <forward_conv2d+0xa22>
 800b6d2:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800b6d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b6d8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800b6dc:	edc3 6a00 	vstr	s13, [r3]
 800b6e0:	4608      	mov	r0, r1
 800b6e2:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800b6e6:	440b      	add	r3, r1
 800b6e8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800b6ec:	673b      	str	r3, [r7, #112]	; 0x70
 800b6ee:	4410      	add	r0, r2
 800b6f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6f2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800b6f6:	4608      	mov	r0, r1
 800b6f8:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800b6fc:	4418      	add	r0, r3
 800b6fe:	1acb      	subs	r3, r1, r3
 800b700:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b704:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b708:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 800b70c:	f10b 0b01 	add.w	fp, fp, #1
 800b710:	455b      	cmp	r3, fp
 800b712:	eba8 0802 	sub.w	r8, r8, r2
 800b716:	f47f af14 	bne.w	800b542 <forward_conv2d+0x9b2>
 800b71a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800b71e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b724:	440a      	add	r2, r1
 800b726:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b72a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b72e:	3204      	adds	r2, #4
 800b730:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800b734:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800b738:	3301      	adds	r3, #1
 800b73a:	429a      	cmp	r2, r3
 800b73c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b740:	f47f aed9 	bne.w	800b4f6 <forward_conv2d+0x966>
 800b744:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
 800b748:	e4dc      	b.n	800b104 <forward_conv2d+0x574>
 800b74a:	2000      	movs	r0, #0
 800b74c:	e7a5      	b.n	800b69a <forward_conv2d+0xb0a>
 800b74e:	eef0 6a46 	vmov.f32	s13, s12
 800b752:	e7be      	b.n	800b6d2 <forward_conv2d+0xb42>
 800b754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b758:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b75c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800b760:	eba8 0303 	sub.w	r3, r8, r3
 800b764:	e6f6      	b.n	800b554 <forward_conv2d+0x9c4>
 800b766:	eeb0 6a48 	vmov.f32	s12, s16
 800b76a:	e6d0      	b.n	800b50e <forward_conv2d+0x97e>
 800b76c:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800b770:	68ca      	ldr	r2, [r1, #12]
 800b772:	2a00      	cmp	r2, #0
 800b774:	f43f aaca 	beq.w	800ad0c <forward_conv2d+0x17c>
 800b778:	69b3      	ldr	r3, [r6, #24]
 800b77a:	8818      	ldrh	r0, [r3, #0]
 800b77c:	2803      	cmp	r0, #3
 800b77e:	f240 819f 	bls.w	800bac0 <forward_conv2d+0xf30>
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b786:	b32b      	cbz	r3, 800b7d4 <forward_conv2d+0xc44>
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	b31b      	cbz	r3, 800b7d4 <forward_conv2d+0xc44>
 800b78c:	699b      	ldr	r3, [r3, #24]
 800b78e:	6889      	ldr	r1, [r1, #8]
 800b790:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 800b794:	9301      	str	r3, [sp, #4]
 800b796:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800b79a:	9000      	str	r0, [sp, #0]
 800b79c:	462b      	mov	r3, r5
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f7ff f9a6 	bl	800aaf0 <ai_dict_decompress_f32>
 800b7a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b7a8:	2c00      	cmp	r4, #0
 800b7aa:	bf18      	it	ne
 800b7ac:	4623      	movne	r3, r4
 800b7ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b7b2:	f7ff baab 	b.w	800ad0c <forward_conv2d+0x17c>
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	f000 8185 	beq.w	800bac6 <forward_conv2d+0xf36>
 800b7bc:	6883      	ldr	r3, [r0, #8]
 800b7be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b7c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b7cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b7d0:	f7ff ba6d 	b.w	800acae <forward_conv2d+0x11e>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	699b      	ldr	r3, [r3, #24]
 800b7d8:	deff      	udf	#255	; 0xff
 800b7da:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b7de:	f8c7 d064 	str.w	sp, [r7, #100]	; 0x64
 800b7e2:	320a      	adds	r2, #10
 800b7e4:	f022 0207 	bic.w	r2, r2, #7
 800b7e8:	ebad 0d02 	sub.w	sp, sp, r2
 800b7ec:	aa02      	add	r2, sp, #8
 800b7ee:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b7f2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800b7f6:	2a00      	cmp	r2, #0
 800b7f8:	f000 814d 	beq.w	800ba96 <forward_conv2d+0xf06>
 800b7fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b7fe:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 800b802:	fb02 f303 	mul.w	r3, r2, r3
 800b806:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b808:	657b      	str	r3, [r7, #84]	; 0x54
 800b80a:	1a9b      	subs	r3, r3, r2
 800b80c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b80e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b812:	4413      	add	r3, r2
 800b814:	637b      	str	r3, [r7, #52]	; 0x34
 800b816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b81a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b81e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b822:	673b      	str	r3, [r7, #112]	; 0x70
 800b824:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b828:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b82c:	2300      	movs	r3, #0
 800b82e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b834:	b13b      	cbz	r3, 800b846 <forward_conv2d+0xcb6>
 800b836:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b83a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800b83e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b842:	f003 ffd5 	bl	800f7f0 <memcpy>
 800b846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	f000 8135 	beq.w	800baba <forward_conv2d+0xf2a>
 800b850:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b852:	ed93 6a00 	vldr	s12, [r3]
 800b856:	3304      	adds	r3, #4
 800b858:	673b      	str	r3, [r7, #112]	; 0x70
 800b85a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b85e:	2b00      	cmp	r3, #0
 800b860:	f000 8101 	beq.w	800ba66 <forward_conv2d+0xed6>
 800b864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b868:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b86c:	eb03 0802 	add.w	r8, r3, r2
 800b870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b872:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b87c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b880:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b882:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b886:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b88a:	f04f 0b00 	mov.w	fp, #0
 800b88e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b892:	2b00      	cmp	r3, #0
 800b894:	f2c0 8108 	blt.w	800baa8 <forward_conv2d+0xf18>
 800b898:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800b89c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b89e:	2300      	movs	r3, #0
 800b8a0:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800b8a4:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800b8a8:	eb02 0c04 	add.w	ip, r2, r4
 800b8ac:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800b8b0:	4540      	cmp	r0, r8
 800b8b2:	bf94      	ite	ls
 800b8b4:	ebc3 0300 	rsbls	r3, r3, r0
 800b8b8:	ebc3 0308 	rsbhi	r3, r3, r8
 800b8bc:	eba2 0903 	sub.w	r9, r2, r3
 800b8c0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800b8c4:	1ac4      	subs	r4, r0, r3
 800b8c6:	fb03 f302 	mul.w	r3, r3, r2
 800b8ca:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800b8ce:	2a00      	cmp	r2, #0
 800b8d0:	f340 80e7 	ble.w	800baa2 <forward_conv2d+0xf12>
 800b8d4:	f023 050f 	bic.w	r5, r3, #15
 800b8d8:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 800b8dc:	1e68      	subs	r0, r5, #1
 800b8de:	0900      	lsrs	r0, r0, #4
 800b8e0:	3001      	adds	r0, #1
 800b8e2:	fb06 f204 	mul.w	r2, r6, r4
 800b8e6:	653a      	str	r2, [r7, #80]	; 0x50
 800b8e8:	0102      	lsls	r2, r0, #4
 800b8ea:	633a      	str	r2, [r7, #48]	; 0x30
 800b8ec:	fb06 f909 	mul.w	r9, r6, r9
 800b8f0:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800b8f4:	eef0 6a46 	vmov.f32	s13, s12
 800b8f8:	f04f 0e00 	mov.w	lr, #0
 800b8fc:	4662      	mov	r2, ip
 800b8fe:	2d00      	cmp	r5, #0
 800b900:	f340 80cd 	ble.w	800ba9e <forward_conv2d+0xf0e>
 800b904:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800b908:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800b90c:	2600      	movs	r6, #0
 800b90e:	ed50 fa0f 	vldr	s31, [r0, #-60]	; 0xffffffc4
 800b912:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 800b916:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800b91a:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800b91e:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800b922:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800b926:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800b92a:	ed54 ca0c 	vldr	s25, [r4, #-48]	; 0xffffffd0
 800b92e:	ed10 ca0c 	vldr	s24, [r0, #-48]	; 0xffffffd0
 800b932:	ed54 ba0b 	vldr	s23, [r4, #-44]	; 0xffffffd4
 800b936:	ed10 ba0b 	vldr	s22, [r0, #-44]	; 0xffffffd4
 800b93a:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800b93e:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800b942:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800b946:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800b94a:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800b94e:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800b952:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800b956:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800b95a:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800b95e:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800b962:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800b966:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800b96a:	ed54 3a04 	vldr	s7, [r4, #-16]
 800b96e:	ed10 4a04 	vldr	s8, [r0, #-16]
 800b972:	ed50 4a03 	vldr	s9, [r0, #-12]
 800b976:	ed14 5a03 	vldr	s10, [r4, #-12]
 800b97a:	ed54 5a02 	vldr	s11, [r4, #-8]
 800b97e:	ed10 7a02 	vldr	s14, [r0, #-8]
 800b982:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800b986:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800b98a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800b98e:	3610      	adds	r6, #16
 800b990:	42b5      	cmp	r5, r6
 800b992:	ed14 fa01 	vldr	s30, [r4, #-4]
 800b996:	ed50 ea01 	vldr	s29, [r0, #-4]
 800b99a:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800b99e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800b9a2:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800b9a6:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800b9aa:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800b9ae:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800b9b2:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800b9b6:	eee9 7a89 	vfma.f32	s15, s19, s18
 800b9ba:	eee8 7a80 	vfma.f32	s15, s17, s0
 800b9be:	eee0 7a81 	vfma.f32	s15, s1, s2
 800b9c2:	eee1 7a82 	vfma.f32	s15, s3, s4
 800b9c6:	eee2 7a83 	vfma.f32	s15, s5, s6
 800b9ca:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b9ce:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b9d2:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b9d6:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800b9da:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b9de:	dc96      	bgt.n	800b90e <forward_conv2d+0xd7e>
 800b9e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9e2:	4451      	add	r1, sl
 800b9e4:	4452      	add	r2, sl
 800b9e6:	4283      	cmp	r3, r0
 800b9e8:	dd0f      	ble.n	800ba0a <forward_conv2d+0xe7a>
 800b9ea:	4604      	mov	r4, r0
 800b9ec:	468c      	mov	ip, r1
 800b9ee:	4616      	mov	r6, r2
 800b9f0:	ecb6 7a01 	vldmia	r6!, {s14}
 800b9f4:	ecfc 7a01 	vldmia	ip!, {s15}
 800b9f8:	3401      	adds	r4, #1
 800b9fa:	42a3      	cmp	r3, r4
 800b9fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ba00:	d1f6      	bne.n	800b9f0 <forward_conv2d+0xe60>
 800ba02:	1a18      	subs	r0, r3, r0
 800ba04:	0080      	lsls	r0, r0, #2
 800ba06:	4402      	add	r2, r0
 800ba08:	4401      	add	r1, r0
 800ba0a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ba0c:	4402      	add	r2, r0
 800ba0e:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800ba12:	f10e 0e01 	add.w	lr, lr, #1
 800ba16:	4570      	cmp	r0, lr
 800ba18:	4449      	add	r1, r9
 800ba1a:	f47f af70 	bne.w	800b8fe <forward_conv2d+0xd6e>
 800ba1e:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800ba22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba24:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800ba28:	edc3 6a00 	vstr	s13, [r3]
 800ba2c:	4608      	mov	r0, r1
 800ba2e:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800ba32:	440b      	add	r3, r1
 800ba34:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800ba38:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba3a:	4410      	add	r0, r2
 800ba3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba3e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800ba42:	4608      	mov	r0, r1
 800ba44:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800ba48:	4418      	add	r0, r3
 800ba4a:	1acb      	subs	r3, r1, r3
 800ba4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ba50:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ba54:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 800ba58:	f10b 0b01 	add.w	fp, fp, #1
 800ba5c:	455b      	cmp	r3, fp
 800ba5e:	eba8 0802 	sub.w	r8, r8, r2
 800ba62:	f47f af14 	bne.w	800b88e <forward_conv2d+0xcfe>
 800ba66:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800ba6a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800ba6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba72:	440a      	add	r2, r1
 800ba74:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ba78:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ba7c:	3204      	adds	r2, #4
 800ba7e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800ba82:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800ba86:	3301      	adds	r3, #1
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ba8e:	f47f aed0 	bne.w	800b832 <forward_conv2d+0xca2>
 800ba92:	f8d7 b02c 	ldr.w	fp, [r7, #44]	; 0x2c
 800ba96:	f8d7 d064 	ldr.w	sp, [r7, #100]	; 0x64
 800ba9a:	f7ff bb33 	b.w	800b104 <forward_conv2d+0x574>
 800ba9e:	2000      	movs	r0, #0
 800baa0:	e7a1      	b.n	800b9e6 <forward_conv2d+0xe56>
 800baa2:	eef0 6a46 	vmov.f32	s13, s12
 800baa6:	e7ba      	b.n	800ba1e <forward_conv2d+0xe8e>
 800baa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bab0:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800bab4:	eba8 0303 	sub.w	r3, r8, r3
 800bab8:	e6f2      	b.n	800b8a0 <forward_conv2d+0xd10>
 800baba:	eeb0 6a48 	vmov.f32	s12, s16
 800babe:	e6cc      	b.n	800b85a <forward_conv2d+0xcca>
 800bac0:	2300      	movs	r3, #0
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	deff      	udf	#255	; 0xff
 800bac6:	4603      	mov	r3, r0
 800bac8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bacc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bad0:	2301      	movs	r3, #1
 800bad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bad6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bada:	f7ff b8e8 	b.w	800acae <forward_conv2d+0x11e>
 800bade:	2800      	cmp	r0, #0
 800bae0:	d0f2      	beq.n	800bac8 <forward_conv2d+0xf38>
 800bae2:	6882      	ldr	r2, [r0, #8]
 800bae4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bae8:	2301      	movs	r3, #1
 800baea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800baee:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800baf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800baf6:	f7ff b8da 	b.w	800acae <forward_conv2d+0x11e>
 800bafa:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800bafe:	f7ff b8b7 	b.w	800ac70 <forward_conv2d+0xe0>
 800bb02:	3318      	adds	r3, #24
 800bb04:	d007      	beq.n	800bb16 <forward_conv2d+0xf86>
 800bb06:	462a      	mov	r2, r5
 800bb08:	462c      	mov	r4, r5
 800bb0a:	462b      	mov	r3, r5
 800bb0c:	f7ff b86a 	b.w	800abe4 <forward_conv2d+0x54>
 800bb10:	2300      	movs	r3, #0
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	deff      	udf	#255	; 0xff
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	deff      	udf	#255	; 0xff
 800bb1a:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 800bb1e:	f7ff b850 	b.w	800abc2 <forward_conv2d+0x32>
 800bb22:	2300      	movs	r3, #0
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	deff      	udf	#255	; 0xff
 800bb28:	6853      	ldr	r3, [r2, #4]
 800bb2a:	deff      	udf	#255	; 0xff
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f7ff b858 	b.w	800abe2 <forward_conv2d+0x52>
 800bb32:	bf00      	nop

0800bb34 <forward_conv2d_nl_pool>:
 800bb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb38:	ed2d 8b10 	vpush	{d8-d15}
 800bb3c:	b0e1      	sub	sp, #388	; 0x184
 800bb3e:	6983      	ldr	r3, [r0, #24]
 800bb40:	881e      	ldrh	r6, [r3, #0]
 800bb42:	af0a      	add	r7, sp, #40	; 0x28
 800bb44:	2e00      	cmp	r6, #0
 800bb46:	f000 859b 	beq.w	800c680 <forward_conv2d_nl_pool+0xb4c>
 800bb4a:	6859      	ldr	r1, [r3, #4]
 800bb4c:	684a      	ldr	r2, [r1, #4]
 800bb4e:	2a00      	cmp	r2, #0
 800bb50:	f000 8593 	beq.w	800c67a <forward_conv2d_nl_pool+0xb46>
 800bb54:	f8d2 c000 	ldr.w	ip, [r2]
 800bb58:	2e01      	cmp	r6, #1
 800bb5a:	f240 858b 	bls.w	800c674 <forward_conv2d_nl_pool+0xb40>
 800bb5e:	690a      	ldr	r2, [r1, #16]
 800bb60:	2a00      	cmp	r2, #0
 800bb62:	f000 8582 	beq.w	800c66a <forward_conv2d_nl_pool+0xb36>
 800bb66:	f8d2 9000 	ldr.w	r9, [r2]
 800bb6a:	2e02      	cmp	r6, #2
 800bb6c:	f000 8582 	beq.w	800c674 <forward_conv2d_nl_pool+0xb40>
 800bb70:	69cd      	ldr	r5, [r1, #28]
 800bb72:	2d00      	cmp	r5, #0
 800bb74:	f000 8571 	beq.w	800c65a <forward_conv2d_nl_pool+0xb26>
 800bb78:	682a      	ldr	r2, [r5, #0]
 800bb7a:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800bb7e:	f111 0218 	adds.w	r2, r1, #24
 800bb82:	d004      	beq.n	800bb8e <forward_conv2d_nl_pool+0x5a>
 800bb84:	8b0a      	ldrh	r2, [r1, #24]
 800bb86:	2a01      	cmp	r2, #1
 800bb88:	f240 857c 	bls.w	800c684 <forward_conv2d_nl_pool+0xb50>
 800bb8c:	686a      	ldr	r2, [r5, #4]
 800bb8e:	68a9      	ldr	r1, [r5, #8]
 800bb90:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800bb92:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 800bb96:	f8dc b018 	ldr.w	fp, [ip, #24]
 800bb9a:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 800bb9e:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800bba2:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800bba6:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800bbaa:	f8db 4008 	ldr.w	r4, [fp, #8]
 800bbae:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800bbb2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800bbb6:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800bbba:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 800bbbe:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800bbc2:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800bbc6:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbca:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800bbce:	f8de 4004 	ldr.w	r4, [lr, #4]
 800bbd2:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 800bbd6:	f8de 400c 	ldr.w	r4, [lr, #12]
 800bbda:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800bbde:	f8de 4008 	ldr.w	r4, [lr, #8]
 800bbe2:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 800bbe6:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800bbea:	6824      	ldr	r4, [r4, #0]
 800bbec:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 800bbf0:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800bbf4:	6864      	ldr	r4, [r4, #4]
 800bbf6:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800bbfa:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800bbfe:	68a5      	ldr	r5, [r4, #8]
 800bc00:	f8da 4004 	ldr.w	r4, [sl, #4]
 800bc04:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 800bc08:	f8da 4008 	ldr.w	r4, [sl, #8]
 800bc0c:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800bc10:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800bc12:	6824      	ldr	r4, [r4, #0]
 800bc14:	f8c7 4134 	str.w	r4, [r7, #308]	; 0x134
 800bc18:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800bc1a:	6864      	ldr	r4, [r4, #4]
 800bc1c:	643c      	str	r4, [r7, #64]	; 0x40
 800bc1e:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800bc22:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800bc26:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800bc28:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800bc2c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800bc2e:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800bc32:	69c4      	ldr	r4, [r0, #28]
 800bc34:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 800bc38:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800bc3a:	64bc      	str	r4, [r7, #72]	; 0x48
 800bc3c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800bc3e:	647c      	str	r4, [r7, #68]	; 0x44
 800bc40:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800bc42:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 800bc46:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 800bc4a:	2a00      	cmp	r2, #0
 800bc4c:	f000 84f8 	beq.w	800c640 <forward_conv2d_nl_pool+0xb0c>
 800bc50:	6992      	ldr	r2, [r2, #24]
 800bc52:	6892      	ldr	r2, [r2, #8]
 800bc54:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800bc58:	4680      	mov	r8, r0
 800bc5a:	6a00      	ldr	r0, [r0, #32]
 800bc5c:	2900      	cmp	r1, #0
 800bc5e:	f000 84e4 	beq.w	800c62a <forward_conv2d_nl_pool+0xaf6>
 800bc62:	698a      	ldr	r2, [r1, #24]
 800bc64:	2a00      	cmp	r2, #0
 800bc66:	f000 8533 	beq.w	800c6d0 <forward_conv2d_nl_pool+0xb9c>
 800bc6a:	694b      	ldr	r3, [r1, #20]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bc72:	e9d2 0100 	ldrd	r0, r1, [r2]
 800bc76:	6893      	ldr	r3, [r2, #8]
 800bc78:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800bc7c:	f001 ffa6 	bl	800dbcc <ai_array_get_byte_size>
 800bc80:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800bc84:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800bc88:	881e      	ldrh	r6, [r3, #0]
 800bc8a:	f8d2 c018 	ldr.w	ip, [r2, #24]
 800bc8e:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 800bc92:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
 800bc96:	63f9      	str	r1, [r7, #60]	; 0x3c
 800bc98:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 800bc9c:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800bca0:	fa11 f585 	uxtah	r5, r1, r5
 800bca4:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800bca8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800bcac:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 800bcb0:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800bcb4:	3901      	subs	r1, #1
 800bcb6:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 800bcba:	eb05 0e00 	add.w	lr, r5, r0
 800bcbe:	fa1f f28a 	uxth.w	r2, sl
 800bcc2:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 800bcc6:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800bcca:	f8dc 4000 	ldr.w	r4, [ip]
 800bcce:	f8dc 1000 	ldr.w	r1, [ip]
 800bcd2:	3a01      	subs	r2, #1
 800bcd4:	fb00 5002 	mla	r0, r0, r2, r5
 800bcd8:	fa1f f28b 	uxth.w	r2, fp
 800bcdc:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 800bce0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800bce4:	f3c1 5141 	ubfx	r1, r1, #21, #2
 800bce8:	1e50      	subs	r0, r2, #1
 800bcea:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 800bcee:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800bcf2:	fa44 f101 	asr.w	r1, r4, r1
 800bcf6:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800bcfa:	f8dc 4000 	ldr.w	r4, [ip]
 800bcfe:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800bd02:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800bd06:	f3c4 4543 	ubfx	r5, r4, #17, #4
 800bd0a:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800bd0e:	ebae 0202 	sub.w	r2, lr, r2
 800bd12:	fa1f fe81 	uxth.w	lr, r1
 800bd16:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800bd1a:	fbb2 f2f1 	udiv	r2, r2, r1
 800bd1e:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 800bd22:	3c01      	subs	r4, #1
 800bd24:	fb04 1100 	mla	r1, r4, r0, r1
 800bd28:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800bd2c:	1c51      	adds	r1, r2, #1
 800bd2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bd32:	487c      	ldr	r0, [pc, #496]	; (800bf24 <forward_conv2d_nl_pool+0x3f0>)
 800bd34:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800bd38:	4611      	mov	r1, r2
 800bd3a:	2a00      	cmp	r2, #0
 800bd3c:	bf08      	it	eq
 800bd3e:	4601      	moveq	r1, r0
 800bd40:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 800bd44:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800bd48:	2d04      	cmp	r5, #4
 800bd4a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800bd4e:	f000 849e 	beq.w	800c68e <forward_conv2d_nl_pool+0xb5a>
 800bd52:	2d08      	cmp	r5, #8
 800bd54:	f000 849b 	beq.w	800c68e <forward_conv2d_nl_pool+0xb5a>
 800bd58:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800bd5c:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800bd60:	2e03      	cmp	r6, #3
 800bd62:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 800bd66:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800bd6a:	f240 8483 	bls.w	800c674 <forward_conv2d_nl_pool+0xb40>
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	f000 8489 	beq.w	800c68a <forward_conv2d_nl_pool+0xb56>
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800bd7e:	68da      	ldr	r2, [r3, #12]
 800bd80:	699b      	ldr	r3, [r3, #24]
 800bd82:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800bd86:	6899      	ldr	r1, [r3, #8]
 800bd88:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800bd8c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800bd90:	6896      	ldr	r6, [r2, #8]
 800bd92:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 800bd96:	4249      	negs	r1, r1
 800bd98:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	f000 82dd 	beq.w	800c35c <forward_conv2d_nl_pool+0x828>
 800bda2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bda6:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800bdaa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800bdae:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 800bdb2:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 800bf28 <forward_conv2d_nl_pool+0x3f4>
 800bdb6:	fb03 f200 	mul.w	r2, r3, r0
 800bdba:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800bdbe:	008c      	lsls	r4, r1, #2
 800bdc0:	fb04 f000 	mul.w	r0, r4, r0
 800bdc4:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 800bdc8:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800bdcc:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 800bdd0:	fb01 fc02 	mul.w	ip, r1, r2
 800bdd4:	00a2      	lsls	r2, r4, #2
 800bdd6:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800bdda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bdde:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 800bde2:	00ab      	lsls	r3, r5, #2
 800bde4:	4694      	mov	ip, r2
 800bde6:	fb0c f204 	mul.w	r2, ip, r4
 800bdea:	fb04 f303 	mul.w	r3, r4, r3
 800bdee:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 800bdf2:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800bdf6:	00a4      	lsls	r4, r4, #2
 800bdf8:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800bdfc:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 800be00:	f04f 0c00 	mov.w	ip, #0
 800be04:	fa0f f58b 	sxth.w	r5, fp
 800be08:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 800be0c:	46a4      	mov	ip, r4
 800be0e:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 800be12:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
 800be16:	fa0f f58a 	sxth.w	r5, sl
 800be1a:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 800be1e:	fb0c fc04 	mul.w	ip, ip, r4
 800be22:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 800be26:	fb06 fc03 	mul.w	ip, r6, r3
 800be2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800be2e:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 800be32:	4240      	negs	r0, r0
 800be34:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 800be38:	469c      	mov	ip, r3
 800be3a:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 800be3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800be42:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 800be46:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 800be4a:	f8c7 50ec 	str.w	r5, [r7, #236]	; 0xec
 800be4e:	fb00 f303 	mul.w	r3, r0, r3
 800be52:	460d      	mov	r5, r1
 800be54:	fb0c fc04 	mul.w	ip, ip, r4
 800be58:	627b      	str	r3, [r7, #36]	; 0x24
 800be5a:	fb04 f305 	mul.w	r3, r4, r5
 800be5e:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 800be62:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 800be66:	623b      	str	r3, [r7, #32]
 800be68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be6c:	46a6      	mov	lr, r4
 800be6e:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 800be72:	fb05 f503 	mul.w	r5, r5, r3
 800be76:	667d      	str	r5, [r7, #100]	; 0x64
 800be78:	4625      	mov	r5, r4
 800be7a:	fb05 f503 	mul.w	r5, r5, r3
 800be7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800be82:	66bd      	str	r5, [r7, #104]	; 0x68
 800be84:	fb00 f101 	mul.w	r1, r0, r1
 800be88:	fb03 f306 	mul.w	r3, r3, r6
 800be8c:	657b      	str	r3, [r7, #84]	; 0x54
 800be8e:	008b      	lsls	r3, r1, #2
 800be90:	633b      	str	r3, [r7, #48]	; 0x30
 800be92:	0093      	lsls	r3, r2, #2
 800be94:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be96:	0083      	lsls	r3, r0, #2
 800be98:	61bb      	str	r3, [r7, #24]
 800be9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be9e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800bea2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800bea6:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800beaa:	2400      	movs	r4, #0
 800beac:	63bb      	str	r3, [r7, #56]	; 0x38
 800beae:	4603      	mov	r3, r0
 800beb0:	fb03 f301 	mul.w	r3, r3, r1
 800beb4:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 800beb8:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800bebc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800bec0:	00d1      	lsls	r1, r2, #3
 800bec2:	0113      	lsls	r3, r2, #4
 800bec4:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800bec8:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800becc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800bed0:	fb00 f004 	mul.w	r0, r0, r4
 800bed4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800bed8:	66f8      	str	r0, [r7, #108]	; 0x6c
 800beda:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800bede:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800bee2:	469a      	mov	sl, r3
 800bee4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f340 81d0 	ble.w	800c28e <forward_conv2d_nl_pool+0x75a>
 800beee:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800bef2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bef6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800befa:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800befe:	2900      	cmp	r1, #0
 800bf00:	441a      	add	r2, r3
 800bf02:	bfb4      	ite	lt
 800bf04:	2100      	movlt	r1, #0
 800bf06:	2300      	movge	r3, #0
 800bf08:	4282      	cmp	r2, r0
 800bf0a:	bf28      	it	cs
 800bf0c:	4602      	movcs	r2, r0
 800bf0e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800bf12:	2801      	cmp	r0, #1
 800bf14:	f000 83f6 	beq.w	800c704 <forward_conv2d_nl_pool+0xbd0>
 800bf18:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800bf1c:	4281      	cmp	r1, r0
 800bf1e:	f000 822a 	beq.w	800c376 <forward_conv2d_nl_pool+0x842>
 800bf22:	e003      	b.n	800bf2c <forward_conv2d_nl_pool+0x3f8>
 800bf24:	0800aaed 	.word	0x0800aaed
 800bf28:	00000000 	.word	0x00000000
 800bf2c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800bf30:	2900      	cmp	r1, #0
 800bf32:	f000 819f 	beq.w	800c274 <forward_conv2d_nl_pool+0x740>
 800bf36:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800bf3a:	fb93 f1f0 	sdiv	r1, r3, r0
 800bf3e:	fb00 3111 	mls	r1, r0, r1, r3
 800bf42:	1a41      	subs	r1, r0, r1
 800bf44:	1ad2      	subs	r2, r2, r3
 800bf46:	fb91 f5f0 	sdiv	r5, r1, r0
 800bf4a:	fb00 1515 	mls	r5, r0, r5, r1
 800bf4e:	1b52      	subs	r2, r2, r5
 800bf50:	4601      	mov	r1, r0
 800bf52:	4402      	add	r2, r0
 800bf54:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800bf58:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800bf62:	fbb4 f4f0 	udiv	r4, r4, r0
 800bf66:	6a38      	ldr	r0, [r7, #32]
 800bf68:	3a01      	subs	r2, #1
 800bf6a:	fb92 f8f1 	sdiv	r8, r2, r1
 800bf6e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800bf72:	eba0 0c04 	sub.w	ip, r0, r4
 800bf76:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800bf7a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800bf7e:	4614      	mov	r4, r2
 800bf80:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800bf84:	fbb4 f2f2 	udiv	r2, r4, r2
 800bf88:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800bf8c:	663a      	str	r2, [r7, #96]	; 0x60
 800bf8e:	441d      	add	r5, r3
 800bf90:	fb0e f000 	mul.w	r0, lr, r0
 800bf94:	440b      	add	r3, r1
 800bf96:	eba6 0608 	sub.w	r6, r6, r8
 800bf9a:	fb04 f505 	mul.w	r5, r4, r5
 800bf9e:	3b01      	subs	r3, #1
 800bfa0:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 800bfa4:	fb93 f3f4 	sdiv	r3, r3, r4
 800bfa8:	fb00 f406 	mul.w	r4, r0, r6
 800bfac:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800bfb0:	677d      	str	r5, [r7, #116]	; 0x74
 800bfb2:	0091      	lsls	r1, r2, #2
 800bfb4:	fb00 f003 	mul.w	r0, r0, r3
 800bfb8:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800bfbc:	65f8      	str	r0, [r7, #92]	; 0x5c
 800bfbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bfc2:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800bfc6:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 800bfca:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800bfce:	1ac3      	subs	r3, r0, r3
 800bfd0:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800bfd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bfd8:	008b      	lsls	r3, r1, #2
 800bfda:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfdc:	00d3      	lsls	r3, r2, #3
 800bfde:	61fb      	str	r3, [r7, #28]
 800bfe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bfe4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bfe8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bfec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bff0:	2300      	movs	r3, #0
 800bff2:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 800bff6:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800bffa:	67bb      	str	r3, [r7, #120]	; 0x78
 800bffc:	46c2      	mov	sl, r8
 800bffe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c002:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800c006:	eb03 0c02 	add.w	ip, r3, r2
 800c00a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c00e:	2b00      	cmp	r3, #0
 800c010:	f2c0 811c 	blt.w	800c24c <forward_conv2d_nl_pool+0x718>
 800c014:	2000      	movs	r0, #0
 800c016:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 800c018:	f8d7 80e8 	ldr.w	r8, [r7, #232]	; 0xe8
 800c01c:	4605      	mov	r5, r0
 800c01e:	4606      	mov	r6, r0
 800c020:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c024:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c028:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800c02c:	4413      	add	r3, r2
 800c02e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c032:	440a      	add	r2, r1
 800c034:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800c038:	428b      	cmp	r3, r1
 800c03a:	bf94      	ite	ls
 800c03c:	ebc6 0303 	rsbls	r3, r6, r3
 800c040:	ebc6 0301 	rsbhi	r3, r6, r1
 800c044:	4415      	add	r5, r2
 800c046:	1a1b      	subs	r3, r3, r0
 800c048:	00a4      	lsls	r4, r4, #2
 800c04a:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800c04e:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 800c052:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800c056:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 800c058:	4602      	mov	r2, r0
 800c05a:	2800      	cmp	r0, #0
 800c05c:	bf08      	it	eq
 800c05e:	4662      	moveq	r2, ip
 800c060:	f108 31ff 	add.w	r1, r8, #4294967295
 800c064:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800c068:	fb91 f1f0 	sdiv	r1, r1, r0
 800c06c:	4429      	add	r1, r5
 800c06e:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 800c072:	fb0e 5501 	mla	r5, lr, r1, r5
 800c076:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800c07a:	4403      	add	r3, r0
 800c07c:	fb01 6104 	mla	r1, r1, r4, r6
 800c080:	3b01      	subs	r3, #1
 800c082:	fb93 f6f0 	sdiv	r6, r3, r0
 800c086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c088:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800c08c:	fb06 3110 	mls	r1, r6, r0, r3
 800c090:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800c094:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800c098:	4562      	cmp	r2, ip
 800c09a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c09e:	bf08      	it	eq
 800c0a0:	eeb0 6a48 	vmoveq.f32	s12, s16
 800c0a4:	1b9b      	subs	r3, r3, r6
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	d070      	beq.n	800c18c <forward_conv2d_nl_pool+0x658>
 800c0aa:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800c0ae:	fb0e f803 	mul.w	r8, lr, r3
 800c0b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0b4:	fb00 fb01 	mul.w	fp, r0, r1
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d067      	beq.n	800c18c <forward_conv2d_nl_pool+0x658>
 800c0bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c0c0:	18d3      	adds	r3, r2, r3
 800c0c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c0c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c0ca:	1a9b      	subs	r3, r3, r2
 800c0cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	673b      	str	r3, [r7, #112]	; 0x70
 800c0d2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d8:	4413      	add	r3, r2
 800c0da:	65bb      	str	r3, [r7, #88]	; 0x58
 800c0dc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800c0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e2:	4413      	add	r3, r2
 800c0e4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800c0e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800c0ec:	ecf3 7a01 	vldmia	r3!, {s15}
 800c0f0:	f1ba 0f00 	cmp.w	sl, #0
 800c0f4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800c0f8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c0fc:	f340 80a4 	ble.w	800c248 <forward_conv2d_nl_pool+0x714>
 800c100:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800c104:	f04f 0c00 	mov.w	ip, #0
 800c108:	2e00      	cmp	r6, #0
 800c10a:	dd19      	ble.n	800c140 <forward_conv2d_nl_pool+0x60c>
 800c10c:	2100      	movs	r1, #0
 800c10e:	eb00 040e 	add.w	r4, r0, lr
 800c112:	4284      	cmp	r4, r0
 800c114:	d910      	bls.n	800c138 <forward_conv2d_nl_pool+0x604>
 800c116:	4603      	mov	r3, r0
 800c118:	462a      	mov	r2, r5
 800c11a:	ecb3 7a01 	vldmia	r3!, {s14}
 800c11e:	ecf2 6a01 	vldmia	r2!, {s13}
 800c122:	429c      	cmp	r4, r3
 800c124:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c128:	d8f7      	bhi.n	800c11a <forward_conv2d_nl_pool+0x5e6>
 800c12a:	43c3      	mvns	r3, r0
 800c12c:	441c      	add	r4, r3
 800c12e:	f024 0403 	bic.w	r4, r4, #3
 800c132:	3404      	adds	r4, #4
 800c134:	4425      	add	r5, r4
 800c136:	4420      	add	r0, r4
 800c138:	3101      	adds	r1, #1
 800c13a:	428e      	cmp	r6, r1
 800c13c:	4448      	add	r0, r9
 800c13e:	d1e6      	bne.n	800c10e <forward_conv2d_nl_pool+0x5da>
 800c140:	f10c 0c01 	add.w	ip, ip, #1
 800c144:	45e2      	cmp	sl, ip
 800c146:	4458      	add	r0, fp
 800c148:	4445      	add	r5, r8
 800c14a:	d1dd      	bne.n	800c108 <forward_conv2d_nl_pool+0x5d4>
 800c14c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800c150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c154:	441d      	add	r5, r3
 800c156:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c15a:	ece3 7a01 	vstmia	r3!, {s15}
 800c15e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800c162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c166:	4293      	cmp	r3, r2
 800c168:	d1be      	bne.n	800c0e8 <forward_conv2d_nl_pool+0x5b4>
 800c16a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800c16e:	69f9      	ldr	r1, [r7, #28]
 800c170:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c172:	4472      	add	r2, lr
 800c174:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800c178:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c17a:	1a52      	subs	r2, r2, r1
 800c17c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800c180:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800c184:	3301      	adds	r3, #1
 800c186:	429a      	cmp	r2, r3
 800c188:	673b      	str	r3, [r7, #112]	; 0x70
 800c18a:	d1a2      	bne.n	800c0d2 <forward_conv2d_nl_pool+0x59e>
 800c18c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c190:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800c194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c196:	4608      	mov	r0, r1
 800c198:	4410      	add	r0, r2
 800c19a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800c19e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800c1a2:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800c1a6:	4401      	add	r1, r0
 800c1a8:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800c1ac:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800c1b0:	1a8a      	subs	r2, r1, r2
 800c1b2:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800c1b6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	67bb      	str	r3, [r7, #120]	; 0x78
 800c1c0:	f47f af1d 	bne.w	800bffe <forward_conv2d_nl_pool+0x4ca>
 800c1c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c1c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c1cc:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800c1d0:	699b      	ldr	r3, [r3, #24]
 800c1d2:	2a00      	cmp	r2, #0
 800c1d4:	f000 8210 	beq.w	800c5f8 <forward_conv2d_nl_pool+0xac4>
 800c1d8:	2400      	movs	r4, #0
 800c1da:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 800c1de:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 800c1e2:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 800c1e6:	f8d7 9108 	ldr.w	r9, [r7, #264]	; 0x108
 800c1ea:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 800c1ee:	609e      	str	r6, [r3, #8]
 800c1f0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800c1f4:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 800c1f8:	462b      	mov	r3, r5
 800c1fa:	4641      	mov	r1, r8
 800c1fc:	4640      	mov	r0, r8
 800c1fe:	47a0      	blx	r4
 800c200:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800c204:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800c208:	6859      	ldr	r1, [r3, #4]
 800c20a:	68da      	ldr	r2, [r3, #12]
 800c20c:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800c210:	4405      	add	r5, r0
 800c212:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800c216:	0089      	lsls	r1, r1, #2
 800c218:	4406      	add	r6, r0
 800c21a:	eba5 0c09 	sub.w	ip, r5, r9
 800c21e:	1850      	adds	r0, r2, r1
 800c220:	45a4      	cmp	ip, r4
 800c222:	bfa8      	it	ge
 800c224:	464d      	movge	r5, r9
 800c226:	4286      	cmp	r6, r0
 800c228:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800c22c:	bf28      	it	cs
 800c22e:	1a76      	subcs	r6, r6, r1
 800c230:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800c234:	3001      	adds	r0, #1
 800c236:	4281      	cmp	r1, r0
 800c238:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 800c23c:	d1d7      	bne.n	800c1ee <forward_conv2d_nl_pool+0x6ba>
 800c23e:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 800c242:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 800c246:	e019      	b.n	800c27c <forward_conv2d_nl_pool+0x748>
 800c248:	461a      	mov	r2, r3
 800c24a:	e781      	b.n	800c150 <forward_conv2d_nl_pool+0x61c>
 800c24c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800c250:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800c254:	fb90 f3f2 	sdiv	r3, r0, r2
 800c258:	fb02 0313 	mls	r3, r2, r3, r0
 800c25c:	1ad3      	subs	r3, r2, r3
 800c25e:	4605      	mov	r5, r0
 800c260:	fb93 f0f2 	sdiv	r0, r3, r2
 800c264:	fb02 3010 	mls	r0, r2, r0, r3
 800c268:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c26a:	462e      	mov	r6, r5
 800c26c:	18c4      	adds	r4, r0, r3
 800c26e:	eb02 0805 	add.w	r8, r2, r5
 800c272:	e6d5      	b.n	800c020 <forward_conv2d_nl_pool+0x4ec>
 800c274:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c278:	699b      	ldr	r3, [r3, #24]
 800c27a:	68da      	ldr	r2, [r3, #12]
 800c27c:	609a      	str	r2, [r3, #8]
 800c27e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c282:	3301      	adds	r3, #1
 800c284:	b21b      	sxth	r3, r3
 800c286:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800c28a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c28e:	3b01      	subs	r3, #1
 800c290:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c294:	f100 83bf 	bmi.w	800ca16 <forward_conv2d_nl_pool+0xee2>
 800c298:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c29c:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800c2a0:	42a3      	cmp	r3, r4
 800c2a2:	f200 839d 	bhi.w	800c9e0 <forward_conv2d_nl_pool+0xeac>
 800c2a6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	6990      	ldr	r0, [r2, #24]
 800c2ae:	9301      	str	r3, [sp, #4]
 800c2b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c2b4:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
 800c2b8:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 800c2bc:	1a9b      	subs	r3, r3, r2
 800c2be:	fa1f f188 	uxth.w	r1, r8
 800c2c2:	b29a      	uxth	r2, r3
 800c2c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c2c8:	9308      	str	r3, [sp, #32]
 800c2ca:	9105      	str	r1, [sp, #20]
 800c2cc:	2601      	movs	r6, #1
 800c2ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c2d2:	9607      	str	r6, [sp, #28]
 800c2d4:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 800c2d8:	9506      	str	r5, [sp, #24]
 800c2da:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 800c2de:	9304      	str	r3, [sp, #16]
 800c2e0:	1a64      	subs	r4, r4, r1
 800c2e2:	b2b1      	uxth	r1, r6
 800c2e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c2e8:	9300      	str	r3, [sp, #0]
 800c2ea:	e9cd 5102 	strd	r5, r1, [sp, #8]
 800c2ee:	b224      	sxth	r4, r4
 800c2f0:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 800c2f4:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 800c2f8:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800c2fc:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800c2fe:	47a0      	blx	r4
 800c300:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800c304:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 800c308:	688a      	ldr	r2, [r1, #8]
 800c30a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800c30c:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800c310:	fa0f f388 	sxth.w	r3, r8
 800c314:	1af3      	subs	r3, r6, r3
 800c316:	4422      	add	r2, r4
 800c318:	462e      	mov	r6, r5
 800c31a:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800c31e:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 800c322:	608a      	str	r2, [r1, #8]
 800c324:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c328:	4426      	add	r6, r4
 800c32a:	b21b      	sxth	r3, r3
 800c32c:	1b2c      	subs	r4, r5, r4
 800c32e:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800c332:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 800c334:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800c338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c33c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c340:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 800c344:	3001      	adds	r0, #1
 800c346:	442c      	add	r4, r5
 800c348:	4283      	cmp	r3, r0
 800c34a:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 800c34e:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 800c352:	f63f adc7 	bhi.w	800bee4 <forward_conv2d_nl_pool+0x3b0>
 800c356:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c35a:	699b      	ldr	r3, [r3, #24]
 800c35c:	68da      	ldr	r2, [r3, #12]
 800c35e:	609a      	str	r2, [r3, #8]
 800c360:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c364:	68d3      	ldr	r3, [r2, #12]
 800c366:	6093      	str	r3, [r2, #8]
 800c368:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 800c36c:	46bd      	mov	sp, r7
 800c36e:	ecbd 8b10 	vpop	{d8-d15}
 800c372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c376:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c378:	2901      	cmp	r1, #1
 800c37a:	f47f add7 	bne.w	800bf2c <forward_conv2d_nl_pool+0x3f8>
 800c37e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800c382:	2900      	cmp	r1, #0
 800c384:	f43f af76 	beq.w	800c274 <forward_conv2d_nl_pool+0x740>
 800c388:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800c38c:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 800c390:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800c394:	1ad2      	subs	r2, r2, r3
 800c396:	1a8c      	subs	r4, r1, r2
 800c398:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800c39c:	00b2      	lsls	r2, r6, #2
 800c39e:	fb02 f204 	mul.w	r2, r2, r4
 800c3a2:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800c3a6:	fbb1 f1f0 	udiv	r1, r1, r0
 800c3aa:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 800c3ae:	460d      	mov	r5, r1
 800c3b0:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c3b2:	62ba      	str	r2, [r7, #40]	; 0x28
 800c3b4:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 800c3b8:	0082      	lsls	r2, r0, #2
 800c3ba:	65ba      	str	r2, [r7, #88]	; 0x58
 800c3bc:	00ca      	lsls	r2, r1, #3
 800c3be:	607a      	str	r2, [r7, #4]
 800c3c0:	00aa      	lsls	r2, r5, #2
 800c3c2:	60ba      	str	r2, [r7, #8]
 800c3c4:	fb03 f206 	mul.w	r2, r3, r6
 800c3c8:	67ba      	str	r2, [r7, #120]	; 0x78
 800c3ca:	69ba      	ldr	r2, [r7, #24]
 800c3cc:	fb02 f303 	mul.w	r3, r2, r3
 800c3d0:	617b      	str	r3, [r7, #20]
 800c3d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c3da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c3de:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800c3e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c3e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c3f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	f2c0 8112 	blt.w	800c61e <forward_conv2d_nl_pool+0xaea>
 800c3fa:	2100      	movs	r1, #0
 800c3fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3fe:	460a      	mov	r2, r1
 800c400:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800c404:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800c408:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 800c40c:	4420      	add	r0, r4
 800c40e:	4408      	add	r0, r1
 800c410:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800c414:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800c418:	190c      	adds	r4, r1, r4
 800c41a:	42ac      	cmp	r4, r5
 800c41c:	bf28      	it	cs
 800c41e:	462c      	movcs	r4, r5
 800c420:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 800c424:	0080      	lsls	r0, r0, #2
 800c426:	1aa4      	subs	r4, r4, r2
 800c428:	2d00      	cmp	r5, #0
 800c42a:	f000 80e9 	beq.w	800c600 <forward_conv2d_nl_pool+0xacc>
 800c42e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c432:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 800c436:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800c43a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800c43e:	42b5      	cmp	r5, r6
 800c440:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800c444:	eba3 0204 	sub.w	r2, r3, r4
 800c448:	eba1 0104 	sub.w	r1, r1, r4
 800c44c:	bf08      	it	eq
 800c44e:	eef0 3a48 	vmoveq.f32	s7, s16
 800c452:	462b      	mov	r3, r5
 800c454:	697d      	ldr	r5, [r7, #20]
 800c456:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 800c45a:	4428      	add	r0, r5
 800c45c:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 800c460:	fb05 6e00 	mla	lr, r5, r0, r6
 800c464:	eb0e 000b 	add.w	r0, lr, fp
 800c468:	4586      	cmp	lr, r0
 800c46a:	61f8      	str	r0, [r7, #28]
 800c46c:	f080 80a5 	bcs.w	800c5ba <forward_conv2d_nl_pool+0xa86>
 800c470:	0092      	lsls	r2, r2, #2
 800c472:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800c476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c478:	fb01 f10b 	mul.w	r1, r1, fp
 800c47c:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800c480:	f024 0803 	bic.w	r8, r4, #3
 800c484:	2a00      	cmp	r2, #0
 800c486:	f000 8098 	beq.w	800c5ba <forward_conv2d_nl_pool+0xa86>
 800c48a:	f108 32ff 	add.w	r2, r8, #4294967295
 800c48e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c490:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800c494:	0892      	lsrs	r2, r2, #2
 800c496:	3201      	adds	r2, #1
 800c498:	4401      	add	r1, r0
 800c49a:	fb02 f00a 	mul.w	r0, r2, sl
 800c49e:	6638      	str	r0, [r7, #96]	; 0x60
 800c4a0:	0110      	lsls	r0, r2, #4
 800c4a2:	0092      	lsls	r2, r2, #2
 800c4a4:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c4a6:	1aca      	subs	r2, r1, r3
 800c4a8:	613a      	str	r2, [r7, #16]
 800c4aa:	68ba      	ldr	r2, [r7, #8]
 800c4ac:	6738      	str	r0, [r7, #112]	; 0x70
 800c4ae:	4413      	add	r3, r2
 800c4b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c4b4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c4b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4ba:	4413      	add	r3, r2
 800c4bc:	60fb      	str	r3, [r7, #12]
 800c4be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	677b      	str	r3, [r7, #116]	; 0x74
 800c4c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c4cc:	ecf3 6a01 	vldmia	r3!, {s13}
 800c4d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c4d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800c4de:	dd57      	ble.n	800c590 <forward_conv2d_nl_pool+0xa5c>
 800c4e0:	4676      	mov	r6, lr
 800c4e2:	f04f 0c00 	mov.w	ip, #0
 800c4e6:	f1b8 0f00 	cmp.w	r8, #0
 800c4ea:	f340 8087 	ble.w	800c5fc <forward_conv2d_nl_pool+0xac8>
 800c4ee:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c4f2:	f109 0310 	add.w	r3, r9, #16
 800c4f6:	18b1      	adds	r1, r6, r2
 800c4f8:	2000      	movs	r0, #0
 800c4fa:	4632      	mov	r2, r6
 800c4fc:	eb02 050b 	add.w	r5, r2, fp
 800c500:	ed95 7a00 	vldr	s14, [r5]
 800c504:	ed53 7a03 	vldr	s15, [r3, #-12]
 800c508:	ed92 4a00 	vldr	s8, [r2]
 800c50c:	ed53 4a04 	vldr	s9, [r3, #-16]
 800c510:	ed91 5a00 	vldr	s10, [r1]
 800c514:	ed53 5a02 	vldr	s11, [r3, #-8]
 800c518:	ed13 6a01 	vldr	s12, [r3, #-4]
 800c51c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c520:	eb01 050b 	add.w	r5, r1, fp
 800c524:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c528:	3004      	adds	r0, #4
 800c52a:	4540      	cmp	r0, r8
 800c52c:	ed95 7a00 	vldr	s14, [r5]
 800c530:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c534:	4452      	add	r2, sl
 800c536:	4451      	add	r1, sl
 800c538:	f103 0310 	add.w	r3, r3, #16
 800c53c:	eee7 7a06 	vfma.f32	s15, s14, s12
 800c540:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c544:	dbda      	blt.n	800c4fc <forward_conv2d_nl_pool+0x9c8>
 800c546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c548:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c54a:	441e      	add	r6, r3
 800c54c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c54e:	4499      	add	r9, r3
 800c550:	42a0      	cmp	r0, r4
 800c552:	da11      	bge.n	800c578 <forward_conv2d_nl_pool+0xa44>
 800c554:	4602      	mov	r2, r0
 800c556:	4633      	mov	r3, r6
 800c558:	4649      	mov	r1, r9
 800c55a:	edd3 7a00 	vldr	s15, [r3]
 800c55e:	ecb1 7a01 	vldmia	r1!, {s14}
 800c562:	3201      	adds	r2, #1
 800c564:	42a2      	cmp	r2, r4
 800c566:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c56a:	445b      	add	r3, fp
 800c56c:	d1f5      	bne.n	800c55a <forward_conv2d_nl_pool+0xa26>
 800c56e:	1a20      	subs	r0, r4, r0
 800c570:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800c574:	fb00 660b 	mla	r6, r0, fp, r6
 800c578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c57c:	441e      	add	r6, r3
 800c57e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c582:	4499      	add	r9, r3
 800c584:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c588:	f10c 0c01 	add.w	ip, ip, #1
 800c58c:	4563      	cmp	r3, ip
 800c58e:	d1aa      	bne.n	800c4e6 <forward_conv2d_nl_pool+0x9b2>
 800c590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c592:	4499      	add	r9, r3
 800c594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c596:	ece3 6a01 	vstmia	r3!, {s13}
 800c59a:	677b      	str	r3, [r7, #116]	; 0x74
 800c59c:	e9d7 2333 	ldrd	r2, r3, [r7, #204]	; 0xcc
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d191      	bne.n	800c4c8 <forward_conv2d_nl_pool+0x994>
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	1a9b      	subs	r3, r3, r2
 800c5aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	f10e 0e04 	add.w	lr, lr, #4
 800c5b4:	459e      	cmp	lr, r3
 800c5b6:	f4ff af7d 	bcc.w	800c4b4 <forward_conv2d_nl_pool+0x980>
 800c5ba:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800c5be:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800c5c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c5c6:	440a      	add	r2, r1
 800c5c8:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800c5cc:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800c5d0:	4608      	mov	r0, r1
 800c5d2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800c5d6:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800c5da:	4410      	add	r0, r2
 800c5dc:	1a8a      	subs	r2, r1, r2
 800c5de:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800c5e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800c5e6:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c5f2:	f47f aefd 	bne.w	800c3f0 <forward_conv2d_nl_pool+0x8bc>
 800c5f6:	e5e7      	b.n	800c1c8 <forward_conv2d_nl_pool+0x694>
 800c5f8:	68da      	ldr	r2, [r3, #12]
 800c5fa:	e63f      	b.n	800c27c <forward_conv2d_nl_pool+0x748>
 800c5fc:	2000      	movs	r0, #0
 800c5fe:	e7a7      	b.n	800c550 <forward_conv2d_nl_pool+0xa1c>
 800c600:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c604:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800c608:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c60c:	1b19      	subs	r1, r3, r4
 800c60e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800c612:	eef0 3a48 	vmov.f32	s7, s16
 800c616:	1b1a      	subs	r2, r3, r4
 800c618:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800c61c:	e71a      	b.n	800c454 <forward_conv2d_nl_pool+0x920>
 800c61e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800c622:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c624:	460a      	mov	r2, r1
 800c626:	440b      	add	r3, r1
 800c628:	e6ea      	b.n	800c400 <forward_conv2d_nl_pool+0x8cc>
 800c62a:	b168      	cbz	r0, 800c648 <forward_conv2d_nl_pool+0xb14>
 800c62c:	6882      	ldr	r2, [r0, #8]
 800c62e:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800c632:	2201      	movs	r2, #1
 800c634:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800c638:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800c63c:	f7ff bb29 	b.w	800bc92 <forward_conv2d_nl_pool+0x15e>
 800c640:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800c644:	f7ff bb08 	b.w	800bc58 <forward_conv2d_nl_pool+0x124>
 800c648:	2201      	movs	r2, #1
 800c64a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800c64e:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800c652:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800c656:	f7ff bb1c 	b.w	800bc92 <forward_conv2d_nl_pool+0x15e>
 800c65a:	3118      	adds	r1, #24
 800c65c:	d008      	beq.n	800c670 <forward_conv2d_nl_pool+0xb3c>
 800c65e:	462a      	mov	r2, r5
 800c660:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 800c664:	4629      	mov	r1, r5
 800c666:	f7ff ba93 	b.w	800bb90 <forward_conv2d_nl_pool+0x5c>
 800c66a:	4691      	mov	r9, r2
 800c66c:	f7ff ba7d 	b.w	800bb6a <forward_conv2d_nl_pool+0x36>
 800c670:	68cb      	ldr	r3, [r1, #12]
 800c672:	deff      	udf	#255	; 0xff
 800c674:	2300      	movs	r3, #0
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	deff      	udf	#255	; 0xff
 800c67a:	4694      	mov	ip, r2
 800c67c:	f7ff ba6c 	b.w	800bb58 <forward_conv2d_nl_pool+0x24>
 800c680:	6873      	ldr	r3, [r6, #4]
 800c682:	deff      	udf	#255	; 0xff
 800c684:	2200      	movs	r2, #0
 800c686:	f7ff ba82 	b.w	800bb8e <forward_conv2d_nl_pool+0x5a>
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	deff      	udf	#255	; 0xff
 800c68e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800c692:	2a00      	cmp	r2, #0
 800c694:	f43f ab60 	beq.w	800bd58 <forward_conv2d_nl_pool+0x224>
 800c698:	2e03      	cmp	r6, #3
 800c69a:	d9eb      	bls.n	800c674 <forward_conv2d_nl_pool+0xb40>
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6a0:	b323      	cbz	r3, 800c6ec <forward_conv2d_nl_pool+0xbb8>
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	b313      	cbz	r3, 800c6ec <forward_conv2d_nl_pool+0xbb8>
 800c6a6:	699b      	ldr	r3, [r3, #24]
 800c6a8:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800c6ac:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 800c6b0:	9301      	str	r3, [sp, #4]
 800c6b2:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800c6b6:	9000      	str	r0, [sp, #0]
 800c6b8:	4673      	mov	r3, lr
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	f7fe fa18 	bl	800aaf0 <ai_dict_decompress_f32>
 800c6c0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800c6c4:	b17c      	cbz	r4, 800c6e6 <forward_conv2d_nl_pool+0xbb2>
 800c6c6:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800c6ca:	881e      	ldrh	r6, [r3, #0]
 800c6cc:	f7ff bb44 	b.w	800bd58 <forward_conv2d_nl_pool+0x224>
 800c6d0:	b178      	cbz	r0, 800c6f2 <forward_conv2d_nl_pool+0xbbe>
 800c6d2:	6881      	ldr	r1, [r0, #8]
 800c6d4:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800c6d8:	2201      	movs	r2, #1
 800c6da:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800c6de:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800c6e2:	f7ff bad6 	b.w	800bc92 <forward_conv2d_nl_pool+0x15e>
 800c6e6:	881e      	ldrh	r6, [r3, #0]
 800c6e8:	f7ff bb36 	b.w	800bd58 <forward_conv2d_nl_pool+0x224>
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	699b      	ldr	r3, [r3, #24]
 800c6f0:	deff      	udf	#255	; 0xff
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 800c6f8:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 800c6fc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800c700:	f7ff bac7 	b.w	800bc92 <forward_conv2d_nl_pool+0x15e>
 800c704:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800c706:	2801      	cmp	r0, #1
 800c708:	f47f ac10 	bne.w	800bf2c <forward_conv2d_nl_pool+0x3f8>
 800c70c:	1ad2      	subs	r2, r2, r3
 800c70e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c710:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 800c714:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800c718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c71a:	fb00 4101 	mla	r1, r0, r1, r4
 800c71e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800c722:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800c726:	f080 81c4 	bcs.w	800cab2 <forward_conv2d_nl_pool+0xf7e>
 800c72a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800c72e:	2a00      	cmp	r2, #0
 800c730:	f43f ad4a 	beq.w	800c1c8 <forward_conv2d_nl_pool+0x694>
 800c734:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c738:	fb02 f303 	mul.w	r3, r2, r3
 800c73c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c73e:	677b      	str	r3, [r7, #116]	; 0x74
 800c740:	1a9b      	subs	r3, r3, r2
 800c742:	663b      	str	r3, [r7, #96]	; 0x60
 800c744:	188b      	adds	r3, r1, r2
 800c746:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c748:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c74c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c750:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c754:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c758:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 800c75c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c764:	2300      	movs	r3, #0
 800c766:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c76a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c76e:	2b00      	cmp	r3, #0
 800c770:	f000 8133 	beq.w	800c9da <forward_conv2d_nl_pool+0xea6>
 800c774:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c778:	ed93 6a00 	vldr	s12, [r3]
 800c77c:	3304      	adds	r3, #4
 800c77e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c782:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800c786:	2b00      	cmp	r3, #0
 800c788:	f000 8101 	beq.w	800c98e <forward_conv2d_nl_pool+0xe5a>
 800c78c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c790:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c794:	eb03 0802 	add.w	r8, r3, r2
 800c798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c79a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c79e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7a8:	67bb      	str	r3, [r7, #120]	; 0x78
 800c7aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c7ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c7b2:	f04f 0b00 	mov.w	fp, #0
 800c7b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f2c0 8104 	blt.w	800c9c8 <forward_conv2d_nl_pool+0xe94>
 800c7c0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800c7c4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 800c7cc:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800c7d0:	eb02 0c04 	add.w	ip, r2, r4
 800c7d4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c7d8:	4540      	cmp	r0, r8
 800c7da:	bf94      	ite	ls
 800c7dc:	ebc3 0300 	rsbls	r3, r3, r0
 800c7e0:	ebc3 0308 	rsbhi	r3, r3, r8
 800c7e4:	eba2 0903 	sub.w	r9, r2, r3
 800c7e8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800c7ec:	1ac4      	subs	r4, r0, r3
 800c7ee:	fb03 f302 	mul.w	r3, r3, r2
 800c7f2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800c7f6:	2a00      	cmp	r2, #0
 800c7f8:	f340 80e3 	ble.w	800c9c2 <forward_conv2d_nl_pool+0xe8e>
 800c7fc:	f023 050f 	bic.w	r5, r3, #15
 800c800:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 800c804:	1e68      	subs	r0, r5, #1
 800c806:	0900      	lsrs	r0, r0, #4
 800c808:	3001      	adds	r0, #1
 800c80a:	fb06 f204 	mul.w	r2, r6, r4
 800c80e:	673a      	str	r2, [r7, #112]	; 0x70
 800c810:	0102      	lsls	r2, r0, #4
 800c812:	65ba      	str	r2, [r7, #88]	; 0x58
 800c814:	fb06 f909 	mul.w	r9, r6, r9
 800c818:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800c81c:	eef0 6a46 	vmov.f32	s13, s12
 800c820:	f04f 0e00 	mov.w	lr, #0
 800c824:	4662      	mov	r2, ip
 800c826:	2d00      	cmp	r5, #0
 800c828:	f340 80c9 	ble.w	800c9be <forward_conv2d_nl_pool+0xe8a>
 800c82c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800c830:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800c834:	2600      	movs	r6, #0
 800c836:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800c83a:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800c83e:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 800c842:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 800c846:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800c84a:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800c84e:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800c852:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800c856:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800c85a:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800c85e:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800c862:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 800c866:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 800c86a:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 800c86e:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 800c872:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800c876:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800c87a:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 800c87e:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 800c882:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800c886:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800c88a:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800c88e:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 800c892:	ed50 3a04 	vldr	s7, [r0, #-16]
 800c896:	ed14 4a04 	vldr	s8, [r4, #-16]
 800c89a:	ed50 4a03 	vldr	s9, [r0, #-12]
 800c89e:	ed14 5a03 	vldr	s10, [r4, #-12]
 800c8a2:	ed50 5a02 	vldr	s11, [r0, #-8]
 800c8a6:	ed14 7a02 	vldr	s14, [r4, #-8]
 800c8aa:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800c8ae:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800c8b2:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800c8b6:	3610      	adds	r6, #16
 800c8b8:	42ae      	cmp	r6, r5
 800c8ba:	ed14 fa01 	vldr	s30, [r4, #-4]
 800c8be:	ed50 ea01 	vldr	s29, [r0, #-4]
 800c8c2:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800c8c6:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800c8ca:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800c8ce:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800c8d2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800c8d6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800c8da:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800c8de:	eee9 7a89 	vfma.f32	s15, s19, s18
 800c8e2:	eee8 7a80 	vfma.f32	s15, s17, s0
 800c8e6:	eee0 7a81 	vfma.f32	s15, s1, s2
 800c8ea:	eee1 7a82 	vfma.f32	s15, s3, s4
 800c8ee:	eee2 7a83 	vfma.f32	s15, s5, s6
 800c8f2:	eee3 7a84 	vfma.f32	s15, s7, s8
 800c8f6:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c8fa:	eee5 7a87 	vfma.f32	s15, s11, s14
 800c8fe:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800c902:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c906:	db96      	blt.n	800c836 <forward_conv2d_nl_pool+0xd02>
 800c908:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c90a:	4451      	add	r1, sl
 800c90c:	4452      	add	r2, sl
 800c90e:	4283      	cmp	r3, r0
 800c910:	dd0f      	ble.n	800c932 <forward_conv2d_nl_pool+0xdfe>
 800c912:	4604      	mov	r4, r0
 800c914:	468c      	mov	ip, r1
 800c916:	4616      	mov	r6, r2
 800c918:	ecb6 7a01 	vldmia	r6!, {s14}
 800c91c:	ecfc 7a01 	vldmia	ip!, {s15}
 800c920:	3401      	adds	r4, #1
 800c922:	42a3      	cmp	r3, r4
 800c924:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c928:	d1f6      	bne.n	800c918 <forward_conv2d_nl_pool+0xde4>
 800c92a:	1a18      	subs	r0, r3, r0
 800c92c:	0080      	lsls	r0, r0, #2
 800c92e:	4402      	add	r2, r0
 800c930:	4401      	add	r1, r0
 800c932:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c934:	4402      	add	r2, r0
 800c936:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800c93a:	f10e 0e01 	add.w	lr, lr, #1
 800c93e:	4570      	cmp	r0, lr
 800c940:	4449      	add	r1, r9
 800c942:	f47f af70 	bne.w	800c826 <forward_conv2d_nl_pool+0xcf2>
 800c946:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c94a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c94c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800c950:	edc3 6a00 	vstr	s13, [r3]
 800c954:	4608      	mov	r0, r1
 800c956:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800c95a:	440b      	add	r3, r1
 800c95c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800c960:	67bb      	str	r3, [r7, #120]	; 0x78
 800c962:	4410      	add	r0, r2
 800c964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c966:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800c96a:	4608      	mov	r0, r1
 800c96c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800c970:	4418      	add	r0, r3
 800c972:	1acb      	subs	r3, r1, r3
 800c974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c978:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800c97c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 800c980:	f10b 0b01 	add.w	fp, fp, #1
 800c984:	455b      	cmp	r3, fp
 800c986:	eba8 0802 	sub.w	r8, r8, r2
 800c98a:	f47f af14 	bne.w	800c7b6 <forward_conv2d_nl_pool+0xc82>
 800c98e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800c992:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c994:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c998:	440a      	add	r2, r1
 800c99a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800c99e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c9a2:	3204      	adds	r2, #4
 800c9a4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800c9a8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c9b4:	f47f aed9 	bne.w	800c76a <forward_conv2d_nl_pool+0xc36>
 800c9b8:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800c9bc:	e404      	b.n	800c1c8 <forward_conv2d_nl_pool+0x694>
 800c9be:	2000      	movs	r0, #0
 800c9c0:	e7a5      	b.n	800c90e <forward_conv2d_nl_pool+0xdda>
 800c9c2:	eef0 6a46 	vmov.f32	s13, s12
 800c9c6:	e7be      	b.n	800c946 <forward_conv2d_nl_pool+0xe12>
 800c9c8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c9cc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800c9d0:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800c9d4:	eba8 0303 	sub.w	r3, r8, r3
 800c9d8:	e6f6      	b.n	800c7c8 <forward_conv2d_nl_pool+0xc94>
 800c9da:	eeb0 6a48 	vmov.f32	s12, s16
 800c9de:	e6d0      	b.n	800c782 <forward_conv2d_nl_pool+0xc4e>
 800c9e0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800c9e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9e8:	4611      	mov	r1, r2
 800c9ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800c9ee:	4419      	add	r1, r3
 800c9f0:	1ad3      	subs	r3, r2, r3
 800c9f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800c9f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9fc:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800ca00:	4413      	add	r3, r2
 800ca02:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ca06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ca0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	f63f aa68 	bhi.w	800bee4 <forward_conv2d_nl_pool+0x3b0>
 800ca14:	e49f      	b.n	800c356 <forward_conv2d_nl_pool+0x822>
 800ca16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ca1a:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 800ca1e:	699a      	ldr	r2, [r3, #24]
 800ca20:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800ca24:	68d1      	ldr	r1, [r2, #12]
 800ca26:	6853      	ldr	r3, [r2, #4]
 800ca28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ca2a:	fb00 4012 	mls	r0, r0, r2, r4
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	4281      	cmp	r1, r0
 800ca32:	bf88      	it	hi
 800ca34:	18c0      	addhi	r0, r0, r3
 800ca36:	4281      	cmp	r1, r0
 800ca38:	eb01 0203 	add.w	r2, r1, r3
 800ca3c:	d216      	bcs.n	800ca6c <forward_conv2d_nl_pool+0xf38>
 800ca3e:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 800ca42:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800ca46:	42a1      	cmp	r1, r4
 800ca48:	d010      	beq.n	800ca6c <forward_conv2d_nl_pool+0xf38>
 800ca4a:	4290      	cmp	r0, r2
 800ca4c:	d20e      	bcs.n	800ca6c <forward_conv2d_nl_pool+0xf38>
 800ca4e:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800ca52:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800ca56:	f850 3b04 	ldr.w	r3, [r0], #4
 800ca5a:	f841 3b04 	str.w	r3, [r1], #4
 800ca5e:	69a2      	ldr	r2, [r4, #24]
 800ca60:	6853      	ldr	r3, [r2, #4]
 800ca62:	68d2      	ldr	r2, [r2, #12]
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	441a      	add	r2, r3
 800ca68:	4282      	cmp	r2, r0
 800ca6a:	d8f4      	bhi.n	800ca56 <forward_conv2d_nl_pool+0xf22>
 800ca6c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800ca70:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 800ca74:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 800ca78:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800ca7a:	4420      	add	r0, r4
 800ca7c:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800ca80:	1a40      	subs	r0, r0, r1
 800ca82:	4421      	add	r1, r4
 800ca84:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800ca88:	442c      	add	r4, r5
 800ca8a:	b209      	sxth	r1, r1
 800ca8c:	b200      	sxth	r0, r0
 800ca8e:	4294      	cmp	r4, r2
 800ca90:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800ca94:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800ca98:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800ca9c:	4621      	mov	r1, r4
 800ca9e:	f4ff abfb 	bcc.w	800c298 <forward_conv2d_nl_pool+0x764>
 800caa2:	425b      	negs	r3, r3
 800caa4:	4419      	add	r1, r3
 800caa6:	4291      	cmp	r1, r2
 800caa8:	d2fc      	bcs.n	800caa4 <forward_conv2d_nl_pool+0xf70>
 800caaa:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800caae:	f7ff bbf3 	b.w	800c298 <forward_conv2d_nl_pool+0x764>
 800cab2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cab6:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 800caba:	320a      	adds	r2, #10
 800cabc:	f022 0207 	bic.w	r2, r2, #7
 800cac0:	ebad 0d02 	sub.w	sp, sp, r2
 800cac4:	aa0a      	add	r2, sp, #40	; 0x28
 800cac6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800caca:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800cace:	2a00      	cmp	r2, #0
 800cad0:	f000 8153 	beq.w	800cd7a <forward_conv2d_nl_pool+0x1246>
 800cad4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800cad8:	f8c7 b01c 	str.w	fp, [r7, #28]
 800cadc:	fb02 f303 	mul.w	r3, r2, r3
 800cae0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cae2:	663b      	str	r3, [r7, #96]	; 0x60
 800cae4:	1a9b      	subs	r3, r3, r2
 800cae6:	65bb      	str	r3, [r7, #88]	; 0x58
 800cae8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800caec:	f8c7 a014 	str.w	sl, [r7, #20]
 800caf0:	4413      	add	r3, r2
 800caf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800caf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800caf8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cafc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb00:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cb10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cb14:	b13b      	cbz	r3, 800cb26 <forward_conv2d_nl_pool+0xff2>
 800cb16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cb1a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800cb1e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800cb22:	f002 fe65 	bl	800f7f0 <memcpy>
 800cb26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	f000 8137 	beq.w	800cd9e <forward_conv2d_nl_pool+0x126a>
 800cb30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb32:	ed93 6a00 	vldr	s12, [r3]
 800cb36:	3304      	adds	r3, #4
 800cb38:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb3a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	f000 8101 	beq.w	800cd46 <forward_conv2d_nl_pool+0x1212>
 800cb44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb48:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cb4c:	eb03 0802 	add.w	r8, r3, r2
 800cb50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cb5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb60:	677b      	str	r3, [r7, #116]	; 0x74
 800cb62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cb66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cb6a:	f04f 0b00 	mov.w	fp, #0
 800cb6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	f2c0 810a 	blt.w	800cd8c <forward_conv2d_nl_pool+0x1258>
 800cb78:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800cb7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb7e:	2300      	movs	r3, #0
 800cb80:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 800cb84:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800cb88:	eb02 0c04 	add.w	ip, r2, r4
 800cb8c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cb90:	4540      	cmp	r0, r8
 800cb92:	bf94      	ite	ls
 800cb94:	ebc3 0300 	rsbls	r3, r3, r0
 800cb98:	ebc3 0308 	rsbhi	r3, r3, r8
 800cb9c:	eba2 0903 	sub.w	r9, r2, r3
 800cba0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800cba4:	1ac4      	subs	r4, r0, r3
 800cba6:	fb03 f302 	mul.w	r3, r3, r2
 800cbaa:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800cbae:	2a00      	cmp	r2, #0
 800cbb0:	f340 80e9 	ble.w	800cd86 <forward_conv2d_nl_pool+0x1252>
 800cbb4:	f023 050f 	bic.w	r5, r3, #15
 800cbb8:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 800cbbc:	1e68      	subs	r0, r5, #1
 800cbbe:	0900      	lsrs	r0, r0, #4
 800cbc0:	3001      	adds	r0, #1
 800cbc2:	fb06 f204 	mul.w	r2, r6, r4
 800cbc6:	65fa      	str	r2, [r7, #92]	; 0x5c
 800cbc8:	0102      	lsls	r2, r0, #4
 800cbca:	62ba      	str	r2, [r7, #40]	; 0x28
 800cbcc:	fb06 f909 	mul.w	r9, r6, r9
 800cbd0:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800cbd4:	eef0 6a46 	vmov.f32	s13, s12
 800cbd8:	f04f 0e00 	mov.w	lr, #0
 800cbdc:	4662      	mov	r2, ip
 800cbde:	2d00      	cmp	r5, #0
 800cbe0:	f340 80cf 	ble.w	800cd82 <forward_conv2d_nl_pool+0x124e>
 800cbe4:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800cbe8:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800cbec:	2600      	movs	r6, #0
 800cbee:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800cbf2:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800cbf6:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 800cbfa:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 800cbfe:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800cc02:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800cc06:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800cc0a:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800cc0e:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800cc12:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800cc16:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800cc1a:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800cc1e:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800cc22:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800cc26:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800cc2a:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 800cc2e:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800cc32:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800cc36:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800cc3a:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800cc3e:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800cc42:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800cc46:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800cc4a:	ed50 3a04 	vldr	s7, [r0, #-16]
 800cc4e:	ed14 4a04 	vldr	s8, [r4, #-16]
 800cc52:	ed54 4a03 	vldr	s9, [r4, #-12]
 800cc56:	ed10 5a03 	vldr	s10, [r0, #-12]
 800cc5a:	ed50 5a02 	vldr	s11, [r0, #-8]
 800cc5e:	ed14 7a02 	vldr	s14, [r4, #-8]
 800cc62:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800cc66:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800cc6a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800cc6e:	3610      	adds	r6, #16
 800cc70:	42ae      	cmp	r6, r5
 800cc72:	ed14 fa01 	vldr	s30, [r4, #-4]
 800cc76:	ed50 ea01 	vldr	s29, [r0, #-4]
 800cc7a:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800cc7e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800cc82:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800cc86:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800cc8a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800cc8e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800cc92:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800cc96:	eee9 7a89 	vfma.f32	s15, s19, s18
 800cc9a:	eee8 7a80 	vfma.f32	s15, s17, s0
 800cc9e:	eee0 7a81 	vfma.f32	s15, s1, s2
 800cca2:	eee1 7a82 	vfma.f32	s15, s3, s4
 800cca6:	eee2 7a83 	vfma.f32	s15, s5, s6
 800ccaa:	eee3 7a84 	vfma.f32	s15, s7, s8
 800ccae:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ccb2:	eee5 7a87 	vfma.f32	s15, s11, s14
 800ccb6:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800ccba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ccbe:	db96      	blt.n	800cbee <forward_conv2d_nl_pool+0x10ba>
 800ccc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccc2:	4451      	add	r1, sl
 800ccc4:	4452      	add	r2, sl
 800ccc6:	4283      	cmp	r3, r0
 800ccc8:	dd0f      	ble.n	800ccea <forward_conv2d_nl_pool+0x11b6>
 800ccca:	4604      	mov	r4, r0
 800cccc:	468c      	mov	ip, r1
 800ccce:	4616      	mov	r6, r2
 800ccd0:	ecb6 7a01 	vldmia	r6!, {s14}
 800ccd4:	ecfc 7a01 	vldmia	ip!, {s15}
 800ccd8:	3401      	adds	r4, #1
 800ccda:	42a3      	cmp	r3, r4
 800ccdc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cce0:	d1f6      	bne.n	800ccd0 <forward_conv2d_nl_pool+0x119c>
 800cce2:	1a18      	subs	r0, r3, r0
 800cce4:	0080      	lsls	r0, r0, #2
 800cce6:	4402      	add	r2, r0
 800cce8:	4401      	add	r1, r0
 800ccea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ccec:	4402      	add	r2, r0
 800ccee:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800ccf2:	f10e 0e01 	add.w	lr, lr, #1
 800ccf6:	4570      	cmp	r0, lr
 800ccf8:	4449      	add	r1, r9
 800ccfa:	f47f af70 	bne.w	800cbde <forward_conv2d_nl_pool+0x10aa>
 800ccfe:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800cd02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd04:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800cd08:	edc3 6a00 	vstr	s13, [r3]
 800cd0c:	4608      	mov	r0, r1
 800cd0e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800cd12:	440b      	add	r3, r1
 800cd14:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800cd18:	677b      	str	r3, [r7, #116]	; 0x74
 800cd1a:	4410      	add	r0, r2
 800cd1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd1e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800cd22:	4608      	mov	r0, r1
 800cd24:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800cd28:	4418      	add	r0, r3
 800cd2a:	1acb      	subs	r3, r1, r3
 800cd2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cd30:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800cd34:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 800cd38:	f10b 0b01 	add.w	fp, fp, #1
 800cd3c:	455b      	cmp	r3, fp
 800cd3e:	eba8 0802 	sub.w	r8, r8, r2
 800cd42:	f47f af14 	bne.w	800cb6e <forward_conv2d_nl_pool+0x103a>
 800cd46:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800cd4a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800cd4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cd52:	440a      	add	r2, r1
 800cd54:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800cd58:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800cd5c:	3204      	adds	r2, #4
 800cd5e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800cd62:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800cd66:	3301      	adds	r3, #1
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cd6e:	f47f aecf 	bne.w	800cb10 <forward_conv2d_nl_pool+0xfdc>
 800cd72:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 800cd76:	f8d7 a014 	ldr.w	sl, [r7, #20]
 800cd7a:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 800cd7e:	f7ff ba23 	b.w	800c1c8 <forward_conv2d_nl_pool+0x694>
 800cd82:	2000      	movs	r0, #0
 800cd84:	e79f      	b.n	800ccc6 <forward_conv2d_nl_pool+0x1192>
 800cd86:	eef0 6a46 	vmov.f32	s13, s12
 800cd8a:	e7b8      	b.n	800ccfe <forward_conv2d_nl_pool+0x11ca>
 800cd8c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cd90:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800cd94:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800cd98:	eba8 0303 	sub.w	r3, r8, r3
 800cd9c:	e6f0      	b.n	800cb80 <forward_conv2d_nl_pool+0x104c>
 800cd9e:	eeb0 6a48 	vmov.f32	s12, s16
 800cda2:	e6ca      	b.n	800cb3a <forward_conv2d_nl_pool+0x1006>

0800cda4 <forward_gemm>:
 800cda4:	6983      	ldr	r3, [r0, #24]
 800cda6:	881a      	ldrh	r2, [r3, #0]
 800cda8:	b302      	cbz	r2, 800cdec <forward_gemm+0x48>
 800cdaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdae:	685d      	ldr	r5, [r3, #4]
 800cdb0:	6869      	ldr	r1, [r5, #4]
 800cdb2:	b097      	sub	sp, #92	; 0x5c
 800cdb4:	2900      	cmp	r1, #0
 800cdb6:	f000 814b 	beq.w	800d050 <forward_gemm+0x2ac>
 800cdba:	680c      	ldr	r4, [r1, #0]
 800cdbc:	882e      	ldrh	r6, [r5, #0]
 800cdbe:	2a01      	cmp	r2, #1
 800cdc0:	d911      	bls.n	800cde6 <forward_gemm+0x42>
 800cdc2:	692b      	ldr	r3, [r5, #16]
 800cdc4:	b103      	cbz	r3, 800cdc8 <forward_gemm+0x24>
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2e03      	cmp	r6, #3
 800cdca:	4680      	mov	r8, r0
 800cdcc:	d030      	beq.n	800ce30 <forward_gemm+0x8c>
 800cdce:	2e02      	cmp	r6, #2
 800cdd0:	d00e      	beq.n	800cdf0 <forward_gemm+0x4c>
 800cdd2:	2e01      	cmp	r6, #1
 800cdd4:	d119      	bne.n	800ce0a <forward_gemm+0x66>
 800cdd6:	2a02      	cmp	r2, #2
 800cdd8:	f000 8143 	beq.w	800d062 <forward_gemm+0x2be>
 800cddc:	69ea      	ldr	r2, [r5, #28]
 800cdde:	b1a2      	cbz	r2, 800ce0a <forward_gemm+0x66>
 800cde0:	e9d2 6500 	ldrd	r6, r5, [r2]
 800cde4:	e028      	b.n	800ce38 <forward_gemm+0x94>
 800cde6:	2300      	movs	r3, #0
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	deff      	udf	#255	; 0xff
 800cdec:	6853      	ldr	r3, [r2, #4]
 800cdee:	deff      	udf	#255	; 0xff
 800cdf0:	2900      	cmp	r1, #0
 800cdf2:	f000 812f 	beq.w	800d054 <forward_gemm+0x2b0>
 800cdf6:	684e      	ldr	r6, [r1, #4]
 800cdf8:	2a02      	cmp	r2, #2
 800cdfa:	f000 812f 	beq.w	800d05c <forward_gemm+0x2b8>
 800cdfe:	69ea      	ldr	r2, [r5, #28]
 800ce00:	2a00      	cmp	r2, #0
 800ce02:	f000 8129 	beq.w	800d058 <forward_gemm+0x2b4>
 800ce06:	6815      	ldr	r5, [r2, #0]
 800ce08:	e016      	b.n	800ce38 <forward_gemm+0x94>
 800ce0a:	68d9      	ldr	r1, [r3, #12]
 800ce0c:	699b      	ldr	r3, [r3, #24]
 800ce0e:	888a      	ldrh	r2, [r1, #4]
 800ce10:	689b      	ldr	r3, [r3, #8]
 800ce12:	8989      	ldrh	r1, [r1, #12]
 800ce14:	a80e      	add	r0, sp, #56	; 0x38
 800ce16:	f000 fe65 	bl	800dae4 <st_dsp_arm_mat_init_f32>
 800ce1a:	68e1      	ldr	r1, [r4, #12]
 800ce1c:	69a3      	ldr	r3, [r4, #24]
 800ce1e:	888a      	ldrh	r2, [r1, #4]
 800ce20:	689b      	ldr	r3, [r3, #8]
 800ce22:	8989      	ldrh	r1, [r1, #12]
 800ce24:	a810      	add	r0, sp, #64	; 0x40
 800ce26:	f000 fe5d 	bl	800dae4 <st_dsp_arm_mat_init_f32>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	deff      	udf	#255	; 0xff
 800ce30:	2900      	cmp	r1, #0
 800ce32:	d0ea      	beq.n	800ce0a <forward_gemm+0x66>
 800ce34:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
 800ce38:	68e8      	ldr	r0, [r5, #12]
 800ce3a:	68d9      	ldr	r1, [r3, #12]
 800ce3c:	699b      	ldr	r3, [r3, #24]
 800ce3e:	68c7      	ldr	r7, [r0, #12]
 800ce40:	888a      	ldrh	r2, [r1, #4]
 800ce42:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800ce46:	689b      	ldr	r3, [r3, #8]
 800ce48:	8989      	ldrh	r1, [r1, #12]
 800ce4a:	a80e      	add	r0, sp, #56	; 0x38
 800ce4c:	f000 fe4a 	bl	800dae4 <st_dsp_arm_mat_init_f32>
 800ce50:	68e1      	ldr	r1, [r4, #12]
 800ce52:	69a3      	ldr	r3, [r4, #24]
 800ce54:	888a      	ldrh	r2, [r1, #4]
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	8989      	ldrh	r1, [r1, #12]
 800ce5a:	a810      	add	r0, sp, #64	; 0x40
 800ce5c:	f000 fe42 	bl	800dae4 <st_dsp_arm_mat_init_f32>
 800ce60:	68f1      	ldr	r1, [r6, #12]
 800ce62:	69b3      	ldr	r3, [r6, #24]
 800ce64:	888a      	ldrh	r2, [r1, #4]
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	8989      	ldrh	r1, [r1, #12]
 800ce6a:	a812      	add	r0, sp, #72	; 0x48
 800ce6c:	f000 fe3a 	bl	800dae4 <st_dsp_arm_mat_init_f32>
 800ce70:	69ab      	ldr	r3, [r5, #24]
 800ce72:	b2b9      	uxth	r1, r7
 800ce74:	fa1f f289 	uxth.w	r2, r9
 800ce78:	689b      	ldr	r3, [r3, #8]
 800ce7a:	a814      	add	r0, sp, #80	; 0x50
 800ce7c:	f000 fe32 	bl	800dae4 <st_dsp_arm_mat_init_f32>
 800ce80:	f998 3024 	ldrsb.w	r3, [r8, #36]	; 0x24
 800ce84:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
 800ce88:	f8bd 6042 	ldrh.w	r6, [sp, #66]	; 0x42
 800ce8c:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 800ce90:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800ce92:	f8bd c052 	ldrh.w	ip, [sp, #82]	; 0x52
 800ce96:	f8bd e038 	ldrh.w	lr, [sp, #56]	; 0x38
 800ce9a:	f8bd 503a 	ldrh.w	r5, [sp, #58]	; 0x3a
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	bf14      	ite	ne
 800cea2:	4631      	movne	r1, r6
 800cea4:	4639      	moveq	r1, r7
 800cea6:	2a01      	cmp	r2, #1
 800cea8:	9102      	str	r1, [sp, #8]
 800ceaa:	f000 80cb 	beq.w	800d044 <forward_gemm+0x2a0>
 800ceae:	f1ac 0201 	sub.w	r2, ip, #1
 800ceb2:	fab2 f282 	clz	r2, r2
 800ceb6:	0952      	lsrs	r2, r2, #5
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	bf14      	ite	ne
 800cebc:	4631      	movne	r1, r6
 800cebe:	4639      	moveq	r1, r7
 800cec0:	458e      	cmp	lr, r1
 800cec2:	d00d      	beq.n	800cee0 <forward_gemm+0x13c>
 800cec4:	fb05 f50e 	mul.w	r5, r5, lr
 800cec8:	b13d      	cbz	r5, 800ceda <forward_gemm+0x136>
 800ceca:	2200      	movs	r2, #0
 800cecc:	2300      	movs	r3, #0
 800cece:	3301      	adds	r3, #1
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	42ab      	cmp	r3, r5
 800ced4:	f844 2b04 	str.w	r2, [r4], #4
 800ced8:	dbf9      	blt.n	800cece <forward_gemm+0x12a>
 800ceda:	b017      	add	sp, #92	; 0x5c
 800cedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee0:	f998 9025 	ldrsb.w	r9, [r8, #37]	; 0x25
 800cee4:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
 800cee8:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
 800ceec:	f1b9 0f00 	cmp.w	r9, #0
 800cef0:	bf14      	ite	ne
 800cef2:	4682      	movne	sl, r0
 800cef4:	468a      	moveq	sl, r1
 800cef6:	45aa      	cmp	sl, r5
 800cef8:	d1e4      	bne.n	800cec4 <forward_gemm+0x120>
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	bf14      	ite	ne
 800cefe:	46bb      	movne	fp, r7
 800cf00:	46b3      	moveq	fp, r6
 800cf02:	f1b9 0f00 	cmp.w	r9, #0
 800cf06:	bf14      	ite	ne
 800cf08:	468a      	movne	sl, r1
 800cf0a:	4682      	moveq	sl, r0
 800cf0c:	45d3      	cmp	fp, sl
 800cf0e:	d1d9      	bne.n	800cec4 <forward_gemm+0x120>
 800cf10:	f1b9 0f00 	cmp.w	r9, #0
 800cf14:	bf14      	ite	ne
 800cf16:	4605      	movne	r5, r0
 800cf18:	460d      	moveq	r5, r1
 800cf1a:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	9505      	str	r5, [sp, #20]
 800cf22:	bf12      	itee	ne
 800cf24:	465d      	movne	r5, fp
 800cf26:	2504      	moveq	r5, #4
 800cf28:	4637      	moveq	r7, r6
 800cf2a:	950c      	str	r5, [sp, #48]	; 0x30
 800cf2c:	f1b9 0f00 	cmp.w	r9, #0
 800cf30:	ea4f 0581 	mov.w	r5, r1, lsl #2
 800cf34:	950b      	str	r5, [sp, #44]	; 0x2c
 800cf36:	bf18      	it	ne
 800cf38:	2504      	movne	r5, #4
 800cf3a:	f11c 3cff 	adds.w	ip, ip, #4294967295
 800cf3e:	bf18      	it	ne
 800cf40:	f04f 0c01 	movne.w	ip, #1
 800cf44:	950d      	str	r5, [sp, #52]	; 0x34
 800cf46:	9d05      	ldr	r5, [sp, #20]
 800cf48:	edd8 5a07 	vldr	s11, [r8, #28]
 800cf4c:	ed98 6a08 	vldr	s12, [r8, #32]
 800cf50:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800cf54:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 800d084 <forward_gemm+0x2e0>
 800cf58:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800cf5c:	940a      	str	r4, [sp, #40]	; 0x28
 800cf5e:	ea4f 068c 	mov.w	r6, ip, lsl #2
 800cf62:	f105 3eff 	add.w	lr, r5, #4294967295
 800cf66:	9600      	str	r6, [sp, #0]
 800cf68:	4635      	mov	r5, r6
 800cf6a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800cf6c:	9601      	str	r6, [sp, #4]
 800cf6e:	fa1f fe8e 	uxth.w	lr, lr
 800cf72:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800cf74:	9604      	str	r6, [sp, #16]
 800cf76:	46ac      	mov	ip, r5
 800cf78:	9e01      	ldr	r6, [sp, #4]
 800cf7a:	f8cd 9004 	str.w	r9, [sp, #4]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	eba0 000e 	sub.w	r0, r0, lr
 800cf84:	eba1 030e 	sub.w	r3, r1, lr
 800cf88:	fb0e 5e05 	mla	lr, lr, r5, r5
 800cf8c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800cf8e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800cf92:	fb05 f000 	mul.w	r0, r5, r0
 800cf96:	9309      	str	r3, [sp, #36]	; 0x24
 800cf98:	46b1      	mov	r9, r6
 800cf9a:	eb0e 0382 	add.w	r3, lr, r2, lsl #2
 800cf9e:	4632      	mov	r2, r6
 800cfa0:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 800cfa4:	bf0c      	ite	eq
 800cfa6:	46dc      	moveq	ip, fp
 800cfa8:	f04f 0c04 	movne.w	ip, #4
 800cfac:	3101      	adds	r1, #1
 800cfae:	9307      	str	r3, [sp, #28]
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	f8cd c018 	str.w	ip, [sp, #24]
 800cfb6:	9303      	str	r3, [sp, #12]
 800cfb8:	9008      	str	r0, [sp, #32]
 800cfba:	ea4f 0b81 	mov.w	fp, r1, lsl #2
 800cfbe:	4623      	mov	r3, r4
 800cfc0:	4684      	mov	ip, r0
 800cfc2:	9903      	ldr	r1, [sp, #12]
 800cfc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfc6:	9c04      	ldr	r4, [sp, #16]
 800cfc8:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800cfcc:	2f00      	cmp	r7, #0
 800cfce:	d055      	beq.n	800d07c <forward_gemm+0x2d8>
 800cfd0:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800d084 <forward_gemm+0x2e0>
 800cfd4:	463b      	mov	r3, r7
 800cfd6:	4651      	mov	r1, sl
 800cfd8:	edd1 6a00 	vldr	s13, [r1]
 800cfdc:	ed92 7a00 	vldr	s14, [r2]
 800cfe0:	3b01      	subs	r3, #1
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	4431      	add	r1, r6
 800cfe6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cfea:	442a      	add	r2, r5
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d1f3      	bne.n	800cfd8 <forward_gemm+0x234>
 800cff0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800cff4:	ed94 7a00 	vldr	s14, [r4]
 800cff8:	9b00      	ldr	r3, [sp, #0]
 800cffa:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cffe:	441c      	add	r4, r3
 800d000:	9b01      	ldr	r3, [sp, #4]
 800d002:	ecee 7a01 	vstmia	lr!, {s15}
 800d006:	2b00      	cmp	r3, #0
 800d008:	d130      	bne.n	800d06c <forward_gemm+0x2c8>
 800d00a:	eb09 0200 	add.w	r2, r9, r0
 800d00e:	3004      	adds	r0, #4
 800d010:	4558      	cmp	r0, fp
 800d012:	44c4      	add	ip, r8
 800d014:	d1da      	bne.n	800cfcc <forward_gemm+0x228>
 800d016:	9b02      	ldr	r3, [sp, #8]
 800d018:	9905      	ldr	r1, [sp, #20]
 800d01a:	3b01      	subs	r3, #1
 800d01c:	b29a      	uxth	r2, r3
 800d01e:	9b03      	ldr	r3, [sp, #12]
 800d020:	9202      	str	r2, [sp, #8]
 800d022:	440b      	add	r3, r1
 800d024:	b29b      	uxth	r3, r3
 800d026:	9303      	str	r3, [sp, #12]
 800d028:	9b06      	ldr	r3, [sp, #24]
 800d02a:	9907      	ldr	r1, [sp, #28]
 800d02c:	449a      	add	sl, r3
 800d02e:	9b04      	ldr	r3, [sp, #16]
 800d030:	440b      	add	r3, r1
 800d032:	9304      	str	r3, [sp, #16]
 800d034:	2a00      	cmp	r2, #0
 800d036:	f43f af50 	beq.w	800ceda <forward_gemm+0x136>
 800d03a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d03e:	f8dd c020 	ldr.w	ip, [sp, #32]
 800d042:	e7be      	b.n	800cfc2 <forward_gemm+0x21e>
 800d044:	f1bc 0f01 	cmp.w	ip, #1
 800d048:	d00e      	beq.n	800d068 <forward_gemm+0x2c4>
 800d04a:	426a      	negs	r2, r5
 800d04c:	b212      	sxth	r2, r2
 800d04e:	e733      	b.n	800ceb8 <forward_gemm+0x114>
 800d050:	460c      	mov	r4, r1
 800d052:	e6b3      	b.n	800cdbc <forward_gemm+0x18>
 800d054:	460e      	mov	r6, r1
 800d056:	e6cf      	b.n	800cdf8 <forward_gemm+0x54>
 800d058:	68d3      	ldr	r3, [r2, #12]
 800d05a:	deff      	udf	#255	; 0xff
 800d05c:	2300      	movs	r3, #0
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	deff      	udf	#255	; 0xff
 800d062:	2300      	movs	r3, #0
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	deff      	udf	#255	; 0xff
 800d068:	2200      	movs	r2, #0
 800d06a:	e725      	b.n	800ceb8 <forward_gemm+0x114>
 800d06c:	3004      	adds	r0, #4
 800d06e:	4583      	cmp	fp, r0
 800d070:	eb09 020c 	add.w	r2, r9, ip
 800d074:	44c4      	add	ip, r8
 800d076:	d0ce      	beq.n	800d016 <forward_gemm+0x272>
 800d078:	2f00      	cmp	r7, #0
 800d07a:	d1a9      	bne.n	800cfd0 <forward_gemm+0x22c>
 800d07c:	eef0 7a45 	vmov.f32	s15, s10
 800d080:	e7b8      	b.n	800cff4 <forward_gemm+0x250>
 800d082:	bf00      	nop
 800d084:	00000000 	.word	0x00000000

0800d088 <pool_func_mp_array_f32>:
 800d088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d08c:	b093      	sub	sp, #76	; 0x4c
 800d08e:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800d092:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800d094:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 800d098:	68a8      	ldr	r0, [r5, #8]
 800d09a:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 800d09e:	9508      	str	r5, [sp, #32]
 800d0a0:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 800d0a4:	9002      	str	r0, [sp, #8]
 800d0a6:	950d      	str	r5, [sp, #52]	; 0x34
 800d0a8:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 800d0ac:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 800d0b0:	9004      	str	r0, [sp, #16]
 800d0b2:	9506      	str	r5, [sp, #24]
 800d0b4:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 800d0b8:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 800d0bc:	9009      	str	r0, [sp, #36]	; 0x24
 800d0be:	950b      	str	r5, [sp, #44]	; 0x2c
 800d0c0:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 800d0c4:	9200      	str	r2, [sp, #0]
 800d0c6:	468a      	mov	sl, r1
 800d0c8:	4699      	mov	r9, r3
 800d0ca:	b95c      	cbnz	r4, 800d0e4 <pool_func_mp_array_f32+0x5c>
 800d0cc:	b950      	cbnz	r0, 800d0e4 <pool_func_mp_array_f32+0x5c>
 800d0ce:	9b04      	ldr	r3, [sp, #16]
 800d0d0:	1a5a      	subs	r2, r3, r1
 800d0d2:	9b06      	ldr	r3, [sp, #24]
 800d0d4:	9908      	ldr	r1, [sp, #32]
 800d0d6:	3a01      	subs	r2, #1
 800d0d8:	3b01      	subs	r3, #1
 800d0da:	fb13 2301 	smlabb	r3, r3, r1, r2
 800d0de:	041a      	lsls	r2, r3, #16
 800d0e0:	f100 809b 	bmi.w	800d21a <pool_func_mp_array_f32+0x192>
 800d0e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	f000 808b 	beq.w	800d202 <pool_func_mp_array_f32+0x17a>
 800d0ec:	9b06      	ldr	r3, [sp, #24]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	f000 8087 	beq.w	800d202 <pool_func_mp_array_f32+0x17a>
 800d0f4:	f1b9 0f00 	cmp.w	r9, #0
 800d0f8:	f000 8083 	beq.w	800d202 <pool_func_mp_array_f32+0x17a>
 800d0fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0fe:	1b1c      	subs	r4, r3, r4
 800d100:	9b04      	ldr	r3, [sp, #16]
 800d102:	1a1b      	subs	r3, r3, r0
 800d104:	b29b      	uxth	r3, r3
 800d106:	4240      	negs	r0, r0
 800d108:	2200      	movs	r2, #0
 800d10a:	b2a1      	uxth	r1, r4
 800d10c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d10e:	b283      	uxth	r3, r0
 800d110:	920e      	str	r2, [sp, #56]	; 0x38
 800d112:	910c      	str	r1, [sp, #48]	; 0x30
 800d114:	9310      	str	r3, [sp, #64]	; 0x40
 800d116:	9c06      	ldr	r4, [sp, #24]
 800d118:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d11c:	fb02 f204 	mul.w	r2, r2, r4
 800d120:	1acb      	subs	r3, r1, r3
 800d122:	920a      	str	r2, [sp, #40]	; 0x28
 800d124:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d126:	9205      	str	r2, [sp, #20]
 800d128:	2000      	movs	r0, #0
 800d12a:	b21b      	sxth	r3, r3
 800d12c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d12e:	9303      	str	r3, [sp, #12]
 800d130:	9007      	str	r0, [sp, #28]
 800d132:	4603      	mov	r3, r0
 800d134:	fa0f f881 	sxth.w	r8, r1
 800d138:	9204      	str	r2, [sp, #16]
 800d13a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d13c:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 800d140:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 800d144:	4413      	add	r3, r2
 800d146:	f04f 0e00 	mov.w	lr, #0
 800d14a:	fb09 f303 	mul.w	r3, r9, r3
 800d14e:	9301      	str	r3, [sp, #4]
 800d150:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 800d154:	4675      	mov	r5, lr
 800d156:	9903      	ldr	r1, [sp, #12]
 800d158:	eddf 7a78 	vldr	s15, [pc, #480]	; 800d33c <pool_func_mp_array_f32+0x2b4>
 800d15c:	4588      	cmp	r8, r1
 800d15e:	dd24      	ble.n	800d1aa <pool_func_mp_array_f32+0x122>
 800d160:	4564      	cmp	r4, ip
 800d162:	dd1e      	ble.n	800d1a2 <pool_func_mp_array_f32+0x11a>
 800d164:	2900      	cmp	r1, #0
 800d166:	fb0a f601 	mul.w	r6, sl, r1
 800d16a:	db1a      	blt.n	800d1a2 <pool_func_mp_array_f32+0x11a>
 800d16c:	9b00      	ldr	r3, [sp, #0]
 800d16e:	4299      	cmp	r1, r3
 800d170:	da17      	bge.n	800d1a2 <pool_func_mp_array_f32+0x11a>
 800d172:	f1bc 0f00 	cmp.w	ip, #0
 800d176:	4663      	mov	r3, ip
 800d178:	db46      	blt.n	800d208 <pool_func_mp_array_f32+0x180>
 800d17a:	18f2      	adds	r2, r6, r3
 800d17c:	fb09 5202 	mla	r2, r9, r2, r5
 800d180:	1c58      	adds	r0, r3, #1
 800d182:	459a      	cmp	sl, r3
 800d184:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 800d188:	b203      	sxth	r3, r0
 800d18a:	dd08      	ble.n	800d19e <pool_func_mp_array_f32+0x116>
 800d18c:	ed92 7a00 	vldr	s14, [r2]
 800d190:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d198:	bfb8      	it	lt
 800d19a:	eef0 7a47 	vmovlt.f32	s15, s14
 800d19e:	429c      	cmp	r4, r3
 800d1a0:	dceb      	bgt.n	800d17a <pool_func_mp_array_f32+0xf2>
 800d1a2:	3101      	adds	r1, #1
 800d1a4:	b209      	sxth	r1, r1
 800d1a6:	4588      	cmp	r8, r1
 800d1a8:	dcda      	bgt.n	800d160 <pool_func_mp_array_f32+0xd8>
 800d1aa:	9b01      	ldr	r3, [sp, #4]
 800d1ac:	f10e 0e01 	add.w	lr, lr, #1
 800d1b0:	441d      	add	r5, r3
 800d1b2:	9b02      	ldr	r3, [sp, #8]
 800d1b4:	fa0f fe8e 	sxth.w	lr, lr
 800d1b8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d1bc:	45ce      	cmp	lr, r9
 800d1be:	edc5 7a00 	vstr	s15, [r5]
 800d1c2:	4675      	mov	r5, lr
 800d1c4:	dbc7      	blt.n	800d156 <pool_func_mp_array_f32+0xce>
 800d1c6:	9b07      	ldr	r3, [sp, #28]
 800d1c8:	9808      	ldr	r0, [sp, #32]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	b219      	sxth	r1, r3
 800d1ce:	9b05      	ldr	r3, [sp, #20]
 800d1d0:	9107      	str	r1, [sp, #28]
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	4402      	add	r2, r0
 800d1d6:	9b04      	ldr	r3, [sp, #16]
 800d1d8:	b292      	uxth	r2, r2
 800d1da:	9205      	str	r2, [sp, #20]
 800d1dc:	9a06      	ldr	r2, [sp, #24]
 800d1de:	4403      	add	r3, r0
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	428a      	cmp	r2, r1
 800d1e4:	9304      	str	r3, [sp, #16]
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	dca7      	bgt.n	800d13a <pool_func_mp_array_f32+0xb2>
 800d1ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	b21a      	sxth	r2, r3
 800d1f0:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 800d1f4:	440b      	add	r3, r1
 800d1f6:	b29b      	uxth	r3, r3
 800d1f8:	930c      	str	r3, [sp, #48]	; 0x30
 800d1fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1fc:	920e      	str	r2, [sp, #56]	; 0x38
 800d1fe:	4293      	cmp	r3, r2
 800d200:	dc89      	bgt.n	800d116 <pool_func_mp_array_f32+0x8e>
 800d202:	b013      	add	sp, #76	; 0x4c
 800d204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d208:	3301      	adds	r3, #1
 800d20a:	b21b      	sxth	r3, r3
 800d20c:	42bb      	cmp	r3, r7
 800d20e:	dac6      	bge.n	800d19e <pool_func_mp_array_f32+0x116>
 800d210:	3301      	adds	r3, #1
 800d212:	b21b      	sxth	r3, r3
 800d214:	42bb      	cmp	r3, r7
 800d216:	dbf7      	blt.n	800d208 <pool_func_mp_array_f32+0x180>
 800d218:	e7c1      	b.n	800d19e <pool_func_mp_array_f32+0x116>
 800d21a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d21c:	9a00      	ldr	r2, [sp, #0]
 800d21e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d220:	1a9a      	subs	r2, r3, r2
 800d222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d224:	3a01      	subs	r2, #1
 800d226:	3b01      	subs	r3, #1
 800d228:	fb13 2301 	smlabb	r3, r3, r1, r2
 800d22c:	041b      	lsls	r3, r3, #16
 800d22e:	f57f af59 	bpl.w	800d0e4 <pool_func_mp_array_f32+0x5c>
 800d232:	fb0a f309 	mul.w	r3, sl, r9
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 800d23c:	930e      	str	r3, [sp, #56]	; 0x38
 800d23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d240:	9001      	str	r0, [sp, #4]
 800d242:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 800d246:	9300      	str	r3, [sp, #0]
 800d248:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800d24c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d24e:	429a      	cmp	r2, r3
 800d250:	ddd7      	ble.n	800d202 <pool_func_mp_array_f32+0x17a>
 800d252:	9a00      	ldr	r2, [sp, #0]
 800d254:	9906      	ldr	r1, [sp, #24]
 800d256:	fa0f f882 	sxth.w	r8, r2
 800d25a:	2900      	cmp	r1, #0
 800d25c:	d062      	beq.n	800d324 <pool_func_mp_array_f32+0x29c>
 800d25e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d260:	fb01 f303 	mul.w	r3, r1, r3
 800d264:	1a12      	subs	r2, r2, r0
 800d266:	9305      	str	r3, [sp, #20]
 800d268:	b213      	sxth	r3, r2
 800d26a:	9307      	str	r3, [sp, #28]
 800d26c:	f1b9 0f00 	cmp.w	r9, #0
 800d270:	d058      	beq.n	800d324 <pool_func_mp_array_f32+0x29c>
 800d272:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d274:	fb02 f303 	mul.w	r3, r2, r3
 800d278:	2600      	movs	r6, #0
 800d27a:	930c      	str	r3, [sp, #48]	; 0x30
 800d27c:	9b04      	ldr	r3, [sp, #16]
 800d27e:	9303      	str	r3, [sp, #12]
 800d280:	4637      	mov	r7, r6
 800d282:	46b2      	mov	sl, r6
 800d284:	9b05      	ldr	r3, [sp, #20]
 800d286:	9611      	str	r6, [sp, #68]	; 0x44
 800d288:	eb0a 0b03 	add.w	fp, sl, r3
 800d28c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d28e:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800d292:	b235      	sxth	r5, r6
 800d294:	18eb      	adds	r3, r5, r3
 800d296:	f04f 0a00 	mov.w	sl, #0
 800d29a:	fb09 f303 	mul.w	r3, r9, r3
 800d29e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d2a0:	930a      	str	r3, [sp, #40]	; 0x28
 800d2a2:	fb09 fb0b 	mul.w	fp, r9, fp
 800d2a6:	46d6      	mov	lr, sl
 800d2a8:	9807      	ldr	r0, [sp, #28]
 800d2aa:	4580      	cmp	r8, r0
 800d2ac:	dd43      	ble.n	800d336 <pool_func_mp_array_f32+0x2ae>
 800d2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2b0:	eddf 7a22 	vldr	s15, [pc, #136]	; 800d33c <pool_func_mp_array_f32+0x2b4>
 800d2b4:	eb0e 0403 	add.w	r4, lr, r3
 800d2b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d2be:	42a9      	cmp	r1, r5
 800d2c0:	dd0f      	ble.n	800d2e2 <pool_func_mp_array_f32+0x25a>
 800d2c2:	4622      	mov	r2, r4
 800d2c4:	462b      	mov	r3, r5
 800d2c6:	ed92 7a00 	vldr	s14, [r2]
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2d4:	b21b      	sxth	r3, r3
 800d2d6:	bfb8      	it	lt
 800d2d8:	eef0 7a47 	vmovlt.f32	s15, s14
 800d2dc:	4299      	cmp	r1, r3
 800d2de:	4462      	add	r2, ip
 800d2e0:	d1f1      	bne.n	800d2c6 <pool_func_mp_array_f32+0x23e>
 800d2e2:	3001      	adds	r0, #1
 800d2e4:	b200      	sxth	r0, r0
 800d2e6:	4580      	cmp	r8, r0
 800d2e8:	4434      	add	r4, r6
 800d2ea:	d1e8      	bne.n	800d2be <pool_func_mp_array_f32+0x236>
 800d2ec:	f10a 0a01 	add.w	sl, sl, #1
 800d2f0:	9a02      	ldr	r2, [sp, #8]
 800d2f2:	eb0b 030e 	add.w	r3, fp, lr
 800d2f6:	fa0f fa8a 	sxth.w	sl, sl
 800d2fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d2fe:	45ca      	cmp	sl, r9
 800d300:	edc3 7a00 	vstr	s15, [r3]
 800d304:	46d6      	mov	lr, sl
 800d306:	dbcf      	blt.n	800d2a8 <pool_func_mp_array_f32+0x220>
 800d308:	9b03      	ldr	r3, [sp, #12]
 800d30a:	9a08      	ldr	r2, [sp, #32]
 800d30c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800d30e:	4413      	add	r3, r2
 800d310:	b29b      	uxth	r3, r3
 800d312:	3701      	adds	r7, #1
 800d314:	9303      	str	r3, [sp, #12]
 800d316:	9b06      	ldr	r3, [sp, #24]
 800d318:	b23f      	sxth	r7, r7
 800d31a:	4416      	add	r6, r2
 800d31c:	42bb      	cmp	r3, r7
 800d31e:	b2b6      	uxth	r6, r6
 800d320:	46ba      	mov	sl, r7
 800d322:	dcaf      	bgt.n	800d284 <pool_func_mp_array_f32+0x1fc>
 800d324:	9b00      	ldr	r3, [sp, #0]
 800d326:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d328:	4413      	add	r3, r2
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	9b01      	ldr	r3, [sp, #4]
 800d330:	3301      	adds	r3, #1
 800d332:	9301      	str	r3, [sp, #4]
 800d334:	e788      	b.n	800d248 <pool_func_mp_array_f32+0x1c0>
 800d336:	eddf 7a01 	vldr	s15, [pc, #4]	; 800d33c <pool_func_mp_array_f32+0x2b4>
 800d33a:	e7d7      	b.n	800d2ec <pool_func_mp_array_f32+0x264>
 800d33c:	cf000000 	.word	0xcf000000

0800d340 <pool_func_ap_array_f32>:
 800d340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d344:	b095      	sub	sp, #84	; 0x54
 800d346:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800d34a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800d34c:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 800d350:	68a8      	ldr	r0, [r5, #8]
 800d352:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 800d356:	9509      	str	r5, [sp, #36]	; 0x24
 800d358:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 800d35c:	9003      	str	r0, [sp, #12]
 800d35e:	950e      	str	r5, [sp, #56]	; 0x38
 800d360:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 800d364:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 800d368:	9004      	str	r0, [sp, #16]
 800d36a:	9507      	str	r5, [sp, #28]
 800d36c:	f8bd 007c 	ldrh.w	r0, [sp, #124]	; 0x7c
 800d370:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
 800d374:	900a      	str	r0, [sp, #40]	; 0x28
 800d376:	950c      	str	r5, [sp, #48]	; 0x30
 800d378:	f8bd 0080 	ldrh.w	r0, [sp, #128]	; 0x80
 800d37c:	9201      	str	r2, [sp, #4]
 800d37e:	468a      	mov	sl, r1
 800d380:	4699      	mov	r9, r3
 800d382:	b95c      	cbnz	r4, 800d39c <pool_func_ap_array_f32+0x5c>
 800d384:	b950      	cbnz	r0, 800d39c <pool_func_ap_array_f32+0x5c>
 800d386:	9b04      	ldr	r3, [sp, #16]
 800d388:	1a5a      	subs	r2, r3, r1
 800d38a:	9b07      	ldr	r3, [sp, #28]
 800d38c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d38e:	3a01      	subs	r2, #1
 800d390:	3b01      	subs	r3, #1
 800d392:	fb13 2301 	smlabb	r3, r3, r1, r2
 800d396:	041a      	lsls	r2, r3, #16
 800d398:	f100 80a6 	bmi.w	800d4e8 <pool_func_ap_array_f32+0x1a8>
 800d39c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	f000 8093 	beq.w	800d4ca <pool_func_ap_array_f32+0x18a>
 800d3a4:	9b07      	ldr	r3, [sp, #28]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	f000 808f 	beq.w	800d4ca <pool_func_ap_array_f32+0x18a>
 800d3ac:	f1b9 0f00 	cmp.w	r9, #0
 800d3b0:	f000 808b 	beq.w	800d4ca <pool_func_ap_array_f32+0x18a>
 800d3b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3b6:	ed9f 6a9f 	vldr	s12, [pc, #636]	; 800d634 <pool_func_ap_array_f32+0x2f4>
 800d3ba:	1b1c      	subs	r4, r3, r4
 800d3bc:	9b04      	ldr	r3, [sp, #16]
 800d3be:	1a1b      	subs	r3, r3, r0
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	4240      	negs	r0, r0
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	b2a1      	uxth	r1, r4
 800d3c8:	9310      	str	r3, [sp, #64]	; 0x40
 800d3ca:	b283      	uxth	r3, r0
 800d3cc:	920f      	str	r2, [sp, #60]	; 0x3c
 800d3ce:	910d      	str	r1, [sp, #52]	; 0x34
 800d3d0:	9311      	str	r3, [sp, #68]	; 0x44
 800d3d2:	9c07      	ldr	r4, [sp, #28]
 800d3d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d3d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3d8:	fb02 f204 	mul.w	r2, r2, r4
 800d3dc:	1acb      	subs	r3, r1, r3
 800d3de:	920b      	str	r2, [sp, #44]	; 0x2c
 800d3e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d3e2:	9206      	str	r2, [sp, #24]
 800d3e4:	2000      	movs	r0, #0
 800d3e6:	b21b      	sxth	r3, r3
 800d3e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d3ea:	9304      	str	r3, [sp, #16]
 800d3ec:	9008      	str	r0, [sp, #32]
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	fa0f f881 	sxth.w	r8, r1
 800d3f4:	9205      	str	r2, [sp, #20]
 800d3f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d3f8:	f9bd 4018 	ldrsh.w	r4, [sp, #24]
 800d3fc:	f9bd c014 	ldrsh.w	ip, [sp, #20]
 800d400:	4413      	add	r3, r2
 800d402:	f04f 0e00 	mov.w	lr, #0
 800d406:	fb09 f303 	mul.w	r3, r9, r3
 800d40a:	9302      	str	r3, [sp, #8]
 800d40c:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 800d410:	4675      	mov	r5, lr
 800d412:	9904      	ldr	r1, [sp, #16]
 800d414:	4588      	cmp	r8, r1
 800d416:	dd64      	ble.n	800d4e2 <pool_func_ap_array_f32+0x1a2>
 800d418:	2300      	movs	r3, #0
 800d41a:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800d638 <pool_func_ap_array_f32+0x2f8>
 800d41e:	9300      	str	r3, [sp, #0]
 800d420:	4564      	cmp	r4, ip
 800d422:	dd1c      	ble.n	800d45e <pool_func_ap_array_f32+0x11e>
 800d424:	2900      	cmp	r1, #0
 800d426:	fb0a f601 	mul.w	r6, sl, r1
 800d42a:	db18      	blt.n	800d45e <pool_func_ap_array_f32+0x11e>
 800d42c:	9b01      	ldr	r3, [sp, #4]
 800d42e:	4299      	cmp	r1, r3
 800d430:	da15      	bge.n	800d45e <pool_func_ap_array_f32+0x11e>
 800d432:	f1bc 0f00 	cmp.w	ip, #0
 800d436:	4663      	mov	r3, ip
 800d438:	db4a      	blt.n	800d4d0 <pool_func_ap_array_f32+0x190>
 800d43a:	18f2      	adds	r2, r6, r3
 800d43c:	1c58      	adds	r0, r3, #1
 800d43e:	fb09 5202 	mla	r2, r9, r2, r5
 800d442:	459a      	cmp	sl, r3
 800d444:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 800d448:	b203      	sxth	r3, r0
 800d44a:	dd06      	ble.n	800d45a <pool_func_ap_array_f32+0x11a>
 800d44c:	edd2 7a00 	vldr	s15, [r2]
 800d450:	9a00      	ldr	r2, [sp, #0]
 800d452:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d456:	3201      	adds	r2, #1
 800d458:	9200      	str	r2, [sp, #0]
 800d45a:	429c      	cmp	r4, r3
 800d45c:	dced      	bgt.n	800d43a <pool_func_ap_array_f32+0xfa>
 800d45e:	3101      	adds	r1, #1
 800d460:	b209      	sxth	r1, r1
 800d462:	4588      	cmp	r8, r1
 800d464:	dcdc      	bgt.n	800d420 <pool_func_ap_array_f32+0xe0>
 800d466:	eddd 7a00 	vldr	s15, [sp]
 800d46a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d46e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d472:	9b02      	ldr	r3, [sp, #8]
 800d474:	f10e 0e01 	add.w	lr, lr, #1
 800d478:	441d      	add	r5, r3
 800d47a:	9b03      	ldr	r3, [sp, #12]
 800d47c:	fa0f fe8e 	sxth.w	lr, lr
 800d480:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d484:	45ce      	cmp	lr, r9
 800d486:	edc5 6a00 	vstr	s13, [r5]
 800d48a:	4675      	mov	r5, lr
 800d48c:	dbc1      	blt.n	800d412 <pool_func_ap_array_f32+0xd2>
 800d48e:	9b08      	ldr	r3, [sp, #32]
 800d490:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d492:	3301      	adds	r3, #1
 800d494:	b219      	sxth	r1, r3
 800d496:	9b06      	ldr	r3, [sp, #24]
 800d498:	9108      	str	r1, [sp, #32]
 800d49a:	461a      	mov	r2, r3
 800d49c:	4402      	add	r2, r0
 800d49e:	9b05      	ldr	r3, [sp, #20]
 800d4a0:	b292      	uxth	r2, r2
 800d4a2:	9206      	str	r2, [sp, #24]
 800d4a4:	9a07      	ldr	r2, [sp, #28]
 800d4a6:	4403      	add	r3, r0
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	428a      	cmp	r2, r1
 800d4ac:	9305      	str	r3, [sp, #20]
 800d4ae:	460b      	mov	r3, r1
 800d4b0:	dca1      	bgt.n	800d3f6 <pool_func_ap_array_f32+0xb6>
 800d4b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	b21a      	sxth	r2, r3
 800d4b8:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800d4bc:	440b      	add	r3, r1
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	930d      	str	r3, [sp, #52]	; 0x34
 800d4c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4c4:	920f      	str	r2, [sp, #60]	; 0x3c
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	dc83      	bgt.n	800d3d2 <pool_func_ap_array_f32+0x92>
 800d4ca:	b015      	add	sp, #84	; 0x54
 800d4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	b21b      	sxth	r3, r3
 800d4d4:	42bb      	cmp	r3, r7
 800d4d6:	dac0      	bge.n	800d45a <pool_func_ap_array_f32+0x11a>
 800d4d8:	3301      	adds	r3, #1
 800d4da:	b21b      	sxth	r3, r3
 800d4dc:	42bb      	cmp	r3, r7
 800d4de:	dbf7      	blt.n	800d4d0 <pool_func_ap_array_f32+0x190>
 800d4e0:	e7bb      	b.n	800d45a <pool_func_ap_array_f32+0x11a>
 800d4e2:	eef0 6a46 	vmov.f32	s13, s12
 800d4e6:	e7c4      	b.n	800d472 <pool_func_ap_array_f32+0x132>
 800d4e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4ea:	9a01      	ldr	r2, [sp, #4]
 800d4ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d4ee:	1a9a      	subs	r2, r3, r2
 800d4f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4f2:	3a01      	subs	r2, #1
 800d4f4:	3b01      	subs	r3, #1
 800d4f6:	fb13 2301 	smlabb	r3, r3, r1, r2
 800d4fa:	041b      	lsls	r3, r3, #16
 800d4fc:	f57f af4e 	bpl.w	800d39c <pool_func_ap_array_f32+0x5c>
 800d500:	fb09 f30a 	mul.w	r3, r9, sl
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	e9cd ba11 	strd	fp, sl, [sp, #68]	; 0x44
 800d50a:	9310      	str	r3, [sp, #64]	; 0x40
 800d50c:	ed9f 6a49 	vldr	s12, [pc, #292]	; 800d634 <pool_func_ap_array_f32+0x2f4>
 800d510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d512:	9001      	str	r0, [sp, #4]
 800d514:	ea4f 0e89 	mov.w	lr, r9, lsl #2
 800d518:	9300      	str	r3, [sp, #0]
 800d51a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800d51e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d520:	429a      	cmp	r2, r3
 800d522:	ddd2      	ble.n	800d4ca <pool_func_ap_array_f32+0x18a>
 800d524:	9a00      	ldr	r2, [sp, #0]
 800d526:	9907      	ldr	r1, [sp, #28]
 800d528:	fa0f fc82 	sxth.w	ip, r2
 800d52c:	2900      	cmp	r1, #0
 800d52e:	d074      	beq.n	800d61a <pool_func_ap_array_f32+0x2da>
 800d530:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d532:	fb01 f303 	mul.w	r3, r1, r3
 800d536:	1a12      	subs	r2, r2, r0
 800d538:	9306      	str	r3, [sp, #24]
 800d53a:	b213      	sxth	r3, r2
 800d53c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d53e:	f1b9 0f00 	cmp.w	r9, #0
 800d542:	d06a      	beq.n	800d61a <pool_func_ap_array_f32+0x2da>
 800d544:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d546:	fb02 f303 	mul.w	r3, r2, r3
 800d54a:	f04f 0b00 	mov.w	fp, #0
 800d54e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d550:	9b04      	ldr	r3, [sp, #16]
 800d552:	f8cd b014 	str.w	fp, [sp, #20]
 800d556:	46da      	mov	sl, fp
 800d558:	9302      	str	r3, [sp, #8]
 800d55a:	9b06      	ldr	r3, [sp, #24]
 800d55c:	9902      	ldr	r1, [sp, #8]
 800d55e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800d562:	eb0a 0203 	add.w	r2, sl, r3
 800d566:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d568:	fa0f f78b 	sxth.w	r7, fp
 800d56c:	1e4e      	subs	r6, r1, #1
 800d56e:	18fb      	adds	r3, r7, r3
 800d570:	eba6 060b 	sub.w	r6, r6, fp
 800d574:	f04f 0a00 	mov.w	sl, #0
 800d578:	fb09 f202 	mul.w	r2, r9, r2
 800d57c:	fb09 f303 	mul.w	r3, r9, r3
 800d580:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 800d584:	9208      	str	r2, [sp, #32]
 800d586:	930d      	str	r3, [sp, #52]	; 0x34
 800d588:	b2b6      	uxth	r6, r6
 800d58a:	46d0      	mov	r8, sl
 800d58c:	b209      	sxth	r1, r1
 800d58e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d590:	4584      	cmp	ip, r0
 800d592:	dd4b      	ble.n	800d62c <pool_func_ap_array_f32+0x2ec>
 800d594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d596:	eddf 7a28 	vldr	s15, [pc, #160]	; 800d638 <pool_func_ap_array_f32+0x2f8>
 800d59a:	eb08 0503 	add.w	r5, r8, r3
 800d59e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d5a0:	2400      	movs	r4, #0
 800d5a2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d5a6:	42b9      	cmp	r1, r7
 800d5a8:	dd0c      	ble.n	800d5c4 <pool_func_ap_array_f32+0x284>
 800d5aa:	462a      	mov	r2, r5
 800d5ac:	463b      	mov	r3, r7
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	ed92 7a00 	vldr	s14, [r2]
 800d5b4:	b21b      	sxth	r3, r3
 800d5b6:	428b      	cmp	r3, r1
 800d5b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d5bc:	4472      	add	r2, lr
 800d5be:	d1f6      	bne.n	800d5ae <pool_func_ap_array_f32+0x26e>
 800d5c0:	3401      	adds	r4, #1
 800d5c2:	4434      	add	r4, r6
 800d5c4:	3001      	adds	r0, #1
 800d5c6:	b200      	sxth	r0, r0
 800d5c8:	4584      	cmp	ip, r0
 800d5ca:	445d      	add	r5, fp
 800d5cc:	d1eb      	bne.n	800d5a6 <pool_func_ap_array_f32+0x266>
 800d5ce:	ee07 4a10 	vmov	s14, r4
 800d5d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d5d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d5da:	9b08      	ldr	r3, [sp, #32]
 800d5dc:	9a03      	ldr	r2, [sp, #12]
 800d5de:	f10a 0a01 	add.w	sl, sl, #1
 800d5e2:	4443      	add	r3, r8
 800d5e4:	fa0f fa8a 	sxth.w	sl, sl
 800d5e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d5ec:	45ca      	cmp	sl, r9
 800d5ee:	46d0      	mov	r8, sl
 800d5f0:	edc3 6a00 	vstr	s13, [r3]
 800d5f4:	dbcb      	blt.n	800d58e <pool_func_ap_array_f32+0x24e>
 800d5f6:	9b05      	ldr	r3, [sp, #20]
 800d5f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d5fa:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800d5fe:	3301      	adds	r3, #1
 800d600:	b21a      	sxth	r2, r3
 800d602:	9b02      	ldr	r3, [sp, #8]
 800d604:	9205      	str	r2, [sp, #20]
 800d606:	440b      	add	r3, r1
 800d608:	b29b      	uxth	r3, r3
 800d60a:	9302      	str	r3, [sp, #8]
 800d60c:	9b07      	ldr	r3, [sp, #28]
 800d60e:	448b      	add	fp, r1
 800d610:	4293      	cmp	r3, r2
 800d612:	fa1f fb8b 	uxth.w	fp, fp
 800d616:	4692      	mov	sl, r2
 800d618:	dc9f      	bgt.n	800d55a <pool_func_ap_array_f32+0x21a>
 800d61a:	9b00      	ldr	r3, [sp, #0]
 800d61c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d61e:	4413      	add	r3, r2
 800d620:	b29b      	uxth	r3, r3
 800d622:	9300      	str	r3, [sp, #0]
 800d624:	9b01      	ldr	r3, [sp, #4]
 800d626:	3301      	adds	r3, #1
 800d628:	9301      	str	r3, [sp, #4]
 800d62a:	e776      	b.n	800d51a <pool_func_ap_array_f32+0x1da>
 800d62c:	eef0 6a46 	vmov.f32	s13, s12
 800d630:	e7d3      	b.n	800d5da <pool_func_ap_array_f32+0x29a>
 800d632:	bf00      	nop
 800d634:	7fc00000 	.word	0x7fc00000
 800d638:	00000000 	.word	0x00000000

0800d63c <forward_sigmoid>:
 800d63c:	6982      	ldr	r2, [r0, #24]
 800d63e:	8813      	ldrh	r3, [r2, #0]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d040      	beq.n	800d6c6 <forward_sigmoid+0x8a>
 800d644:	6851      	ldr	r1, [r2, #4]
 800d646:	684a      	ldr	r2, [r1, #4]
 800d648:	b102      	cbz	r2, 800d64c <forward_sigmoid+0x10>
 800d64a:	6812      	ldr	r2, [r2, #0]
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d937      	bls.n	800d6c0 <forward_sigmoid+0x84>
 800d650:	b570      	push	{r4, r5, r6, lr}
 800d652:	ed2d 8b02 	vpush	{d8}
 800d656:	690b      	ldr	r3, [r1, #16]
 800d658:	b103      	cbz	r3, 800d65c <forward_sigmoid+0x20>
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	6999      	ldr	r1, [r3, #24]
 800d65e:	6893      	ldr	r3, [r2, #8]
 800d660:	6996      	ldr	r6, [r2, #24]
 800d662:	688d      	ldr	r5, [r1, #8]
 800d664:	68b4      	ldr	r4, [r6, #8]
 800d666:	0a1b      	lsrs	r3, r3, #8
 800d668:	d010      	beq.n	800d68c <forward_sigmoid+0x50>
 800d66a:	68d0      	ldr	r0, [r2, #12]
 800d66c:	2201      	movs	r2, #1
 800d66e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d672:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d676:	4298      	cmp	r0, r3
 800d678:	fb01 f202 	mul.w	r2, r1, r2
 800d67c:	d1f9      	bne.n	800d672 <forward_sigmoid+0x36>
 800d67e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800d682:	3a01      	subs	r2, #1
 800d684:	0092      	lsls	r2, r2, #2
 800d686:	18a4      	adds	r4, r4, r2
 800d688:	4415      	add	r5, r2
 800d68a:	d216      	bcs.n	800d6ba <forward_sigmoid+0x7e>
 800d68c:	3404      	adds	r4, #4
 800d68e:	3504      	adds	r5, #4
 800d690:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800d694:	ed14 0a01 	vldr	s0, [r4, #-4]
 800d698:	eeb1 0a40 	vneg.f32	s0, s0
 800d69c:	f004 fd5c 	bl	8012158 <expf>
 800d6a0:	ee30 0a08 	vadd.f32	s0, s0, s16
 800d6a4:	1f22      	subs	r2, r4, #4
 800d6a6:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800d6aa:	f1a4 0308 	sub.w	r3, r4, #8
 800d6ae:	4614      	mov	r4, r2
 800d6b0:	ed65 7a01 	vstmdb	r5!, {s15}
 800d6b4:	68b2      	ldr	r2, [r6, #8]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d9ec      	bls.n	800d694 <forward_sigmoid+0x58>
 800d6ba:	ecbd 8b02 	vpop	{d8}
 800d6be:	bd70      	pop	{r4, r5, r6, pc}
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	deff      	udf	#255	; 0xff
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	deff      	udf	#255	; 0xff
 800d6ca:	bf00      	nop

0800d6cc <nl_func_relu_array_f32>:
 800d6cc:	b410      	push	{r4}
 800d6ce:	698c      	ldr	r4, [r1, #24]
 800d6d0:	6981      	ldr	r1, [r0, #24]
 800d6d2:	68a3      	ldr	r3, [r4, #8]
 800d6d4:	6889      	ldr	r1, [r1, #8]
 800d6d6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800d6da:	3a01      	subs	r2, #1
 800d6dc:	0092      	lsls	r2, r2, #2
 800d6de:	189b      	adds	r3, r3, r2
 800d6e0:	d216      	bcs.n	800d710 <nl_func_relu_array_f32+0x44>
 800d6e2:	3204      	adds	r2, #4
 800d6e4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d718 <nl_func_relu_array_f32+0x4c>
 800d6e8:	4411      	add	r1, r2
 800d6ea:	3304      	adds	r3, #4
 800d6ec:	ed53 7a01 	vldr	s15, [r3, #-4]
 800d6f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6f8:	bfb8      	it	lt
 800d6fa:	eef0 7a47 	vmovlt.f32	s15, s14
 800d6fe:	ed61 7a01 	vstmdb	r1!, {s15}
 800d702:	68a0      	ldr	r0, [r4, #8]
 800d704:	f1a3 0208 	sub.w	r2, r3, #8
 800d708:	4290      	cmp	r0, r2
 800d70a:	f1a3 0304 	sub.w	r3, r3, #4
 800d70e:	d9ed      	bls.n	800d6ec <nl_func_relu_array_f32+0x20>
 800d710:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d714:	4770      	bx	lr
 800d716:	bf00      	nop
 800d718:	00000000 	.word	0x00000000

0800d71c <forward_eltwise>:
 800d71c:	6982      	ldr	r2, [r0, #24]
 800d71e:	8811      	ldrh	r1, [r2, #0]
 800d720:	2900      	cmp	r1, #0
 800d722:	f000 8134 	beq.w	800d98e <forward_eltwise+0x272>
 800d726:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72a:	6853      	ldr	r3, [r2, #4]
 800d72c:	b09d      	sub	sp, #116	; 0x74
 800d72e:	2b00      	cmp	r3, #0
 800d730:	f000 812f 	beq.w	800d992 <forward_eltwise+0x276>
 800d734:	881e      	ldrh	r6, [r3, #0]
 800d736:	685f      	ldr	r7, [r3, #4]
 800d738:	b107      	cbz	r7, 800d73c <forward_eltwise+0x20>
 800d73a:	683f      	ldr	r7, [r7, #0]
 800d73c:	2901      	cmp	r1, #1
 800d73e:	f240 811c 	bls.w	800d97a <forward_eltwise+0x25e>
 800d742:	691b      	ldr	r3, [r3, #16]
 800d744:	2b00      	cmp	r3, #0
 800d746:	f000 8126 	beq.w	800d996 <forward_eltwise+0x27a>
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	9300      	str	r3, [sp, #0]
 800d74e:	2300      	movs	r3, #0
 800d750:	ac12      	add	r4, sp, #72	; 0x48
 800d752:	ad0d      	add	r5, sp, #52	; 0x34
 800d754:	a917      	add	r1, sp, #92	; 0x5c
 800d756:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800d75a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800d75e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 800d762:	9317      	str	r3, [sp, #92]	; 0x5c
 800d764:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 800d768:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 800d76c:	940a      	str	r4, [sp, #40]	; 0x28
 800d76e:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
 800d772:	f240 5402 	movw	r4, #1282	; 0x502
 800d776:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
 800d77a:	2e01      	cmp	r6, #1
 800d77c:	f240 5301 	movw	r3, #1281	; 0x501
 800d780:	9508      	str	r5, [sp, #32]
 800d782:	910c      	str	r1, [sp, #48]	; 0x30
 800d784:	9407      	str	r4, [sp, #28]
 800d786:	9409      	str	r4, [sp, #36]	; 0x24
 800d788:	930b      	str	r3, [sp, #44]	; 0x2c
 800d78a:	f240 80f3 	bls.w	800d974 <forward_eltwise+0x258>
 800d78e:	e9d0 8307 	ldrd	r8, r3, [r0, #28]
 800d792:	9305      	str	r3, [sp, #20]
 800d794:	00b3      	lsls	r3, r6, #2
 800d796:	9303      	str	r3, [sp, #12]
 800d798:	2304      	movs	r3, #4
 800d79a:	9302      	str	r3, [sp, #8]
 800d79c:	8813      	ldrh	r3, [r2, #0]
 800d79e:	9004      	str	r0, [sp, #16]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	f000 80a0 	beq.w	800d8e6 <forward_eltwise+0x1ca>
 800d7a6:	6853      	ldr	r3, [r2, #4]
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	f000 809d 	beq.w	800d8ea <forward_eltwise+0x1ce>
 800d7b0:	9a02      	ldr	r2, [sp, #8]
 800d7b2:	f853 b002 	ldr.w	fp, [r3, r2]
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	f8db 2008 	ldr.w	r2, [fp, #8]
 800d7bc:	405a      	eors	r2, r3
 800d7be:	f032 02ff 	bics.w	r2, r2, #255	; 0xff
 800d7c2:	f10b 0a08 	add.w	sl, fp, #8
 800d7c6:	f107 0908 	add.w	r9, r7, #8
 800d7ca:	f000 8090 	beq.w	800d8ee <forward_eltwise+0x1d2>
 800d7ce:	9b00      	ldr	r3, [sp, #0]
 800d7d0:	69b9      	ldr	r1, [r7, #24]
 800d7d2:	f8db 2018 	ldr.w	r2, [fp, #24]
 800d7d6:	699b      	ldr	r3, [r3, #24]
 800d7d8:	688d      	ldr	r5, [r1, #8]
 800d7da:	6894      	ldr	r4, [r2, #8]
 800d7dc:	689e      	ldr	r6, [r3, #8]
 800d7de:	a80b      	add	r0, sp, #44	; 0x2c
 800d7e0:	4652      	mov	r2, sl
 800d7e2:	4649      	mov	r1, r9
 800d7e4:	f000 fa26 	bl	800dc34 <core_get_broadcasted_shape>
 800d7e8:	9a00      	ldr	r2, [sp, #0]
 800d7ea:	f8db 1014 	ldr.w	r1, [fp, #20]
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	6952      	ldr	r2, [r2, #20]
 800d7f2:	f8d1 b004 	ldr.w	fp, [r1, #4]
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	6857      	ldr	r7, [r2, #4]
 800d7fa:	4649      	mov	r1, r9
 800d7fc:	aa0b      	add	r2, sp, #44	; 0x2c
 800d7fe:	a807      	add	r0, sp, #28
 800d800:	f000 fa44 	bl	800dc8c <core_compute_offsets_in_bytes>
 800d804:	465b      	mov	r3, fp
 800d806:	aa0b      	add	r2, sp, #44	; 0x2c
 800d808:	4651      	mov	r1, sl
 800d80a:	a809      	add	r0, sp, #36	; 0x24
 800d80c:	f000 fa3e 	bl	800dc8c <core_compute_offsets_in_bytes>
 800d810:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d812:	68d3      	ldr	r3, [r2, #12]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d059      	beq.n	800d8cc <forward_eltwise+0x1b0>
 800d818:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800d81c:	2100      	movs	r1, #0
 800d81e:	9101      	str	r1, [sp, #4]
 800d820:	4619      	mov	r1, r3
 800d822:	4663      	mov	r3, ip
 800d824:	2b00      	cmp	r3, #0
 800d826:	f000 80a1 	beq.w	800d96c <forward_eltwise+0x250>
 800d82a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d82c:	f04f 0b00 	mov.w	fp, #0
 800d830:	f3c1 2e17 	ubfx	lr, r1, #8, #24
 800d834:	f04f 0a00 	mov.w	sl, #0
 800d838:	f1be 0f04 	cmp.w	lr, #4
 800d83c:	bf8c      	ite	hi
 800d83e:	6913      	ldrhi	r3, [r2, #16]
 800d840:	2301      	movls	r3, #1
 800d842:	459a      	cmp	sl, r3
 800d844:	d228      	bcs.n	800d898 <forward_eltwise+0x17c>
 800d846:	6853      	ldr	r3, [r2, #4]
 800d848:	b1ab      	cbz	r3, 800d876 <forward_eltwise+0x15a>
 800d84a:	f04f 0900 	mov.w	r9, #0
 800d84e:	4622      	mov	r2, r4
 800d850:	4629      	mov	r1, r5
 800d852:	4630      	mov	r0, r6
 800d854:	47c0      	blx	r8
 800d856:	9908      	ldr	r1, [sp, #32]
 800d858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d85a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d85c:	6848      	ldr	r0, [r1, #4]
 800d85e:	6859      	ldr	r1, [r3, #4]
 800d860:	6853      	ldr	r3, [r2, #4]
 800d862:	f109 0901 	add.w	r9, r9, #1
 800d866:	454b      	cmp	r3, r9
 800d868:	443e      	add	r6, r7
 800d86a:	4405      	add	r5, r0
 800d86c:	440c      	add	r4, r1
 800d86e:	d8ee      	bhi.n	800d84e <forward_eltwise+0x132>
 800d870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d872:	f3c3 2e17 	ubfx	lr, r3, #8, #24
 800d876:	9b07      	ldr	r3, [sp, #28]
 800d878:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800d87c:	d302      	bcc.n	800d884 <forward_eltwise+0x168>
 800d87e:	9b08      	ldr	r3, [sp, #32]
 800d880:	691b      	ldr	r3, [r3, #16]
 800d882:	441d      	add	r5, r3
 800d884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d886:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800d88a:	d302      	bcc.n	800d892 <forward_eltwise+0x176>
 800d88c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d88e:	691b      	ldr	r3, [r3, #16]
 800d890:	441c      	add	r4, r3
 800d892:	f10a 0a01 	add.w	sl, sl, #1
 800d896:	e7cf      	b.n	800d838 <forward_eltwise+0x11c>
 800d898:	9b08      	ldr	r3, [sp, #32]
 800d89a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d89c:	6899      	ldr	r1, [r3, #8]
 800d89e:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800d8a2:	f10b 0b01 	add.w	fp, fp, #1
 800d8a6:	440d      	add	r5, r1
 800d8a8:	6881      	ldr	r1, [r0, #8]
 800d8aa:	45dc      	cmp	ip, fp
 800d8ac:	440c      	add	r4, r1
 800d8ae:	d8c1      	bhi.n	800d834 <forward_eltwise+0x118>
 800d8b0:	68d1      	ldr	r1, [r2, #12]
 800d8b2:	469a      	mov	sl, r3
 800d8b4:	4663      	mov	r3, ip
 800d8b6:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800d8ba:	9801      	ldr	r0, [sp, #4]
 800d8bc:	f8da e00c 	ldr.w	lr, [sl, #12]
 800d8c0:	3001      	adds	r0, #1
 800d8c2:	4288      	cmp	r0, r1
 800d8c4:	9001      	str	r0, [sp, #4]
 800d8c6:	4475      	add	r5, lr
 800d8c8:	4464      	add	r4, ip
 800d8ca:	d3ab      	bcc.n	800d824 <forward_eltwise+0x108>
 800d8cc:	9b02      	ldr	r3, [sp, #8]
 800d8ce:	9a03      	ldr	r2, [sp, #12]
 800d8d0:	3304      	adds	r3, #4
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	9302      	str	r3, [sp, #8]
 800d8d6:	d04d      	beq.n	800d974 <forward_eltwise+0x258>
 800d8d8:	9b04      	ldr	r3, [sp, #16]
 800d8da:	9f00      	ldr	r7, [sp, #0]
 800d8dc:	699a      	ldr	r2, [r3, #24]
 800d8de:	8813      	ldrh	r3, [r2, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	f47f af60 	bne.w	800d7a6 <forward_eltwise+0x8a>
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	deff      	udf	#255	; 0xff
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	deff      	udf	#255	; 0xff
 800d8ee:	0a1b      	lsrs	r3, r3, #8
 800d8f0:	d01c      	beq.n	800d92c <forward_eltwise+0x210>
 800d8f2:	1e58      	subs	r0, r3, #1
 800d8f4:	f8db 400c 	ldr.w	r4, [fp, #12]
 800d8f8:	68fd      	ldr	r5, [r7, #12]
 800d8fa:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 800d8fe:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
 800d902:	4291      	cmp	r1, r2
 800d904:	f47f af63 	bne.w	800d7ce <forward_eltwise+0xb2>
 800d908:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d90c:	3b01      	subs	r3, #1
 800d90e:	009b      	lsls	r3, r3, #2
 800d910:	441d      	add	r5, r3
 800d912:	441c      	add	r4, r3
 800d914:	b150      	cbz	r0, 800d92c <forward_eltwise+0x210>
 800d916:	f855 2d04 	ldr.w	r2, [r5, #-4]!
 800d91a:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800d91e:	429a      	cmp	r2, r3
 800d920:	f100 30ff 	add.w	r0, r0, #4294967295
 800d924:	f47f af53 	bne.w	800d7ce <forward_eltwise+0xb2>
 800d928:	2800      	cmp	r0, #0
 800d92a:	d1f4      	bne.n	800d916 <forward_eltwise+0x1fa>
 800d92c:	9b00      	ldr	r3, [sp, #0]
 800d92e:	69b9      	ldr	r1, [r7, #24]
 800d930:	f8db 2018 	ldr.w	r2, [fp, #24]
 800d934:	699b      	ldr	r3, [r3, #24]
 800d936:	688c      	ldr	r4, [r1, #8]
 800d938:	6895      	ldr	r5, [r2, #8]
 800d93a:	689e      	ldr	r6, [r3, #8]
 800d93c:	4652      	mov	r2, sl
 800d93e:	4649      	mov	r1, r9
 800d940:	a80b      	add	r0, sp, #44	; 0x2c
 800d942:	f000 f977 	bl	800dc34 <core_get_broadcasted_shape>
 800d946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d948:	0a1a      	lsrs	r2, r3, #8
 800d94a:	d019      	beq.n	800d980 <forward_eltwise+0x264>
 800d94c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d94e:	2301      	movs	r3, #1
 800d950:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d954:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d958:	4290      	cmp	r0, r2
 800d95a:	fb01 f303 	mul.w	r3, r1, r3
 800d95e:	d1f9      	bne.n	800d954 <forward_eltwise+0x238>
 800d960:	4621      	mov	r1, r4
 800d962:	462a      	mov	r2, r5
 800d964:	4630      	mov	r0, r6
 800d966:	9c05      	ldr	r4, [sp, #20]
 800d968:	47a0      	blx	r4
 800d96a:	e7af      	b.n	800d8cc <forward_eltwise+0x1b0>
 800d96c:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d970:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d972:	e7a0      	b.n	800d8b6 <forward_eltwise+0x19a>
 800d974:	b01d      	add	sp, #116	; 0x74
 800d976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d97a:	2300      	movs	r3, #0
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	deff      	udf	#255	; 0xff
 800d980:	4621      	mov	r1, r4
 800d982:	2301      	movs	r3, #1
 800d984:	462a      	mov	r2, r5
 800d986:	4630      	mov	r0, r6
 800d988:	9c05      	ldr	r4, [sp, #20]
 800d98a:	47a0      	blx	r4
 800d98c:	e79e      	b.n	800d8cc <forward_eltwise+0x1b0>
 800d98e:	684b      	ldr	r3, [r1, #4]
 800d990:	deff      	udf	#255	; 0xff
 800d992:	461e      	mov	r6, r3
 800d994:	e6cf      	b.n	800d736 <forward_eltwise+0x1a>
 800d996:	9300      	str	r3, [sp, #0]
 800d998:	e6d9      	b.n	800d74e <forward_eltwise+0x32>
 800d99a:	bf00      	nop

0800d99c <ai_check_custom_types>:
 800d99c:	4b13      	ldr	r3, [pc, #76]	; (800d9ec <ai_check_custom_types+0x50>)
 800d99e:	b082      	sub	sp, #8
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	9301      	str	r3, [sp, #4]
 800d9a4:	b118      	cbz	r0, 800d9ae <ai_check_custom_types+0x12>
 800d9a6:	7803      	ldrb	r3, [r0, #0]
 800d9a8:	2b03      	cmp	r3, #3
 800d9aa:	d002      	beq.n	800d9b2 <ai_check_custom_types+0x16>
 800d9ac:	2000      	movs	r0, #0
 800d9ae:	b002      	add	sp, #8
 800d9b0:	4770      	bx	lr
 800d9b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d004      	beq.n	800d9c4 <ai_check_custom_types+0x28>
 800d9ba:	2001      	movs	r0, #1
 800d9bc:	f080 0001 	eor.w	r0, r0, #1
 800d9c0:	b002      	add	sp, #8
 800d9c2:	4770      	bx	lr
 800d9c4:	7842      	ldrb	r2, [r0, #1]
 800d9c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	f100 0001 	add.w	r0, r0, #1
 800d9d0:	d1f3      	bne.n	800d9ba <ai_check_custom_types+0x1e>
 800d9d2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800d9d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d1ed      	bne.n	800d9ba <ai_check_custom_types+0x1e>
 800d9de:	7842      	ldrb	r2, [r0, #1]
 800d9e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d1e8      	bne.n	800d9ba <ai_check_custom_types+0x1e>
 800d9e8:	2000      	movs	r0, #0
 800d9ea:	e7e7      	b.n	800d9bc <ai_check_custom_types+0x20>
 800d9ec:	08021e24 	.word	0x08021e24

0800d9f0 <ai_layers_init_all>:
 800d9f0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800d9f2:	b17a      	cbz	r2, 800da14 <ai_layers_init_all+0x24>
 800d9f4:	6913      	ldr	r3, [r2, #16]
 800d9f6:	60d0      	str	r0, [r2, #12]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	f04f 0201 	mov.w	r2, #1
 800d9fe:	d009      	beq.n	800da14 <ai_layers_init_all+0x24>
 800da00:	b143      	cbz	r3, 800da14 <ai_layers_init_all+0x24>
 800da02:	6919      	ldr	r1, [r3, #16]
 800da04:	60d8      	str	r0, [r3, #12]
 800da06:	4299      	cmp	r1, r3
 800da08:	f102 0201 	add.w	r2, r2, #1
 800da0c:	d002      	beq.n	800da14 <ai_layers_init_all+0x24>
 800da0e:	460b      	mov	r3, r1
 800da10:	2b00      	cmp	r3, #0
 800da12:	d1f6      	bne.n	800da02 <ai_layers_init_all+0x12>
 800da14:	4610      	mov	r0, r2
 800da16:	4770      	bx	lr

0800da18 <ai_layers_post_init_all>:
 800da18:	b538      	push	{r3, r4, r5, lr}
 800da1a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800da1c:	b18c      	cbz	r4, 800da42 <ai_layers_post_init_all+0x2a>
 800da1e:	2500      	movs	r5, #0
 800da20:	6863      	ldr	r3, [r4, #4]
 800da22:	f013 0f01 	tst.w	r3, #1
 800da26:	4620      	mov	r0, r4
 800da28:	d003      	beq.n	800da32 <ai_layers_post_init_all+0x1a>
 800da2a:	6a23      	ldr	r3, [r4, #32]
 800da2c:	b10b      	cbz	r3, 800da32 <ai_layers_post_init_all+0x1a>
 800da2e:	4798      	blx	r3
 800da30:	3501      	adds	r5, #1
 800da32:	6923      	ldr	r3, [r4, #16]
 800da34:	42a3      	cmp	r3, r4
 800da36:	d002      	beq.n	800da3e <ai_layers_post_init_all+0x26>
 800da38:	461c      	mov	r4, r3
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d1f0      	bne.n	800da20 <ai_layers_post_init_all+0x8>
 800da3e:	4628      	mov	r0, r5
 800da40:	bd38      	pop	{r3, r4, r5, pc}
 800da42:	4625      	mov	r5, r4
 800da44:	e7fb      	b.n	800da3e <ai_layers_post_init_all+0x26>
 800da46:	bf00      	nop

0800da48 <ai_layers_forward_all>:
 800da48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da4c:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800da4e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800da50:	4604      	mov	r4, r0
 800da52:	2f00      	cmp	r7, #0
 800da54:	d02c      	beq.n	800dab0 <ai_layers_forward_all+0x68>
 800da56:	2d00      	cmp	r5, #0
 800da58:	d03f      	beq.n	800dada <ai_layers_forward_all+0x92>
 800da5a:	6385      	str	r5, [r0, #56]	; 0x38
 800da5c:	4629      	mov	r1, r5
 800da5e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800da60:	2001      	movs	r0, #1
 800da62:	47b8      	blx	r7
 800da64:	2600      	movs	r6, #0
 800da66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800da68:	46b0      	mov	r8, r6
 800da6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800da6c:	2002      	movs	r0, #2
 800da6e:	47b8      	blx	r7
 800da70:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800da72:	696b      	ldr	r3, [r5, #20]
 800da74:	4628      	mov	r0, r5
 800da76:	4798      	blx	r3
 800da78:	692b      	ldr	r3, [r5, #16]
 800da7a:	429d      	cmp	r5, r3
 800da7c:	f04f 0003 	mov.w	r0, #3
 800da80:	4619      	mov	r1, r3
 800da82:	d009      	beq.n	800da98 <ai_layers_forward_all+0x50>
 800da84:	63a3      	str	r3, [r4, #56]	; 0x38
 800da86:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800da88:	47b8      	blx	r7
 800da8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800da8c:	3601      	adds	r6, #1
 800da8e:	2900      	cmp	r1, #0
 800da90:	d1eb      	bne.n	800da6a <ai_layers_forward_all+0x22>
 800da92:	4630      	mov	r0, r6
 800da94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da98:	2100      	movs	r1, #0
 800da9a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800da9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800daa0:	47b8      	blx	r7
 800daa2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800daa4:	3601      	adds	r6, #1
 800daa6:	2900      	cmp	r1, #0
 800daa8:	d1df      	bne.n	800da6a <ai_layers_forward_all+0x22>
 800daaa:	4630      	mov	r0, r6
 800daac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dab0:	b19d      	cbz	r5, 800dada <ai_layers_forward_all+0x92>
 800dab2:	6385      	str	r5, [r0, #56]	; 0x38
 800dab4:	463e      	mov	r6, r7
 800dab6:	696b      	ldr	r3, [r5, #20]
 800dab8:	4628      	mov	r0, r5
 800daba:	4798      	blx	r3
 800dabc:	692b      	ldr	r3, [r5, #16]
 800dabe:	42ab      	cmp	r3, r5
 800dac0:	f106 0601 	add.w	r6, r6, #1
 800dac4:	d004      	beq.n	800dad0 <ai_layers_forward_all+0x88>
 800dac6:	63a3      	str	r3, [r4, #56]	; 0x38
 800dac8:	461d      	mov	r5, r3
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d1f3      	bne.n	800dab6 <ai_layers_forward_all+0x6e>
 800dace:	e7e0      	b.n	800da92 <ai_layers_forward_all+0x4a>
 800dad0:	2300      	movs	r3, #0
 800dad2:	63a3      	str	r3, [r4, #56]	; 0x38
 800dad4:	4630      	mov	r0, r6
 800dad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dada:	462e      	mov	r6, r5
 800dadc:	4630      	mov	r0, r6
 800dade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dae2:	bf00      	nop

0800dae4 <st_dsp_arm_mat_init_f32>:
 800dae4:	8001      	strh	r1, [r0, #0]
 800dae6:	8042      	strh	r2, [r0, #2]
 800dae8:	6043      	str	r3, [r0, #4]
 800daea:	4770      	bx	lr

0800daec <ai_version_get>:
 800daec:	0212      	lsls	r2, r2, #8
 800daee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800daf2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800daf6:	4770      	bx	lr

0800daf8 <get_tensor_byte_size>:
 800daf8:	6983      	ldr	r3, [r0, #24]
 800dafa:	68c1      	ldr	r1, [r0, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	6940      	ldr	r0, [r0, #20]
 800db00:	4a06      	ldr	r2, [pc, #24]	; (800db1c <get_tensor_byte_size+0x24>)
 800db02:	68c9      	ldr	r1, [r1, #12]
 800db04:	68c0      	ldr	r0, [r0, #12]
 800db06:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800db0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800db0e:	fb00 f001 	mul.w	r0, r0, r1
 800db12:	4293      	cmp	r3, r2
 800db14:	bf04      	itt	eq
 800db16:	3007      	addeq	r0, #7
 800db18:	08c0      	lsreq	r0, r0, #3
 800db1a:	4770      	bx	lr
 800db1c:	000400c0 	.word	0x000400c0

0800db20 <ai_array_to_buffer_fmt>:
 800db20:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800db24:	2b02      	cmp	r3, #2
 800db26:	d036      	beq.n	800db96 <ai_array_to_buffer_fmt+0x76>
 800db28:	4a21      	ldr	r2, [pc, #132]	; (800dbb0 <ai_array_to_buffer_fmt+0x90>)
 800db2a:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800db2e:	4293      	cmp	r3, r2
 800db30:	d00f      	beq.n	800db52 <ai_array_to_buffer_fmt+0x32>
 800db32:	dd12      	ble.n	800db5a <ai_array_to_buffer_fmt+0x3a>
 800db34:	4a1f      	ldr	r2, [pc, #124]	; (800dbb4 <ai_array_to_buffer_fmt+0x94>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d00b      	beq.n	800db52 <ai_array_to_buffer_fmt+0x32>
 800db3a:	dd1e      	ble.n	800db7a <ai_array_to_buffer_fmt+0x5a>
 800db3c:	4a1e      	ldr	r2, [pc, #120]	; (800dbb8 <ai_array_to_buffer_fmt+0x98>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	d007      	beq.n	800db52 <ai_array_to_buffer_fmt+0x32>
 800db42:	dd30      	ble.n	800dba6 <ai_array_to_buffer_fmt+0x86>
 800db44:	4a1d      	ldr	r2, [pc, #116]	; (800dbbc <ai_array_to_buffer_fmt+0x9c>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d003      	beq.n	800db52 <ai_array_to_buffer_fmt+0x32>
 800db4a:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800db4e:	4293      	cmp	r3, r2
 800db50:	d11f      	bne.n	800db92 <ai_array_to_buffer_fmt+0x72>
 800db52:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800db56:	4318      	orrs	r0, r3
 800db58:	4770      	bx	lr
 800db5a:	4a19      	ldr	r2, [pc, #100]	; (800dbc0 <ai_array_to_buffer_fmt+0xa0>)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d0f8      	beq.n	800db52 <ai_array_to_buffer_fmt+0x32>
 800db60:	dd0b      	ble.n	800db7a <ai_array_to_buffer_fmt+0x5a>
 800db62:	4a18      	ldr	r2, [pc, #96]	; (800dbc4 <ai_array_to_buffer_fmt+0xa4>)
 800db64:	4293      	cmp	r3, r2
 800db66:	d0f4      	beq.n	800db52 <ai_array_to_buffer_fmt+0x32>
 800db68:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d0f0      	beq.n	800db52 <ai_array_to_buffer_fmt+0x32>
 800db70:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800db74:	4293      	cmp	r3, r2
 800db76:	d10c      	bne.n	800db92 <ai_array_to_buffer_fmt+0x72>
 800db78:	e7eb      	b.n	800db52 <ai_array_to_buffer_fmt+0x32>
 800db7a:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 800db7e:	4293      	cmp	r3, r2
 800db80:	d0e7      	beq.n	800db52 <ai_array_to_buffer_fmt+0x32>
 800db82:	f502 7260 	add.w	r2, r2, #896	; 0x380
 800db86:	4293      	cmp	r3, r2
 800db88:	d0e3      	beq.n	800db52 <ai_array_to_buffer_fmt+0x32>
 800db8a:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800db8e:	4293      	cmp	r3, r2
 800db90:	d0df      	beq.n	800db52 <ai_array_to_buffer_fmt+0x32>
 800db92:	2340      	movs	r3, #64	; 0x40
 800db94:	e7dd      	b.n	800db52 <ai_array_to_buffer_fmt+0x32>
 800db96:	4b0c      	ldr	r3, [pc, #48]	; (800dbc8 <ai_array_to_buffer_fmt+0xa8>)
 800db98:	4003      	ands	r3, r0
 800db9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800db9e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800dba2:	4318      	orrs	r0, r3
 800dba4:	4770      	bx	lr
 800dba6:	3a0f      	subs	r2, #15
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d0d2      	beq.n	800db52 <ai_array_to_buffer_fmt+0x32>
 800dbac:	e7f1      	b.n	800db92 <ai_array_to_buffer_fmt+0x72>
 800dbae:	bf00      	nop
 800dbb0:	00060440 	.word	0x00060440
 800dbb4:	00840447 	.word	0x00840447
 800dbb8:	0084084f 	.word	0x0084084f
 800dbbc:	00841040 	.word	0x00841040
 800dbc0:	00040447 	.word	0x00040447
 800dbc4:	0004084f 	.word	0x0004084f
 800dbc8:	00803fff 	.word	0x00803fff

0800dbcc <ai_array_get_byte_size>:
 800dbcc:	b1c1      	cbz	r1, 800dc00 <ai_array_get_byte_size+0x34>
 800dbce:	11c3      	asrs	r3, r0, #7
 800dbd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dbd4:	fb01 f102 	mul.w	r1, r1, r2
 800dbd8:	3107      	adds	r1, #7
 800dbda:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800dbde:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800dbe2:	f021 0107 	bic.w	r1, r1, #7
 800dbe6:	2804      	cmp	r0, #4
 800dbe8:	fa21 f102 	lsr.w	r1, r1, r2
 800dbec:	d00a      	beq.n	800dc04 <ai_array_get_byte_size+0x38>
 800dbee:	2808      	cmp	r0, #8
 800dbf0:	d103      	bne.n	800dbfa <ai_array_get_byte_size+0x2e>
 800dbf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbf6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800dbfa:	3107      	adds	r1, #7
 800dbfc:	08c8      	lsrs	r0, r1, #3
 800dbfe:	4770      	bx	lr
 800dc00:	4608      	mov	r0, r1
 800dc02:	4770      	bx	lr
 800dc04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc08:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800dc0c:	3107      	adds	r1, #7
 800dc0e:	08c8      	lsrs	r0, r1, #3
 800dc10:	4770      	bx	lr
 800dc12:	bf00      	nop

0800dc14 <ai_array_get_data_byte_size>:
 800dc14:	b161      	cbz	r1, 800dc30 <ai_array_get_data_byte_size+0x1c>
 800dc16:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800dc1a:	fb01 f103 	mul.w	r1, r1, r3
 800dc1e:	3107      	adds	r1, #7
 800dc20:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800dc24:	f021 0107 	bic.w	r1, r1, #7
 800dc28:	40c1      	lsrs	r1, r0
 800dc2a:	3107      	adds	r1, #7
 800dc2c:	08c8      	lsrs	r0, r1, #3
 800dc2e:	4770      	bx	lr
 800dc30:	4608      	mov	r0, r1
 800dc32:	4770      	bx	lr

0800dc34 <core_get_broadcasted_shape>:
 800dc34:	b4f0      	push	{r4, r5, r6, r7}
 800dc36:	6804      	ldr	r4, [r0, #0]
 800dc38:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800dc3c:	b31c      	cbz	r4, 800dc86 <core_get_broadcasted_shape+0x52>
 800dc3e:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
 800dc42:	3d01      	subs	r5, #1
 800dc44:	4623      	mov	r3, r4
 800dc46:	00ad      	lsls	r5, r5, #2
 800dc48:	e002      	b.n	800dc50 <core_get_broadcasted_shape+0x1c>
 800dc4a:	6804      	ldr	r4, [r0, #0]
 800dc4c:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800dc50:	3b01      	subs	r3, #1
 800dc52:	429c      	cmp	r4, r3
 800dc54:	d914      	bls.n	800dc80 <core_get_broadcasted_shape+0x4c>
 800dc56:	6814      	ldr	r4, [r2, #0]
 800dc58:	680f      	ldr	r7, [r1, #0]
 800dc5a:	ebb3 2f14 	cmp.w	r3, r4, lsr #8
 800dc5e:	bf36      	itet	cc
 800dc60:	6854      	ldrcc	r4, [r2, #4]
 800dc62:	2401      	movcs	r4, #1
 800dc64:	5964      	ldrcc	r4, [r4, r5]
 800dc66:	ebb3 2f17 	cmp.w	r3, r7, lsr #8
 800dc6a:	f04f 0601 	mov.w	r6, #1
 800dc6e:	bf38      	it	cc
 800dc70:	684e      	ldrcc	r6, [r1, #4]
 800dc72:	6847      	ldr	r7, [r0, #4]
 800dc74:	bf38      	it	cc
 800dc76:	5976      	ldrcc	r6, [r6, r5]
 800dc78:	42b4      	cmp	r4, r6
 800dc7a:	bf38      	it	cc
 800dc7c:	4634      	movcc	r4, r6
 800dc7e:	517c      	str	r4, [r7, r5]
 800dc80:	3d04      	subs	r5, #4
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1e1      	bne.n	800dc4a <core_get_broadcasted_shape+0x16>
 800dc86:	bcf0      	pop	{r4, r5, r6, r7}
 800dc88:	4770      	bx	lr
 800dc8a:	bf00      	nop

0800dc8c <core_compute_offsets_in_bytes>:
 800dc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc90:	e9d1 1800 	ldrd	r1, r8, [r1]
 800dc94:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800dc98:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800dc9c:	f8de 5004 	ldr.w	r5, [lr, #4]
 800dca0:	6812      	ldr	r2, [r2, #0]
 800dca2:	f8de 6008 	ldr.w	r6, [lr, #8]
 800dca6:	f8d8 900c 	ldr.w	r9, [r8, #12]
 800dcaa:	b083      	sub	sp, #12
 800dcac:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 800dcb0:	9501      	str	r5, [sp, #4]
 800dcb2:	bf28      	it	cs
 800dcb4:	f8d8 5010 	ldrcs.w	r5, [r8, #16]
 800dcb8:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800dcbc:	bf36      	itet	cc
 800dcbe:	2501      	movcc	r5, #1
 800dcc0:	fb05 fc04 	mulcs.w	ip, r5, r4
 800dcc4:	46a4      	movcc	ip, r4
 800dcc6:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800dcca:	bf28      	it	cs
 800dccc:	f8de 2010 	ldrcs.w	r2, [lr, #16]
 800dcd0:	f8de e00c 	ldr.w	lr, [lr, #12]
 800dcd4:	bf38      	it	cc
 800dcd6:	2201      	movcc	r2, #1
 800dcd8:	4617      	mov	r7, r2
 800dcda:	9200      	str	r2, [sp, #0]
 800dcdc:	6802      	ldr	r2, [r0, #0]
 800dcde:	ebb1 0806 	subs.w	r8, r1, r6
 800dce2:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800dce6:	bf18      	it	ne
 800dce8:	f04f 0801 	movne.w	r8, #1
 800dcec:	ebb5 0a07 	subs.w	sl, r5, r7
 800dcf0:	bf18      	it	ne
 800dcf2:	f04f 0a01 	movne.w	sl, #1
 800dcf6:	2a01      	cmp	r2, #1
 800dcf8:	d965      	bls.n	800ddc6 <core_compute_offsets_in_bytes+0x13a>
 800dcfa:	9a01      	ldr	r2, [sp, #4]
 800dcfc:	6847      	ldr	r7, [r0, #4]
 800dcfe:	1aa2      	subs	r2, r4, r2
 800dd00:	fab2 f282 	clz	r2, r2
 800dd04:	0952      	lsrs	r2, r2, #5
 800dd06:	607a      	str	r2, [r7, #4]
 800dd08:	6802      	ldr	r2, [r0, #0]
 800dd0a:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800dd0e:	2a04      	cmp	r2, #4
 800dd10:	fb04 fb0a 	mul.w	fp, r4, sl
 800dd14:	d90b      	bls.n	800dd2e <core_compute_offsets_in_bytes+0xa2>
 800dd16:	9a00      	ldr	r2, [sp, #0]
 800dd18:	4295      	cmp	r5, r2
 800dd1a:	d06c      	beq.n	800ddf6 <core_compute_offsets_in_bytes+0x16a>
 800dd1c:	f04f 0a00 	mov.w	sl, #0
 800dd20:	6847      	ldr	r7, [r0, #4]
 800dd22:	ebaa 020b 	sub.w	r2, sl, fp
 800dd26:	613a      	str	r2, [r7, #16]
 800dd28:	6802      	ldr	r2, [r0, #0]
 800dd2a:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800dd2e:	42b1      	cmp	r1, r6
 800dd30:	d04d      	beq.n	800ddce <core_compute_offsets_in_bytes+0x142>
 800dd32:	f04f 0a00 	mov.w	sl, #0
 800dd36:	2a02      	cmp	r2, #2
 800dd38:	fb0c f808 	mul.w	r8, ip, r8
 800dd3c:	d908      	bls.n	800dd50 <core_compute_offsets_in_bytes+0xc4>
 800dd3e:	ebaa 0a08 	sub.w	sl, sl, r8
 800dd42:	6847      	ldr	r7, [r0, #4]
 800dd44:	eb0a 020b 	add.w	r2, sl, fp
 800dd48:	60ba      	str	r2, [r7, #8]
 800dd4a:	6802      	ldr	r2, [r0, #0]
 800dd4c:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800dd50:	45f1      	cmp	r9, lr
 800dd52:	d046      	beq.n	800dde2 <core_compute_offsets_in_bytes+0x156>
 800dd54:	2400      	movs	r4, #0
 800dd56:	2a03      	cmp	r2, #3
 800dd58:	d90e      	bls.n	800dd78 <core_compute_offsets_in_bytes+0xec>
 800dd5a:	ebb9 0e0e 	subs.w	lr, r9, lr
 800dd5e:	fb0c f101 	mul.w	r1, ip, r1
 800dd62:	bf18      	it	ne
 800dd64:	f04f 0e01 	movne.w	lr, #1
 800dd68:	6842      	ldr	r2, [r0, #4]
 800dd6a:	fb0e 4411 	mls	r4, lr, r1, r4
 800dd6e:	4444      	add	r4, r8
 800dd70:	60d4      	str	r4, [r2, #12]
 800dd72:	6802      	ldr	r2, [r0, #0]
 800dd74:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800dd78:	2a01      	cmp	r2, #1
 800dd7a:	d911      	bls.n	800dda0 <core_compute_offsets_in_bytes+0x114>
 800dd7c:	6841      	ldr	r1, [r0, #4]
 800dd7e:	684a      	ldr	r2, [r1, #4]
 800dd80:	fb03 f202 	mul.w	r2, r3, r2
 800dd84:	604a      	str	r2, [r1, #4]
 800dd86:	6802      	ldr	r2, [r0, #0]
 800dd88:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800dd8c:	2a04      	cmp	r2, #4
 800dd8e:	d907      	bls.n	800dda0 <core_compute_offsets_in_bytes+0x114>
 800dd90:	6841      	ldr	r1, [r0, #4]
 800dd92:	690a      	ldr	r2, [r1, #16]
 800dd94:	fb03 f202 	mul.w	r2, r3, r2
 800dd98:	610a      	str	r2, [r1, #16]
 800dd9a:	6802      	ldr	r2, [r0, #0]
 800dd9c:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800dda0:	2a02      	cmp	r2, #2
 800dda2:	d90d      	bls.n	800ddc0 <core_compute_offsets_in_bytes+0x134>
 800dda4:	6841      	ldr	r1, [r0, #4]
 800dda6:	688a      	ldr	r2, [r1, #8]
 800dda8:	fb03 f202 	mul.w	r2, r3, r2
 800ddac:	608a      	str	r2, [r1, #8]
 800ddae:	6802      	ldr	r2, [r0, #0]
 800ddb0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800ddb4:	d304      	bcc.n	800ddc0 <core_compute_offsets_in_bytes+0x134>
 800ddb6:	6841      	ldr	r1, [r0, #4]
 800ddb8:	68ca      	ldr	r2, [r1, #12]
 800ddba:	fb03 f302 	mul.w	r3, r3, r2
 800ddbe:	60cb      	str	r3, [r1, #12]
 800ddc0:	b003      	add	sp, #12
 800ddc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc6:	42b1      	cmp	r1, r6
 800ddc8:	fb04 fb0a 	mul.w	fp, r4, sl
 800ddcc:	d1b1      	bne.n	800dd32 <core_compute_offsets_in_bytes+0xa6>
 800ddce:	9f00      	ldr	r7, [sp, #0]
 800ddd0:	42bd      	cmp	r5, r7
 800ddd2:	d0ae      	beq.n	800dd32 <core_compute_offsets_in_bytes+0xa6>
 800ddd4:	9f01      	ldr	r7, [sp, #4]
 800ddd6:	ebb4 0a07 	subs.w	sl, r4, r7
 800ddda:	bf18      	it	ne
 800dddc:	f04f 0a01 	movne.w	sl, #1
 800dde0:	e7a9      	b.n	800dd36 <core_compute_offsets_in_bytes+0xaa>
 800dde2:	42b1      	cmp	r1, r6
 800dde4:	d0b6      	beq.n	800dd54 <core_compute_offsets_in_bytes+0xc8>
 800dde6:	9e00      	ldr	r6, [sp, #0]
 800dde8:	42b5      	cmp	r5, r6
 800ddea:	d0b3      	beq.n	800dd54 <core_compute_offsets_in_bytes+0xc8>
 800ddec:	9d01      	ldr	r5, [sp, #4]
 800ddee:	1b64      	subs	r4, r4, r5
 800ddf0:	bf18      	it	ne
 800ddf2:	2401      	movne	r4, #1
 800ddf4:	e7af      	b.n	800dd56 <core_compute_offsets_in_bytes+0xca>
 800ddf6:	9a01      	ldr	r2, [sp, #4]
 800ddf8:	ebb4 0a02 	subs.w	sl, r4, r2
 800ddfc:	bf18      	it	ne
 800ddfe:	f04f 0a01 	movne.w	sl, #1
 800de02:	e78d      	b.n	800dd20 <core_compute_offsets_in_bytes+0x94>

0800de04 <findslot>:
 800de04:	4b0a      	ldr	r3, [pc, #40]	; (800de30 <findslot+0x2c>)
 800de06:	b510      	push	{r4, lr}
 800de08:	4604      	mov	r4, r0
 800de0a:	6818      	ldr	r0, [r3, #0]
 800de0c:	b118      	cbz	r0, 800de16 <findslot+0x12>
 800de0e:	6983      	ldr	r3, [r0, #24]
 800de10:	b90b      	cbnz	r3, 800de16 <findslot+0x12>
 800de12:	f001 fc17 	bl	800f644 <__sinit>
 800de16:	2c13      	cmp	r4, #19
 800de18:	d807      	bhi.n	800de2a <findslot+0x26>
 800de1a:	4806      	ldr	r0, [pc, #24]	; (800de34 <findslot+0x30>)
 800de1c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800de20:	3201      	adds	r2, #1
 800de22:	d002      	beq.n	800de2a <findslot+0x26>
 800de24:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800de28:	bd10      	pop	{r4, pc}
 800de2a:	2000      	movs	r0, #0
 800de2c:	e7fc      	b.n	800de28 <findslot+0x24>
 800de2e:	bf00      	nop
 800de30:	20001004 	.word	0x20001004
 800de34:	2001643c 	.word	0x2001643c

0800de38 <checkerror>:
 800de38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de3a:	1c43      	adds	r3, r0, #1
 800de3c:	4604      	mov	r4, r0
 800de3e:	d109      	bne.n	800de54 <checkerror+0x1c>
 800de40:	f001 fba2 	bl	800f588 <__errno>
 800de44:	2613      	movs	r6, #19
 800de46:	4605      	mov	r5, r0
 800de48:	2700      	movs	r7, #0
 800de4a:	4630      	mov	r0, r6
 800de4c:	4639      	mov	r1, r7
 800de4e:	beab      	bkpt	0x00ab
 800de50:	4606      	mov	r6, r0
 800de52:	602e      	str	r6, [r5, #0]
 800de54:	4620      	mov	r0, r4
 800de56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800de58 <error>:
 800de58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de5a:	4604      	mov	r4, r0
 800de5c:	f001 fb94 	bl	800f588 <__errno>
 800de60:	2613      	movs	r6, #19
 800de62:	4605      	mov	r5, r0
 800de64:	2700      	movs	r7, #0
 800de66:	4630      	mov	r0, r6
 800de68:	4639      	mov	r1, r7
 800de6a:	beab      	bkpt	0x00ab
 800de6c:	4606      	mov	r6, r0
 800de6e:	602e      	str	r6, [r5, #0]
 800de70:	4620      	mov	r0, r4
 800de72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800de74 <_swiread>:
 800de74:	b530      	push	{r4, r5, lr}
 800de76:	b085      	sub	sp, #20
 800de78:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800de7c:	9203      	str	r2, [sp, #12]
 800de7e:	2406      	movs	r4, #6
 800de80:	ad01      	add	r5, sp, #4
 800de82:	4620      	mov	r0, r4
 800de84:	4629      	mov	r1, r5
 800de86:	beab      	bkpt	0x00ab
 800de88:	4604      	mov	r4, r0
 800de8a:	4620      	mov	r0, r4
 800de8c:	f7ff ffd4 	bl	800de38 <checkerror>
 800de90:	b005      	add	sp, #20
 800de92:	bd30      	pop	{r4, r5, pc}

0800de94 <_read>:
 800de94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de96:	4615      	mov	r5, r2
 800de98:	9101      	str	r1, [sp, #4]
 800de9a:	f7ff ffb3 	bl	800de04 <findslot>
 800de9e:	9901      	ldr	r1, [sp, #4]
 800dea0:	4604      	mov	r4, r0
 800dea2:	b938      	cbnz	r0, 800deb4 <_read+0x20>
 800dea4:	f001 fb70 	bl	800f588 <__errno>
 800dea8:	2309      	movs	r3, #9
 800deaa:	6003      	str	r3, [r0, #0]
 800deac:	f04f 30ff 	mov.w	r0, #4294967295
 800deb0:	b003      	add	sp, #12
 800deb2:	bd30      	pop	{r4, r5, pc}
 800deb4:	6800      	ldr	r0, [r0, #0]
 800deb6:	462a      	mov	r2, r5
 800deb8:	f7ff ffdc 	bl	800de74 <_swiread>
 800debc:	1c43      	adds	r3, r0, #1
 800debe:	d0f7      	beq.n	800deb0 <_read+0x1c>
 800dec0:	6863      	ldr	r3, [r4, #4]
 800dec2:	1a2a      	subs	r2, r5, r0
 800dec4:	4413      	add	r3, r2
 800dec6:	6063      	str	r3, [r4, #4]
 800dec8:	4610      	mov	r0, r2
 800deca:	e7f1      	b.n	800deb0 <_read+0x1c>

0800decc <_swilseek>:
 800decc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dece:	460c      	mov	r4, r1
 800ded0:	4616      	mov	r6, r2
 800ded2:	f7ff ff97 	bl	800de04 <findslot>
 800ded6:	4605      	mov	r5, r0
 800ded8:	b940      	cbnz	r0, 800deec <_swilseek+0x20>
 800deda:	f001 fb55 	bl	800f588 <__errno>
 800dede:	2309      	movs	r3, #9
 800dee0:	6003      	str	r3, [r0, #0]
 800dee2:	f04f 34ff 	mov.w	r4, #4294967295
 800dee6:	4620      	mov	r0, r4
 800dee8:	b003      	add	sp, #12
 800deea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deec:	2e02      	cmp	r6, #2
 800deee:	d903      	bls.n	800def8 <_swilseek+0x2c>
 800def0:	f001 fb4a 	bl	800f588 <__errno>
 800def4:	2316      	movs	r3, #22
 800def6:	e7f3      	b.n	800dee0 <_swilseek+0x14>
 800def8:	2e01      	cmp	r6, #1
 800defa:	d112      	bne.n	800df22 <_swilseek+0x56>
 800defc:	6843      	ldr	r3, [r0, #4]
 800defe:	18e4      	adds	r4, r4, r3
 800df00:	d4f6      	bmi.n	800def0 <_swilseek+0x24>
 800df02:	682b      	ldr	r3, [r5, #0]
 800df04:	260a      	movs	r6, #10
 800df06:	e9cd 3400 	strd	r3, r4, [sp]
 800df0a:	466f      	mov	r7, sp
 800df0c:	4630      	mov	r0, r6
 800df0e:	4639      	mov	r1, r7
 800df10:	beab      	bkpt	0x00ab
 800df12:	4606      	mov	r6, r0
 800df14:	4630      	mov	r0, r6
 800df16:	f7ff ff8f 	bl	800de38 <checkerror>
 800df1a:	2800      	cmp	r0, #0
 800df1c:	dbe1      	blt.n	800dee2 <_swilseek+0x16>
 800df1e:	606c      	str	r4, [r5, #4]
 800df20:	e7e1      	b.n	800dee6 <_swilseek+0x1a>
 800df22:	2e02      	cmp	r6, #2
 800df24:	d1ed      	bne.n	800df02 <_swilseek+0x36>
 800df26:	6803      	ldr	r3, [r0, #0]
 800df28:	9300      	str	r3, [sp, #0]
 800df2a:	260c      	movs	r6, #12
 800df2c:	466f      	mov	r7, sp
 800df2e:	4630      	mov	r0, r6
 800df30:	4639      	mov	r1, r7
 800df32:	beab      	bkpt	0x00ab
 800df34:	4606      	mov	r6, r0
 800df36:	4630      	mov	r0, r6
 800df38:	f7ff ff7e 	bl	800de38 <checkerror>
 800df3c:	1c43      	adds	r3, r0, #1
 800df3e:	d0d0      	beq.n	800dee2 <_swilseek+0x16>
 800df40:	4404      	add	r4, r0
 800df42:	e7de      	b.n	800df02 <_swilseek+0x36>

0800df44 <_lseek>:
 800df44:	f7ff bfc2 	b.w	800decc <_swilseek>

0800df48 <_swiwrite>:
 800df48:	b530      	push	{r4, r5, lr}
 800df4a:	b085      	sub	sp, #20
 800df4c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800df50:	9203      	str	r2, [sp, #12]
 800df52:	2405      	movs	r4, #5
 800df54:	ad01      	add	r5, sp, #4
 800df56:	4620      	mov	r0, r4
 800df58:	4629      	mov	r1, r5
 800df5a:	beab      	bkpt	0x00ab
 800df5c:	4604      	mov	r4, r0
 800df5e:	4620      	mov	r0, r4
 800df60:	f7ff ff6a 	bl	800de38 <checkerror>
 800df64:	b005      	add	sp, #20
 800df66:	bd30      	pop	{r4, r5, pc}

0800df68 <_write>:
 800df68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df6a:	4615      	mov	r5, r2
 800df6c:	9101      	str	r1, [sp, #4]
 800df6e:	f7ff ff49 	bl	800de04 <findslot>
 800df72:	9901      	ldr	r1, [sp, #4]
 800df74:	4604      	mov	r4, r0
 800df76:	b930      	cbnz	r0, 800df86 <_write+0x1e>
 800df78:	f001 fb06 	bl	800f588 <__errno>
 800df7c:	2309      	movs	r3, #9
 800df7e:	6003      	str	r3, [r0, #0]
 800df80:	f04f 30ff 	mov.w	r0, #4294967295
 800df84:	e012      	b.n	800dfac <_write+0x44>
 800df86:	6800      	ldr	r0, [r0, #0]
 800df88:	462a      	mov	r2, r5
 800df8a:	f7ff ffdd 	bl	800df48 <_swiwrite>
 800df8e:	2800      	cmp	r0, #0
 800df90:	dbf6      	blt.n	800df80 <_write+0x18>
 800df92:	6862      	ldr	r2, [r4, #4]
 800df94:	1a2b      	subs	r3, r5, r0
 800df96:	441a      	add	r2, r3
 800df98:	42a8      	cmp	r0, r5
 800df9a:	6062      	str	r2, [r4, #4]
 800df9c:	d105      	bne.n	800dfaa <_write+0x42>
 800df9e:	2000      	movs	r0, #0
 800dfa0:	b003      	add	sp, #12
 800dfa2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dfa6:	f7ff bf57 	b.w	800de58 <error>
 800dfaa:	4618      	mov	r0, r3
 800dfac:	b003      	add	sp, #12
 800dfae:	bd30      	pop	{r4, r5, pc}

0800dfb0 <_swiclose>:
 800dfb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfb2:	2402      	movs	r4, #2
 800dfb4:	9001      	str	r0, [sp, #4]
 800dfb6:	ad01      	add	r5, sp, #4
 800dfb8:	4620      	mov	r0, r4
 800dfba:	4629      	mov	r1, r5
 800dfbc:	beab      	bkpt	0x00ab
 800dfbe:	4604      	mov	r4, r0
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f7ff ff39 	bl	800de38 <checkerror>
 800dfc6:	b003      	add	sp, #12
 800dfc8:	bd30      	pop	{r4, r5, pc}
	...

0800dfcc <_close>:
 800dfcc:	b538      	push	{r3, r4, r5, lr}
 800dfce:	4605      	mov	r5, r0
 800dfd0:	f7ff ff18 	bl	800de04 <findslot>
 800dfd4:	4604      	mov	r4, r0
 800dfd6:	b930      	cbnz	r0, 800dfe6 <_close+0x1a>
 800dfd8:	f001 fad6 	bl	800f588 <__errno>
 800dfdc:	2309      	movs	r3, #9
 800dfde:	6003      	str	r3, [r0, #0]
 800dfe0:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe4:	bd38      	pop	{r3, r4, r5, pc}
 800dfe6:	3d01      	subs	r5, #1
 800dfe8:	2d01      	cmp	r5, #1
 800dfea:	d809      	bhi.n	800e000 <_close+0x34>
 800dfec:	4b09      	ldr	r3, [pc, #36]	; (800e014 <_close+0x48>)
 800dfee:	689a      	ldr	r2, [r3, #8]
 800dff0:	691b      	ldr	r3, [r3, #16]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d104      	bne.n	800e000 <_close+0x34>
 800dff6:	f04f 33ff 	mov.w	r3, #4294967295
 800dffa:	6003      	str	r3, [r0, #0]
 800dffc:	2000      	movs	r0, #0
 800dffe:	e7f1      	b.n	800dfe4 <_close+0x18>
 800e000:	6820      	ldr	r0, [r4, #0]
 800e002:	f7ff ffd5 	bl	800dfb0 <_swiclose>
 800e006:	2800      	cmp	r0, #0
 800e008:	d1ec      	bne.n	800dfe4 <_close+0x18>
 800e00a:	f04f 33ff 	mov.w	r3, #4294967295
 800e00e:	6023      	str	r3, [r4, #0]
 800e010:	e7e8      	b.n	800dfe4 <_close+0x18>
 800e012:	bf00      	nop
 800e014:	2001643c 	.word	0x2001643c

0800e018 <_getpid>:
 800e018:	2001      	movs	r0, #1
 800e01a:	4770      	bx	lr

0800e01c <_swistat>:
 800e01c:	b570      	push	{r4, r5, r6, lr}
 800e01e:	460c      	mov	r4, r1
 800e020:	f7ff fef0 	bl	800de04 <findslot>
 800e024:	4605      	mov	r5, r0
 800e026:	b930      	cbnz	r0, 800e036 <_swistat+0x1a>
 800e028:	f001 faae 	bl	800f588 <__errno>
 800e02c:	2309      	movs	r3, #9
 800e02e:	6003      	str	r3, [r0, #0]
 800e030:	f04f 30ff 	mov.w	r0, #4294967295
 800e034:	bd70      	pop	{r4, r5, r6, pc}
 800e036:	6863      	ldr	r3, [r4, #4]
 800e038:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e03c:	6063      	str	r3, [r4, #4]
 800e03e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e042:	64a3      	str	r3, [r4, #72]	; 0x48
 800e044:	260c      	movs	r6, #12
 800e046:	4630      	mov	r0, r6
 800e048:	4629      	mov	r1, r5
 800e04a:	beab      	bkpt	0x00ab
 800e04c:	4605      	mov	r5, r0
 800e04e:	4628      	mov	r0, r5
 800e050:	f7ff fef2 	bl	800de38 <checkerror>
 800e054:	1c43      	adds	r3, r0, #1
 800e056:	bf1c      	itt	ne
 800e058:	6120      	strne	r0, [r4, #16]
 800e05a:	2000      	movne	r0, #0
 800e05c:	e7ea      	b.n	800e034 <_swistat+0x18>

0800e05e <_fstat>:
 800e05e:	460b      	mov	r3, r1
 800e060:	b510      	push	{r4, lr}
 800e062:	2100      	movs	r1, #0
 800e064:	4604      	mov	r4, r0
 800e066:	2258      	movs	r2, #88	; 0x58
 800e068:	4618      	mov	r0, r3
 800e06a:	f001 fbcf 	bl	800f80c <memset>
 800e06e:	4601      	mov	r1, r0
 800e070:	4620      	mov	r0, r4
 800e072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e076:	f7ff bfd1 	b.w	800e01c <_swistat>

0800e07a <_stat>:
 800e07a:	b538      	push	{r3, r4, r5, lr}
 800e07c:	460d      	mov	r5, r1
 800e07e:	4604      	mov	r4, r0
 800e080:	2258      	movs	r2, #88	; 0x58
 800e082:	2100      	movs	r1, #0
 800e084:	4628      	mov	r0, r5
 800e086:	f001 fbc1 	bl	800f80c <memset>
 800e08a:	4620      	mov	r0, r4
 800e08c:	2100      	movs	r1, #0
 800e08e:	f000 f811 	bl	800e0b4 <_swiopen>
 800e092:	1c43      	adds	r3, r0, #1
 800e094:	4604      	mov	r4, r0
 800e096:	d00b      	beq.n	800e0b0 <_stat+0x36>
 800e098:	686b      	ldr	r3, [r5, #4]
 800e09a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800e09e:	606b      	str	r3, [r5, #4]
 800e0a0:	4629      	mov	r1, r5
 800e0a2:	f7ff ffbb 	bl	800e01c <_swistat>
 800e0a6:	4605      	mov	r5, r0
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	f7ff ff8f 	bl	800dfcc <_close>
 800e0ae:	462c      	mov	r4, r5
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	bd38      	pop	{r3, r4, r5, pc}

0800e0b4 <_swiopen>:
 800e0b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e0b8:	4b2a      	ldr	r3, [pc, #168]	; (800e164 <_swiopen+0xb0>)
 800e0ba:	b097      	sub	sp, #92	; 0x5c
 800e0bc:	4681      	mov	r9, r0
 800e0be:	460f      	mov	r7, r1
 800e0c0:	2500      	movs	r5, #0
 800e0c2:	461e      	mov	r6, r3
 800e0c4:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 800e0c8:	1c61      	adds	r1, r4, #1
 800e0ca:	d037      	beq.n	800e13c <_swiopen+0x88>
 800e0cc:	3501      	adds	r5, #1
 800e0ce:	2d14      	cmp	r5, #20
 800e0d0:	d1f8      	bne.n	800e0c4 <_swiopen+0x10>
 800e0d2:	f001 fa59 	bl	800f588 <__errno>
 800e0d6:	2318      	movs	r3, #24
 800e0d8:	6003      	str	r3, [r0, #0]
 800e0da:	f04f 34ff 	mov.w	r4, #4294967295
 800e0de:	e03d      	b.n	800e15c <_swiopen+0xa8>
 800e0e0:	f3c7 4400 	ubfx	r4, r7, #16, #1
 800e0e4:	f240 6301 	movw	r3, #1537	; 0x601
 800e0e8:	07ba      	lsls	r2, r7, #30
 800e0ea:	bf48      	it	mi
 800e0ec:	f044 0402 	orrmi.w	r4, r4, #2
 800e0f0:	421f      	tst	r7, r3
 800e0f2:	bf18      	it	ne
 800e0f4:	f044 0404 	orrne.w	r4, r4, #4
 800e0f8:	073b      	lsls	r3, r7, #28
 800e0fa:	bf48      	it	mi
 800e0fc:	f024 0404 	bicmi.w	r4, r4, #4
 800e100:	4648      	mov	r0, r9
 800e102:	bf48      	it	mi
 800e104:	f044 0408 	orrmi.w	r4, r4, #8
 800e108:	f8cd 9000 	str.w	r9, [sp]
 800e10c:	f7f2 f860 	bl	80001d0 <strlen>
 800e110:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800e114:	2401      	movs	r4, #1
 800e116:	4620      	mov	r0, r4
 800e118:	4641      	mov	r1, r8
 800e11a:	beab      	bkpt	0x00ab
 800e11c:	4604      	mov	r4, r0
 800e11e:	2c00      	cmp	r4, #0
 800e120:	db07      	blt.n	800e132 <_swiopen+0x7e>
 800e122:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 800e126:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 800e12a:	2300      	movs	r3, #0
 800e12c:	6073      	str	r3, [r6, #4]
 800e12e:	462c      	mov	r4, r5
 800e130:	e014      	b.n	800e15c <_swiopen+0xa8>
 800e132:	4620      	mov	r0, r4
 800e134:	f7ff fe90 	bl	800de58 <error>
 800e138:	4604      	mov	r4, r0
 800e13a:	e00f      	b.n	800e15c <_swiopen+0xa8>
 800e13c:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 800e140:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800e144:	46e8      	mov	r8, sp
 800e146:	d1cb      	bne.n	800e0e0 <_swiopen+0x2c>
 800e148:	4641      	mov	r1, r8
 800e14a:	4648      	mov	r0, r9
 800e14c:	f7ff ff95 	bl	800e07a <_stat>
 800e150:	3001      	adds	r0, #1
 800e152:	d0c5      	beq.n	800e0e0 <_swiopen+0x2c>
 800e154:	f001 fa18 	bl	800f588 <__errno>
 800e158:	2311      	movs	r3, #17
 800e15a:	6003      	str	r3, [r0, #0]
 800e15c:	4620      	mov	r0, r4
 800e15e:	b017      	add	sp, #92	; 0x5c
 800e160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e164:	2001643c 	.word	0x2001643c

0800e168 <_get_semihosting_exts>:
 800e168:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e16c:	4606      	mov	r6, r0
 800e16e:	460f      	mov	r7, r1
 800e170:	482a      	ldr	r0, [pc, #168]	; (800e21c <_get_semihosting_exts+0xb4>)
 800e172:	2100      	movs	r1, #0
 800e174:	4615      	mov	r5, r2
 800e176:	f7ff ff9d 	bl	800e0b4 <_swiopen>
 800e17a:	462a      	mov	r2, r5
 800e17c:	4604      	mov	r4, r0
 800e17e:	2100      	movs	r1, #0
 800e180:	4630      	mov	r0, r6
 800e182:	f001 fb43 	bl	800f80c <memset>
 800e186:	1c63      	adds	r3, r4, #1
 800e188:	d016      	beq.n	800e1b8 <_get_semihosting_exts+0x50>
 800e18a:	4620      	mov	r0, r4
 800e18c:	f7ff fe3a 	bl	800de04 <findslot>
 800e190:	f04f 090c 	mov.w	r9, #12
 800e194:	4680      	mov	r8, r0
 800e196:	4648      	mov	r0, r9
 800e198:	4641      	mov	r1, r8
 800e19a:	beab      	bkpt	0x00ab
 800e19c:	4680      	mov	r8, r0
 800e19e:	4640      	mov	r0, r8
 800e1a0:	f7ff fe4a 	bl	800de38 <checkerror>
 800e1a4:	2803      	cmp	r0, #3
 800e1a6:	dd02      	ble.n	800e1ae <_get_semihosting_exts+0x46>
 800e1a8:	1ec3      	subs	r3, r0, #3
 800e1aa:	42ab      	cmp	r3, r5
 800e1ac:	dc08      	bgt.n	800e1c0 <_get_semihosting_exts+0x58>
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	f7ff ff0c 	bl	800dfcc <_close>
 800e1b4:	f04f 34ff 	mov.w	r4, #4294967295
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	b003      	add	sp, #12
 800e1bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1c0:	2204      	movs	r2, #4
 800e1c2:	eb0d 0102 	add.w	r1, sp, r2
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f7ff fe64 	bl	800de94 <_read>
 800e1cc:	2803      	cmp	r0, #3
 800e1ce:	ddee      	ble.n	800e1ae <_get_semihosting_exts+0x46>
 800e1d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e1d4:	2b53      	cmp	r3, #83	; 0x53
 800e1d6:	d1ea      	bne.n	800e1ae <_get_semihosting_exts+0x46>
 800e1d8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e1dc:	2b48      	cmp	r3, #72	; 0x48
 800e1de:	d1e6      	bne.n	800e1ae <_get_semihosting_exts+0x46>
 800e1e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e1e4:	2b46      	cmp	r3, #70	; 0x46
 800e1e6:	d1e2      	bne.n	800e1ae <_get_semihosting_exts+0x46>
 800e1e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e1ec:	2b42      	cmp	r3, #66	; 0x42
 800e1ee:	d1de      	bne.n	800e1ae <_get_semihosting_exts+0x46>
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	4639      	mov	r1, r7
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	f7ff fe69 	bl	800decc <_swilseek>
 800e1fa:	2800      	cmp	r0, #0
 800e1fc:	dbd7      	blt.n	800e1ae <_get_semihosting_exts+0x46>
 800e1fe:	462a      	mov	r2, r5
 800e200:	4631      	mov	r1, r6
 800e202:	4620      	mov	r0, r4
 800e204:	f7ff fe46 	bl	800de94 <_read>
 800e208:	4605      	mov	r5, r0
 800e20a:	4620      	mov	r0, r4
 800e20c:	f7ff fede 	bl	800dfcc <_close>
 800e210:	4628      	mov	r0, r5
 800e212:	f7ff fe11 	bl	800de38 <checkerror>
 800e216:	4604      	mov	r4, r0
 800e218:	e7ce      	b.n	800e1b8 <_get_semihosting_exts+0x50>
 800e21a:	bf00      	nop
 800e21c:	08068280 	.word	0x08068280

0800e220 <initialise_semihosting_exts>:
 800e220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e222:	4d0a      	ldr	r5, [pc, #40]	; (800e24c <initialise_semihosting_exts+0x2c>)
 800e224:	4c0a      	ldr	r4, [pc, #40]	; (800e250 <initialise_semihosting_exts+0x30>)
 800e226:	2100      	movs	r1, #0
 800e228:	2201      	movs	r2, #1
 800e22a:	a801      	add	r0, sp, #4
 800e22c:	6029      	str	r1, [r5, #0]
 800e22e:	6022      	str	r2, [r4, #0]
 800e230:	f7ff ff9a 	bl	800e168 <_get_semihosting_exts>
 800e234:	2800      	cmp	r0, #0
 800e236:	dd07      	ble.n	800e248 <initialise_semihosting_exts+0x28>
 800e238:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e23c:	f003 0201 	and.w	r2, r3, #1
 800e240:	f003 0302 	and.w	r3, r3, #2
 800e244:	602a      	str	r2, [r5, #0]
 800e246:	6023      	str	r3, [r4, #0]
 800e248:	b003      	add	sp, #12
 800e24a:	bd30      	pop	{r4, r5, pc}
 800e24c:	20000ffc 	.word	0x20000ffc
 800e250:	20001000 	.word	0x20001000

0800e254 <_has_ext_stdout_stderr>:
 800e254:	b510      	push	{r4, lr}
 800e256:	4c04      	ldr	r4, [pc, #16]	; (800e268 <_has_ext_stdout_stderr+0x14>)
 800e258:	6822      	ldr	r2, [r4, #0]
 800e25a:	2a00      	cmp	r2, #0
 800e25c:	da01      	bge.n	800e262 <_has_ext_stdout_stderr+0xe>
 800e25e:	f7ff ffdf 	bl	800e220 <initialise_semihosting_exts>
 800e262:	6820      	ldr	r0, [r4, #0]
 800e264:	bd10      	pop	{r4, pc}
 800e266:	bf00      	nop
 800e268:	20001000 	.word	0x20001000

0800e26c <initialise_monitor_handles>:
 800e26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e270:	b085      	sub	sp, #20
 800e272:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800e324 <initialise_monitor_handles+0xb8>
 800e276:	f8cd 9004 	str.w	r9, [sp, #4]
 800e27a:	2303      	movs	r3, #3
 800e27c:	2400      	movs	r4, #0
 800e27e:	9303      	str	r3, [sp, #12]
 800e280:	f10d 0804 	add.w	r8, sp, #4
 800e284:	9402      	str	r4, [sp, #8]
 800e286:	2501      	movs	r5, #1
 800e288:	4628      	mov	r0, r5
 800e28a:	4641      	mov	r1, r8
 800e28c:	beab      	bkpt	0x00ab
 800e28e:	4605      	mov	r5, r0
 800e290:	4e20      	ldr	r6, [pc, #128]	; (800e314 <initialise_monitor_handles+0xa8>)
 800e292:	4a21      	ldr	r2, [pc, #132]	; (800e318 <initialise_monitor_handles+0xac>)
 800e294:	6035      	str	r5, [r6, #0]
 800e296:	4623      	mov	r3, r4
 800e298:	f04f 31ff 	mov.w	r1, #4294967295
 800e29c:	4614      	mov	r4, r2
 800e29e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	2b14      	cmp	r3, #20
 800e2a6:	d1fa      	bne.n	800e29e <initialise_monitor_handles+0x32>
 800e2a8:	f7ff ffd4 	bl	800e254 <_has_ext_stdout_stderr>
 800e2ac:	4d1b      	ldr	r5, [pc, #108]	; (800e31c <initialise_monitor_handles+0xb0>)
 800e2ae:	b1d0      	cbz	r0, 800e2e6 <initialise_monitor_handles+0x7a>
 800e2b0:	f04f 0a03 	mov.w	sl, #3
 800e2b4:	2304      	movs	r3, #4
 800e2b6:	f8cd 9004 	str.w	r9, [sp, #4]
 800e2ba:	2701      	movs	r7, #1
 800e2bc:	f8cd a00c 	str.w	sl, [sp, #12]
 800e2c0:	9302      	str	r3, [sp, #8]
 800e2c2:	4638      	mov	r0, r7
 800e2c4:	4641      	mov	r1, r8
 800e2c6:	beab      	bkpt	0x00ab
 800e2c8:	4683      	mov	fp, r0
 800e2ca:	4b15      	ldr	r3, [pc, #84]	; (800e320 <initialise_monitor_handles+0xb4>)
 800e2cc:	f8cd 9004 	str.w	r9, [sp, #4]
 800e2d0:	f8c3 b000 	str.w	fp, [r3]
 800e2d4:	2308      	movs	r3, #8
 800e2d6:	f8cd a00c 	str.w	sl, [sp, #12]
 800e2da:	9302      	str	r3, [sp, #8]
 800e2dc:	4638      	mov	r0, r7
 800e2de:	4641      	mov	r1, r8
 800e2e0:	beab      	bkpt	0x00ab
 800e2e2:	4607      	mov	r7, r0
 800e2e4:	602f      	str	r7, [r5, #0]
 800e2e6:	682b      	ldr	r3, [r5, #0]
 800e2e8:	3301      	adds	r3, #1
 800e2ea:	bf02      	ittt	eq
 800e2ec:	4b0c      	ldreq	r3, [pc, #48]	; (800e320 <initialise_monitor_handles+0xb4>)
 800e2ee:	681b      	ldreq	r3, [r3, #0]
 800e2f0:	602b      	streq	r3, [r5, #0]
 800e2f2:	6833      	ldr	r3, [r6, #0]
 800e2f4:	6023      	str	r3, [r4, #0]
 800e2f6:	2600      	movs	r6, #0
 800e2f8:	6066      	str	r6, [r4, #4]
 800e2fa:	f7ff ffab 	bl	800e254 <_has_ext_stdout_stderr>
 800e2fe:	b130      	cbz	r0, 800e30e <initialise_monitor_handles+0xa2>
 800e300:	4b07      	ldr	r3, [pc, #28]	; (800e320 <initialise_monitor_handles+0xb4>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800e308:	682b      	ldr	r3, [r5, #0]
 800e30a:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800e30e:	b005      	add	sp, #20
 800e310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e314:	20016434 	.word	0x20016434
 800e318:	2001643c 	.word	0x2001643c
 800e31c:	20016430 	.word	0x20016430
 800e320:	20016438 	.word	0x20016438
 800e324:	08068296 	.word	0x08068296

0800e328 <_isatty>:
 800e328:	b570      	push	{r4, r5, r6, lr}
 800e32a:	f7ff fd6b 	bl	800de04 <findslot>
 800e32e:	2509      	movs	r5, #9
 800e330:	4604      	mov	r4, r0
 800e332:	b920      	cbnz	r0, 800e33e <_isatty+0x16>
 800e334:	f001 f928 	bl	800f588 <__errno>
 800e338:	6005      	str	r5, [r0, #0]
 800e33a:	4620      	mov	r0, r4
 800e33c:	bd70      	pop	{r4, r5, r6, pc}
 800e33e:	4628      	mov	r0, r5
 800e340:	4621      	mov	r1, r4
 800e342:	beab      	bkpt	0x00ab
 800e344:	4604      	mov	r4, r0
 800e346:	2c01      	cmp	r4, #1
 800e348:	d0f7      	beq.n	800e33a <_isatty+0x12>
 800e34a:	f001 f91d 	bl	800f588 <__errno>
 800e34e:	2400      	movs	r4, #0
 800e350:	4605      	mov	r5, r0
 800e352:	2613      	movs	r6, #19
 800e354:	4630      	mov	r0, r6
 800e356:	4621      	mov	r1, r4
 800e358:	beab      	bkpt	0x00ab
 800e35a:	4606      	mov	r6, r0
 800e35c:	602e      	str	r6, [r5, #0]
 800e35e:	e7ec      	b.n	800e33a <_isatty+0x12>

0800e360 <arm_rfft_32_fast_init_f32>:
 800e360:	b178      	cbz	r0, 800e382 <arm_rfft_32_fast_init_f32+0x22>
 800e362:	b430      	push	{r4, r5}
 800e364:	4908      	ldr	r1, [pc, #32]	; (800e388 <arm_rfft_32_fast_init_f32+0x28>)
 800e366:	4a09      	ldr	r2, [pc, #36]	; (800e38c <arm_rfft_32_fast_init_f32+0x2c>)
 800e368:	2310      	movs	r3, #16
 800e36a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800e36e:	8003      	strh	r3, [r0, #0]
 800e370:	2520      	movs	r5, #32
 800e372:	2414      	movs	r4, #20
 800e374:	4b06      	ldr	r3, [pc, #24]	; (800e390 <arm_rfft_32_fast_init_f32+0x30>)
 800e376:	8205      	strh	r5, [r0, #16]
 800e378:	8184      	strh	r4, [r0, #12]
 800e37a:	6143      	str	r3, [r0, #20]
 800e37c:	bc30      	pop	{r4, r5}
 800e37e:	2000      	movs	r0, #0
 800e380:	4770      	bx	lr
 800e382:	f04f 30ff 	mov.w	r0, #4294967295
 800e386:	4770      	bx	lr
 800e388:	0806924c 	.word	0x0806924c
 800e38c:	0806db84 	.word	0x0806db84
 800e390:	08076904 	.word	0x08076904

0800e394 <arm_rfft_64_fast_init_f32>:
 800e394:	b178      	cbz	r0, 800e3b6 <arm_rfft_64_fast_init_f32+0x22>
 800e396:	b430      	push	{r4, r5}
 800e398:	4908      	ldr	r1, [pc, #32]	; (800e3bc <arm_rfft_64_fast_init_f32+0x28>)
 800e39a:	4a09      	ldr	r2, [pc, #36]	; (800e3c0 <arm_rfft_64_fast_init_f32+0x2c>)
 800e39c:	2320      	movs	r3, #32
 800e39e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800e3a2:	8003      	strh	r3, [r0, #0]
 800e3a4:	2540      	movs	r5, #64	; 0x40
 800e3a6:	2430      	movs	r4, #48	; 0x30
 800e3a8:	4b06      	ldr	r3, [pc, #24]	; (800e3c4 <arm_rfft_64_fast_init_f32+0x30>)
 800e3aa:	8205      	strh	r5, [r0, #16]
 800e3ac:	8184      	strh	r4, [r0, #12]
 800e3ae:	6143      	str	r3, [r0, #20]
 800e3b0:	bc30      	pop	{r4, r5}
 800e3b2:	2000      	movs	r0, #0
 800e3b4:	4770      	bx	lr
 800e3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ba:	4770      	bx	lr
 800e3bc:	0806b3a4 	.word	0x0806b3a4
 800e3c0:	08072404 	.word	0x08072404
 800e3c4:	0807b184 	.word	0x0807b184

0800e3c8 <arm_rfft_256_fast_init_f32>:
 800e3c8:	b180      	cbz	r0, 800e3ec <arm_rfft_256_fast_init_f32+0x24>
 800e3ca:	b430      	push	{r4, r5}
 800e3cc:	4909      	ldr	r1, [pc, #36]	; (800e3f4 <arm_rfft_256_fast_init_f32+0x2c>)
 800e3ce:	4a0a      	ldr	r2, [pc, #40]	; (800e3f8 <arm_rfft_256_fast_init_f32+0x30>)
 800e3d0:	2380      	movs	r3, #128	; 0x80
 800e3d2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800e3d6:	8003      	strh	r3, [r0, #0]
 800e3d8:	f44f 7580 	mov.w	r5, #256	; 0x100
 800e3dc:	24d0      	movs	r4, #208	; 0xd0
 800e3de:	4b07      	ldr	r3, [pc, #28]	; (800e3fc <arm_rfft_256_fast_init_f32+0x34>)
 800e3e0:	8205      	strh	r5, [r0, #16]
 800e3e2:	8184      	strh	r4, [r0, #12]
 800e3e4:	6143      	str	r3, [r0, #20]
 800e3e6:	bc30      	pop	{r4, r5}
 800e3e8:	2000      	movs	r0, #0
 800e3ea:	4770      	bx	lr
 800e3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e3f0:	4770      	bx	lr
 800e3f2:	bf00      	nop
 800e3f4:	080690ac 	.word	0x080690ac
 800e3f8:	0806d784 	.word	0x0806d784
 800e3fc:	08076504 	.word	0x08076504

0800e400 <arm_rfft_512_fast_init_f32>:
 800e400:	b190      	cbz	r0, 800e428 <arm_rfft_512_fast_init_f32+0x28>
 800e402:	b430      	push	{r4, r5}
 800e404:	490a      	ldr	r1, [pc, #40]	; (800e430 <arm_rfft_512_fast_init_f32+0x30>)
 800e406:	4a0b      	ldr	r2, [pc, #44]	; (800e434 <arm_rfft_512_fast_init_f32+0x34>)
 800e408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e40c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800e410:	8003      	strh	r3, [r0, #0]
 800e412:	f44f 7500 	mov.w	r5, #512	; 0x200
 800e416:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800e41a:	4b07      	ldr	r3, [pc, #28]	; (800e438 <arm_rfft_512_fast_init_f32+0x38>)
 800e41c:	8205      	strh	r5, [r0, #16]
 800e41e:	8184      	strh	r4, [r0, #12]
 800e420:	6143      	str	r3, [r0, #20]
 800e422:	bc30      	pop	{r4, r5}
 800e424:	2000      	movs	r0, #0
 800e426:	4770      	bx	lr
 800e428:	f04f 30ff 	mov.w	r0, #4294967295
 800e42c:	4770      	bx	lr
 800e42e:	bf00      	nop
 800e430:	0806b034 	.word	0x0806b034
 800e434:	08071c04 	.word	0x08071c04
 800e438:	0807a984 	.word	0x0807a984

0800e43c <arm_rfft_1024_fast_init_f32>:
 800e43c:	b190      	cbz	r0, 800e464 <arm_rfft_1024_fast_init_f32+0x28>
 800e43e:	b430      	push	{r4, r5}
 800e440:	490a      	ldr	r1, [pc, #40]	; (800e46c <arm_rfft_1024_fast_init_f32+0x30>)
 800e442:	4a0b      	ldr	r2, [pc, #44]	; (800e470 <arm_rfft_1024_fast_init_f32+0x34>)
 800e444:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e448:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800e44c:	8003      	strh	r3, [r0, #0]
 800e44e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800e452:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800e456:	4b07      	ldr	r3, [pc, #28]	; (800e474 <arm_rfft_1024_fast_init_f32+0x38>)
 800e458:	8205      	strh	r5, [r0, #16]
 800e45a:	8184      	strh	r4, [r0, #12]
 800e45c:	6143      	str	r3, [r0, #20]
 800e45e:	bc30      	pop	{r4, r5}
 800e460:	2000      	movs	r0, #0
 800e462:	4770      	bx	lr
 800e464:	f04f 30ff 	mov.w	r0, #4294967295
 800e468:	4770      	bx	lr
 800e46a:	bf00      	nop
 800e46c:	0806b404 	.word	0x0806b404
 800e470:	08072504 	.word	0x08072504
 800e474:	08073504 	.word	0x08073504

0800e478 <arm_rfft_2048_fast_init_f32>:
 800e478:	b190      	cbz	r0, 800e4a0 <arm_rfft_2048_fast_init_f32+0x28>
 800e47a:	b430      	push	{r4, r5}
 800e47c:	490a      	ldr	r1, [pc, #40]	; (800e4a8 <arm_rfft_2048_fast_init_f32+0x30>)
 800e47e:	4a0b      	ldr	r2, [pc, #44]	; (800e4ac <arm_rfft_2048_fast_init_f32+0x34>)
 800e480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e484:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800e488:	8003      	strh	r3, [r0, #0]
 800e48a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800e48e:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800e492:	4b07      	ldr	r3, [pc, #28]	; (800e4b0 <arm_rfft_2048_fast_init_f32+0x38>)
 800e494:	8205      	strh	r5, [r0, #16]
 800e496:	8184      	strh	r4, [r0, #12]
 800e498:	6143      	str	r3, [r0, #20]
 800e49a:	bc30      	pop	{r4, r5}
 800e49c:	2000      	movs	r0, #0
 800e49e:	4770      	bx	lr
 800e4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4a4:	4770      	bx	lr
 800e4a6:	bf00      	nop
 800e4a8:	0806829c 	.word	0x0806829c
 800e4ac:	0806b784 	.word	0x0806b784
 800e4b0:	08074504 	.word	0x08074504

0800e4b4 <arm_rfft_4096_fast_init_f32>:
 800e4b4:	b190      	cbz	r0, 800e4dc <arm_rfft_4096_fast_init_f32+0x28>
 800e4b6:	b430      	push	{r4, r5}
 800e4b8:	490a      	ldr	r1, [pc, #40]	; (800e4e4 <arm_rfft_4096_fast_init_f32+0x30>)
 800e4ba:	4a0b      	ldr	r2, [pc, #44]	; (800e4e8 <arm_rfft_4096_fast_init_f32+0x34>)
 800e4bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4c0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800e4c4:	8003      	strh	r3, [r0, #0]
 800e4c6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800e4ca:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800e4ce:	4b07      	ldr	r3, [pc, #28]	; (800e4ec <arm_rfft_4096_fast_init_f32+0x38>)
 800e4d0:	8205      	strh	r5, [r0, #16]
 800e4d2:	8184      	strh	r4, [r0, #12]
 800e4d4:	6143      	str	r3, [r0, #20]
 800e4d6:	bc30      	pop	{r4, r5}
 800e4d8:	2000      	movs	r0, #0
 800e4da:	4770      	bx	lr
 800e4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop
 800e4e4:	08069274 	.word	0x08069274
 800e4e8:	0806dc04 	.word	0x0806dc04
 800e4ec:	08076984 	.word	0x08076984

0800e4f0 <arm_rfft_fast_init_f32>:
 800e4f0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e4f4:	d01f      	beq.n	800e536 <arm_rfft_fast_init_f32+0x46>
 800e4f6:	d90b      	bls.n	800e510 <arm_rfft_fast_init_f32+0x20>
 800e4f8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800e4fc:	d019      	beq.n	800e532 <arm_rfft_fast_init_f32+0x42>
 800e4fe:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800e502:	d012      	beq.n	800e52a <arm_rfft_fast_init_f32+0x3a>
 800e504:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e508:	d00d      	beq.n	800e526 <arm_rfft_fast_init_f32+0x36>
 800e50a:	f04f 30ff 	mov.w	r0, #4294967295
 800e50e:	4770      	bx	lr
 800e510:	2940      	cmp	r1, #64	; 0x40
 800e512:	d00c      	beq.n	800e52e <arm_rfft_fast_init_f32+0x3e>
 800e514:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800e518:	d003      	beq.n	800e522 <arm_rfft_fast_init_f32+0x32>
 800e51a:	2920      	cmp	r1, #32
 800e51c:	d1f5      	bne.n	800e50a <arm_rfft_fast_init_f32+0x1a>
 800e51e:	4b07      	ldr	r3, [pc, #28]	; (800e53c <arm_rfft_fast_init_f32+0x4c>)
 800e520:	4718      	bx	r3
 800e522:	4b07      	ldr	r3, [pc, #28]	; (800e540 <arm_rfft_fast_init_f32+0x50>)
 800e524:	4718      	bx	r3
 800e526:	4b07      	ldr	r3, [pc, #28]	; (800e544 <arm_rfft_fast_init_f32+0x54>)
 800e528:	4718      	bx	r3
 800e52a:	4b07      	ldr	r3, [pc, #28]	; (800e548 <arm_rfft_fast_init_f32+0x58>)
 800e52c:	4718      	bx	r3
 800e52e:	4b07      	ldr	r3, [pc, #28]	; (800e54c <arm_rfft_fast_init_f32+0x5c>)
 800e530:	e7f6      	b.n	800e520 <arm_rfft_fast_init_f32+0x30>
 800e532:	4b07      	ldr	r3, [pc, #28]	; (800e550 <arm_rfft_fast_init_f32+0x60>)
 800e534:	e7f4      	b.n	800e520 <arm_rfft_fast_init_f32+0x30>
 800e536:	4b07      	ldr	r3, [pc, #28]	; (800e554 <arm_rfft_fast_init_f32+0x64>)
 800e538:	e7f2      	b.n	800e520 <arm_rfft_fast_init_f32+0x30>
 800e53a:	bf00      	nop
 800e53c:	0800e361 	.word	0x0800e361
 800e540:	0800e3c9 	.word	0x0800e3c9
 800e544:	0800e43d 	.word	0x0800e43d
 800e548:	0800e4b5 	.word	0x0800e4b5
 800e54c:	0800e395 	.word	0x0800e395
 800e550:	0800e479 	.word	0x0800e479
 800e554:	0800e401 	.word	0x0800e401

0800e558 <stage_rfft_f32>:
 800e558:	b410      	push	{r4}
 800e55a:	edd1 7a00 	vldr	s15, [r1]
 800e55e:	ed91 7a01 	vldr	s14, [r1, #4]
 800e562:	8804      	ldrh	r4, [r0, #0]
 800e564:	6940      	ldr	r0, [r0, #20]
 800e566:	ee37 7a07 	vadd.f32	s14, s14, s14
 800e56a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e56e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800e572:	ee77 6a87 	vadd.f32	s13, s15, s14
 800e576:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e57a:	3c01      	subs	r4, #1
 800e57c:	ee26 7a84 	vmul.f32	s14, s13, s8
 800e580:	ee67 7a84 	vmul.f32	s15, s15, s8
 800e584:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800e588:	ed82 7a00 	vstr	s14, [r2]
 800e58c:	edc2 7a01 	vstr	s15, [r2, #4]
 800e590:	3010      	adds	r0, #16
 800e592:	3210      	adds	r2, #16
 800e594:	3b08      	subs	r3, #8
 800e596:	3110      	adds	r1, #16
 800e598:	ed11 5a02 	vldr	s10, [r1, #-8]
 800e59c:	ed93 7a02 	vldr	s14, [r3, #8]
 800e5a0:	ed50 6a02 	vldr	s13, [r0, #-8]
 800e5a4:	edd3 4a03 	vldr	s9, [r3, #12]
 800e5a8:	ed51 7a01 	vldr	s15, [r1, #-4]
 800e5ac:	ed10 6a01 	vldr	s12, [r0, #-4]
 800e5b0:	ee77 5a45 	vsub.f32	s11, s14, s10
 800e5b4:	ee37 7a05 	vadd.f32	s14, s14, s10
 800e5b8:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800e5bc:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800e5c0:	ee66 5a25 	vmul.f32	s11, s12, s11
 800e5c4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800e5c8:	ee37 7a23 	vadd.f32	s14, s14, s7
 800e5cc:	ee66 6a85 	vmul.f32	s13, s13, s10
 800e5d0:	ee26 6a05 	vmul.f32	s12, s12, s10
 800e5d4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800e5d8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e5dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e5e0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800e5e4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800e5e8:	3c01      	subs	r4, #1
 800e5ea:	ed02 7a02 	vstr	s14, [r2, #-8]
 800e5ee:	ed42 7a01 	vstr	s15, [r2, #-4]
 800e5f2:	f1a3 0308 	sub.w	r3, r3, #8
 800e5f6:	f101 0108 	add.w	r1, r1, #8
 800e5fa:	f100 0008 	add.w	r0, r0, #8
 800e5fe:	f102 0208 	add.w	r2, r2, #8
 800e602:	d1c9      	bne.n	800e598 <stage_rfft_f32+0x40>
 800e604:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e608:	4770      	bx	lr
 800e60a:	bf00      	nop

0800e60c <merge_rfft_f32>:
 800e60c:	b410      	push	{r4}
 800e60e:	edd1 7a00 	vldr	s15, [r1]
 800e612:	edd1 6a01 	vldr	s13, [r1, #4]
 800e616:	8804      	ldrh	r4, [r0, #0]
 800e618:	6940      	ldr	r0, [r0, #20]
 800e61a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e61e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e622:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800e626:	ee27 7a04 	vmul.f32	s14, s14, s8
 800e62a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800e62e:	3c01      	subs	r4, #1
 800e630:	ed82 7a00 	vstr	s14, [r2]
 800e634:	edc2 7a01 	vstr	s15, [r2, #4]
 800e638:	b3dc      	cbz	r4, 800e6b2 <merge_rfft_f32+0xa6>
 800e63a:	00e3      	lsls	r3, r4, #3
 800e63c:	3b08      	subs	r3, #8
 800e63e:	440b      	add	r3, r1
 800e640:	3010      	adds	r0, #16
 800e642:	3210      	adds	r2, #16
 800e644:	3110      	adds	r1, #16
 800e646:	ed11 5a02 	vldr	s10, [r1, #-8]
 800e64a:	ed93 7a02 	vldr	s14, [r3, #8]
 800e64e:	ed50 6a02 	vldr	s13, [r0, #-8]
 800e652:	edd3 4a03 	vldr	s9, [r3, #12]
 800e656:	ed51 7a01 	vldr	s15, [r1, #-4]
 800e65a:	ed10 6a01 	vldr	s12, [r0, #-4]
 800e65e:	ee75 5a47 	vsub.f32	s11, s10, s14
 800e662:	ee37 7a05 	vadd.f32	s14, s14, s10
 800e666:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800e66a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800e66e:	ee66 5a25 	vmul.f32	s11, s12, s11
 800e672:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800e676:	ee37 7a63 	vsub.f32	s14, s14, s7
 800e67a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800e67e:	ee26 6a05 	vmul.f32	s12, s12, s10
 800e682:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800e686:	ee37 7a46 	vsub.f32	s14, s14, s12
 800e68a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e68e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800e692:	ee67 7a84 	vmul.f32	s15, s15, s8
 800e696:	3c01      	subs	r4, #1
 800e698:	ed02 7a02 	vstr	s14, [r2, #-8]
 800e69c:	ed42 7a01 	vstr	s15, [r2, #-4]
 800e6a0:	f1a3 0308 	sub.w	r3, r3, #8
 800e6a4:	f101 0108 	add.w	r1, r1, #8
 800e6a8:	f100 0008 	add.w	r0, r0, #8
 800e6ac:	f102 0208 	add.w	r2, r2, #8
 800e6b0:	d1c9      	bne.n	800e646 <merge_rfft_f32+0x3a>
 800e6b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6b6:	4770      	bx	lr

0800e6b8 <arm_rfft_fast_f32>:
 800e6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6bc:	8a05      	ldrh	r5, [r0, #16]
 800e6be:	086d      	lsrs	r5, r5, #1
 800e6c0:	8005      	strh	r5, [r0, #0]
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	4616      	mov	r6, r2
 800e6c6:	461d      	mov	r5, r3
 800e6c8:	b14b      	cbz	r3, 800e6de <arm_rfft_fast_f32+0x26>
 800e6ca:	f7ff ff9f 	bl	800e60c <merge_rfft_f32>
 800e6ce:	462a      	mov	r2, r5
 800e6d0:	4631      	mov	r1, r6
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6da:	f000 bb33 	b.w	800ed44 <arm_cfft_f32>
 800e6de:	460f      	mov	r7, r1
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	f000 fb2e 	bl	800ed44 <arm_cfft_f32>
 800e6e8:	4632      	mov	r2, r6
 800e6ea:	4639      	mov	r1, r7
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6f2:	f7ff bf31 	b.w	800e558 <stage_rfft_f32>
 800e6f6:	bf00      	nop

0800e6f8 <arm_cfft_radix8by2_f32>:
 800e6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6fc:	ed2d 8b08 	vpush	{d8-d11}
 800e700:	4607      	mov	r7, r0
 800e702:	4608      	mov	r0, r1
 800e704:	f8b7 c000 	ldrh.w	ip, [r7]
 800e708:	687a      	ldr	r2, [r7, #4]
 800e70a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800e70e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800e712:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800e716:	f000 80b0 	beq.w	800e87a <arm_cfft_radix8by2_f32+0x182>
 800e71a:	008c      	lsls	r4, r1, #2
 800e71c:	3410      	adds	r4, #16
 800e71e:	f100 0310 	add.w	r3, r0, #16
 800e722:	1906      	adds	r6, r0, r4
 800e724:	3210      	adds	r2, #16
 800e726:	4444      	add	r4, r8
 800e728:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800e72c:	f108 0510 	add.w	r5, r8, #16
 800e730:	ed15 2a04 	vldr	s4, [r5, #-16]
 800e734:	ed55 2a03 	vldr	s5, [r5, #-12]
 800e738:	ed54 4a04 	vldr	s9, [r4, #-16]
 800e73c:	ed14 4a03 	vldr	s8, [r4, #-12]
 800e740:	ed14 6a02 	vldr	s12, [r4, #-8]
 800e744:	ed54 5a01 	vldr	s11, [r4, #-4]
 800e748:	ed53 3a04 	vldr	s7, [r3, #-16]
 800e74c:	ed15 0a02 	vldr	s0, [r5, #-8]
 800e750:	ed55 0a01 	vldr	s1, [r5, #-4]
 800e754:	ed56 6a04 	vldr	s13, [r6, #-16]
 800e758:	ed16 3a03 	vldr	s6, [r6, #-12]
 800e75c:	ed13 7a03 	vldr	s14, [r3, #-12]
 800e760:	ed13 5a02 	vldr	s10, [r3, #-8]
 800e764:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e768:	ed16 1a02 	vldr	s2, [r6, #-8]
 800e76c:	ed56 1a01 	vldr	s3, [r6, #-4]
 800e770:	ee73 ba82 	vadd.f32	s23, s7, s4
 800e774:	ee37 ba22 	vadd.f32	s22, s14, s5
 800e778:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800e77c:	ee33 9a04 	vadd.f32	s18, s6, s8
 800e780:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800e784:	ee75 aa00 	vadd.f32	s21, s10, s0
 800e788:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800e78c:	ee71 8a06 	vadd.f32	s17, s2, s12
 800e790:	ed43 ba04 	vstr	s23, [r3, #-16]
 800e794:	ed03 ba03 	vstr	s22, [r3, #-12]
 800e798:	ed43 aa02 	vstr	s21, [r3, #-8]
 800e79c:	ed03 aa01 	vstr	s20, [r3, #-4]
 800e7a0:	ed06 8a01 	vstr	s16, [r6, #-4]
 800e7a4:	ed46 9a04 	vstr	s19, [r6, #-16]
 800e7a8:	ed06 9a03 	vstr	s18, [r6, #-12]
 800e7ac:	ed46 8a02 	vstr	s17, [r6, #-8]
 800e7b0:	ee37 7a62 	vsub.f32	s14, s14, s5
 800e7b4:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800e7b8:	ee34 4a43 	vsub.f32	s8, s8, s6
 800e7bc:	ed52 6a03 	vldr	s13, [r2, #-12]
 800e7c0:	ed12 3a04 	vldr	s6, [r2, #-16]
 800e7c4:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800e7c8:	ee27 8a26 	vmul.f32	s16, s14, s13
 800e7cc:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800e7d0:	ee23 2a83 	vmul.f32	s4, s7, s6
 800e7d4:	ee64 4a83 	vmul.f32	s9, s9, s6
 800e7d8:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800e7dc:	ee27 7a03 	vmul.f32	s14, s14, s6
 800e7e0:	ee64 6a26 	vmul.f32	s13, s8, s13
 800e7e4:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e7e8:	ee37 7a63 	vsub.f32	s14, s14, s7
 800e7ec:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e7f0:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800e7f4:	ee32 3a08 	vadd.f32	s6, s4, s16
 800e7f8:	ed05 7a03 	vstr	s14, [r5, #-12]
 800e7fc:	ed05 3a04 	vstr	s6, [r5, #-16]
 800e800:	ed04 4a04 	vstr	s8, [r4, #-16]
 800e804:	ed44 6a03 	vstr	s13, [r4, #-12]
 800e808:	ed12 7a01 	vldr	s14, [r2, #-4]
 800e80c:	ee76 6a41 	vsub.f32	s13, s12, s2
 800e810:	ee35 5a40 	vsub.f32	s10, s10, s0
 800e814:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800e818:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e81c:	ed52 5a02 	vldr	s11, [r2, #-8]
 800e820:	ee67 3a87 	vmul.f32	s7, s15, s14
 800e824:	ee66 4a87 	vmul.f32	s9, s13, s14
 800e828:	ee25 4a25 	vmul.f32	s8, s10, s11
 800e82c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e830:	ee25 5a07 	vmul.f32	s10, s10, s14
 800e834:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e838:	ee26 7a07 	vmul.f32	s14, s12, s14
 800e83c:	ee26 6a25 	vmul.f32	s12, s12, s11
 800e840:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800e844:	ee74 5a23 	vadd.f32	s11, s8, s7
 800e848:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800e84c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e850:	3310      	adds	r3, #16
 800e852:	4563      	cmp	r3, ip
 800e854:	ed45 5a02 	vstr	s11, [r5, #-8]
 800e858:	f106 0610 	add.w	r6, r6, #16
 800e85c:	ed45 7a01 	vstr	s15, [r5, #-4]
 800e860:	f102 0210 	add.w	r2, r2, #16
 800e864:	ed04 6a02 	vstr	s12, [r4, #-8]
 800e868:	ed04 7a01 	vstr	s14, [r4, #-4]
 800e86c:	f105 0510 	add.w	r5, r5, #16
 800e870:	f104 0410 	add.w	r4, r4, #16
 800e874:	f47f af5c 	bne.w	800e730 <arm_cfft_radix8by2_f32+0x38>
 800e878:	687a      	ldr	r2, [r7, #4]
 800e87a:	b28c      	uxth	r4, r1
 800e87c:	4621      	mov	r1, r4
 800e87e:	2302      	movs	r3, #2
 800e880:	f000 fbc2 	bl	800f008 <arm_radix8_butterfly_f32>
 800e884:	ecbd 8b08 	vpop	{d8-d11}
 800e888:	4621      	mov	r1, r4
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	4640      	mov	r0, r8
 800e88e:	2302      	movs	r3, #2
 800e890:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e894:	f000 bbb8 	b.w	800f008 <arm_radix8_butterfly_f32>

0800e898 <arm_cfft_radix8by4_f32>:
 800e898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e89c:	ed2d 8b0a 	vpush	{d8-d12}
 800e8a0:	b08d      	sub	sp, #52	; 0x34
 800e8a2:	460d      	mov	r5, r1
 800e8a4:	910b      	str	r1, [sp, #44]	; 0x2c
 800e8a6:	8801      	ldrh	r1, [r0, #0]
 800e8a8:	6842      	ldr	r2, [r0, #4]
 800e8aa:	900a      	str	r0, [sp, #40]	; 0x28
 800e8ac:	0849      	lsrs	r1, r1, #1
 800e8ae:	008b      	lsls	r3, r1, #2
 800e8b0:	18ee      	adds	r6, r5, r3
 800e8b2:	18f0      	adds	r0, r6, r3
 800e8b4:	edd0 5a00 	vldr	s11, [r0]
 800e8b8:	edd5 7a00 	vldr	s15, [r5]
 800e8bc:	ed96 7a00 	vldr	s14, [r6]
 800e8c0:	edd0 3a01 	vldr	s7, [r0, #4]
 800e8c4:	ed96 4a01 	vldr	s8, [r6, #4]
 800e8c8:	ed95 5a01 	vldr	s10, [r5, #4]
 800e8cc:	9008      	str	r0, [sp, #32]
 800e8ce:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800e8d2:	18c7      	adds	r7, r0, r3
 800e8d4:	edd7 4a00 	vldr	s9, [r7]
 800e8d8:	ed97 3a01 	vldr	s6, [r7, #4]
 800e8dc:	9701      	str	r7, [sp, #4]
 800e8de:	ee77 6a06 	vadd.f32	s13, s14, s12
 800e8e2:	462c      	mov	r4, r5
 800e8e4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e8e8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e8ec:	ee16 ca90 	vmov	ip, s13
 800e8f0:	f844 cb08 	str.w	ip, [r4], #8
 800e8f4:	ee75 6a23 	vadd.f32	s13, s10, s7
 800e8f8:	edd6 5a01 	vldr	s11, [r6, #4]
 800e8fc:	edd7 2a01 	vldr	s5, [r7, #4]
 800e900:	9404      	str	r4, [sp, #16]
 800e902:	ee35 5a63 	vsub.f32	s10, s10, s7
 800e906:	ee74 3a27 	vadd.f32	s7, s8, s15
 800e90a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800e90e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800e912:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800e916:	0849      	lsrs	r1, r1, #1
 800e918:	f102 0e08 	add.w	lr, r2, #8
 800e91c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800e920:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800e924:	9109      	str	r1, [sp, #36]	; 0x24
 800e926:	ee35 4a47 	vsub.f32	s8, s10, s14
 800e92a:	f1a1 0902 	sub.w	r9, r1, #2
 800e92e:	f8cd e00c 	str.w	lr, [sp, #12]
 800e932:	4631      	mov	r1, r6
 800e934:	ee13 ea90 	vmov	lr, s7
 800e938:	ee36 6a64 	vsub.f32	s12, s12, s9
 800e93c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800e940:	4604      	mov	r4, r0
 800e942:	edc5 5a01 	vstr	s11, [r5, #4]
 800e946:	ee37 7a05 	vadd.f32	s14, s14, s10
 800e94a:	f841 eb08 	str.w	lr, [r1], #8
 800e94e:	ee34 5a24 	vadd.f32	s10, s8, s9
 800e952:	ee16 ea10 	vmov	lr, s12
 800e956:	ed86 5a01 	vstr	s10, [r6, #4]
 800e95a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800e95e:	f844 eb08 	str.w	lr, [r4], #8
 800e962:	ee77 7a83 	vadd.f32	s15, s15, s6
 800e966:	edc0 6a01 	vstr	s13, [r0, #4]
 800e96a:	9405      	str	r4, [sp, #20]
 800e96c:	4604      	mov	r4, r0
 800e96e:	ee17 0a90 	vmov	r0, s15
 800e972:	9106      	str	r1, [sp, #24]
 800e974:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e978:	f102 0110 	add.w	r1, r2, #16
 800e97c:	46bc      	mov	ip, r7
 800e97e:	9100      	str	r1, [sp, #0]
 800e980:	f847 0b08 	str.w	r0, [r7], #8
 800e984:	f102 0118 	add.w	r1, r2, #24
 800e988:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800e98c:	9102      	str	r1, [sp, #8]
 800e98e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800e992:	9007      	str	r0, [sp, #28]
 800e994:	f000 8134 	beq.w	800ec00 <arm_cfft_radix8by4_f32+0x368>
 800e998:	f102 0920 	add.w	r9, r2, #32
 800e99c:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800e9a0:	9a01      	ldr	r2, [sp, #4]
 800e9a2:	f8dd a000 	ldr.w	sl, [sp]
 800e9a6:	3b0c      	subs	r3, #12
 800e9a8:	4683      	mov	fp, r0
 800e9aa:	4463      	add	r3, ip
 800e9ac:	f105 0e10 	add.w	lr, r5, #16
 800e9b0:	f1a4 010c 	sub.w	r1, r4, #12
 800e9b4:	f104 0510 	add.w	r5, r4, #16
 800e9b8:	f1a6 0c0c 	sub.w	ip, r6, #12
 800e9bc:	f1a2 040c 	sub.w	r4, r2, #12
 800e9c0:	f106 0010 	add.w	r0, r6, #16
 800e9c4:	3210      	adds	r2, #16
 800e9c6:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800e9ca:	ed55 5a02 	vldr	s11, [r5, #-8]
 800e9ce:	ed50 7a02 	vldr	s15, [r0, #-8]
 800e9d2:	ed52 1a02 	vldr	s3, [r2, #-8]
 800e9d6:	ed55 6a01 	vldr	s13, [r5, #-4]
 800e9da:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800e9de:	ed12 1a01 	vldr	s2, [r2, #-4]
 800e9e2:	ed10 8a01 	vldr	s16, [r0, #-4]
 800e9e6:	ee35 4a25 	vadd.f32	s8, s10, s11
 800e9ea:	ee30 6a26 	vadd.f32	s12, s0, s13
 800e9ee:	ee37 7a84 	vadd.f32	s14, s15, s8
 800e9f2:	ee30 0a66 	vsub.f32	s0, s0, s13
 800e9f6:	ee37 7a21 	vadd.f32	s14, s14, s3
 800e9fa:	ee75 5a65 	vsub.f32	s11, s10, s11
 800e9fe:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800ea02:	ed10 7a01 	vldr	s14, [r0, #-4]
 800ea06:	ed52 6a01 	vldr	s13, [r2, #-4]
 800ea0a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800ea0e:	ee78 aa25 	vadd.f32	s21, s16, s11
 800ea12:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ea16:	ee70 3a67 	vsub.f32	s7, s0, s15
 800ea1a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800ea1e:	ed94 7a02 	vldr	s14, [r4, #8]
 800ea22:	ed9c 2a02 	vldr	s4, [ip, #8]
 800ea26:	ed91 ba02 	vldr	s22, [r1, #8]
 800ea2a:	edd3 9a02 	vldr	s19, [r3, #8]
 800ea2e:	edd4 2a01 	vldr	s5, [r4, #4]
 800ea32:	ed9c 9a01 	vldr	s18, [ip, #4]
 800ea36:	ed93 5a01 	vldr	s10, [r3, #4]
 800ea3a:	edd1 0a01 	vldr	s1, [r1, #4]
 800ea3e:	ee72 6a07 	vadd.f32	s13, s4, s14
 800ea42:	ee32 2a47 	vsub.f32	s4, s4, s14
 800ea46:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800ea4a:	ee79 4a22 	vadd.f32	s9, s18, s5
 800ea4e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800ea52:	ee79 2a62 	vsub.f32	s5, s18, s5
 800ea56:	ed8c 7a02 	vstr	s14, [ip, #8]
 800ea5a:	ed91 7a01 	vldr	s14, [r1, #4]
 800ea5e:	edd3 8a01 	vldr	s17, [r3, #4]
 800ea62:	ee34 7a87 	vadd.f32	s14, s9, s14
 800ea66:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800ea6a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800ea6e:	ee32 9a60 	vsub.f32	s18, s4, s1
 800ea72:	ed8c 7a01 	vstr	s14, [ip, #4]
 800ea76:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800ea7a:	ed1a aa02 	vldr	s20, [sl, #-8]
 800ea7e:	ee73 8a22 	vadd.f32	s17, s6, s5
 800ea82:	ee39 9a05 	vadd.f32	s18, s18, s10
 800ea86:	ee7a aac1 	vsub.f32	s21, s21, s2
 800ea8a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800ea8e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800ea92:	ee69 ba07 	vmul.f32	s23, s18, s14
 800ea96:	ee6a aa87 	vmul.f32	s21, s21, s14
 800ea9a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800ea9e:	ee63 ca87 	vmul.f32	s25, s7, s14
 800eaa2:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800eaa6:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800eaaa:	ee68 8a87 	vmul.f32	s17, s17, s14
 800eaae:	ee73 3aea 	vsub.f32	s7, s7, s21
 800eab2:	ee78 8a89 	vadd.f32	s17, s17, s18
 800eab6:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800eaba:	ee3b aaca 	vsub.f32	s20, s23, s20
 800eabe:	ee34 4a67 	vsub.f32	s8, s8, s15
 800eac2:	ee76 6acb 	vsub.f32	s13, s13, s22
 800eac6:	ee36 6a48 	vsub.f32	s12, s12, s16
 800eaca:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800eace:	ed00 7a02 	vstr	s14, [r0, #-8]
 800ead2:	ed40 3a01 	vstr	s7, [r0, #-4]
 800ead6:	edc1 8a01 	vstr	s17, [r1, #4]
 800eada:	ed81 aa02 	vstr	s20, [r1, #8]
 800eade:	ed59 3a04 	vldr	s7, [r9, #-16]
 800eae2:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800eae6:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800eaea:	ed59 6a03 	vldr	s13, [r9, #-12]
 800eaee:	ee34 4a61 	vsub.f32	s8, s8, s3
 800eaf2:	ee36 6a41 	vsub.f32	s12, s12, s2
 800eaf6:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800eafa:	ee66 9a26 	vmul.f32	s19, s12, s13
 800eafe:	ee24 9a23 	vmul.f32	s18, s8, s7
 800eb02:	ee26 6a23 	vmul.f32	s12, s12, s7
 800eb06:	ee24 4a26 	vmul.f32	s8, s8, s13
 800eb0a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800eb0e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800eb12:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800eb16:	ee36 6a44 	vsub.f32	s12, s12, s8
 800eb1a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800eb1e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800eb22:	ee79 3a29 	vadd.f32	s7, s18, s19
 800eb26:	ee75 6a60 	vsub.f32	s13, s10, s1
 800eb2a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800eb2e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800eb32:	ed45 3a02 	vstr	s7, [r5, #-8]
 800eb36:	ed05 6a01 	vstr	s12, [r5, #-4]
 800eb3a:	ed84 7a01 	vstr	s14, [r4, #4]
 800eb3e:	ed84 4a02 	vstr	s8, [r4, #8]
 800eb42:	ee35 6a81 	vadd.f32	s12, s11, s2
 800eb46:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800eb4a:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800eb4e:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800eb52:	ee33 3a62 	vsub.f32	s6, s6, s5
 800eb56:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800eb5a:	ee67 2a26 	vmul.f32	s5, s14, s13
 800eb5e:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800eb62:	ee26 5a25 	vmul.f32	s10, s12, s11
 800eb66:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800eb6a:	ee26 6a26 	vmul.f32	s12, s12, s13
 800eb6e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800eb72:	ee63 6a26 	vmul.f32	s13, s6, s13
 800eb76:	ee23 3a25 	vmul.f32	s6, s6, s11
 800eb7a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800eb7e:	ee75 5a24 	vadd.f32	s11, s10, s9
 800eb82:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800eb86:	ee36 7a87 	vadd.f32	s14, s13, s14
 800eb8a:	f1bb 0b01 	subs.w	fp, fp, #1
 800eb8e:	ed42 5a02 	vstr	s11, [r2, #-8]
 800eb92:	ed42 7a01 	vstr	s15, [r2, #-4]
 800eb96:	f10e 0e08 	add.w	lr, lr, #8
 800eb9a:	ed83 3a02 	vstr	s6, [r3, #8]
 800eb9e:	ed83 7a01 	vstr	s14, [r3, #4]
 800eba2:	f1ac 0c08 	sub.w	ip, ip, #8
 800eba6:	f10a 0a08 	add.w	sl, sl, #8
 800ebaa:	f100 0008 	add.w	r0, r0, #8
 800ebae:	f1a1 0108 	sub.w	r1, r1, #8
 800ebb2:	f109 0910 	add.w	r9, r9, #16
 800ebb6:	f105 0508 	add.w	r5, r5, #8
 800ebba:	f1a4 0408 	sub.w	r4, r4, #8
 800ebbe:	f108 0818 	add.w	r8, r8, #24
 800ebc2:	f102 0208 	add.w	r2, r2, #8
 800ebc6:	f1a3 0308 	sub.w	r3, r3, #8
 800ebca:	f47f aefc 	bne.w	800e9c6 <arm_cfft_radix8by4_f32+0x12e>
 800ebce:	9907      	ldr	r1, [sp, #28]
 800ebd0:	9800      	ldr	r0, [sp, #0]
 800ebd2:	00cb      	lsls	r3, r1, #3
 800ebd4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800ebd8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800ebdc:	9100      	str	r1, [sp, #0]
 800ebde:	9904      	ldr	r1, [sp, #16]
 800ebe0:	4419      	add	r1, r3
 800ebe2:	9104      	str	r1, [sp, #16]
 800ebe4:	9903      	ldr	r1, [sp, #12]
 800ebe6:	4419      	add	r1, r3
 800ebe8:	9103      	str	r1, [sp, #12]
 800ebea:	9906      	ldr	r1, [sp, #24]
 800ebec:	4419      	add	r1, r3
 800ebee:	9106      	str	r1, [sp, #24]
 800ebf0:	9905      	ldr	r1, [sp, #20]
 800ebf2:	441f      	add	r7, r3
 800ebf4:	4419      	add	r1, r3
 800ebf6:	9b02      	ldr	r3, [sp, #8]
 800ebf8:	9105      	str	r1, [sp, #20]
 800ebfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ebfe:	9302      	str	r3, [sp, #8]
 800ec00:	9904      	ldr	r1, [sp, #16]
 800ec02:	9805      	ldr	r0, [sp, #20]
 800ec04:	ed91 4a00 	vldr	s8, [r1]
 800ec08:	edd0 6a00 	vldr	s13, [r0]
 800ec0c:	9b06      	ldr	r3, [sp, #24]
 800ec0e:	ed97 3a00 	vldr	s6, [r7]
 800ec12:	edd3 7a00 	vldr	s15, [r3]
 800ec16:	edd0 4a01 	vldr	s9, [r0, #4]
 800ec1a:	edd1 3a01 	vldr	s7, [r1, #4]
 800ec1e:	ed97 2a01 	vldr	s4, [r7, #4]
 800ec22:	ed93 7a01 	vldr	s14, [r3, #4]
 800ec26:	9a03      	ldr	r2, [sp, #12]
 800ec28:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800ec2c:	ee34 6a26 	vadd.f32	s12, s8, s13
 800ec30:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800ec34:	ee37 5a86 	vadd.f32	s10, s15, s12
 800ec38:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800ec3c:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ec40:	ee74 6a66 	vsub.f32	s13, s8, s13
 800ec44:	ed81 5a00 	vstr	s10, [r1]
 800ec48:	ed93 5a01 	vldr	s10, [r3, #4]
 800ec4c:	edd7 4a01 	vldr	s9, [r7, #4]
 800ec50:	ee35 5a85 	vadd.f32	s10, s11, s10
 800ec54:	ee37 4a26 	vadd.f32	s8, s14, s13
 800ec58:	ee35 5a24 	vadd.f32	s10, s10, s9
 800ec5c:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800ec60:	ed81 5a01 	vstr	s10, [r1, #4]
 800ec64:	edd2 1a00 	vldr	s3, [r2]
 800ec68:	edd2 2a01 	vldr	s5, [r2, #4]
 800ec6c:	ee34 5a83 	vadd.f32	s10, s9, s6
 800ec70:	ee34 4a42 	vsub.f32	s8, s8, s4
 800ec74:	ee36 6a67 	vsub.f32	s12, s12, s15
 800ec78:	ee64 4a21 	vmul.f32	s9, s8, s3
 800ec7c:	ee24 4a22 	vmul.f32	s8, s8, s5
 800ec80:	ee65 2a22 	vmul.f32	s5, s10, s5
 800ec84:	ee25 5a21 	vmul.f32	s10, s10, s3
 800ec88:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800ec8c:	ee35 5a44 	vsub.f32	s10, s10, s8
 800ec90:	edc3 2a00 	vstr	s5, [r3]
 800ec94:	ed83 5a01 	vstr	s10, [r3, #4]
 800ec98:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800ec9c:	9b00      	ldr	r3, [sp, #0]
 800ec9e:	ee36 6a43 	vsub.f32	s12, s12, s6
 800eca2:	ed93 4a01 	vldr	s8, [r3, #4]
 800eca6:	ed93 5a00 	vldr	s10, [r3]
 800ecaa:	9b02      	ldr	r3, [sp, #8]
 800ecac:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800ecb0:	ee66 4a05 	vmul.f32	s9, s12, s10
 800ecb4:	ee25 5a85 	vmul.f32	s10, s11, s10
 800ecb8:	ee26 6a04 	vmul.f32	s12, s12, s8
 800ecbc:	ee65 5a84 	vmul.f32	s11, s11, s8
 800ecc0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800ecc4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800ecc8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800eccc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ecd0:	ed80 6a01 	vstr	s12, [r0, #4]
 800ecd4:	edc0 5a00 	vstr	s11, [r0]
 800ecd8:	edd3 5a01 	vldr	s11, [r3, #4]
 800ecdc:	edd3 6a00 	vldr	s13, [r3]
 800ece0:	ee37 7a02 	vadd.f32	s14, s14, s4
 800ece4:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800ece8:	ee27 6a26 	vmul.f32	s12, s14, s13
 800ecec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ecf0:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ecf4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ecf8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ecfc:	ee76 7a27 	vadd.f32	s15, s12, s15
 800ed00:	ed87 7a01 	vstr	s14, [r7, #4]
 800ed04:	edc7 7a00 	vstr	s15, [r7]
 800ed08:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800ed0c:	4621      	mov	r1, r4
 800ed0e:	686a      	ldr	r2, [r5, #4]
 800ed10:	2304      	movs	r3, #4
 800ed12:	f000 f979 	bl	800f008 <arm_radix8_butterfly_f32>
 800ed16:	4630      	mov	r0, r6
 800ed18:	4621      	mov	r1, r4
 800ed1a:	686a      	ldr	r2, [r5, #4]
 800ed1c:	2304      	movs	r3, #4
 800ed1e:	f000 f973 	bl	800f008 <arm_radix8_butterfly_f32>
 800ed22:	9808      	ldr	r0, [sp, #32]
 800ed24:	686a      	ldr	r2, [r5, #4]
 800ed26:	4621      	mov	r1, r4
 800ed28:	2304      	movs	r3, #4
 800ed2a:	f000 f96d 	bl	800f008 <arm_radix8_butterfly_f32>
 800ed2e:	686a      	ldr	r2, [r5, #4]
 800ed30:	9801      	ldr	r0, [sp, #4]
 800ed32:	4621      	mov	r1, r4
 800ed34:	2304      	movs	r3, #4
 800ed36:	b00d      	add	sp, #52	; 0x34
 800ed38:	ecbd 8b0a 	vpop	{d8-d12}
 800ed3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed40:	f000 b962 	b.w	800f008 <arm_radix8_butterfly_f32>

0800ed44 <arm_cfft_f32>:
 800ed44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed48:	2a01      	cmp	r2, #1
 800ed4a:	4606      	mov	r6, r0
 800ed4c:	4617      	mov	r7, r2
 800ed4e:	460c      	mov	r4, r1
 800ed50:	4698      	mov	r8, r3
 800ed52:	8805      	ldrh	r5, [r0, #0]
 800ed54:	d056      	beq.n	800ee04 <arm_cfft_f32+0xc0>
 800ed56:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800ed5a:	d063      	beq.n	800ee24 <arm_cfft_f32+0xe0>
 800ed5c:	d916      	bls.n	800ed8c <arm_cfft_f32+0x48>
 800ed5e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800ed62:	d01a      	beq.n	800ed9a <arm_cfft_f32+0x56>
 800ed64:	d947      	bls.n	800edf6 <arm_cfft_f32+0xb2>
 800ed66:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800ed6a:	d05b      	beq.n	800ee24 <arm_cfft_f32+0xe0>
 800ed6c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800ed70:	d105      	bne.n	800ed7e <arm_cfft_f32+0x3a>
 800ed72:	2301      	movs	r3, #1
 800ed74:	6872      	ldr	r2, [r6, #4]
 800ed76:	4629      	mov	r1, r5
 800ed78:	4620      	mov	r0, r4
 800ed7a:	f000 f945 	bl	800f008 <arm_radix8_butterfly_f32>
 800ed7e:	f1b8 0f00 	cmp.w	r8, #0
 800ed82:	d111      	bne.n	800eda8 <arm_cfft_f32+0x64>
 800ed84:	2f01      	cmp	r7, #1
 800ed86:	d016      	beq.n	800edb6 <arm_cfft_f32+0x72>
 800ed88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed8c:	2d20      	cmp	r5, #32
 800ed8e:	d049      	beq.n	800ee24 <arm_cfft_f32+0xe0>
 800ed90:	d935      	bls.n	800edfe <arm_cfft_f32+0xba>
 800ed92:	2d40      	cmp	r5, #64	; 0x40
 800ed94:	d0ed      	beq.n	800ed72 <arm_cfft_f32+0x2e>
 800ed96:	2d80      	cmp	r5, #128	; 0x80
 800ed98:	d1f1      	bne.n	800ed7e <arm_cfft_f32+0x3a>
 800ed9a:	4621      	mov	r1, r4
 800ed9c:	4630      	mov	r0, r6
 800ed9e:	f7ff fcab 	bl	800e6f8 <arm_cfft_radix8by2_f32>
 800eda2:	f1b8 0f00 	cmp.w	r8, #0
 800eda6:	d0ed      	beq.n	800ed84 <arm_cfft_f32+0x40>
 800eda8:	68b2      	ldr	r2, [r6, #8]
 800edaa:	89b1      	ldrh	r1, [r6, #12]
 800edac:	4620      	mov	r0, r4
 800edae:	f000 f841 	bl	800ee34 <arm_bitreversal_32>
 800edb2:	2f01      	cmp	r7, #1
 800edb4:	d1e8      	bne.n	800ed88 <arm_cfft_f32+0x44>
 800edb6:	ee07 5a90 	vmov	s15, r5
 800edba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800edc2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800edc6:	2d00      	cmp	r5, #0
 800edc8:	d0de      	beq.n	800ed88 <arm_cfft_f32+0x44>
 800edca:	f104 0108 	add.w	r1, r4, #8
 800edce:	2300      	movs	r3, #0
 800edd0:	3301      	adds	r3, #1
 800edd2:	429d      	cmp	r5, r3
 800edd4:	f101 0108 	add.w	r1, r1, #8
 800edd8:	ed11 7a04 	vldr	s14, [r1, #-16]
 800eddc:	ed51 7a03 	vldr	s15, [r1, #-12]
 800ede0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ede4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ede8:	ed01 7a04 	vstr	s14, [r1, #-16]
 800edec:	ed41 7a03 	vstr	s15, [r1, #-12]
 800edf0:	d1ee      	bne.n	800edd0 <arm_cfft_f32+0x8c>
 800edf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edf6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800edfa:	d0ba      	beq.n	800ed72 <arm_cfft_f32+0x2e>
 800edfc:	e7bf      	b.n	800ed7e <arm_cfft_f32+0x3a>
 800edfe:	2d10      	cmp	r5, #16
 800ee00:	d0cb      	beq.n	800ed9a <arm_cfft_f32+0x56>
 800ee02:	e7bc      	b.n	800ed7e <arm_cfft_f32+0x3a>
 800ee04:	b19d      	cbz	r5, 800ee2e <arm_cfft_f32+0xea>
 800ee06:	f101 030c 	add.w	r3, r1, #12
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800ee10:	3201      	adds	r2, #1
 800ee12:	eef1 7a67 	vneg.f32	s15, s15
 800ee16:	4295      	cmp	r5, r2
 800ee18:	ed43 7a02 	vstr	s15, [r3, #-8]
 800ee1c:	f103 0308 	add.w	r3, r3, #8
 800ee20:	d1f4      	bne.n	800ee0c <arm_cfft_f32+0xc8>
 800ee22:	e798      	b.n	800ed56 <arm_cfft_f32+0x12>
 800ee24:	4621      	mov	r1, r4
 800ee26:	4630      	mov	r0, r6
 800ee28:	f7ff fd36 	bl	800e898 <arm_cfft_radix8by4_f32>
 800ee2c:	e7a7      	b.n	800ed7e <arm_cfft_f32+0x3a>
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d0aa      	beq.n	800ed88 <arm_cfft_f32+0x44>
 800ee32:	e7b9      	b.n	800eda8 <arm_cfft_f32+0x64>

0800ee34 <arm_bitreversal_32>:
 800ee34:	b1e9      	cbz	r1, 800ee72 <arm_bitreversal_32+0x3e>
 800ee36:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee38:	2500      	movs	r5, #0
 800ee3a:	f102 0e02 	add.w	lr, r2, #2
 800ee3e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800ee42:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800ee46:	08a4      	lsrs	r4, r4, #2
 800ee48:	089b      	lsrs	r3, r3, #2
 800ee4a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800ee4e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800ee52:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800ee56:	00a6      	lsls	r6, r4, #2
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800ee5e:	3304      	adds	r3, #4
 800ee60:	1d34      	adds	r4, r6, #4
 800ee62:	3502      	adds	r5, #2
 800ee64:	58c6      	ldr	r6, [r0, r3]
 800ee66:	5907      	ldr	r7, [r0, r4]
 800ee68:	50c7      	str	r7, [r0, r3]
 800ee6a:	428d      	cmp	r5, r1
 800ee6c:	5106      	str	r6, [r0, r4]
 800ee6e:	d3e6      	bcc.n	800ee3e <arm_bitreversal_32+0xa>
 800ee70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee72:	4770      	bx	lr

0800ee74 <arm_cmplx_mag_squared_f32>:
 800ee74:	b470      	push	{r4, r5, r6}
 800ee76:	0896      	lsrs	r6, r2, #2
 800ee78:	d03e      	beq.n	800eef8 <arm_cmplx_mag_squared_f32+0x84>
 800ee7a:	f100 0320 	add.w	r3, r0, #32
 800ee7e:	f101 0410 	add.w	r4, r1, #16
 800ee82:	4635      	mov	r5, r6
 800ee84:	ed53 7a08 	vldr	s15, [r3, #-32]	; 0xffffffe0
 800ee88:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800ee8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ee90:	ee27 7a07 	vmul.f32	s14, s14, s14
 800ee94:	3d01      	subs	r5, #1
 800ee96:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ee9a:	f103 0320 	add.w	r3, r3, #32
 800ee9e:	ed44 7a04 	vstr	s15, [r4, #-16]
 800eea2:	ed53 7a0e 	vldr	s15, [r3, #-56]	; 0xffffffc8
 800eea6:	ed13 7a0d 	vldr	s14, [r3, #-52]	; 0xffffffcc
 800eeaa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eeae:	ee27 7a07 	vmul.f32	s14, s14, s14
 800eeb2:	f104 0410 	add.w	r4, r4, #16
 800eeb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eeba:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 800eebe:	ed53 7a0c 	vldr	s15, [r3, #-48]	; 0xffffffd0
 800eec2:	ed13 7a0b 	vldr	s14, [r3, #-44]	; 0xffffffd4
 800eec6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eeca:	ee27 7a07 	vmul.f32	s14, s14, s14
 800eece:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eed2:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 800eed6:	ed53 7a0a 	vldr	s15, [r3, #-40]	; 0xffffffd8
 800eeda:	ed13 7a09 	vldr	s14, [r3, #-36]	; 0xffffffdc
 800eede:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eee2:	ee27 7a07 	vmul.f32	s14, s14, s14
 800eee6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eeea:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800eeee:	d1c9      	bne.n	800ee84 <arm_cmplx_mag_squared_f32+0x10>
 800eef0:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 800eef4:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800eef8:	f012 0203 	ands.w	r2, r2, #3
 800eefc:	d027      	beq.n	800ef4e <arm_cmplx_mag_squared_f32+0xda>
 800eefe:	ed90 7a00 	vldr	s14, [r0]
 800ef02:	edd0 7a01 	vldr	s15, [r0, #4]
 800ef06:	ee27 7a07 	vmul.f32	s14, s14, s14
 800ef0a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ef0e:	3a01      	subs	r2, #1
 800ef10:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ef14:	edc1 7a00 	vstr	s15, [r1]
 800ef18:	d019      	beq.n	800ef4e <arm_cmplx_mag_squared_f32+0xda>
 800ef1a:	edd0 7a02 	vldr	s15, [r0, #8]
 800ef1e:	ed90 7a03 	vldr	s14, [r0, #12]
 800ef22:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ef26:	ee27 7a07 	vmul.f32	s14, s14, s14
 800ef2a:	2a01      	cmp	r2, #1
 800ef2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ef30:	edc1 7a01 	vstr	s15, [r1, #4]
 800ef34:	d00b      	beq.n	800ef4e <arm_cmplx_mag_squared_f32+0xda>
 800ef36:	edd0 7a04 	vldr	s15, [r0, #16]
 800ef3a:	ed90 7a05 	vldr	s14, [r0, #20]
 800ef3e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ef42:	ee27 7a07 	vmul.f32	s14, s14, s14
 800ef46:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ef4a:	edc1 7a02 	vstr	s15, [r1, #8]
 800ef4e:	bc70      	pop	{r4, r5, r6}
 800ef50:	4770      	bx	lr
 800ef52:	bf00      	nop

0800ef54 <arm_mult_f32>:
 800ef54:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800ef58:	b4f0      	push	{r4, r5, r6, r7}
 800ef5a:	d033      	beq.n	800efc4 <arm_mult_f32+0x70>
 800ef5c:	f100 0610 	add.w	r6, r0, #16
 800ef60:	f101 0510 	add.w	r5, r1, #16
 800ef64:	f102 0410 	add.w	r4, r2, #16
 800ef68:	4667      	mov	r7, ip
 800ef6a:	ed15 7a04 	vldr	s14, [r5, #-16]
 800ef6e:	ed56 7a04 	vldr	s15, [r6, #-16]
 800ef72:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ef76:	3f01      	subs	r7, #1
 800ef78:	ed44 7a04 	vstr	s15, [r4, #-16]
 800ef7c:	ed15 7a03 	vldr	s14, [r5, #-12]
 800ef80:	ed56 7a03 	vldr	s15, [r6, #-12]
 800ef84:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ef88:	f106 0610 	add.w	r6, r6, #16
 800ef8c:	ed44 7a03 	vstr	s15, [r4, #-12]
 800ef90:	ed15 7a02 	vldr	s14, [r5, #-8]
 800ef94:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800ef98:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ef9c:	f105 0510 	add.w	r5, r5, #16
 800efa0:	ed44 7a02 	vstr	s15, [r4, #-8]
 800efa4:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800efa8:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800efac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800efb0:	f104 0410 	add.w	r4, r4, #16
 800efb4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800efb8:	d1d7      	bne.n	800ef6a <arm_mult_f32+0x16>
 800efba:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800efbe:	4420      	add	r0, r4
 800efc0:	4421      	add	r1, r4
 800efc2:	4422      	add	r2, r4
 800efc4:	f013 0303 	ands.w	r3, r3, #3
 800efc8:	d01b      	beq.n	800f002 <arm_mult_f32+0xae>
 800efca:	edd1 7a00 	vldr	s15, [r1]
 800efce:	ed90 7a00 	vldr	s14, [r0]
 800efd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800efd6:	3b01      	subs	r3, #1
 800efd8:	edc2 7a00 	vstr	s15, [r2]
 800efdc:	d011      	beq.n	800f002 <arm_mult_f32+0xae>
 800efde:	edd0 7a01 	vldr	s15, [r0, #4]
 800efe2:	ed91 7a01 	vldr	s14, [r1, #4]
 800efe6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800efea:	2b01      	cmp	r3, #1
 800efec:	edc2 7a01 	vstr	s15, [r2, #4]
 800eff0:	d007      	beq.n	800f002 <arm_mult_f32+0xae>
 800eff2:	edd0 7a02 	vldr	s15, [r0, #8]
 800eff6:	ed91 7a02 	vldr	s14, [r1, #8]
 800effa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800effe:	edc2 7a02 	vstr	s15, [r2, #8]
 800f002:	bcf0      	pop	{r4, r5, r6, r7}
 800f004:	4770      	bx	lr
 800f006:	bf00      	nop

0800f008 <arm_radix8_butterfly_f32>:
 800f008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f00c:	ed2d 8b10 	vpush	{d8-d15}
 800f010:	b095      	sub	sp, #84	; 0x54
 800f012:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800f016:	4603      	mov	r3, r0
 800f018:	3304      	adds	r3, #4
 800f01a:	ed9f bab9 	vldr	s22, [pc, #740]	; 800f300 <arm_radix8_butterfly_f32+0x2f8>
 800f01e:	9012      	str	r0, [sp, #72]	; 0x48
 800f020:	468b      	mov	fp, r1
 800f022:	9313      	str	r3, [sp, #76]	; 0x4c
 800f024:	4689      	mov	r9, r1
 800f026:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800f02a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f02c:	960f      	str	r6, [sp, #60]	; 0x3c
 800f02e:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800f032:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800f036:	eb03 0508 	add.w	r5, r3, r8
 800f03a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800f03e:	eb05 040e 	add.w	r4, r5, lr
 800f042:	0137      	lsls	r7, r6, #4
 800f044:	eba6 030a 	sub.w	r3, r6, sl
 800f048:	eb04 000e 	add.w	r0, r4, lr
 800f04c:	44b2      	add	sl, r6
 800f04e:	1d3a      	adds	r2, r7, #4
 800f050:	9702      	str	r7, [sp, #8]
 800f052:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800f056:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800f05a:	ebae 0c06 	sub.w	ip, lr, r6
 800f05e:	9703      	str	r7, [sp, #12]
 800f060:	eb03 0708 	add.w	r7, r3, r8
 800f064:	9701      	str	r7, [sp, #4]
 800f066:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800f06a:	9706      	str	r7, [sp, #24]
 800f06c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800f06e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800f072:	f10e 0104 	add.w	r1, lr, #4
 800f076:	4439      	add	r1, r7
 800f078:	443a      	add	r2, r7
 800f07a:	0137      	lsls	r7, r6, #4
 800f07c:	00f6      	lsls	r6, r6, #3
 800f07e:	9704      	str	r7, [sp, #16]
 800f080:	9605      	str	r6, [sp, #20]
 800f082:	9f01      	ldr	r7, [sp, #4]
 800f084:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800f086:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800f08a:	f04f 0c00 	mov.w	ip, #0
 800f08e:	edd4 6a00 	vldr	s13, [r4]
 800f092:	edd7 1a00 	vldr	s3, [r7]
 800f096:	ed16 aa01 	vldr	s20, [r6, #-4]
 800f09a:	edd5 5a00 	vldr	s11, [r5]
 800f09e:	ed52 9a01 	vldr	s19, [r2, #-4]
 800f0a2:	ed90 6a00 	vldr	s12, [r0]
 800f0a6:	ed51 7a01 	vldr	s15, [r1, #-4]
 800f0aa:	ed93 3a00 	vldr	s6, [r3]
 800f0ae:	ee39 0a86 	vadd.f32	s0, s19, s12
 800f0b2:	ee33 2a21 	vadd.f32	s4, s6, s3
 800f0b6:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800f0ba:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800f0be:	ee35 7a02 	vadd.f32	s14, s10, s4
 800f0c2:	ee34 4a80 	vadd.f32	s8, s9, s0
 800f0c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f0ca:	ee74 6a07 	vadd.f32	s13, s8, s14
 800f0ce:	ee34 4a47 	vsub.f32	s8, s8, s14
 800f0d2:	ed46 6a01 	vstr	s13, [r6, #-4]
 800f0d6:	ed85 4a00 	vstr	s8, [r5]
 800f0da:	edd1 6a00 	vldr	s13, [r1]
 800f0de:	ed94 9a01 	vldr	s18, [r4, #4]
 800f0e2:	edd3 2a01 	vldr	s5, [r3, #4]
 800f0e6:	edd7 8a01 	vldr	s17, [r7, #4]
 800f0ea:	edd6 0a00 	vldr	s1, [r6]
 800f0ee:	edd5 3a01 	vldr	s7, [r5, #4]
 800f0f2:	ed90 8a01 	vldr	s16, [r0, #4]
 800f0f6:	ed92 7a00 	vldr	s14, [r2]
 800f0fa:	ee33 3a61 	vsub.f32	s6, s6, s3
 800f0fe:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800f102:	ee72 aae8 	vsub.f32	s21, s5, s17
 800f106:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800f10a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800f10e:	ee77 7a83 	vadd.f32	s15, s15, s6
 800f112:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800f116:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800f11a:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800f11e:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800f122:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800f126:	ee77 0a08 	vadd.f32	s1, s14, s16
 800f12a:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800f12e:	ee37 7a48 	vsub.f32	s14, s14, s16
 800f132:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800f136:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800f13a:	ee76 6a89 	vadd.f32	s13, s13, s18
 800f13e:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800f142:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800f146:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800f14a:	ee35 5a42 	vsub.f32	s10, s10, s4
 800f14e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800f152:	ee33 2a20 	vadd.f32	s4, s6, s1
 800f156:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800f15a:	ee33 3a60 	vsub.f32	s6, s6, s1
 800f15e:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800f162:	ee77 0a01 	vadd.f32	s1, s14, s2
 800f166:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800f16a:	ee37 7a41 	vsub.f32	s14, s14, s2
 800f16e:	ee73 1a84 	vadd.f32	s3, s7, s8
 800f172:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800f176:	ee76 3a27 	vadd.f32	s7, s12, s15
 800f17a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800f17e:	ee32 8a00 	vadd.f32	s16, s4, s0
 800f182:	ee33 1a45 	vsub.f32	s2, s6, s10
 800f186:	ee32 2a40 	vsub.f32	s4, s4, s0
 800f18a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800f18e:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800f192:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800f196:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800f19a:	ee34 6a67 	vsub.f32	s12, s8, s15
 800f19e:	ee75 4a87 	vadd.f32	s9, s11, s14
 800f1a2:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800f1a6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800f1aa:	ee77 7a84 	vadd.f32	s15, s15, s8
 800f1ae:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800f1b2:	44dc      	add	ip, fp
 800f1b4:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800f1b8:	45e1      	cmp	r9, ip
 800f1ba:	ed86 8a00 	vstr	s16, [r6]
 800f1be:	ed85 2a01 	vstr	s4, [r5, #4]
 800f1c2:	4456      	add	r6, sl
 800f1c4:	ed02 0a01 	vstr	s0, [r2, #-4]
 800f1c8:	4455      	add	r5, sl
 800f1ca:	edc0 6a00 	vstr	s13, [r0]
 800f1ce:	ed82 1a00 	vstr	s2, [r2]
 800f1d2:	ed80 5a01 	vstr	s10, [r0, #4]
 800f1d6:	4452      	add	r2, sl
 800f1d8:	ed01 3a01 	vstr	s6, [r1, #-4]
 800f1dc:	4450      	add	r0, sl
 800f1de:	edc7 2a00 	vstr	s5, [r7]
 800f1e2:	edc4 4a00 	vstr	s9, [r4]
 800f1e6:	ed83 7a00 	vstr	s14, [r3]
 800f1ea:	edc1 5a00 	vstr	s11, [r1]
 800f1ee:	edc7 3a01 	vstr	s7, [r7, #4]
 800f1f2:	4451      	add	r1, sl
 800f1f4:	ed84 6a01 	vstr	s12, [r4, #4]
 800f1f8:	4457      	add	r7, sl
 800f1fa:	edc3 7a01 	vstr	s15, [r3, #4]
 800f1fe:	4454      	add	r4, sl
 800f200:	4453      	add	r3, sl
 800f202:	f63f af44 	bhi.w	800f08e <arm_radix8_butterfly_f32+0x86>
 800f206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f208:	2b07      	cmp	r3, #7
 800f20a:	f240 81b7 	bls.w	800f57c <arm_radix8_butterfly_f32+0x574>
 800f20e:	9b06      	ldr	r3, [sp, #24]
 800f210:	9903      	ldr	r1, [sp, #12]
 800f212:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f214:	9e05      	ldr	r6, [sp, #20]
 800f216:	9a04      	ldr	r2, [sp, #16]
 800f218:	f103 0c08 	add.w	ip, r3, #8
 800f21c:	9b02      	ldr	r3, [sp, #8]
 800f21e:	3108      	adds	r1, #8
 800f220:	f108 0808 	add.w	r8, r8, #8
 800f224:	1841      	adds	r1, r0, r1
 800f226:	3608      	adds	r6, #8
 800f228:	330c      	adds	r3, #12
 800f22a:	4604      	mov	r4, r0
 800f22c:	4444      	add	r4, r8
 800f22e:	18c3      	adds	r3, r0, r3
 800f230:	9109      	str	r1, [sp, #36]	; 0x24
 800f232:	1981      	adds	r1, r0, r6
 800f234:	f10e 0e08 	add.w	lr, lr, #8
 800f238:	3208      	adds	r2, #8
 800f23a:	940b      	str	r4, [sp, #44]	; 0x2c
 800f23c:	9107      	str	r1, [sp, #28]
 800f23e:	4604      	mov	r4, r0
 800f240:	4601      	mov	r1, r0
 800f242:	9304      	str	r3, [sp, #16]
 800f244:	f100 030c 	add.w	r3, r0, #12
 800f248:	4474      	add	r4, lr
 800f24a:	f04f 0801 	mov.w	r8, #1
 800f24e:	1882      	adds	r2, r0, r2
 800f250:	4461      	add	r1, ip
 800f252:	9305      	str	r3, [sp, #20]
 800f254:	464b      	mov	r3, r9
 800f256:	940a      	str	r4, [sp, #40]	; 0x28
 800f258:	46c1      	mov	r9, r8
 800f25a:	9208      	str	r2, [sp, #32]
 800f25c:	46d8      	mov	r8, fp
 800f25e:	9106      	str	r1, [sp, #24]
 800f260:	f04f 0e00 	mov.w	lr, #0
 800f264:	469b      	mov	fp, r3
 800f266:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f268:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f26a:	449e      	add	lr, r3
 800f26c:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800f270:	441a      	add	r2, r3
 800f272:	920e      	str	r2, [sp, #56]	; 0x38
 800f274:	441a      	add	r2, r3
 800f276:	18d4      	adds	r4, r2, r3
 800f278:	18e5      	adds	r5, r4, r3
 800f27a:	18ee      	adds	r6, r5, r3
 800f27c:	18f7      	adds	r7, r6, r3
 800f27e:	eb07 0c03 	add.w	ip, r7, r3
 800f282:	920d      	str	r2, [sp, #52]	; 0x34
 800f284:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800f288:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800f28c:	910c      	str	r1, [sp, #48]	; 0x30
 800f28e:	4419      	add	r1, r3
 800f290:	9103      	str	r1, [sp, #12]
 800f292:	4419      	add	r1, r3
 800f294:	18ca      	adds	r2, r1, r3
 800f296:	9202      	str	r2, [sp, #8]
 800f298:	441a      	add	r2, r3
 800f29a:	18d0      	adds	r0, r2, r3
 800f29c:	ed92 ea01 	vldr	s28, [r2, #4]
 800f2a0:	9a02      	ldr	r2, [sp, #8]
 800f2a2:	edd4 7a00 	vldr	s15, [r4]
 800f2a6:	edd2 da01 	vldr	s27, [r2, #4]
 800f2aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f2ac:	ed91 da01 	vldr	s26, [r1, #4]
 800f2b0:	ed92 ca01 	vldr	s24, [r2, #4]
 800f2b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f2b6:	9903      	ldr	r1, [sp, #12]
 800f2b8:	edcd 7a03 	vstr	s15, [sp, #12]
 800f2bc:	edd2 7a00 	vldr	s15, [r2]
 800f2c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f2c2:	edcd 7a02 	vstr	s15, [sp, #8]
 800f2c6:	edd2 7a00 	vldr	s15, [r2]
 800f2ca:	edd0 ea01 	vldr	s29, [r0, #4]
 800f2ce:	edd1 ca01 	vldr	s25, [r1, #4]
 800f2d2:	eddc ba00 	vldr	s23, [ip]
 800f2d6:	edd7 aa00 	vldr	s21, [r7]
 800f2da:	ed96 aa00 	vldr	s20, [r6]
 800f2de:	edd5 9a00 	vldr	s19, [r5]
 800f2e2:	edcd 7a01 	vstr	s15, [sp, #4]
 800f2e6:	4403      	add	r3, r0
 800f2e8:	ed93 fa01 	vldr	s30, [r3, #4]
 800f2ec:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800f2f0:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800f2f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f2f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f2fc:	46cc      	mov	ip, r9
 800f2fe:	e001      	b.n	800f304 <arm_radix8_butterfly_f32+0x2fc>
 800f300:	3f3504f3 	.word	0x3f3504f3
 800f304:	ed91 6a00 	vldr	s12, [r1]
 800f308:	ed93 5a00 	vldr	s10, [r3]
 800f30c:	edd0 fa00 	vldr	s31, [r0]
 800f310:	edd4 7a00 	vldr	s15, [r4]
 800f314:	ed95 7a00 	vldr	s14, [r5]
 800f318:	ed56 3a01 	vldr	s7, [r6, #-4]
 800f31c:	ed17 3a01 	vldr	s6, [r7, #-4]
 800f320:	ed92 2a00 	vldr	s4, [r2]
 800f324:	ed96 0a00 	vldr	s0, [r6]
 800f328:	ee33 8a85 	vadd.f32	s16, s7, s10
 800f32c:	ee32 1a06 	vadd.f32	s2, s4, s12
 800f330:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800f334:	ee77 4a87 	vadd.f32	s9, s15, s14
 800f338:	ee78 1a04 	vadd.f32	s3, s16, s8
 800f33c:	ee71 6a24 	vadd.f32	s13, s2, s9
 800f340:	ee32 2a46 	vsub.f32	s4, s4, s12
 800f344:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800f348:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f34c:	ed06 6a01 	vstr	s12, [r6, #-4]
 800f350:	edd4 8a01 	vldr	s17, [r4, #4]
 800f354:	ed92 9a01 	vldr	s18, [r2, #4]
 800f358:	edd7 0a00 	vldr	s1, [r7]
 800f35c:	edd1 2a01 	vldr	s5, [r1, #4]
 800f360:	ed95 7a01 	vldr	s14, [r5, #4]
 800f364:	ed93 6a01 	vldr	s12, [r3, #4]
 800f368:	edd0 5a01 	vldr	s11, [r0, #4]
 800f36c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800f370:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800f374:	ee39 5a62 	vsub.f32	s10, s18, s5
 800f378:	ee78 fac7 	vsub.f32	s31, s17, s14
 800f37c:	ee38 4a44 	vsub.f32	s8, s16, s8
 800f380:	ee38 7a87 	vadd.f32	s14, s17, s14
 800f384:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800f388:	ee79 2a22 	vadd.f32	s5, s18, s5
 800f38c:	ee32 9a27 	vadd.f32	s18, s4, s15
 800f390:	ee72 7a67 	vsub.f32	s15, s4, s15
 800f394:	ee30 2a06 	vadd.f32	s4, s0, s12
 800f398:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800f39c:	ee71 4a64 	vsub.f32	s9, s2, s9
 800f3a0:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800f3a4:	ee32 1a08 	vadd.f32	s2, s4, s16
 800f3a8:	ee72 fa87 	vadd.f32	s31, s5, s14
 800f3ac:	ee32 2a48 	vsub.f32	s4, s4, s16
 800f3b0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800f3b4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800f3b8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800f3bc:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800f3c0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800f3c4:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800f3c8:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800f3cc:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800f3d0:	ee30 6a46 	vsub.f32	s12, s0, s12
 800f3d4:	ee74 0a22 	vadd.f32	s1, s8, s5
 800f3d8:	ee36 0a28 	vadd.f32	s0, s12, s17
 800f3dc:	ee74 2a62 	vsub.f32	s5, s8, s5
 800f3e0:	ee36 6a68 	vsub.f32	s12, s12, s17
 800f3e4:	ee32 4a64 	vsub.f32	s8, s4, s9
 800f3e8:	ee73 8a09 	vadd.f32	s17, s6, s18
 800f3ec:	ee74 4a82 	vadd.f32	s9, s9, s4
 800f3f0:	ee33 9a49 	vsub.f32	s18, s6, s18
 800f3f4:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800f3f8:	ee35 3a85 	vadd.f32	s6, s11, s10
 800f3fc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800f400:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800f404:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800f408:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800f40c:	ee30 7a68 	vsub.f32	s14, s0, s17
 800f410:	ee35 8a03 	vadd.f32	s16, s10, s6
 800f414:	ee38 0a80 	vadd.f32	s0, s17, s0
 800f418:	ee73 3a82 	vadd.f32	s7, s7, s4
 800f41c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800f420:	ed9d 2a01 	vldr	s4, [sp, #4]
 800f424:	eddd 1a02 	vldr	s3, [sp, #8]
 800f428:	ee35 5a43 	vsub.f32	s10, s10, s6
 800f42c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800f430:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800f434:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800f438:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f43c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800f440:	ee76 5a49 	vsub.f32	s11, s12, s18
 800f444:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800f448:	ee39 6a06 	vadd.f32	s12, s18, s12
 800f44c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800f450:	ee21 4a84 	vmul.f32	s8, s3, s8
 800f454:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800f458:	ee22 7a07 	vmul.f32	s14, s4, s14
 800f45c:	ee22 2a08 	vmul.f32	s4, s4, s16
 800f460:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800f464:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800f468:	ee31 1a09 	vadd.f32	s2, s2, s18
 800f46c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800f470:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800f474:	ee74 0a60 	vsub.f32	s1, s8, s1
 800f478:	ee37 7a48 	vsub.f32	s14, s14, s16
 800f47c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800f480:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800f484:	ee72 1a21 	vadd.f32	s3, s4, s3
 800f488:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800f48c:	ee38 2a89 	vadd.f32	s4, s17, s18
 800f490:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800f494:	ee38 8a04 	vadd.f32	s16, s16, s8
 800f498:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800f49c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800f4a0:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800f4a4:	eddd 5a03 	vldr	s11, [sp, #12]
 800f4a8:	edc6 fa00 	vstr	s31, [r6]
 800f4ac:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800f4b0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800f4b4:	ee30 0a45 	vsub.f32	s0, s0, s10
 800f4b8:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800f4bc:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800f4c0:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800f4c4:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800f4c8:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800f4cc:	ee25 6a86 	vmul.f32	s12, s11, s12
 800f4d0:	ee74 4a89 	vadd.f32	s9, s9, s18
 800f4d4:	ee34 3a43 	vsub.f32	s6, s8, s6
 800f4d8:	ee78 8a85 	vadd.f32	s17, s17, s10
 800f4dc:	ee36 6a67 	vsub.f32	s12, s12, s15
 800f4e0:	44c4      	add	ip, r8
 800f4e2:	45e3      	cmp	fp, ip
 800f4e4:	edc3 3a00 	vstr	s7, [r3]
 800f4e8:	edc3 6a01 	vstr	s13, [r3, #4]
 800f4ec:	4456      	add	r6, sl
 800f4ee:	ed07 1a01 	vstr	s2, [r7, #-4]
 800f4f2:	edc7 0a00 	vstr	s1, [r7]
 800f4f6:	4453      	add	r3, sl
 800f4f8:	ed80 2a00 	vstr	s4, [r0]
 800f4fc:	edc0 2a01 	vstr	s5, [r0, #4]
 800f500:	4457      	add	r7, sl
 800f502:	edc2 1a00 	vstr	s3, [r2]
 800f506:	ed82 7a01 	vstr	s14, [r2, #4]
 800f50a:	4450      	add	r0, sl
 800f50c:	ed85 8a00 	vstr	s16, [r5]
 800f510:	ed85 0a01 	vstr	s0, [r5, #4]
 800f514:	4452      	add	r2, sl
 800f516:	edc1 4a00 	vstr	s9, [r1]
 800f51a:	4455      	add	r5, sl
 800f51c:	ed81 3a01 	vstr	s6, [r1, #4]
 800f520:	edc4 8a00 	vstr	s17, [r4]
 800f524:	ed84 6a01 	vstr	s12, [r4, #4]
 800f528:	4451      	add	r1, sl
 800f52a:	4454      	add	r4, sl
 800f52c:	f63f aeea 	bhi.w	800f304 <arm_radix8_butterfly_f32+0x2fc>
 800f530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f532:	3308      	adds	r3, #8
 800f534:	930b      	str	r3, [sp, #44]	; 0x2c
 800f536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f538:	3308      	adds	r3, #8
 800f53a:	930a      	str	r3, [sp, #40]	; 0x28
 800f53c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f53e:	3308      	adds	r3, #8
 800f540:	9309      	str	r3, [sp, #36]	; 0x24
 800f542:	9b08      	ldr	r3, [sp, #32]
 800f544:	3308      	adds	r3, #8
 800f546:	9308      	str	r3, [sp, #32]
 800f548:	9b07      	ldr	r3, [sp, #28]
 800f54a:	3308      	adds	r3, #8
 800f54c:	9307      	str	r3, [sp, #28]
 800f54e:	9b06      	ldr	r3, [sp, #24]
 800f550:	3308      	adds	r3, #8
 800f552:	9306      	str	r3, [sp, #24]
 800f554:	9b05      	ldr	r3, [sp, #20]
 800f556:	3308      	adds	r3, #8
 800f558:	9305      	str	r3, [sp, #20]
 800f55a:	9b04      	ldr	r3, [sp, #16]
 800f55c:	3308      	adds	r3, #8
 800f55e:	9304      	str	r3, [sp, #16]
 800f560:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f562:	f109 0901 	add.w	r9, r9, #1
 800f566:	454b      	cmp	r3, r9
 800f568:	f47f ae7d 	bne.w	800f266 <arm_radix8_butterfly_f32+0x25e>
 800f56c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f56e:	00db      	lsls	r3, r3, #3
 800f570:	b29b      	uxth	r3, r3
 800f572:	46d9      	mov	r9, fp
 800f574:	9310      	str	r3, [sp, #64]	; 0x40
 800f576:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800f57a:	e554      	b.n	800f026 <arm_radix8_butterfly_f32+0x1e>
 800f57c:	b015      	add	sp, #84	; 0x54
 800f57e:	ecbd 8b10 	vpop	{d8-d15}
 800f582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f586:	bf00      	nop

0800f588 <__errno>:
 800f588:	4b01      	ldr	r3, [pc, #4]	; (800f590 <__errno+0x8>)
 800f58a:	6818      	ldr	r0, [r3, #0]
 800f58c:	4770      	bx	lr
 800f58e:	bf00      	nop
 800f590:	20001004 	.word	0x20001004

0800f594 <std>:
 800f594:	2300      	movs	r3, #0
 800f596:	b510      	push	{r4, lr}
 800f598:	4604      	mov	r4, r0
 800f59a:	e9c0 3300 	strd	r3, r3, [r0]
 800f59e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f5a2:	6083      	str	r3, [r0, #8]
 800f5a4:	8181      	strh	r1, [r0, #12]
 800f5a6:	6643      	str	r3, [r0, #100]	; 0x64
 800f5a8:	81c2      	strh	r2, [r0, #14]
 800f5aa:	6183      	str	r3, [r0, #24]
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	2208      	movs	r2, #8
 800f5b0:	305c      	adds	r0, #92	; 0x5c
 800f5b2:	f000 f92b 	bl	800f80c <memset>
 800f5b6:	4b05      	ldr	r3, [pc, #20]	; (800f5cc <std+0x38>)
 800f5b8:	6263      	str	r3, [r4, #36]	; 0x24
 800f5ba:	4b05      	ldr	r3, [pc, #20]	; (800f5d0 <std+0x3c>)
 800f5bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800f5be:	4b05      	ldr	r3, [pc, #20]	; (800f5d4 <std+0x40>)
 800f5c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f5c2:	4b05      	ldr	r3, [pc, #20]	; (800f5d8 <std+0x44>)
 800f5c4:	6224      	str	r4, [r4, #32]
 800f5c6:	6323      	str	r3, [r4, #48]	; 0x30
 800f5c8:	bd10      	pop	{r4, pc}
 800f5ca:	bf00      	nop
 800f5cc:	08010381 	.word	0x08010381
 800f5d0:	080103a3 	.word	0x080103a3
 800f5d4:	080103db 	.word	0x080103db
 800f5d8:	080103ff 	.word	0x080103ff

0800f5dc <_cleanup_r>:
 800f5dc:	4901      	ldr	r1, [pc, #4]	; (800f5e4 <_cleanup_r+0x8>)
 800f5de:	f000 b8af 	b.w	800f740 <_fwalk_reent>
 800f5e2:	bf00      	nop
 800f5e4:	080113cd 	.word	0x080113cd

0800f5e8 <__sfmoreglue>:
 800f5e8:	b570      	push	{r4, r5, r6, lr}
 800f5ea:	1e4a      	subs	r2, r1, #1
 800f5ec:	2568      	movs	r5, #104	; 0x68
 800f5ee:	4355      	muls	r5, r2
 800f5f0:	460e      	mov	r6, r1
 800f5f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f5f6:	f000 f961 	bl	800f8bc <_malloc_r>
 800f5fa:	4604      	mov	r4, r0
 800f5fc:	b140      	cbz	r0, 800f610 <__sfmoreglue+0x28>
 800f5fe:	2100      	movs	r1, #0
 800f600:	e9c0 1600 	strd	r1, r6, [r0]
 800f604:	300c      	adds	r0, #12
 800f606:	60a0      	str	r0, [r4, #8]
 800f608:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f60c:	f000 f8fe 	bl	800f80c <memset>
 800f610:	4620      	mov	r0, r4
 800f612:	bd70      	pop	{r4, r5, r6, pc}

0800f614 <__sfp_lock_acquire>:
 800f614:	4801      	ldr	r0, [pc, #4]	; (800f61c <__sfp_lock_acquire+0x8>)
 800f616:	f000 b8d8 	b.w	800f7ca <__retarget_lock_acquire_recursive>
 800f61a:	bf00      	nop
 800f61c:	2001a698 	.word	0x2001a698

0800f620 <__sfp_lock_release>:
 800f620:	4801      	ldr	r0, [pc, #4]	; (800f628 <__sfp_lock_release+0x8>)
 800f622:	f000 b8d3 	b.w	800f7cc <__retarget_lock_release_recursive>
 800f626:	bf00      	nop
 800f628:	2001a698 	.word	0x2001a698

0800f62c <__sinit_lock_acquire>:
 800f62c:	4801      	ldr	r0, [pc, #4]	; (800f634 <__sinit_lock_acquire+0x8>)
 800f62e:	f000 b8cc 	b.w	800f7ca <__retarget_lock_acquire_recursive>
 800f632:	bf00      	nop
 800f634:	2001a693 	.word	0x2001a693

0800f638 <__sinit_lock_release>:
 800f638:	4801      	ldr	r0, [pc, #4]	; (800f640 <__sinit_lock_release+0x8>)
 800f63a:	f000 b8c7 	b.w	800f7cc <__retarget_lock_release_recursive>
 800f63e:	bf00      	nop
 800f640:	2001a693 	.word	0x2001a693

0800f644 <__sinit>:
 800f644:	b510      	push	{r4, lr}
 800f646:	4604      	mov	r4, r0
 800f648:	f7ff fff0 	bl	800f62c <__sinit_lock_acquire>
 800f64c:	69a3      	ldr	r3, [r4, #24]
 800f64e:	b11b      	cbz	r3, 800f658 <__sinit+0x14>
 800f650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f654:	f7ff bff0 	b.w	800f638 <__sinit_lock_release>
 800f658:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f65c:	6523      	str	r3, [r4, #80]	; 0x50
 800f65e:	4b13      	ldr	r3, [pc, #76]	; (800f6ac <__sinit+0x68>)
 800f660:	4a13      	ldr	r2, [pc, #76]	; (800f6b0 <__sinit+0x6c>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	62a2      	str	r2, [r4, #40]	; 0x28
 800f666:	42a3      	cmp	r3, r4
 800f668:	bf04      	itt	eq
 800f66a:	2301      	moveq	r3, #1
 800f66c:	61a3      	streq	r3, [r4, #24]
 800f66e:	4620      	mov	r0, r4
 800f670:	f000 f820 	bl	800f6b4 <__sfp>
 800f674:	6060      	str	r0, [r4, #4]
 800f676:	4620      	mov	r0, r4
 800f678:	f000 f81c 	bl	800f6b4 <__sfp>
 800f67c:	60a0      	str	r0, [r4, #8]
 800f67e:	4620      	mov	r0, r4
 800f680:	f000 f818 	bl	800f6b4 <__sfp>
 800f684:	2200      	movs	r2, #0
 800f686:	60e0      	str	r0, [r4, #12]
 800f688:	2104      	movs	r1, #4
 800f68a:	6860      	ldr	r0, [r4, #4]
 800f68c:	f7ff ff82 	bl	800f594 <std>
 800f690:	68a0      	ldr	r0, [r4, #8]
 800f692:	2201      	movs	r2, #1
 800f694:	2109      	movs	r1, #9
 800f696:	f7ff ff7d 	bl	800f594 <std>
 800f69a:	68e0      	ldr	r0, [r4, #12]
 800f69c:	2202      	movs	r2, #2
 800f69e:	2112      	movs	r1, #18
 800f6a0:	f7ff ff78 	bl	800f594 <std>
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	61a3      	str	r3, [r4, #24]
 800f6a8:	e7d2      	b.n	800f650 <__sinit+0xc>
 800f6aa:	bf00      	nop
 800f6ac:	0807b2e4 	.word	0x0807b2e4
 800f6b0:	0800f5dd 	.word	0x0800f5dd

0800f6b4 <__sfp>:
 800f6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6b6:	4607      	mov	r7, r0
 800f6b8:	f7ff ffac 	bl	800f614 <__sfp_lock_acquire>
 800f6bc:	4b1e      	ldr	r3, [pc, #120]	; (800f738 <__sfp+0x84>)
 800f6be:	681e      	ldr	r6, [r3, #0]
 800f6c0:	69b3      	ldr	r3, [r6, #24]
 800f6c2:	b913      	cbnz	r3, 800f6ca <__sfp+0x16>
 800f6c4:	4630      	mov	r0, r6
 800f6c6:	f7ff ffbd 	bl	800f644 <__sinit>
 800f6ca:	3648      	adds	r6, #72	; 0x48
 800f6cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f6d0:	3b01      	subs	r3, #1
 800f6d2:	d503      	bpl.n	800f6dc <__sfp+0x28>
 800f6d4:	6833      	ldr	r3, [r6, #0]
 800f6d6:	b30b      	cbz	r3, 800f71c <__sfp+0x68>
 800f6d8:	6836      	ldr	r6, [r6, #0]
 800f6da:	e7f7      	b.n	800f6cc <__sfp+0x18>
 800f6dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f6e0:	b9d5      	cbnz	r5, 800f718 <__sfp+0x64>
 800f6e2:	4b16      	ldr	r3, [pc, #88]	; (800f73c <__sfp+0x88>)
 800f6e4:	60e3      	str	r3, [r4, #12]
 800f6e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f6ea:	6665      	str	r5, [r4, #100]	; 0x64
 800f6ec:	f000 f86c 	bl	800f7c8 <__retarget_lock_init_recursive>
 800f6f0:	f7ff ff96 	bl	800f620 <__sfp_lock_release>
 800f6f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f6f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f6fc:	6025      	str	r5, [r4, #0]
 800f6fe:	61a5      	str	r5, [r4, #24]
 800f700:	2208      	movs	r2, #8
 800f702:	4629      	mov	r1, r5
 800f704:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f708:	f000 f880 	bl	800f80c <memset>
 800f70c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f710:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f714:	4620      	mov	r0, r4
 800f716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f718:	3468      	adds	r4, #104	; 0x68
 800f71a:	e7d9      	b.n	800f6d0 <__sfp+0x1c>
 800f71c:	2104      	movs	r1, #4
 800f71e:	4638      	mov	r0, r7
 800f720:	f7ff ff62 	bl	800f5e8 <__sfmoreglue>
 800f724:	4604      	mov	r4, r0
 800f726:	6030      	str	r0, [r6, #0]
 800f728:	2800      	cmp	r0, #0
 800f72a:	d1d5      	bne.n	800f6d8 <__sfp+0x24>
 800f72c:	f7ff ff78 	bl	800f620 <__sfp_lock_release>
 800f730:	230c      	movs	r3, #12
 800f732:	603b      	str	r3, [r7, #0]
 800f734:	e7ee      	b.n	800f714 <__sfp+0x60>
 800f736:	bf00      	nop
 800f738:	0807b2e4 	.word	0x0807b2e4
 800f73c:	ffff0001 	.word	0xffff0001

0800f740 <_fwalk_reent>:
 800f740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f744:	4606      	mov	r6, r0
 800f746:	4688      	mov	r8, r1
 800f748:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f74c:	2700      	movs	r7, #0
 800f74e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f752:	f1b9 0901 	subs.w	r9, r9, #1
 800f756:	d505      	bpl.n	800f764 <_fwalk_reent+0x24>
 800f758:	6824      	ldr	r4, [r4, #0]
 800f75a:	2c00      	cmp	r4, #0
 800f75c:	d1f7      	bne.n	800f74e <_fwalk_reent+0xe>
 800f75e:	4638      	mov	r0, r7
 800f760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f764:	89ab      	ldrh	r3, [r5, #12]
 800f766:	2b01      	cmp	r3, #1
 800f768:	d907      	bls.n	800f77a <_fwalk_reent+0x3a>
 800f76a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f76e:	3301      	adds	r3, #1
 800f770:	d003      	beq.n	800f77a <_fwalk_reent+0x3a>
 800f772:	4629      	mov	r1, r5
 800f774:	4630      	mov	r0, r6
 800f776:	47c0      	blx	r8
 800f778:	4307      	orrs	r7, r0
 800f77a:	3568      	adds	r5, #104	; 0x68
 800f77c:	e7e9      	b.n	800f752 <_fwalk_reent+0x12>
	...

0800f780 <__libc_init_array>:
 800f780:	b570      	push	{r4, r5, r6, lr}
 800f782:	4d0d      	ldr	r5, [pc, #52]	; (800f7b8 <__libc_init_array+0x38>)
 800f784:	4c0d      	ldr	r4, [pc, #52]	; (800f7bc <__libc_init_array+0x3c>)
 800f786:	1b64      	subs	r4, r4, r5
 800f788:	10a4      	asrs	r4, r4, #2
 800f78a:	2600      	movs	r6, #0
 800f78c:	42a6      	cmp	r6, r4
 800f78e:	d109      	bne.n	800f7a4 <__libc_init_array+0x24>
 800f790:	4d0b      	ldr	r5, [pc, #44]	; (800f7c0 <__libc_init_array+0x40>)
 800f792:	4c0c      	ldr	r4, [pc, #48]	; (800f7c4 <__libc_init_array+0x44>)
 800f794:	f003 ffd0 	bl	8013738 <_init>
 800f798:	1b64      	subs	r4, r4, r5
 800f79a:	10a4      	asrs	r4, r4, #2
 800f79c:	2600      	movs	r6, #0
 800f79e:	42a6      	cmp	r6, r4
 800f7a0:	d105      	bne.n	800f7ae <__libc_init_array+0x2e>
 800f7a2:	bd70      	pop	{r4, r5, r6, pc}
 800f7a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7a8:	4798      	blx	r3
 800f7aa:	3601      	adds	r6, #1
 800f7ac:	e7ee      	b.n	800f78c <__libc_init_array+0xc>
 800f7ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7b2:	4798      	blx	r3
 800f7b4:	3601      	adds	r6, #1
 800f7b6:	e7f2      	b.n	800f79e <__libc_init_array+0x1e>
 800f7b8:	0807b860 	.word	0x0807b860
 800f7bc:	0807b860 	.word	0x0807b860
 800f7c0:	0807b860 	.word	0x0807b860
 800f7c4:	0807b864 	.word	0x0807b864

0800f7c8 <__retarget_lock_init_recursive>:
 800f7c8:	4770      	bx	lr

0800f7ca <__retarget_lock_acquire_recursive>:
 800f7ca:	4770      	bx	lr

0800f7cc <__retarget_lock_release_recursive>:
 800f7cc:	4770      	bx	lr
	...

0800f7d0 <malloc>:
 800f7d0:	4b02      	ldr	r3, [pc, #8]	; (800f7dc <malloc+0xc>)
 800f7d2:	4601      	mov	r1, r0
 800f7d4:	6818      	ldr	r0, [r3, #0]
 800f7d6:	f000 b871 	b.w	800f8bc <_malloc_r>
 800f7da:	bf00      	nop
 800f7dc:	20001004 	.word	0x20001004

0800f7e0 <free>:
 800f7e0:	4b02      	ldr	r3, [pc, #8]	; (800f7ec <free+0xc>)
 800f7e2:	4601      	mov	r1, r0
 800f7e4:	6818      	ldr	r0, [r3, #0]
 800f7e6:	f000 b819 	b.w	800f81c <_free_r>
 800f7ea:	bf00      	nop
 800f7ec:	20001004 	.word	0x20001004

0800f7f0 <memcpy>:
 800f7f0:	440a      	add	r2, r1
 800f7f2:	4291      	cmp	r1, r2
 800f7f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f7f8:	d100      	bne.n	800f7fc <memcpy+0xc>
 800f7fa:	4770      	bx	lr
 800f7fc:	b510      	push	{r4, lr}
 800f7fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f802:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f806:	4291      	cmp	r1, r2
 800f808:	d1f9      	bne.n	800f7fe <memcpy+0xe>
 800f80a:	bd10      	pop	{r4, pc}

0800f80c <memset>:
 800f80c:	4402      	add	r2, r0
 800f80e:	4603      	mov	r3, r0
 800f810:	4293      	cmp	r3, r2
 800f812:	d100      	bne.n	800f816 <memset+0xa>
 800f814:	4770      	bx	lr
 800f816:	f803 1b01 	strb.w	r1, [r3], #1
 800f81a:	e7f9      	b.n	800f810 <memset+0x4>

0800f81c <_free_r>:
 800f81c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f81e:	2900      	cmp	r1, #0
 800f820:	d048      	beq.n	800f8b4 <_free_r+0x98>
 800f822:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f826:	9001      	str	r0, [sp, #4]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	f1a1 0404 	sub.w	r4, r1, #4
 800f82e:	bfb8      	it	lt
 800f830:	18e4      	addlt	r4, r4, r3
 800f832:	f001 fe81 	bl	8011538 <__malloc_lock>
 800f836:	4a20      	ldr	r2, [pc, #128]	; (800f8b8 <_free_r+0x9c>)
 800f838:	9801      	ldr	r0, [sp, #4]
 800f83a:	6813      	ldr	r3, [r2, #0]
 800f83c:	4615      	mov	r5, r2
 800f83e:	b933      	cbnz	r3, 800f84e <_free_r+0x32>
 800f840:	6063      	str	r3, [r4, #4]
 800f842:	6014      	str	r4, [r2, #0]
 800f844:	b003      	add	sp, #12
 800f846:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f84a:	f001 be7b 	b.w	8011544 <__malloc_unlock>
 800f84e:	42a3      	cmp	r3, r4
 800f850:	d90b      	bls.n	800f86a <_free_r+0x4e>
 800f852:	6821      	ldr	r1, [r4, #0]
 800f854:	1862      	adds	r2, r4, r1
 800f856:	4293      	cmp	r3, r2
 800f858:	bf04      	itt	eq
 800f85a:	681a      	ldreq	r2, [r3, #0]
 800f85c:	685b      	ldreq	r3, [r3, #4]
 800f85e:	6063      	str	r3, [r4, #4]
 800f860:	bf04      	itt	eq
 800f862:	1852      	addeq	r2, r2, r1
 800f864:	6022      	streq	r2, [r4, #0]
 800f866:	602c      	str	r4, [r5, #0]
 800f868:	e7ec      	b.n	800f844 <_free_r+0x28>
 800f86a:	461a      	mov	r2, r3
 800f86c:	685b      	ldr	r3, [r3, #4]
 800f86e:	b10b      	cbz	r3, 800f874 <_free_r+0x58>
 800f870:	42a3      	cmp	r3, r4
 800f872:	d9fa      	bls.n	800f86a <_free_r+0x4e>
 800f874:	6811      	ldr	r1, [r2, #0]
 800f876:	1855      	adds	r5, r2, r1
 800f878:	42a5      	cmp	r5, r4
 800f87a:	d10b      	bne.n	800f894 <_free_r+0x78>
 800f87c:	6824      	ldr	r4, [r4, #0]
 800f87e:	4421      	add	r1, r4
 800f880:	1854      	adds	r4, r2, r1
 800f882:	42a3      	cmp	r3, r4
 800f884:	6011      	str	r1, [r2, #0]
 800f886:	d1dd      	bne.n	800f844 <_free_r+0x28>
 800f888:	681c      	ldr	r4, [r3, #0]
 800f88a:	685b      	ldr	r3, [r3, #4]
 800f88c:	6053      	str	r3, [r2, #4]
 800f88e:	4421      	add	r1, r4
 800f890:	6011      	str	r1, [r2, #0]
 800f892:	e7d7      	b.n	800f844 <_free_r+0x28>
 800f894:	d902      	bls.n	800f89c <_free_r+0x80>
 800f896:	230c      	movs	r3, #12
 800f898:	6003      	str	r3, [r0, #0]
 800f89a:	e7d3      	b.n	800f844 <_free_r+0x28>
 800f89c:	6825      	ldr	r5, [r4, #0]
 800f89e:	1961      	adds	r1, r4, r5
 800f8a0:	428b      	cmp	r3, r1
 800f8a2:	bf04      	itt	eq
 800f8a4:	6819      	ldreq	r1, [r3, #0]
 800f8a6:	685b      	ldreq	r3, [r3, #4]
 800f8a8:	6063      	str	r3, [r4, #4]
 800f8aa:	bf04      	itt	eq
 800f8ac:	1949      	addeq	r1, r1, r5
 800f8ae:	6021      	streq	r1, [r4, #0]
 800f8b0:	6054      	str	r4, [r2, #4]
 800f8b2:	e7c7      	b.n	800f844 <_free_r+0x28>
 800f8b4:	b003      	add	sp, #12
 800f8b6:	bd30      	pop	{r4, r5, pc}
 800f8b8:	200164dc 	.word	0x200164dc

0800f8bc <_malloc_r>:
 800f8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8be:	1ccd      	adds	r5, r1, #3
 800f8c0:	f025 0503 	bic.w	r5, r5, #3
 800f8c4:	3508      	adds	r5, #8
 800f8c6:	2d0c      	cmp	r5, #12
 800f8c8:	bf38      	it	cc
 800f8ca:	250c      	movcc	r5, #12
 800f8cc:	2d00      	cmp	r5, #0
 800f8ce:	4606      	mov	r6, r0
 800f8d0:	db01      	blt.n	800f8d6 <_malloc_r+0x1a>
 800f8d2:	42a9      	cmp	r1, r5
 800f8d4:	d903      	bls.n	800f8de <_malloc_r+0x22>
 800f8d6:	230c      	movs	r3, #12
 800f8d8:	6033      	str	r3, [r6, #0]
 800f8da:	2000      	movs	r0, #0
 800f8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8de:	f001 fe2b 	bl	8011538 <__malloc_lock>
 800f8e2:	4921      	ldr	r1, [pc, #132]	; (800f968 <_malloc_r+0xac>)
 800f8e4:	680a      	ldr	r2, [r1, #0]
 800f8e6:	4614      	mov	r4, r2
 800f8e8:	b99c      	cbnz	r4, 800f912 <_malloc_r+0x56>
 800f8ea:	4f20      	ldr	r7, [pc, #128]	; (800f96c <_malloc_r+0xb0>)
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	b923      	cbnz	r3, 800f8fa <_malloc_r+0x3e>
 800f8f0:	4621      	mov	r1, r4
 800f8f2:	4630      	mov	r0, r6
 800f8f4:	f000 fd34 	bl	8010360 <_sbrk_r>
 800f8f8:	6038      	str	r0, [r7, #0]
 800f8fa:	4629      	mov	r1, r5
 800f8fc:	4630      	mov	r0, r6
 800f8fe:	f000 fd2f 	bl	8010360 <_sbrk_r>
 800f902:	1c43      	adds	r3, r0, #1
 800f904:	d123      	bne.n	800f94e <_malloc_r+0x92>
 800f906:	230c      	movs	r3, #12
 800f908:	6033      	str	r3, [r6, #0]
 800f90a:	4630      	mov	r0, r6
 800f90c:	f001 fe1a 	bl	8011544 <__malloc_unlock>
 800f910:	e7e3      	b.n	800f8da <_malloc_r+0x1e>
 800f912:	6823      	ldr	r3, [r4, #0]
 800f914:	1b5b      	subs	r3, r3, r5
 800f916:	d417      	bmi.n	800f948 <_malloc_r+0x8c>
 800f918:	2b0b      	cmp	r3, #11
 800f91a:	d903      	bls.n	800f924 <_malloc_r+0x68>
 800f91c:	6023      	str	r3, [r4, #0]
 800f91e:	441c      	add	r4, r3
 800f920:	6025      	str	r5, [r4, #0]
 800f922:	e004      	b.n	800f92e <_malloc_r+0x72>
 800f924:	6863      	ldr	r3, [r4, #4]
 800f926:	42a2      	cmp	r2, r4
 800f928:	bf0c      	ite	eq
 800f92a:	600b      	streq	r3, [r1, #0]
 800f92c:	6053      	strne	r3, [r2, #4]
 800f92e:	4630      	mov	r0, r6
 800f930:	f001 fe08 	bl	8011544 <__malloc_unlock>
 800f934:	f104 000b 	add.w	r0, r4, #11
 800f938:	1d23      	adds	r3, r4, #4
 800f93a:	f020 0007 	bic.w	r0, r0, #7
 800f93e:	1ac2      	subs	r2, r0, r3
 800f940:	d0cc      	beq.n	800f8dc <_malloc_r+0x20>
 800f942:	1a1b      	subs	r3, r3, r0
 800f944:	50a3      	str	r3, [r4, r2]
 800f946:	e7c9      	b.n	800f8dc <_malloc_r+0x20>
 800f948:	4622      	mov	r2, r4
 800f94a:	6864      	ldr	r4, [r4, #4]
 800f94c:	e7cc      	b.n	800f8e8 <_malloc_r+0x2c>
 800f94e:	1cc4      	adds	r4, r0, #3
 800f950:	f024 0403 	bic.w	r4, r4, #3
 800f954:	42a0      	cmp	r0, r4
 800f956:	d0e3      	beq.n	800f920 <_malloc_r+0x64>
 800f958:	1a21      	subs	r1, r4, r0
 800f95a:	4630      	mov	r0, r6
 800f95c:	f000 fd00 	bl	8010360 <_sbrk_r>
 800f960:	3001      	adds	r0, #1
 800f962:	d1dd      	bne.n	800f920 <_malloc_r+0x64>
 800f964:	e7cf      	b.n	800f906 <_malloc_r+0x4a>
 800f966:	bf00      	nop
 800f968:	200164dc 	.word	0x200164dc
 800f96c:	200164e0 	.word	0x200164e0

0800f970 <__cvt>:
 800f970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f974:	ec55 4b10 	vmov	r4, r5, d0
 800f978:	2d00      	cmp	r5, #0
 800f97a:	460e      	mov	r6, r1
 800f97c:	4619      	mov	r1, r3
 800f97e:	462b      	mov	r3, r5
 800f980:	bfbb      	ittet	lt
 800f982:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f986:	461d      	movlt	r5, r3
 800f988:	2300      	movge	r3, #0
 800f98a:	232d      	movlt	r3, #45	; 0x2d
 800f98c:	700b      	strb	r3, [r1, #0]
 800f98e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f990:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f994:	4691      	mov	r9, r2
 800f996:	f023 0820 	bic.w	r8, r3, #32
 800f99a:	bfbc      	itt	lt
 800f99c:	4622      	movlt	r2, r4
 800f99e:	4614      	movlt	r4, r2
 800f9a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f9a4:	d005      	beq.n	800f9b2 <__cvt+0x42>
 800f9a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f9aa:	d100      	bne.n	800f9ae <__cvt+0x3e>
 800f9ac:	3601      	adds	r6, #1
 800f9ae:	2102      	movs	r1, #2
 800f9b0:	e000      	b.n	800f9b4 <__cvt+0x44>
 800f9b2:	2103      	movs	r1, #3
 800f9b4:	ab03      	add	r3, sp, #12
 800f9b6:	9301      	str	r3, [sp, #4]
 800f9b8:	ab02      	add	r3, sp, #8
 800f9ba:	9300      	str	r3, [sp, #0]
 800f9bc:	ec45 4b10 	vmov	d0, r4, r5
 800f9c0:	4653      	mov	r3, sl
 800f9c2:	4632      	mov	r2, r6
 800f9c4:	f000 fe90 	bl	80106e8 <_dtoa_r>
 800f9c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f9cc:	4607      	mov	r7, r0
 800f9ce:	d102      	bne.n	800f9d6 <__cvt+0x66>
 800f9d0:	f019 0f01 	tst.w	r9, #1
 800f9d4:	d022      	beq.n	800fa1c <__cvt+0xac>
 800f9d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f9da:	eb07 0906 	add.w	r9, r7, r6
 800f9de:	d110      	bne.n	800fa02 <__cvt+0x92>
 800f9e0:	783b      	ldrb	r3, [r7, #0]
 800f9e2:	2b30      	cmp	r3, #48	; 0x30
 800f9e4:	d10a      	bne.n	800f9fc <__cvt+0x8c>
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	4620      	mov	r0, r4
 800f9ec:	4629      	mov	r1, r5
 800f9ee:	f7f1 f86b 	bl	8000ac8 <__aeabi_dcmpeq>
 800f9f2:	b918      	cbnz	r0, 800f9fc <__cvt+0x8c>
 800f9f4:	f1c6 0601 	rsb	r6, r6, #1
 800f9f8:	f8ca 6000 	str.w	r6, [sl]
 800f9fc:	f8da 3000 	ldr.w	r3, [sl]
 800fa00:	4499      	add	r9, r3
 800fa02:	2200      	movs	r2, #0
 800fa04:	2300      	movs	r3, #0
 800fa06:	4620      	mov	r0, r4
 800fa08:	4629      	mov	r1, r5
 800fa0a:	f7f1 f85d 	bl	8000ac8 <__aeabi_dcmpeq>
 800fa0e:	b108      	cbz	r0, 800fa14 <__cvt+0xa4>
 800fa10:	f8cd 900c 	str.w	r9, [sp, #12]
 800fa14:	2230      	movs	r2, #48	; 0x30
 800fa16:	9b03      	ldr	r3, [sp, #12]
 800fa18:	454b      	cmp	r3, r9
 800fa1a:	d307      	bcc.n	800fa2c <__cvt+0xbc>
 800fa1c:	9b03      	ldr	r3, [sp, #12]
 800fa1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fa20:	1bdb      	subs	r3, r3, r7
 800fa22:	4638      	mov	r0, r7
 800fa24:	6013      	str	r3, [r2, #0]
 800fa26:	b004      	add	sp, #16
 800fa28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa2c:	1c59      	adds	r1, r3, #1
 800fa2e:	9103      	str	r1, [sp, #12]
 800fa30:	701a      	strb	r2, [r3, #0]
 800fa32:	e7f0      	b.n	800fa16 <__cvt+0xa6>

0800fa34 <__exponent>:
 800fa34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa36:	4603      	mov	r3, r0
 800fa38:	2900      	cmp	r1, #0
 800fa3a:	bfb8      	it	lt
 800fa3c:	4249      	neglt	r1, r1
 800fa3e:	f803 2b02 	strb.w	r2, [r3], #2
 800fa42:	bfb4      	ite	lt
 800fa44:	222d      	movlt	r2, #45	; 0x2d
 800fa46:	222b      	movge	r2, #43	; 0x2b
 800fa48:	2909      	cmp	r1, #9
 800fa4a:	7042      	strb	r2, [r0, #1]
 800fa4c:	dd2a      	ble.n	800faa4 <__exponent+0x70>
 800fa4e:	f10d 0407 	add.w	r4, sp, #7
 800fa52:	46a4      	mov	ip, r4
 800fa54:	270a      	movs	r7, #10
 800fa56:	46a6      	mov	lr, r4
 800fa58:	460a      	mov	r2, r1
 800fa5a:	fb91 f6f7 	sdiv	r6, r1, r7
 800fa5e:	fb07 1516 	mls	r5, r7, r6, r1
 800fa62:	3530      	adds	r5, #48	; 0x30
 800fa64:	2a63      	cmp	r2, #99	; 0x63
 800fa66:	f104 34ff 	add.w	r4, r4, #4294967295
 800fa6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fa6e:	4631      	mov	r1, r6
 800fa70:	dcf1      	bgt.n	800fa56 <__exponent+0x22>
 800fa72:	3130      	adds	r1, #48	; 0x30
 800fa74:	f1ae 0502 	sub.w	r5, lr, #2
 800fa78:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fa7c:	1c44      	adds	r4, r0, #1
 800fa7e:	4629      	mov	r1, r5
 800fa80:	4561      	cmp	r1, ip
 800fa82:	d30a      	bcc.n	800fa9a <__exponent+0x66>
 800fa84:	f10d 0209 	add.w	r2, sp, #9
 800fa88:	eba2 020e 	sub.w	r2, r2, lr
 800fa8c:	4565      	cmp	r5, ip
 800fa8e:	bf88      	it	hi
 800fa90:	2200      	movhi	r2, #0
 800fa92:	4413      	add	r3, r2
 800fa94:	1a18      	subs	r0, r3, r0
 800fa96:	b003      	add	sp, #12
 800fa98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa9e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800faa2:	e7ed      	b.n	800fa80 <__exponent+0x4c>
 800faa4:	2330      	movs	r3, #48	; 0x30
 800faa6:	3130      	adds	r1, #48	; 0x30
 800faa8:	7083      	strb	r3, [r0, #2]
 800faaa:	70c1      	strb	r1, [r0, #3]
 800faac:	1d03      	adds	r3, r0, #4
 800faae:	e7f1      	b.n	800fa94 <__exponent+0x60>

0800fab0 <_printf_float>:
 800fab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fab4:	ed2d 8b02 	vpush	{d8}
 800fab8:	b08d      	sub	sp, #52	; 0x34
 800faba:	460c      	mov	r4, r1
 800fabc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fac0:	4616      	mov	r6, r2
 800fac2:	461f      	mov	r7, r3
 800fac4:	4605      	mov	r5, r0
 800fac6:	f001 fcbd 	bl	8011444 <_localeconv_r>
 800faca:	f8d0 a000 	ldr.w	sl, [r0]
 800face:	4650      	mov	r0, sl
 800fad0:	f7f0 fb7e 	bl	80001d0 <strlen>
 800fad4:	2300      	movs	r3, #0
 800fad6:	930a      	str	r3, [sp, #40]	; 0x28
 800fad8:	6823      	ldr	r3, [r4, #0]
 800fada:	9305      	str	r3, [sp, #20]
 800fadc:	f8d8 3000 	ldr.w	r3, [r8]
 800fae0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fae4:	3307      	adds	r3, #7
 800fae6:	f023 0307 	bic.w	r3, r3, #7
 800faea:	f103 0208 	add.w	r2, r3, #8
 800faee:	f8c8 2000 	str.w	r2, [r8]
 800faf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fafa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fafe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fb02:	9307      	str	r3, [sp, #28]
 800fb04:	f8cd 8018 	str.w	r8, [sp, #24]
 800fb08:	ee08 0a10 	vmov	s16, r0
 800fb0c:	4b9f      	ldr	r3, [pc, #636]	; (800fd8c <_printf_float+0x2dc>)
 800fb0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fb12:	f04f 32ff 	mov.w	r2, #4294967295
 800fb16:	f7f1 f809 	bl	8000b2c <__aeabi_dcmpun>
 800fb1a:	bb88      	cbnz	r0, 800fb80 <_printf_float+0xd0>
 800fb1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fb20:	4b9a      	ldr	r3, [pc, #616]	; (800fd8c <_printf_float+0x2dc>)
 800fb22:	f04f 32ff 	mov.w	r2, #4294967295
 800fb26:	f7f0 ffe3 	bl	8000af0 <__aeabi_dcmple>
 800fb2a:	bb48      	cbnz	r0, 800fb80 <_printf_float+0xd0>
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	2300      	movs	r3, #0
 800fb30:	4640      	mov	r0, r8
 800fb32:	4649      	mov	r1, r9
 800fb34:	f7f0 ffd2 	bl	8000adc <__aeabi_dcmplt>
 800fb38:	b110      	cbz	r0, 800fb40 <_printf_float+0x90>
 800fb3a:	232d      	movs	r3, #45	; 0x2d
 800fb3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb40:	4b93      	ldr	r3, [pc, #588]	; (800fd90 <_printf_float+0x2e0>)
 800fb42:	4894      	ldr	r0, [pc, #592]	; (800fd94 <_printf_float+0x2e4>)
 800fb44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fb48:	bf94      	ite	ls
 800fb4a:	4698      	movls	r8, r3
 800fb4c:	4680      	movhi	r8, r0
 800fb4e:	2303      	movs	r3, #3
 800fb50:	6123      	str	r3, [r4, #16]
 800fb52:	9b05      	ldr	r3, [sp, #20]
 800fb54:	f023 0204 	bic.w	r2, r3, #4
 800fb58:	6022      	str	r2, [r4, #0]
 800fb5a:	f04f 0900 	mov.w	r9, #0
 800fb5e:	9700      	str	r7, [sp, #0]
 800fb60:	4633      	mov	r3, r6
 800fb62:	aa0b      	add	r2, sp, #44	; 0x2c
 800fb64:	4621      	mov	r1, r4
 800fb66:	4628      	mov	r0, r5
 800fb68:	f000 f9d8 	bl	800ff1c <_printf_common>
 800fb6c:	3001      	adds	r0, #1
 800fb6e:	f040 8090 	bne.w	800fc92 <_printf_float+0x1e2>
 800fb72:	f04f 30ff 	mov.w	r0, #4294967295
 800fb76:	b00d      	add	sp, #52	; 0x34
 800fb78:	ecbd 8b02 	vpop	{d8}
 800fb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb80:	4642      	mov	r2, r8
 800fb82:	464b      	mov	r3, r9
 800fb84:	4640      	mov	r0, r8
 800fb86:	4649      	mov	r1, r9
 800fb88:	f7f0 ffd0 	bl	8000b2c <__aeabi_dcmpun>
 800fb8c:	b140      	cbz	r0, 800fba0 <_printf_float+0xf0>
 800fb8e:	464b      	mov	r3, r9
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	bfbc      	itt	lt
 800fb94:	232d      	movlt	r3, #45	; 0x2d
 800fb96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fb9a:	487f      	ldr	r0, [pc, #508]	; (800fd98 <_printf_float+0x2e8>)
 800fb9c:	4b7f      	ldr	r3, [pc, #508]	; (800fd9c <_printf_float+0x2ec>)
 800fb9e:	e7d1      	b.n	800fb44 <_printf_float+0x94>
 800fba0:	6863      	ldr	r3, [r4, #4]
 800fba2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fba6:	9206      	str	r2, [sp, #24]
 800fba8:	1c5a      	adds	r2, r3, #1
 800fbaa:	d13f      	bne.n	800fc2c <_printf_float+0x17c>
 800fbac:	2306      	movs	r3, #6
 800fbae:	6063      	str	r3, [r4, #4]
 800fbb0:	9b05      	ldr	r3, [sp, #20]
 800fbb2:	6861      	ldr	r1, [r4, #4]
 800fbb4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fbb8:	2300      	movs	r3, #0
 800fbba:	9303      	str	r3, [sp, #12]
 800fbbc:	ab0a      	add	r3, sp, #40	; 0x28
 800fbbe:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fbc2:	ab09      	add	r3, sp, #36	; 0x24
 800fbc4:	ec49 8b10 	vmov	d0, r8, r9
 800fbc8:	9300      	str	r3, [sp, #0]
 800fbca:	6022      	str	r2, [r4, #0]
 800fbcc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fbd0:	4628      	mov	r0, r5
 800fbd2:	f7ff fecd 	bl	800f970 <__cvt>
 800fbd6:	9b06      	ldr	r3, [sp, #24]
 800fbd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fbda:	2b47      	cmp	r3, #71	; 0x47
 800fbdc:	4680      	mov	r8, r0
 800fbde:	d108      	bne.n	800fbf2 <_printf_float+0x142>
 800fbe0:	1cc8      	adds	r0, r1, #3
 800fbe2:	db02      	blt.n	800fbea <_printf_float+0x13a>
 800fbe4:	6863      	ldr	r3, [r4, #4]
 800fbe6:	4299      	cmp	r1, r3
 800fbe8:	dd41      	ble.n	800fc6e <_printf_float+0x1be>
 800fbea:	f1ab 0b02 	sub.w	fp, fp, #2
 800fbee:	fa5f fb8b 	uxtb.w	fp, fp
 800fbf2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fbf6:	d820      	bhi.n	800fc3a <_printf_float+0x18a>
 800fbf8:	3901      	subs	r1, #1
 800fbfa:	465a      	mov	r2, fp
 800fbfc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fc00:	9109      	str	r1, [sp, #36]	; 0x24
 800fc02:	f7ff ff17 	bl	800fa34 <__exponent>
 800fc06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fc08:	1813      	adds	r3, r2, r0
 800fc0a:	2a01      	cmp	r2, #1
 800fc0c:	4681      	mov	r9, r0
 800fc0e:	6123      	str	r3, [r4, #16]
 800fc10:	dc02      	bgt.n	800fc18 <_printf_float+0x168>
 800fc12:	6822      	ldr	r2, [r4, #0]
 800fc14:	07d2      	lsls	r2, r2, #31
 800fc16:	d501      	bpl.n	800fc1c <_printf_float+0x16c>
 800fc18:	3301      	adds	r3, #1
 800fc1a:	6123      	str	r3, [r4, #16]
 800fc1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d09c      	beq.n	800fb5e <_printf_float+0xae>
 800fc24:	232d      	movs	r3, #45	; 0x2d
 800fc26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc2a:	e798      	b.n	800fb5e <_printf_float+0xae>
 800fc2c:	9a06      	ldr	r2, [sp, #24]
 800fc2e:	2a47      	cmp	r2, #71	; 0x47
 800fc30:	d1be      	bne.n	800fbb0 <_printf_float+0x100>
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d1bc      	bne.n	800fbb0 <_printf_float+0x100>
 800fc36:	2301      	movs	r3, #1
 800fc38:	e7b9      	b.n	800fbae <_printf_float+0xfe>
 800fc3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fc3e:	d118      	bne.n	800fc72 <_printf_float+0x1c2>
 800fc40:	2900      	cmp	r1, #0
 800fc42:	6863      	ldr	r3, [r4, #4]
 800fc44:	dd0b      	ble.n	800fc5e <_printf_float+0x1ae>
 800fc46:	6121      	str	r1, [r4, #16]
 800fc48:	b913      	cbnz	r3, 800fc50 <_printf_float+0x1a0>
 800fc4a:	6822      	ldr	r2, [r4, #0]
 800fc4c:	07d0      	lsls	r0, r2, #31
 800fc4e:	d502      	bpl.n	800fc56 <_printf_float+0x1a6>
 800fc50:	3301      	adds	r3, #1
 800fc52:	440b      	add	r3, r1
 800fc54:	6123      	str	r3, [r4, #16]
 800fc56:	65a1      	str	r1, [r4, #88]	; 0x58
 800fc58:	f04f 0900 	mov.w	r9, #0
 800fc5c:	e7de      	b.n	800fc1c <_printf_float+0x16c>
 800fc5e:	b913      	cbnz	r3, 800fc66 <_printf_float+0x1b6>
 800fc60:	6822      	ldr	r2, [r4, #0]
 800fc62:	07d2      	lsls	r2, r2, #31
 800fc64:	d501      	bpl.n	800fc6a <_printf_float+0x1ba>
 800fc66:	3302      	adds	r3, #2
 800fc68:	e7f4      	b.n	800fc54 <_printf_float+0x1a4>
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	e7f2      	b.n	800fc54 <_printf_float+0x1a4>
 800fc6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fc72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc74:	4299      	cmp	r1, r3
 800fc76:	db05      	blt.n	800fc84 <_printf_float+0x1d4>
 800fc78:	6823      	ldr	r3, [r4, #0]
 800fc7a:	6121      	str	r1, [r4, #16]
 800fc7c:	07d8      	lsls	r0, r3, #31
 800fc7e:	d5ea      	bpl.n	800fc56 <_printf_float+0x1a6>
 800fc80:	1c4b      	adds	r3, r1, #1
 800fc82:	e7e7      	b.n	800fc54 <_printf_float+0x1a4>
 800fc84:	2900      	cmp	r1, #0
 800fc86:	bfd4      	ite	le
 800fc88:	f1c1 0202 	rsble	r2, r1, #2
 800fc8c:	2201      	movgt	r2, #1
 800fc8e:	4413      	add	r3, r2
 800fc90:	e7e0      	b.n	800fc54 <_printf_float+0x1a4>
 800fc92:	6823      	ldr	r3, [r4, #0]
 800fc94:	055a      	lsls	r2, r3, #21
 800fc96:	d407      	bmi.n	800fca8 <_printf_float+0x1f8>
 800fc98:	6923      	ldr	r3, [r4, #16]
 800fc9a:	4642      	mov	r2, r8
 800fc9c:	4631      	mov	r1, r6
 800fc9e:	4628      	mov	r0, r5
 800fca0:	47b8      	blx	r7
 800fca2:	3001      	adds	r0, #1
 800fca4:	d12c      	bne.n	800fd00 <_printf_float+0x250>
 800fca6:	e764      	b.n	800fb72 <_printf_float+0xc2>
 800fca8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fcac:	f240 80e0 	bls.w	800fe70 <_printf_float+0x3c0>
 800fcb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	f7f0 ff06 	bl	8000ac8 <__aeabi_dcmpeq>
 800fcbc:	2800      	cmp	r0, #0
 800fcbe:	d034      	beq.n	800fd2a <_printf_float+0x27a>
 800fcc0:	4a37      	ldr	r2, [pc, #220]	; (800fda0 <_printf_float+0x2f0>)
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	4631      	mov	r1, r6
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	47b8      	blx	r7
 800fcca:	3001      	adds	r0, #1
 800fccc:	f43f af51 	beq.w	800fb72 <_printf_float+0xc2>
 800fcd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	db02      	blt.n	800fcde <_printf_float+0x22e>
 800fcd8:	6823      	ldr	r3, [r4, #0]
 800fcda:	07d8      	lsls	r0, r3, #31
 800fcdc:	d510      	bpl.n	800fd00 <_printf_float+0x250>
 800fcde:	ee18 3a10 	vmov	r3, s16
 800fce2:	4652      	mov	r2, sl
 800fce4:	4631      	mov	r1, r6
 800fce6:	4628      	mov	r0, r5
 800fce8:	47b8      	blx	r7
 800fcea:	3001      	adds	r0, #1
 800fcec:	f43f af41 	beq.w	800fb72 <_printf_float+0xc2>
 800fcf0:	f04f 0800 	mov.w	r8, #0
 800fcf4:	f104 091a 	add.w	r9, r4, #26
 800fcf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcfa:	3b01      	subs	r3, #1
 800fcfc:	4543      	cmp	r3, r8
 800fcfe:	dc09      	bgt.n	800fd14 <_printf_float+0x264>
 800fd00:	6823      	ldr	r3, [r4, #0]
 800fd02:	079b      	lsls	r3, r3, #30
 800fd04:	f100 8105 	bmi.w	800ff12 <_printf_float+0x462>
 800fd08:	68e0      	ldr	r0, [r4, #12]
 800fd0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd0c:	4298      	cmp	r0, r3
 800fd0e:	bfb8      	it	lt
 800fd10:	4618      	movlt	r0, r3
 800fd12:	e730      	b.n	800fb76 <_printf_float+0xc6>
 800fd14:	2301      	movs	r3, #1
 800fd16:	464a      	mov	r2, r9
 800fd18:	4631      	mov	r1, r6
 800fd1a:	4628      	mov	r0, r5
 800fd1c:	47b8      	blx	r7
 800fd1e:	3001      	adds	r0, #1
 800fd20:	f43f af27 	beq.w	800fb72 <_printf_float+0xc2>
 800fd24:	f108 0801 	add.w	r8, r8, #1
 800fd28:	e7e6      	b.n	800fcf8 <_printf_float+0x248>
 800fd2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	dc39      	bgt.n	800fda4 <_printf_float+0x2f4>
 800fd30:	4a1b      	ldr	r2, [pc, #108]	; (800fda0 <_printf_float+0x2f0>)
 800fd32:	2301      	movs	r3, #1
 800fd34:	4631      	mov	r1, r6
 800fd36:	4628      	mov	r0, r5
 800fd38:	47b8      	blx	r7
 800fd3a:	3001      	adds	r0, #1
 800fd3c:	f43f af19 	beq.w	800fb72 <_printf_float+0xc2>
 800fd40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fd44:	4313      	orrs	r3, r2
 800fd46:	d102      	bne.n	800fd4e <_printf_float+0x29e>
 800fd48:	6823      	ldr	r3, [r4, #0]
 800fd4a:	07d9      	lsls	r1, r3, #31
 800fd4c:	d5d8      	bpl.n	800fd00 <_printf_float+0x250>
 800fd4e:	ee18 3a10 	vmov	r3, s16
 800fd52:	4652      	mov	r2, sl
 800fd54:	4631      	mov	r1, r6
 800fd56:	4628      	mov	r0, r5
 800fd58:	47b8      	blx	r7
 800fd5a:	3001      	adds	r0, #1
 800fd5c:	f43f af09 	beq.w	800fb72 <_printf_float+0xc2>
 800fd60:	f04f 0900 	mov.w	r9, #0
 800fd64:	f104 0a1a 	add.w	sl, r4, #26
 800fd68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd6a:	425b      	negs	r3, r3
 800fd6c:	454b      	cmp	r3, r9
 800fd6e:	dc01      	bgt.n	800fd74 <_printf_float+0x2c4>
 800fd70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd72:	e792      	b.n	800fc9a <_printf_float+0x1ea>
 800fd74:	2301      	movs	r3, #1
 800fd76:	4652      	mov	r2, sl
 800fd78:	4631      	mov	r1, r6
 800fd7a:	4628      	mov	r0, r5
 800fd7c:	47b8      	blx	r7
 800fd7e:	3001      	adds	r0, #1
 800fd80:	f43f aef7 	beq.w	800fb72 <_printf_float+0xc2>
 800fd84:	f109 0901 	add.w	r9, r9, #1
 800fd88:	e7ee      	b.n	800fd68 <_printf_float+0x2b8>
 800fd8a:	bf00      	nop
 800fd8c:	7fefffff 	.word	0x7fefffff
 800fd90:	0807b2e8 	.word	0x0807b2e8
 800fd94:	0807b2ec 	.word	0x0807b2ec
 800fd98:	0807b2f4 	.word	0x0807b2f4
 800fd9c:	0807b2f0 	.word	0x0807b2f0
 800fda0:	0807b2f8 	.word	0x0807b2f8
 800fda4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fda6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	bfa8      	it	ge
 800fdac:	461a      	movge	r2, r3
 800fdae:	2a00      	cmp	r2, #0
 800fdb0:	4691      	mov	r9, r2
 800fdb2:	dc37      	bgt.n	800fe24 <_printf_float+0x374>
 800fdb4:	f04f 0b00 	mov.w	fp, #0
 800fdb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fdbc:	f104 021a 	add.w	r2, r4, #26
 800fdc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fdc2:	9305      	str	r3, [sp, #20]
 800fdc4:	eba3 0309 	sub.w	r3, r3, r9
 800fdc8:	455b      	cmp	r3, fp
 800fdca:	dc33      	bgt.n	800fe34 <_printf_float+0x384>
 800fdcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	db3b      	blt.n	800fe4c <_printf_float+0x39c>
 800fdd4:	6823      	ldr	r3, [r4, #0]
 800fdd6:	07da      	lsls	r2, r3, #31
 800fdd8:	d438      	bmi.n	800fe4c <_printf_float+0x39c>
 800fdda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fddc:	9b05      	ldr	r3, [sp, #20]
 800fdde:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fde0:	1ad3      	subs	r3, r2, r3
 800fde2:	eba2 0901 	sub.w	r9, r2, r1
 800fde6:	4599      	cmp	r9, r3
 800fde8:	bfa8      	it	ge
 800fdea:	4699      	movge	r9, r3
 800fdec:	f1b9 0f00 	cmp.w	r9, #0
 800fdf0:	dc35      	bgt.n	800fe5e <_printf_float+0x3ae>
 800fdf2:	f04f 0800 	mov.w	r8, #0
 800fdf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fdfa:	f104 0a1a 	add.w	sl, r4, #26
 800fdfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fe02:	1a9b      	subs	r3, r3, r2
 800fe04:	eba3 0309 	sub.w	r3, r3, r9
 800fe08:	4543      	cmp	r3, r8
 800fe0a:	f77f af79 	ble.w	800fd00 <_printf_float+0x250>
 800fe0e:	2301      	movs	r3, #1
 800fe10:	4652      	mov	r2, sl
 800fe12:	4631      	mov	r1, r6
 800fe14:	4628      	mov	r0, r5
 800fe16:	47b8      	blx	r7
 800fe18:	3001      	adds	r0, #1
 800fe1a:	f43f aeaa 	beq.w	800fb72 <_printf_float+0xc2>
 800fe1e:	f108 0801 	add.w	r8, r8, #1
 800fe22:	e7ec      	b.n	800fdfe <_printf_float+0x34e>
 800fe24:	4613      	mov	r3, r2
 800fe26:	4631      	mov	r1, r6
 800fe28:	4642      	mov	r2, r8
 800fe2a:	4628      	mov	r0, r5
 800fe2c:	47b8      	blx	r7
 800fe2e:	3001      	adds	r0, #1
 800fe30:	d1c0      	bne.n	800fdb4 <_printf_float+0x304>
 800fe32:	e69e      	b.n	800fb72 <_printf_float+0xc2>
 800fe34:	2301      	movs	r3, #1
 800fe36:	4631      	mov	r1, r6
 800fe38:	4628      	mov	r0, r5
 800fe3a:	9205      	str	r2, [sp, #20]
 800fe3c:	47b8      	blx	r7
 800fe3e:	3001      	adds	r0, #1
 800fe40:	f43f ae97 	beq.w	800fb72 <_printf_float+0xc2>
 800fe44:	9a05      	ldr	r2, [sp, #20]
 800fe46:	f10b 0b01 	add.w	fp, fp, #1
 800fe4a:	e7b9      	b.n	800fdc0 <_printf_float+0x310>
 800fe4c:	ee18 3a10 	vmov	r3, s16
 800fe50:	4652      	mov	r2, sl
 800fe52:	4631      	mov	r1, r6
 800fe54:	4628      	mov	r0, r5
 800fe56:	47b8      	blx	r7
 800fe58:	3001      	adds	r0, #1
 800fe5a:	d1be      	bne.n	800fdda <_printf_float+0x32a>
 800fe5c:	e689      	b.n	800fb72 <_printf_float+0xc2>
 800fe5e:	9a05      	ldr	r2, [sp, #20]
 800fe60:	464b      	mov	r3, r9
 800fe62:	4442      	add	r2, r8
 800fe64:	4631      	mov	r1, r6
 800fe66:	4628      	mov	r0, r5
 800fe68:	47b8      	blx	r7
 800fe6a:	3001      	adds	r0, #1
 800fe6c:	d1c1      	bne.n	800fdf2 <_printf_float+0x342>
 800fe6e:	e680      	b.n	800fb72 <_printf_float+0xc2>
 800fe70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe72:	2a01      	cmp	r2, #1
 800fe74:	dc01      	bgt.n	800fe7a <_printf_float+0x3ca>
 800fe76:	07db      	lsls	r3, r3, #31
 800fe78:	d538      	bpl.n	800feec <_printf_float+0x43c>
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	4642      	mov	r2, r8
 800fe7e:	4631      	mov	r1, r6
 800fe80:	4628      	mov	r0, r5
 800fe82:	47b8      	blx	r7
 800fe84:	3001      	adds	r0, #1
 800fe86:	f43f ae74 	beq.w	800fb72 <_printf_float+0xc2>
 800fe8a:	ee18 3a10 	vmov	r3, s16
 800fe8e:	4652      	mov	r2, sl
 800fe90:	4631      	mov	r1, r6
 800fe92:	4628      	mov	r0, r5
 800fe94:	47b8      	blx	r7
 800fe96:	3001      	adds	r0, #1
 800fe98:	f43f ae6b 	beq.w	800fb72 <_printf_float+0xc2>
 800fe9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fea0:	2200      	movs	r2, #0
 800fea2:	2300      	movs	r3, #0
 800fea4:	f7f0 fe10 	bl	8000ac8 <__aeabi_dcmpeq>
 800fea8:	b9d8      	cbnz	r0, 800fee2 <_printf_float+0x432>
 800feaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800feac:	f108 0201 	add.w	r2, r8, #1
 800feb0:	3b01      	subs	r3, #1
 800feb2:	4631      	mov	r1, r6
 800feb4:	4628      	mov	r0, r5
 800feb6:	47b8      	blx	r7
 800feb8:	3001      	adds	r0, #1
 800feba:	d10e      	bne.n	800feda <_printf_float+0x42a>
 800febc:	e659      	b.n	800fb72 <_printf_float+0xc2>
 800febe:	2301      	movs	r3, #1
 800fec0:	4652      	mov	r2, sl
 800fec2:	4631      	mov	r1, r6
 800fec4:	4628      	mov	r0, r5
 800fec6:	47b8      	blx	r7
 800fec8:	3001      	adds	r0, #1
 800feca:	f43f ae52 	beq.w	800fb72 <_printf_float+0xc2>
 800fece:	f108 0801 	add.w	r8, r8, #1
 800fed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fed4:	3b01      	subs	r3, #1
 800fed6:	4543      	cmp	r3, r8
 800fed8:	dcf1      	bgt.n	800febe <_printf_float+0x40e>
 800feda:	464b      	mov	r3, r9
 800fedc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fee0:	e6dc      	b.n	800fc9c <_printf_float+0x1ec>
 800fee2:	f04f 0800 	mov.w	r8, #0
 800fee6:	f104 0a1a 	add.w	sl, r4, #26
 800feea:	e7f2      	b.n	800fed2 <_printf_float+0x422>
 800feec:	2301      	movs	r3, #1
 800feee:	4642      	mov	r2, r8
 800fef0:	e7df      	b.n	800feb2 <_printf_float+0x402>
 800fef2:	2301      	movs	r3, #1
 800fef4:	464a      	mov	r2, r9
 800fef6:	4631      	mov	r1, r6
 800fef8:	4628      	mov	r0, r5
 800fefa:	47b8      	blx	r7
 800fefc:	3001      	adds	r0, #1
 800fefe:	f43f ae38 	beq.w	800fb72 <_printf_float+0xc2>
 800ff02:	f108 0801 	add.w	r8, r8, #1
 800ff06:	68e3      	ldr	r3, [r4, #12]
 800ff08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ff0a:	1a5b      	subs	r3, r3, r1
 800ff0c:	4543      	cmp	r3, r8
 800ff0e:	dcf0      	bgt.n	800fef2 <_printf_float+0x442>
 800ff10:	e6fa      	b.n	800fd08 <_printf_float+0x258>
 800ff12:	f04f 0800 	mov.w	r8, #0
 800ff16:	f104 0919 	add.w	r9, r4, #25
 800ff1a:	e7f4      	b.n	800ff06 <_printf_float+0x456>

0800ff1c <_printf_common>:
 800ff1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff20:	4616      	mov	r6, r2
 800ff22:	4699      	mov	r9, r3
 800ff24:	688a      	ldr	r2, [r1, #8]
 800ff26:	690b      	ldr	r3, [r1, #16]
 800ff28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ff2c:	4293      	cmp	r3, r2
 800ff2e:	bfb8      	it	lt
 800ff30:	4613      	movlt	r3, r2
 800ff32:	6033      	str	r3, [r6, #0]
 800ff34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ff38:	4607      	mov	r7, r0
 800ff3a:	460c      	mov	r4, r1
 800ff3c:	b10a      	cbz	r2, 800ff42 <_printf_common+0x26>
 800ff3e:	3301      	adds	r3, #1
 800ff40:	6033      	str	r3, [r6, #0]
 800ff42:	6823      	ldr	r3, [r4, #0]
 800ff44:	0699      	lsls	r1, r3, #26
 800ff46:	bf42      	ittt	mi
 800ff48:	6833      	ldrmi	r3, [r6, #0]
 800ff4a:	3302      	addmi	r3, #2
 800ff4c:	6033      	strmi	r3, [r6, #0]
 800ff4e:	6825      	ldr	r5, [r4, #0]
 800ff50:	f015 0506 	ands.w	r5, r5, #6
 800ff54:	d106      	bne.n	800ff64 <_printf_common+0x48>
 800ff56:	f104 0a19 	add.w	sl, r4, #25
 800ff5a:	68e3      	ldr	r3, [r4, #12]
 800ff5c:	6832      	ldr	r2, [r6, #0]
 800ff5e:	1a9b      	subs	r3, r3, r2
 800ff60:	42ab      	cmp	r3, r5
 800ff62:	dc26      	bgt.n	800ffb2 <_printf_common+0x96>
 800ff64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ff68:	1e13      	subs	r3, r2, #0
 800ff6a:	6822      	ldr	r2, [r4, #0]
 800ff6c:	bf18      	it	ne
 800ff6e:	2301      	movne	r3, #1
 800ff70:	0692      	lsls	r2, r2, #26
 800ff72:	d42b      	bmi.n	800ffcc <_printf_common+0xb0>
 800ff74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ff78:	4649      	mov	r1, r9
 800ff7a:	4638      	mov	r0, r7
 800ff7c:	47c0      	blx	r8
 800ff7e:	3001      	adds	r0, #1
 800ff80:	d01e      	beq.n	800ffc0 <_printf_common+0xa4>
 800ff82:	6823      	ldr	r3, [r4, #0]
 800ff84:	68e5      	ldr	r5, [r4, #12]
 800ff86:	6832      	ldr	r2, [r6, #0]
 800ff88:	f003 0306 	and.w	r3, r3, #6
 800ff8c:	2b04      	cmp	r3, #4
 800ff8e:	bf08      	it	eq
 800ff90:	1aad      	subeq	r5, r5, r2
 800ff92:	68a3      	ldr	r3, [r4, #8]
 800ff94:	6922      	ldr	r2, [r4, #16]
 800ff96:	bf0c      	ite	eq
 800ff98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff9c:	2500      	movne	r5, #0
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	bfc4      	itt	gt
 800ffa2:	1a9b      	subgt	r3, r3, r2
 800ffa4:	18ed      	addgt	r5, r5, r3
 800ffa6:	2600      	movs	r6, #0
 800ffa8:	341a      	adds	r4, #26
 800ffaa:	42b5      	cmp	r5, r6
 800ffac:	d11a      	bne.n	800ffe4 <_printf_common+0xc8>
 800ffae:	2000      	movs	r0, #0
 800ffb0:	e008      	b.n	800ffc4 <_printf_common+0xa8>
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	4652      	mov	r2, sl
 800ffb6:	4649      	mov	r1, r9
 800ffb8:	4638      	mov	r0, r7
 800ffba:	47c0      	blx	r8
 800ffbc:	3001      	adds	r0, #1
 800ffbe:	d103      	bne.n	800ffc8 <_printf_common+0xac>
 800ffc0:	f04f 30ff 	mov.w	r0, #4294967295
 800ffc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffc8:	3501      	adds	r5, #1
 800ffca:	e7c6      	b.n	800ff5a <_printf_common+0x3e>
 800ffcc:	18e1      	adds	r1, r4, r3
 800ffce:	1c5a      	adds	r2, r3, #1
 800ffd0:	2030      	movs	r0, #48	; 0x30
 800ffd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ffd6:	4422      	add	r2, r4
 800ffd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ffdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ffe0:	3302      	adds	r3, #2
 800ffe2:	e7c7      	b.n	800ff74 <_printf_common+0x58>
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	4622      	mov	r2, r4
 800ffe8:	4649      	mov	r1, r9
 800ffea:	4638      	mov	r0, r7
 800ffec:	47c0      	blx	r8
 800ffee:	3001      	adds	r0, #1
 800fff0:	d0e6      	beq.n	800ffc0 <_printf_common+0xa4>
 800fff2:	3601      	adds	r6, #1
 800fff4:	e7d9      	b.n	800ffaa <_printf_common+0x8e>
	...

0800fff8 <_printf_i>:
 800fff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fffc:	460c      	mov	r4, r1
 800fffe:	4691      	mov	r9, r2
 8010000:	7e27      	ldrb	r7, [r4, #24]
 8010002:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010004:	2f78      	cmp	r7, #120	; 0x78
 8010006:	4680      	mov	r8, r0
 8010008:	469a      	mov	sl, r3
 801000a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801000e:	d807      	bhi.n	8010020 <_printf_i+0x28>
 8010010:	2f62      	cmp	r7, #98	; 0x62
 8010012:	d80a      	bhi.n	801002a <_printf_i+0x32>
 8010014:	2f00      	cmp	r7, #0
 8010016:	f000 80d8 	beq.w	80101ca <_printf_i+0x1d2>
 801001a:	2f58      	cmp	r7, #88	; 0x58
 801001c:	f000 80a3 	beq.w	8010166 <_printf_i+0x16e>
 8010020:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010024:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010028:	e03a      	b.n	80100a0 <_printf_i+0xa8>
 801002a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801002e:	2b15      	cmp	r3, #21
 8010030:	d8f6      	bhi.n	8010020 <_printf_i+0x28>
 8010032:	a001      	add	r0, pc, #4	; (adr r0, 8010038 <_printf_i+0x40>)
 8010034:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010038:	08010091 	.word	0x08010091
 801003c:	080100a5 	.word	0x080100a5
 8010040:	08010021 	.word	0x08010021
 8010044:	08010021 	.word	0x08010021
 8010048:	08010021 	.word	0x08010021
 801004c:	08010021 	.word	0x08010021
 8010050:	080100a5 	.word	0x080100a5
 8010054:	08010021 	.word	0x08010021
 8010058:	08010021 	.word	0x08010021
 801005c:	08010021 	.word	0x08010021
 8010060:	08010021 	.word	0x08010021
 8010064:	080101b1 	.word	0x080101b1
 8010068:	080100d5 	.word	0x080100d5
 801006c:	08010193 	.word	0x08010193
 8010070:	08010021 	.word	0x08010021
 8010074:	08010021 	.word	0x08010021
 8010078:	080101d3 	.word	0x080101d3
 801007c:	08010021 	.word	0x08010021
 8010080:	080100d5 	.word	0x080100d5
 8010084:	08010021 	.word	0x08010021
 8010088:	08010021 	.word	0x08010021
 801008c:	0801019b 	.word	0x0801019b
 8010090:	680b      	ldr	r3, [r1, #0]
 8010092:	1d1a      	adds	r2, r3, #4
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	600a      	str	r2, [r1, #0]
 8010098:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801009c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80100a0:	2301      	movs	r3, #1
 80100a2:	e0a3      	b.n	80101ec <_printf_i+0x1f4>
 80100a4:	6825      	ldr	r5, [r4, #0]
 80100a6:	6808      	ldr	r0, [r1, #0]
 80100a8:	062e      	lsls	r6, r5, #24
 80100aa:	f100 0304 	add.w	r3, r0, #4
 80100ae:	d50a      	bpl.n	80100c6 <_printf_i+0xce>
 80100b0:	6805      	ldr	r5, [r0, #0]
 80100b2:	600b      	str	r3, [r1, #0]
 80100b4:	2d00      	cmp	r5, #0
 80100b6:	da03      	bge.n	80100c0 <_printf_i+0xc8>
 80100b8:	232d      	movs	r3, #45	; 0x2d
 80100ba:	426d      	negs	r5, r5
 80100bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100c0:	485e      	ldr	r0, [pc, #376]	; (801023c <_printf_i+0x244>)
 80100c2:	230a      	movs	r3, #10
 80100c4:	e019      	b.n	80100fa <_printf_i+0x102>
 80100c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80100ca:	6805      	ldr	r5, [r0, #0]
 80100cc:	600b      	str	r3, [r1, #0]
 80100ce:	bf18      	it	ne
 80100d0:	b22d      	sxthne	r5, r5
 80100d2:	e7ef      	b.n	80100b4 <_printf_i+0xbc>
 80100d4:	680b      	ldr	r3, [r1, #0]
 80100d6:	6825      	ldr	r5, [r4, #0]
 80100d8:	1d18      	adds	r0, r3, #4
 80100da:	6008      	str	r0, [r1, #0]
 80100dc:	0628      	lsls	r0, r5, #24
 80100de:	d501      	bpl.n	80100e4 <_printf_i+0xec>
 80100e0:	681d      	ldr	r5, [r3, #0]
 80100e2:	e002      	b.n	80100ea <_printf_i+0xf2>
 80100e4:	0669      	lsls	r1, r5, #25
 80100e6:	d5fb      	bpl.n	80100e0 <_printf_i+0xe8>
 80100e8:	881d      	ldrh	r5, [r3, #0]
 80100ea:	4854      	ldr	r0, [pc, #336]	; (801023c <_printf_i+0x244>)
 80100ec:	2f6f      	cmp	r7, #111	; 0x6f
 80100ee:	bf0c      	ite	eq
 80100f0:	2308      	moveq	r3, #8
 80100f2:	230a      	movne	r3, #10
 80100f4:	2100      	movs	r1, #0
 80100f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80100fa:	6866      	ldr	r6, [r4, #4]
 80100fc:	60a6      	str	r6, [r4, #8]
 80100fe:	2e00      	cmp	r6, #0
 8010100:	bfa2      	ittt	ge
 8010102:	6821      	ldrge	r1, [r4, #0]
 8010104:	f021 0104 	bicge.w	r1, r1, #4
 8010108:	6021      	strge	r1, [r4, #0]
 801010a:	b90d      	cbnz	r5, 8010110 <_printf_i+0x118>
 801010c:	2e00      	cmp	r6, #0
 801010e:	d04d      	beq.n	80101ac <_printf_i+0x1b4>
 8010110:	4616      	mov	r6, r2
 8010112:	fbb5 f1f3 	udiv	r1, r5, r3
 8010116:	fb03 5711 	mls	r7, r3, r1, r5
 801011a:	5dc7      	ldrb	r7, [r0, r7]
 801011c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010120:	462f      	mov	r7, r5
 8010122:	42bb      	cmp	r3, r7
 8010124:	460d      	mov	r5, r1
 8010126:	d9f4      	bls.n	8010112 <_printf_i+0x11a>
 8010128:	2b08      	cmp	r3, #8
 801012a:	d10b      	bne.n	8010144 <_printf_i+0x14c>
 801012c:	6823      	ldr	r3, [r4, #0]
 801012e:	07df      	lsls	r7, r3, #31
 8010130:	d508      	bpl.n	8010144 <_printf_i+0x14c>
 8010132:	6923      	ldr	r3, [r4, #16]
 8010134:	6861      	ldr	r1, [r4, #4]
 8010136:	4299      	cmp	r1, r3
 8010138:	bfde      	ittt	le
 801013a:	2330      	movle	r3, #48	; 0x30
 801013c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010140:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010144:	1b92      	subs	r2, r2, r6
 8010146:	6122      	str	r2, [r4, #16]
 8010148:	f8cd a000 	str.w	sl, [sp]
 801014c:	464b      	mov	r3, r9
 801014e:	aa03      	add	r2, sp, #12
 8010150:	4621      	mov	r1, r4
 8010152:	4640      	mov	r0, r8
 8010154:	f7ff fee2 	bl	800ff1c <_printf_common>
 8010158:	3001      	adds	r0, #1
 801015a:	d14c      	bne.n	80101f6 <_printf_i+0x1fe>
 801015c:	f04f 30ff 	mov.w	r0, #4294967295
 8010160:	b004      	add	sp, #16
 8010162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010166:	4835      	ldr	r0, [pc, #212]	; (801023c <_printf_i+0x244>)
 8010168:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801016c:	6823      	ldr	r3, [r4, #0]
 801016e:	680e      	ldr	r6, [r1, #0]
 8010170:	061f      	lsls	r7, r3, #24
 8010172:	f856 5b04 	ldr.w	r5, [r6], #4
 8010176:	600e      	str	r6, [r1, #0]
 8010178:	d514      	bpl.n	80101a4 <_printf_i+0x1ac>
 801017a:	07d9      	lsls	r1, r3, #31
 801017c:	bf44      	itt	mi
 801017e:	f043 0320 	orrmi.w	r3, r3, #32
 8010182:	6023      	strmi	r3, [r4, #0]
 8010184:	b91d      	cbnz	r5, 801018e <_printf_i+0x196>
 8010186:	6823      	ldr	r3, [r4, #0]
 8010188:	f023 0320 	bic.w	r3, r3, #32
 801018c:	6023      	str	r3, [r4, #0]
 801018e:	2310      	movs	r3, #16
 8010190:	e7b0      	b.n	80100f4 <_printf_i+0xfc>
 8010192:	6823      	ldr	r3, [r4, #0]
 8010194:	f043 0320 	orr.w	r3, r3, #32
 8010198:	6023      	str	r3, [r4, #0]
 801019a:	2378      	movs	r3, #120	; 0x78
 801019c:	4828      	ldr	r0, [pc, #160]	; (8010240 <_printf_i+0x248>)
 801019e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80101a2:	e7e3      	b.n	801016c <_printf_i+0x174>
 80101a4:	065e      	lsls	r6, r3, #25
 80101a6:	bf48      	it	mi
 80101a8:	b2ad      	uxthmi	r5, r5
 80101aa:	e7e6      	b.n	801017a <_printf_i+0x182>
 80101ac:	4616      	mov	r6, r2
 80101ae:	e7bb      	b.n	8010128 <_printf_i+0x130>
 80101b0:	680b      	ldr	r3, [r1, #0]
 80101b2:	6826      	ldr	r6, [r4, #0]
 80101b4:	6960      	ldr	r0, [r4, #20]
 80101b6:	1d1d      	adds	r5, r3, #4
 80101b8:	600d      	str	r5, [r1, #0]
 80101ba:	0635      	lsls	r5, r6, #24
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	d501      	bpl.n	80101c4 <_printf_i+0x1cc>
 80101c0:	6018      	str	r0, [r3, #0]
 80101c2:	e002      	b.n	80101ca <_printf_i+0x1d2>
 80101c4:	0671      	lsls	r1, r6, #25
 80101c6:	d5fb      	bpl.n	80101c0 <_printf_i+0x1c8>
 80101c8:	8018      	strh	r0, [r3, #0]
 80101ca:	2300      	movs	r3, #0
 80101cc:	6123      	str	r3, [r4, #16]
 80101ce:	4616      	mov	r6, r2
 80101d0:	e7ba      	b.n	8010148 <_printf_i+0x150>
 80101d2:	680b      	ldr	r3, [r1, #0]
 80101d4:	1d1a      	adds	r2, r3, #4
 80101d6:	600a      	str	r2, [r1, #0]
 80101d8:	681e      	ldr	r6, [r3, #0]
 80101da:	6862      	ldr	r2, [r4, #4]
 80101dc:	2100      	movs	r1, #0
 80101de:	4630      	mov	r0, r6
 80101e0:	f7ef fffe 	bl	80001e0 <memchr>
 80101e4:	b108      	cbz	r0, 80101ea <_printf_i+0x1f2>
 80101e6:	1b80      	subs	r0, r0, r6
 80101e8:	6060      	str	r0, [r4, #4]
 80101ea:	6863      	ldr	r3, [r4, #4]
 80101ec:	6123      	str	r3, [r4, #16]
 80101ee:	2300      	movs	r3, #0
 80101f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101f4:	e7a8      	b.n	8010148 <_printf_i+0x150>
 80101f6:	6923      	ldr	r3, [r4, #16]
 80101f8:	4632      	mov	r2, r6
 80101fa:	4649      	mov	r1, r9
 80101fc:	4640      	mov	r0, r8
 80101fe:	47d0      	blx	sl
 8010200:	3001      	adds	r0, #1
 8010202:	d0ab      	beq.n	801015c <_printf_i+0x164>
 8010204:	6823      	ldr	r3, [r4, #0]
 8010206:	079b      	lsls	r3, r3, #30
 8010208:	d413      	bmi.n	8010232 <_printf_i+0x23a>
 801020a:	68e0      	ldr	r0, [r4, #12]
 801020c:	9b03      	ldr	r3, [sp, #12]
 801020e:	4298      	cmp	r0, r3
 8010210:	bfb8      	it	lt
 8010212:	4618      	movlt	r0, r3
 8010214:	e7a4      	b.n	8010160 <_printf_i+0x168>
 8010216:	2301      	movs	r3, #1
 8010218:	4632      	mov	r2, r6
 801021a:	4649      	mov	r1, r9
 801021c:	4640      	mov	r0, r8
 801021e:	47d0      	blx	sl
 8010220:	3001      	adds	r0, #1
 8010222:	d09b      	beq.n	801015c <_printf_i+0x164>
 8010224:	3501      	adds	r5, #1
 8010226:	68e3      	ldr	r3, [r4, #12]
 8010228:	9903      	ldr	r1, [sp, #12]
 801022a:	1a5b      	subs	r3, r3, r1
 801022c:	42ab      	cmp	r3, r5
 801022e:	dcf2      	bgt.n	8010216 <_printf_i+0x21e>
 8010230:	e7eb      	b.n	801020a <_printf_i+0x212>
 8010232:	2500      	movs	r5, #0
 8010234:	f104 0619 	add.w	r6, r4, #25
 8010238:	e7f5      	b.n	8010226 <_printf_i+0x22e>
 801023a:	bf00      	nop
 801023c:	0807b2fa 	.word	0x0807b2fa
 8010240:	0807b30b 	.word	0x0807b30b

08010244 <iprintf>:
 8010244:	b40f      	push	{r0, r1, r2, r3}
 8010246:	4b0a      	ldr	r3, [pc, #40]	; (8010270 <iprintf+0x2c>)
 8010248:	b513      	push	{r0, r1, r4, lr}
 801024a:	681c      	ldr	r4, [r3, #0]
 801024c:	b124      	cbz	r4, 8010258 <iprintf+0x14>
 801024e:	69a3      	ldr	r3, [r4, #24]
 8010250:	b913      	cbnz	r3, 8010258 <iprintf+0x14>
 8010252:	4620      	mov	r0, r4
 8010254:	f7ff f9f6 	bl	800f644 <__sinit>
 8010258:	ab05      	add	r3, sp, #20
 801025a:	9a04      	ldr	r2, [sp, #16]
 801025c:	68a1      	ldr	r1, [r4, #8]
 801025e:	9301      	str	r3, [sp, #4]
 8010260:	4620      	mov	r0, r4
 8010262:	f001 fd2b 	bl	8011cbc <_vfiprintf_r>
 8010266:	b002      	add	sp, #8
 8010268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801026c:	b004      	add	sp, #16
 801026e:	4770      	bx	lr
 8010270:	20001004 	.word	0x20001004

08010274 <_puts_r>:
 8010274:	b570      	push	{r4, r5, r6, lr}
 8010276:	460e      	mov	r6, r1
 8010278:	4605      	mov	r5, r0
 801027a:	b118      	cbz	r0, 8010284 <_puts_r+0x10>
 801027c:	6983      	ldr	r3, [r0, #24]
 801027e:	b90b      	cbnz	r3, 8010284 <_puts_r+0x10>
 8010280:	f7ff f9e0 	bl	800f644 <__sinit>
 8010284:	69ab      	ldr	r3, [r5, #24]
 8010286:	68ac      	ldr	r4, [r5, #8]
 8010288:	b913      	cbnz	r3, 8010290 <_puts_r+0x1c>
 801028a:	4628      	mov	r0, r5
 801028c:	f7ff f9da 	bl	800f644 <__sinit>
 8010290:	4b2c      	ldr	r3, [pc, #176]	; (8010344 <_puts_r+0xd0>)
 8010292:	429c      	cmp	r4, r3
 8010294:	d120      	bne.n	80102d8 <_puts_r+0x64>
 8010296:	686c      	ldr	r4, [r5, #4]
 8010298:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801029a:	07db      	lsls	r3, r3, #31
 801029c:	d405      	bmi.n	80102aa <_puts_r+0x36>
 801029e:	89a3      	ldrh	r3, [r4, #12]
 80102a0:	0598      	lsls	r0, r3, #22
 80102a2:	d402      	bmi.n	80102aa <_puts_r+0x36>
 80102a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102a6:	f7ff fa90 	bl	800f7ca <__retarget_lock_acquire_recursive>
 80102aa:	89a3      	ldrh	r3, [r4, #12]
 80102ac:	0719      	lsls	r1, r3, #28
 80102ae:	d51d      	bpl.n	80102ec <_puts_r+0x78>
 80102b0:	6923      	ldr	r3, [r4, #16]
 80102b2:	b1db      	cbz	r3, 80102ec <_puts_r+0x78>
 80102b4:	3e01      	subs	r6, #1
 80102b6:	68a3      	ldr	r3, [r4, #8]
 80102b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80102bc:	3b01      	subs	r3, #1
 80102be:	60a3      	str	r3, [r4, #8]
 80102c0:	bb39      	cbnz	r1, 8010312 <_puts_r+0x9e>
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	da38      	bge.n	8010338 <_puts_r+0xc4>
 80102c6:	4622      	mov	r2, r4
 80102c8:	210a      	movs	r1, #10
 80102ca:	4628      	mov	r0, r5
 80102cc:	f000 f89c 	bl	8010408 <__swbuf_r>
 80102d0:	3001      	adds	r0, #1
 80102d2:	d011      	beq.n	80102f8 <_puts_r+0x84>
 80102d4:	250a      	movs	r5, #10
 80102d6:	e011      	b.n	80102fc <_puts_r+0x88>
 80102d8:	4b1b      	ldr	r3, [pc, #108]	; (8010348 <_puts_r+0xd4>)
 80102da:	429c      	cmp	r4, r3
 80102dc:	d101      	bne.n	80102e2 <_puts_r+0x6e>
 80102de:	68ac      	ldr	r4, [r5, #8]
 80102e0:	e7da      	b.n	8010298 <_puts_r+0x24>
 80102e2:	4b1a      	ldr	r3, [pc, #104]	; (801034c <_puts_r+0xd8>)
 80102e4:	429c      	cmp	r4, r3
 80102e6:	bf08      	it	eq
 80102e8:	68ec      	ldreq	r4, [r5, #12]
 80102ea:	e7d5      	b.n	8010298 <_puts_r+0x24>
 80102ec:	4621      	mov	r1, r4
 80102ee:	4628      	mov	r0, r5
 80102f0:	f000 f8ee 	bl	80104d0 <__swsetup_r>
 80102f4:	2800      	cmp	r0, #0
 80102f6:	d0dd      	beq.n	80102b4 <_puts_r+0x40>
 80102f8:	f04f 35ff 	mov.w	r5, #4294967295
 80102fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80102fe:	07da      	lsls	r2, r3, #31
 8010300:	d405      	bmi.n	801030e <_puts_r+0x9a>
 8010302:	89a3      	ldrh	r3, [r4, #12]
 8010304:	059b      	lsls	r3, r3, #22
 8010306:	d402      	bmi.n	801030e <_puts_r+0x9a>
 8010308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801030a:	f7ff fa5f 	bl	800f7cc <__retarget_lock_release_recursive>
 801030e:	4628      	mov	r0, r5
 8010310:	bd70      	pop	{r4, r5, r6, pc}
 8010312:	2b00      	cmp	r3, #0
 8010314:	da04      	bge.n	8010320 <_puts_r+0xac>
 8010316:	69a2      	ldr	r2, [r4, #24]
 8010318:	429a      	cmp	r2, r3
 801031a:	dc06      	bgt.n	801032a <_puts_r+0xb6>
 801031c:	290a      	cmp	r1, #10
 801031e:	d004      	beq.n	801032a <_puts_r+0xb6>
 8010320:	6823      	ldr	r3, [r4, #0]
 8010322:	1c5a      	adds	r2, r3, #1
 8010324:	6022      	str	r2, [r4, #0]
 8010326:	7019      	strb	r1, [r3, #0]
 8010328:	e7c5      	b.n	80102b6 <_puts_r+0x42>
 801032a:	4622      	mov	r2, r4
 801032c:	4628      	mov	r0, r5
 801032e:	f000 f86b 	bl	8010408 <__swbuf_r>
 8010332:	3001      	adds	r0, #1
 8010334:	d1bf      	bne.n	80102b6 <_puts_r+0x42>
 8010336:	e7df      	b.n	80102f8 <_puts_r+0x84>
 8010338:	6823      	ldr	r3, [r4, #0]
 801033a:	250a      	movs	r5, #10
 801033c:	1c5a      	adds	r2, r3, #1
 801033e:	6022      	str	r2, [r4, #0]
 8010340:	701d      	strb	r5, [r3, #0]
 8010342:	e7db      	b.n	80102fc <_puts_r+0x88>
 8010344:	0807b2a4 	.word	0x0807b2a4
 8010348:	0807b2c4 	.word	0x0807b2c4
 801034c:	0807b284 	.word	0x0807b284

08010350 <puts>:
 8010350:	4b02      	ldr	r3, [pc, #8]	; (801035c <puts+0xc>)
 8010352:	4601      	mov	r1, r0
 8010354:	6818      	ldr	r0, [r3, #0]
 8010356:	f7ff bf8d 	b.w	8010274 <_puts_r>
 801035a:	bf00      	nop
 801035c:	20001004 	.word	0x20001004

08010360 <_sbrk_r>:
 8010360:	b538      	push	{r3, r4, r5, lr}
 8010362:	4d06      	ldr	r5, [pc, #24]	; (801037c <_sbrk_r+0x1c>)
 8010364:	2300      	movs	r3, #0
 8010366:	4604      	mov	r4, r0
 8010368:	4608      	mov	r0, r1
 801036a:	602b      	str	r3, [r5, #0]
 801036c:	f7f1 fb20 	bl	80019b0 <_sbrk>
 8010370:	1c43      	adds	r3, r0, #1
 8010372:	d102      	bne.n	801037a <_sbrk_r+0x1a>
 8010374:	682b      	ldr	r3, [r5, #0]
 8010376:	b103      	cbz	r3, 801037a <_sbrk_r+0x1a>
 8010378:	6023      	str	r3, [r4, #0]
 801037a:	bd38      	pop	{r3, r4, r5, pc}
 801037c:	2001a69c 	.word	0x2001a69c

08010380 <__sread>:
 8010380:	b510      	push	{r4, lr}
 8010382:	460c      	mov	r4, r1
 8010384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010388:	f001 fdc8 	bl	8011f1c <_read_r>
 801038c:	2800      	cmp	r0, #0
 801038e:	bfab      	itete	ge
 8010390:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010392:	89a3      	ldrhlt	r3, [r4, #12]
 8010394:	181b      	addge	r3, r3, r0
 8010396:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801039a:	bfac      	ite	ge
 801039c:	6563      	strge	r3, [r4, #84]	; 0x54
 801039e:	81a3      	strhlt	r3, [r4, #12]
 80103a0:	bd10      	pop	{r4, pc}

080103a2 <__swrite>:
 80103a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103a6:	461f      	mov	r7, r3
 80103a8:	898b      	ldrh	r3, [r1, #12]
 80103aa:	05db      	lsls	r3, r3, #23
 80103ac:	4605      	mov	r5, r0
 80103ae:	460c      	mov	r4, r1
 80103b0:	4616      	mov	r6, r2
 80103b2:	d505      	bpl.n	80103c0 <__swrite+0x1e>
 80103b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103b8:	2302      	movs	r3, #2
 80103ba:	2200      	movs	r2, #0
 80103bc:	f001 f846 	bl	801144c <_lseek_r>
 80103c0:	89a3      	ldrh	r3, [r4, #12]
 80103c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80103ca:	81a3      	strh	r3, [r4, #12]
 80103cc:	4632      	mov	r2, r6
 80103ce:	463b      	mov	r3, r7
 80103d0:	4628      	mov	r0, r5
 80103d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103d6:	f000 b869 	b.w	80104ac <_write_r>

080103da <__sseek>:
 80103da:	b510      	push	{r4, lr}
 80103dc:	460c      	mov	r4, r1
 80103de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103e2:	f001 f833 	bl	801144c <_lseek_r>
 80103e6:	1c43      	adds	r3, r0, #1
 80103e8:	89a3      	ldrh	r3, [r4, #12]
 80103ea:	bf15      	itete	ne
 80103ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80103ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80103f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80103f6:	81a3      	strheq	r3, [r4, #12]
 80103f8:	bf18      	it	ne
 80103fa:	81a3      	strhne	r3, [r4, #12]
 80103fc:	bd10      	pop	{r4, pc}

080103fe <__sclose>:
 80103fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010402:	f000 b8d3 	b.w	80105ac <_close_r>
	...

08010408 <__swbuf_r>:
 8010408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801040a:	460e      	mov	r6, r1
 801040c:	4614      	mov	r4, r2
 801040e:	4605      	mov	r5, r0
 8010410:	b118      	cbz	r0, 801041a <__swbuf_r+0x12>
 8010412:	6983      	ldr	r3, [r0, #24]
 8010414:	b90b      	cbnz	r3, 801041a <__swbuf_r+0x12>
 8010416:	f7ff f915 	bl	800f644 <__sinit>
 801041a:	4b21      	ldr	r3, [pc, #132]	; (80104a0 <__swbuf_r+0x98>)
 801041c:	429c      	cmp	r4, r3
 801041e:	d12b      	bne.n	8010478 <__swbuf_r+0x70>
 8010420:	686c      	ldr	r4, [r5, #4]
 8010422:	69a3      	ldr	r3, [r4, #24]
 8010424:	60a3      	str	r3, [r4, #8]
 8010426:	89a3      	ldrh	r3, [r4, #12]
 8010428:	071a      	lsls	r2, r3, #28
 801042a:	d52f      	bpl.n	801048c <__swbuf_r+0x84>
 801042c:	6923      	ldr	r3, [r4, #16]
 801042e:	b36b      	cbz	r3, 801048c <__swbuf_r+0x84>
 8010430:	6923      	ldr	r3, [r4, #16]
 8010432:	6820      	ldr	r0, [r4, #0]
 8010434:	1ac0      	subs	r0, r0, r3
 8010436:	6963      	ldr	r3, [r4, #20]
 8010438:	b2f6      	uxtb	r6, r6
 801043a:	4283      	cmp	r3, r0
 801043c:	4637      	mov	r7, r6
 801043e:	dc04      	bgt.n	801044a <__swbuf_r+0x42>
 8010440:	4621      	mov	r1, r4
 8010442:	4628      	mov	r0, r5
 8010444:	f000 ffc2 	bl	80113cc <_fflush_r>
 8010448:	bb30      	cbnz	r0, 8010498 <__swbuf_r+0x90>
 801044a:	68a3      	ldr	r3, [r4, #8]
 801044c:	3b01      	subs	r3, #1
 801044e:	60a3      	str	r3, [r4, #8]
 8010450:	6823      	ldr	r3, [r4, #0]
 8010452:	1c5a      	adds	r2, r3, #1
 8010454:	6022      	str	r2, [r4, #0]
 8010456:	701e      	strb	r6, [r3, #0]
 8010458:	6963      	ldr	r3, [r4, #20]
 801045a:	3001      	adds	r0, #1
 801045c:	4283      	cmp	r3, r0
 801045e:	d004      	beq.n	801046a <__swbuf_r+0x62>
 8010460:	89a3      	ldrh	r3, [r4, #12]
 8010462:	07db      	lsls	r3, r3, #31
 8010464:	d506      	bpl.n	8010474 <__swbuf_r+0x6c>
 8010466:	2e0a      	cmp	r6, #10
 8010468:	d104      	bne.n	8010474 <__swbuf_r+0x6c>
 801046a:	4621      	mov	r1, r4
 801046c:	4628      	mov	r0, r5
 801046e:	f000 ffad 	bl	80113cc <_fflush_r>
 8010472:	b988      	cbnz	r0, 8010498 <__swbuf_r+0x90>
 8010474:	4638      	mov	r0, r7
 8010476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010478:	4b0a      	ldr	r3, [pc, #40]	; (80104a4 <__swbuf_r+0x9c>)
 801047a:	429c      	cmp	r4, r3
 801047c:	d101      	bne.n	8010482 <__swbuf_r+0x7a>
 801047e:	68ac      	ldr	r4, [r5, #8]
 8010480:	e7cf      	b.n	8010422 <__swbuf_r+0x1a>
 8010482:	4b09      	ldr	r3, [pc, #36]	; (80104a8 <__swbuf_r+0xa0>)
 8010484:	429c      	cmp	r4, r3
 8010486:	bf08      	it	eq
 8010488:	68ec      	ldreq	r4, [r5, #12]
 801048a:	e7ca      	b.n	8010422 <__swbuf_r+0x1a>
 801048c:	4621      	mov	r1, r4
 801048e:	4628      	mov	r0, r5
 8010490:	f000 f81e 	bl	80104d0 <__swsetup_r>
 8010494:	2800      	cmp	r0, #0
 8010496:	d0cb      	beq.n	8010430 <__swbuf_r+0x28>
 8010498:	f04f 37ff 	mov.w	r7, #4294967295
 801049c:	e7ea      	b.n	8010474 <__swbuf_r+0x6c>
 801049e:	bf00      	nop
 80104a0:	0807b2a4 	.word	0x0807b2a4
 80104a4:	0807b2c4 	.word	0x0807b2c4
 80104a8:	0807b284 	.word	0x0807b284

080104ac <_write_r>:
 80104ac:	b538      	push	{r3, r4, r5, lr}
 80104ae:	4d07      	ldr	r5, [pc, #28]	; (80104cc <_write_r+0x20>)
 80104b0:	4604      	mov	r4, r0
 80104b2:	4608      	mov	r0, r1
 80104b4:	4611      	mov	r1, r2
 80104b6:	2200      	movs	r2, #0
 80104b8:	602a      	str	r2, [r5, #0]
 80104ba:	461a      	mov	r2, r3
 80104bc:	f7fd fd54 	bl	800df68 <_write>
 80104c0:	1c43      	adds	r3, r0, #1
 80104c2:	d102      	bne.n	80104ca <_write_r+0x1e>
 80104c4:	682b      	ldr	r3, [r5, #0]
 80104c6:	b103      	cbz	r3, 80104ca <_write_r+0x1e>
 80104c8:	6023      	str	r3, [r4, #0]
 80104ca:	bd38      	pop	{r3, r4, r5, pc}
 80104cc:	2001a69c 	.word	0x2001a69c

080104d0 <__swsetup_r>:
 80104d0:	4b32      	ldr	r3, [pc, #200]	; (801059c <__swsetup_r+0xcc>)
 80104d2:	b570      	push	{r4, r5, r6, lr}
 80104d4:	681d      	ldr	r5, [r3, #0]
 80104d6:	4606      	mov	r6, r0
 80104d8:	460c      	mov	r4, r1
 80104da:	b125      	cbz	r5, 80104e6 <__swsetup_r+0x16>
 80104dc:	69ab      	ldr	r3, [r5, #24]
 80104de:	b913      	cbnz	r3, 80104e6 <__swsetup_r+0x16>
 80104e0:	4628      	mov	r0, r5
 80104e2:	f7ff f8af 	bl	800f644 <__sinit>
 80104e6:	4b2e      	ldr	r3, [pc, #184]	; (80105a0 <__swsetup_r+0xd0>)
 80104e8:	429c      	cmp	r4, r3
 80104ea:	d10f      	bne.n	801050c <__swsetup_r+0x3c>
 80104ec:	686c      	ldr	r4, [r5, #4]
 80104ee:	89a3      	ldrh	r3, [r4, #12]
 80104f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80104f4:	0719      	lsls	r1, r3, #28
 80104f6:	d42c      	bmi.n	8010552 <__swsetup_r+0x82>
 80104f8:	06dd      	lsls	r5, r3, #27
 80104fa:	d411      	bmi.n	8010520 <__swsetup_r+0x50>
 80104fc:	2309      	movs	r3, #9
 80104fe:	6033      	str	r3, [r6, #0]
 8010500:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010504:	81a3      	strh	r3, [r4, #12]
 8010506:	f04f 30ff 	mov.w	r0, #4294967295
 801050a:	e03e      	b.n	801058a <__swsetup_r+0xba>
 801050c:	4b25      	ldr	r3, [pc, #148]	; (80105a4 <__swsetup_r+0xd4>)
 801050e:	429c      	cmp	r4, r3
 8010510:	d101      	bne.n	8010516 <__swsetup_r+0x46>
 8010512:	68ac      	ldr	r4, [r5, #8]
 8010514:	e7eb      	b.n	80104ee <__swsetup_r+0x1e>
 8010516:	4b24      	ldr	r3, [pc, #144]	; (80105a8 <__swsetup_r+0xd8>)
 8010518:	429c      	cmp	r4, r3
 801051a:	bf08      	it	eq
 801051c:	68ec      	ldreq	r4, [r5, #12]
 801051e:	e7e6      	b.n	80104ee <__swsetup_r+0x1e>
 8010520:	0758      	lsls	r0, r3, #29
 8010522:	d512      	bpl.n	801054a <__swsetup_r+0x7a>
 8010524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010526:	b141      	cbz	r1, 801053a <__swsetup_r+0x6a>
 8010528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801052c:	4299      	cmp	r1, r3
 801052e:	d002      	beq.n	8010536 <__swsetup_r+0x66>
 8010530:	4630      	mov	r0, r6
 8010532:	f7ff f973 	bl	800f81c <_free_r>
 8010536:	2300      	movs	r3, #0
 8010538:	6363      	str	r3, [r4, #52]	; 0x34
 801053a:	89a3      	ldrh	r3, [r4, #12]
 801053c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010540:	81a3      	strh	r3, [r4, #12]
 8010542:	2300      	movs	r3, #0
 8010544:	6063      	str	r3, [r4, #4]
 8010546:	6923      	ldr	r3, [r4, #16]
 8010548:	6023      	str	r3, [r4, #0]
 801054a:	89a3      	ldrh	r3, [r4, #12]
 801054c:	f043 0308 	orr.w	r3, r3, #8
 8010550:	81a3      	strh	r3, [r4, #12]
 8010552:	6923      	ldr	r3, [r4, #16]
 8010554:	b94b      	cbnz	r3, 801056a <__swsetup_r+0x9a>
 8010556:	89a3      	ldrh	r3, [r4, #12]
 8010558:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801055c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010560:	d003      	beq.n	801056a <__swsetup_r+0x9a>
 8010562:	4621      	mov	r1, r4
 8010564:	4630      	mov	r0, r6
 8010566:	f000 ffa7 	bl	80114b8 <__smakebuf_r>
 801056a:	89a0      	ldrh	r0, [r4, #12]
 801056c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010570:	f010 0301 	ands.w	r3, r0, #1
 8010574:	d00a      	beq.n	801058c <__swsetup_r+0xbc>
 8010576:	2300      	movs	r3, #0
 8010578:	60a3      	str	r3, [r4, #8]
 801057a:	6963      	ldr	r3, [r4, #20]
 801057c:	425b      	negs	r3, r3
 801057e:	61a3      	str	r3, [r4, #24]
 8010580:	6923      	ldr	r3, [r4, #16]
 8010582:	b943      	cbnz	r3, 8010596 <__swsetup_r+0xc6>
 8010584:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010588:	d1ba      	bne.n	8010500 <__swsetup_r+0x30>
 801058a:	bd70      	pop	{r4, r5, r6, pc}
 801058c:	0781      	lsls	r1, r0, #30
 801058e:	bf58      	it	pl
 8010590:	6963      	ldrpl	r3, [r4, #20]
 8010592:	60a3      	str	r3, [r4, #8]
 8010594:	e7f4      	b.n	8010580 <__swsetup_r+0xb0>
 8010596:	2000      	movs	r0, #0
 8010598:	e7f7      	b.n	801058a <__swsetup_r+0xba>
 801059a:	bf00      	nop
 801059c:	20001004 	.word	0x20001004
 80105a0:	0807b2a4 	.word	0x0807b2a4
 80105a4:	0807b2c4 	.word	0x0807b2c4
 80105a8:	0807b284 	.word	0x0807b284

080105ac <_close_r>:
 80105ac:	b538      	push	{r3, r4, r5, lr}
 80105ae:	4d06      	ldr	r5, [pc, #24]	; (80105c8 <_close_r+0x1c>)
 80105b0:	2300      	movs	r3, #0
 80105b2:	4604      	mov	r4, r0
 80105b4:	4608      	mov	r0, r1
 80105b6:	602b      	str	r3, [r5, #0]
 80105b8:	f7fd fd08 	bl	800dfcc <_close>
 80105bc:	1c43      	adds	r3, r0, #1
 80105be:	d102      	bne.n	80105c6 <_close_r+0x1a>
 80105c0:	682b      	ldr	r3, [r5, #0]
 80105c2:	b103      	cbz	r3, 80105c6 <_close_r+0x1a>
 80105c4:	6023      	str	r3, [r4, #0]
 80105c6:	bd38      	pop	{r3, r4, r5, pc}
 80105c8:	2001a69c 	.word	0x2001a69c

080105cc <quorem>:
 80105cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105d0:	6903      	ldr	r3, [r0, #16]
 80105d2:	690c      	ldr	r4, [r1, #16]
 80105d4:	42a3      	cmp	r3, r4
 80105d6:	4607      	mov	r7, r0
 80105d8:	f2c0 8081 	blt.w	80106de <quorem+0x112>
 80105dc:	3c01      	subs	r4, #1
 80105de:	f101 0814 	add.w	r8, r1, #20
 80105e2:	f100 0514 	add.w	r5, r0, #20
 80105e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80105ea:	9301      	str	r3, [sp, #4]
 80105ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80105f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80105f4:	3301      	adds	r3, #1
 80105f6:	429a      	cmp	r2, r3
 80105f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80105fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010600:	fbb2 f6f3 	udiv	r6, r2, r3
 8010604:	d331      	bcc.n	801066a <quorem+0x9e>
 8010606:	f04f 0e00 	mov.w	lr, #0
 801060a:	4640      	mov	r0, r8
 801060c:	46ac      	mov	ip, r5
 801060e:	46f2      	mov	sl, lr
 8010610:	f850 2b04 	ldr.w	r2, [r0], #4
 8010614:	b293      	uxth	r3, r2
 8010616:	fb06 e303 	mla	r3, r6, r3, lr
 801061a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801061e:	b29b      	uxth	r3, r3
 8010620:	ebaa 0303 	sub.w	r3, sl, r3
 8010624:	0c12      	lsrs	r2, r2, #16
 8010626:	f8dc a000 	ldr.w	sl, [ip]
 801062a:	fb06 e202 	mla	r2, r6, r2, lr
 801062e:	fa13 f38a 	uxtah	r3, r3, sl
 8010632:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010636:	fa1f fa82 	uxth.w	sl, r2
 801063a:	f8dc 2000 	ldr.w	r2, [ip]
 801063e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8010642:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010646:	b29b      	uxth	r3, r3
 8010648:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801064c:	4581      	cmp	r9, r0
 801064e:	f84c 3b04 	str.w	r3, [ip], #4
 8010652:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010656:	d2db      	bcs.n	8010610 <quorem+0x44>
 8010658:	f855 300b 	ldr.w	r3, [r5, fp]
 801065c:	b92b      	cbnz	r3, 801066a <quorem+0x9e>
 801065e:	9b01      	ldr	r3, [sp, #4]
 8010660:	3b04      	subs	r3, #4
 8010662:	429d      	cmp	r5, r3
 8010664:	461a      	mov	r2, r3
 8010666:	d32e      	bcc.n	80106c6 <quorem+0xfa>
 8010668:	613c      	str	r4, [r7, #16]
 801066a:	4638      	mov	r0, r7
 801066c:	f001 f9ee 	bl	8011a4c <__mcmp>
 8010670:	2800      	cmp	r0, #0
 8010672:	db24      	blt.n	80106be <quorem+0xf2>
 8010674:	3601      	adds	r6, #1
 8010676:	4628      	mov	r0, r5
 8010678:	f04f 0c00 	mov.w	ip, #0
 801067c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010680:	f8d0 e000 	ldr.w	lr, [r0]
 8010684:	b293      	uxth	r3, r2
 8010686:	ebac 0303 	sub.w	r3, ip, r3
 801068a:	0c12      	lsrs	r2, r2, #16
 801068c:	fa13 f38e 	uxtah	r3, r3, lr
 8010690:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010694:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010698:	b29b      	uxth	r3, r3
 801069a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801069e:	45c1      	cmp	r9, r8
 80106a0:	f840 3b04 	str.w	r3, [r0], #4
 80106a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80106a8:	d2e8      	bcs.n	801067c <quorem+0xb0>
 80106aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80106ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80106b2:	b922      	cbnz	r2, 80106be <quorem+0xf2>
 80106b4:	3b04      	subs	r3, #4
 80106b6:	429d      	cmp	r5, r3
 80106b8:	461a      	mov	r2, r3
 80106ba:	d30a      	bcc.n	80106d2 <quorem+0x106>
 80106bc:	613c      	str	r4, [r7, #16]
 80106be:	4630      	mov	r0, r6
 80106c0:	b003      	add	sp, #12
 80106c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106c6:	6812      	ldr	r2, [r2, #0]
 80106c8:	3b04      	subs	r3, #4
 80106ca:	2a00      	cmp	r2, #0
 80106cc:	d1cc      	bne.n	8010668 <quorem+0x9c>
 80106ce:	3c01      	subs	r4, #1
 80106d0:	e7c7      	b.n	8010662 <quorem+0x96>
 80106d2:	6812      	ldr	r2, [r2, #0]
 80106d4:	3b04      	subs	r3, #4
 80106d6:	2a00      	cmp	r2, #0
 80106d8:	d1f0      	bne.n	80106bc <quorem+0xf0>
 80106da:	3c01      	subs	r4, #1
 80106dc:	e7eb      	b.n	80106b6 <quorem+0xea>
 80106de:	2000      	movs	r0, #0
 80106e0:	e7ee      	b.n	80106c0 <quorem+0xf4>
 80106e2:	0000      	movs	r0, r0
 80106e4:	0000      	movs	r0, r0
	...

080106e8 <_dtoa_r>:
 80106e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106ec:	ed2d 8b02 	vpush	{d8}
 80106f0:	ec57 6b10 	vmov	r6, r7, d0
 80106f4:	b095      	sub	sp, #84	; 0x54
 80106f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80106f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80106fc:	9105      	str	r1, [sp, #20]
 80106fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010702:	4604      	mov	r4, r0
 8010704:	9209      	str	r2, [sp, #36]	; 0x24
 8010706:	930f      	str	r3, [sp, #60]	; 0x3c
 8010708:	b975      	cbnz	r5, 8010728 <_dtoa_r+0x40>
 801070a:	2010      	movs	r0, #16
 801070c:	f7ff f860 	bl	800f7d0 <malloc>
 8010710:	4602      	mov	r2, r0
 8010712:	6260      	str	r0, [r4, #36]	; 0x24
 8010714:	b920      	cbnz	r0, 8010720 <_dtoa_r+0x38>
 8010716:	4bb2      	ldr	r3, [pc, #712]	; (80109e0 <_dtoa_r+0x2f8>)
 8010718:	21ea      	movs	r1, #234	; 0xea
 801071a:	48b2      	ldr	r0, [pc, #712]	; (80109e4 <_dtoa_r+0x2fc>)
 801071c:	f001 fc10 	bl	8011f40 <__assert_func>
 8010720:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010724:	6005      	str	r5, [r0, #0]
 8010726:	60c5      	str	r5, [r0, #12]
 8010728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801072a:	6819      	ldr	r1, [r3, #0]
 801072c:	b151      	cbz	r1, 8010744 <_dtoa_r+0x5c>
 801072e:	685a      	ldr	r2, [r3, #4]
 8010730:	604a      	str	r2, [r1, #4]
 8010732:	2301      	movs	r3, #1
 8010734:	4093      	lsls	r3, r2
 8010736:	608b      	str	r3, [r1, #8]
 8010738:	4620      	mov	r0, r4
 801073a:	f000 ff49 	bl	80115d0 <_Bfree>
 801073e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010740:	2200      	movs	r2, #0
 8010742:	601a      	str	r2, [r3, #0]
 8010744:	1e3b      	subs	r3, r7, #0
 8010746:	bfb9      	ittee	lt
 8010748:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801074c:	9303      	strlt	r3, [sp, #12]
 801074e:	2300      	movge	r3, #0
 8010750:	f8c8 3000 	strge.w	r3, [r8]
 8010754:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010758:	4ba3      	ldr	r3, [pc, #652]	; (80109e8 <_dtoa_r+0x300>)
 801075a:	bfbc      	itt	lt
 801075c:	2201      	movlt	r2, #1
 801075e:	f8c8 2000 	strlt.w	r2, [r8]
 8010762:	ea33 0309 	bics.w	r3, r3, r9
 8010766:	d11b      	bne.n	80107a0 <_dtoa_r+0xb8>
 8010768:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801076a:	f242 730f 	movw	r3, #9999	; 0x270f
 801076e:	6013      	str	r3, [r2, #0]
 8010770:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010774:	4333      	orrs	r3, r6
 8010776:	f000 857a 	beq.w	801126e <_dtoa_r+0xb86>
 801077a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801077c:	b963      	cbnz	r3, 8010798 <_dtoa_r+0xb0>
 801077e:	4b9b      	ldr	r3, [pc, #620]	; (80109ec <_dtoa_r+0x304>)
 8010780:	e024      	b.n	80107cc <_dtoa_r+0xe4>
 8010782:	4b9b      	ldr	r3, [pc, #620]	; (80109f0 <_dtoa_r+0x308>)
 8010784:	9300      	str	r3, [sp, #0]
 8010786:	3308      	adds	r3, #8
 8010788:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801078a:	6013      	str	r3, [r2, #0]
 801078c:	9800      	ldr	r0, [sp, #0]
 801078e:	b015      	add	sp, #84	; 0x54
 8010790:	ecbd 8b02 	vpop	{d8}
 8010794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010798:	4b94      	ldr	r3, [pc, #592]	; (80109ec <_dtoa_r+0x304>)
 801079a:	9300      	str	r3, [sp, #0]
 801079c:	3303      	adds	r3, #3
 801079e:	e7f3      	b.n	8010788 <_dtoa_r+0xa0>
 80107a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80107a4:	2200      	movs	r2, #0
 80107a6:	ec51 0b17 	vmov	r0, r1, d7
 80107aa:	2300      	movs	r3, #0
 80107ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80107b0:	f7f0 f98a 	bl	8000ac8 <__aeabi_dcmpeq>
 80107b4:	4680      	mov	r8, r0
 80107b6:	b158      	cbz	r0, 80107d0 <_dtoa_r+0xe8>
 80107b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80107ba:	2301      	movs	r3, #1
 80107bc:	6013      	str	r3, [r2, #0]
 80107be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	f000 8551 	beq.w	8011268 <_dtoa_r+0xb80>
 80107c6:	488b      	ldr	r0, [pc, #556]	; (80109f4 <_dtoa_r+0x30c>)
 80107c8:	6018      	str	r0, [r3, #0]
 80107ca:	1e43      	subs	r3, r0, #1
 80107cc:	9300      	str	r3, [sp, #0]
 80107ce:	e7dd      	b.n	801078c <_dtoa_r+0xa4>
 80107d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80107d4:	aa12      	add	r2, sp, #72	; 0x48
 80107d6:	a913      	add	r1, sp, #76	; 0x4c
 80107d8:	4620      	mov	r0, r4
 80107da:	f001 f9db 	bl	8011b94 <__d2b>
 80107de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80107e2:	4683      	mov	fp, r0
 80107e4:	2d00      	cmp	r5, #0
 80107e6:	d07c      	beq.n	80108e2 <_dtoa_r+0x1fa>
 80107e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80107ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80107f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80107f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80107fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80107fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010802:	4b7d      	ldr	r3, [pc, #500]	; (80109f8 <_dtoa_r+0x310>)
 8010804:	2200      	movs	r2, #0
 8010806:	4630      	mov	r0, r6
 8010808:	4639      	mov	r1, r7
 801080a:	f7ef fd3d 	bl	8000288 <__aeabi_dsub>
 801080e:	a36e      	add	r3, pc, #440	; (adr r3, 80109c8 <_dtoa_r+0x2e0>)
 8010810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010814:	f7ef fef0 	bl	80005f8 <__aeabi_dmul>
 8010818:	a36d      	add	r3, pc, #436	; (adr r3, 80109d0 <_dtoa_r+0x2e8>)
 801081a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801081e:	f7ef fd35 	bl	800028c <__adddf3>
 8010822:	4606      	mov	r6, r0
 8010824:	4628      	mov	r0, r5
 8010826:	460f      	mov	r7, r1
 8010828:	f7ef fe7c 	bl	8000524 <__aeabi_i2d>
 801082c:	a36a      	add	r3, pc, #424	; (adr r3, 80109d8 <_dtoa_r+0x2f0>)
 801082e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010832:	f7ef fee1 	bl	80005f8 <__aeabi_dmul>
 8010836:	4602      	mov	r2, r0
 8010838:	460b      	mov	r3, r1
 801083a:	4630      	mov	r0, r6
 801083c:	4639      	mov	r1, r7
 801083e:	f7ef fd25 	bl	800028c <__adddf3>
 8010842:	4606      	mov	r6, r0
 8010844:	460f      	mov	r7, r1
 8010846:	f7f0 f987 	bl	8000b58 <__aeabi_d2iz>
 801084a:	2200      	movs	r2, #0
 801084c:	4682      	mov	sl, r0
 801084e:	2300      	movs	r3, #0
 8010850:	4630      	mov	r0, r6
 8010852:	4639      	mov	r1, r7
 8010854:	f7f0 f942 	bl	8000adc <__aeabi_dcmplt>
 8010858:	b148      	cbz	r0, 801086e <_dtoa_r+0x186>
 801085a:	4650      	mov	r0, sl
 801085c:	f7ef fe62 	bl	8000524 <__aeabi_i2d>
 8010860:	4632      	mov	r2, r6
 8010862:	463b      	mov	r3, r7
 8010864:	f7f0 f930 	bl	8000ac8 <__aeabi_dcmpeq>
 8010868:	b908      	cbnz	r0, 801086e <_dtoa_r+0x186>
 801086a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801086e:	f1ba 0f16 	cmp.w	sl, #22
 8010872:	d854      	bhi.n	801091e <_dtoa_r+0x236>
 8010874:	4b61      	ldr	r3, [pc, #388]	; (80109fc <_dtoa_r+0x314>)
 8010876:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801087a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801087e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010882:	f7f0 f92b 	bl	8000adc <__aeabi_dcmplt>
 8010886:	2800      	cmp	r0, #0
 8010888:	d04b      	beq.n	8010922 <_dtoa_r+0x23a>
 801088a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801088e:	2300      	movs	r3, #0
 8010890:	930e      	str	r3, [sp, #56]	; 0x38
 8010892:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010894:	1b5d      	subs	r5, r3, r5
 8010896:	1e6b      	subs	r3, r5, #1
 8010898:	9304      	str	r3, [sp, #16]
 801089a:	bf43      	ittte	mi
 801089c:	2300      	movmi	r3, #0
 801089e:	f1c5 0801 	rsbmi	r8, r5, #1
 80108a2:	9304      	strmi	r3, [sp, #16]
 80108a4:	f04f 0800 	movpl.w	r8, #0
 80108a8:	f1ba 0f00 	cmp.w	sl, #0
 80108ac:	db3b      	blt.n	8010926 <_dtoa_r+0x23e>
 80108ae:	9b04      	ldr	r3, [sp, #16]
 80108b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80108b4:	4453      	add	r3, sl
 80108b6:	9304      	str	r3, [sp, #16]
 80108b8:	2300      	movs	r3, #0
 80108ba:	9306      	str	r3, [sp, #24]
 80108bc:	9b05      	ldr	r3, [sp, #20]
 80108be:	2b09      	cmp	r3, #9
 80108c0:	d869      	bhi.n	8010996 <_dtoa_r+0x2ae>
 80108c2:	2b05      	cmp	r3, #5
 80108c4:	bfc4      	itt	gt
 80108c6:	3b04      	subgt	r3, #4
 80108c8:	9305      	strgt	r3, [sp, #20]
 80108ca:	9b05      	ldr	r3, [sp, #20]
 80108cc:	f1a3 0302 	sub.w	r3, r3, #2
 80108d0:	bfcc      	ite	gt
 80108d2:	2500      	movgt	r5, #0
 80108d4:	2501      	movle	r5, #1
 80108d6:	2b03      	cmp	r3, #3
 80108d8:	d869      	bhi.n	80109ae <_dtoa_r+0x2c6>
 80108da:	e8df f003 	tbb	[pc, r3]
 80108de:	4e2c      	.short	0x4e2c
 80108e0:	5a4c      	.short	0x5a4c
 80108e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80108e6:	441d      	add	r5, r3
 80108e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80108ec:	2b20      	cmp	r3, #32
 80108ee:	bfc1      	itttt	gt
 80108f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80108f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80108f8:	fa09 f303 	lslgt.w	r3, r9, r3
 80108fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010900:	bfda      	itte	le
 8010902:	f1c3 0320 	rsble	r3, r3, #32
 8010906:	fa06 f003 	lslle.w	r0, r6, r3
 801090a:	4318      	orrgt	r0, r3
 801090c:	f7ef fdfa 	bl	8000504 <__aeabi_ui2d>
 8010910:	2301      	movs	r3, #1
 8010912:	4606      	mov	r6, r0
 8010914:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010918:	3d01      	subs	r5, #1
 801091a:	9310      	str	r3, [sp, #64]	; 0x40
 801091c:	e771      	b.n	8010802 <_dtoa_r+0x11a>
 801091e:	2301      	movs	r3, #1
 8010920:	e7b6      	b.n	8010890 <_dtoa_r+0x1a8>
 8010922:	900e      	str	r0, [sp, #56]	; 0x38
 8010924:	e7b5      	b.n	8010892 <_dtoa_r+0x1aa>
 8010926:	f1ca 0300 	rsb	r3, sl, #0
 801092a:	9306      	str	r3, [sp, #24]
 801092c:	2300      	movs	r3, #0
 801092e:	eba8 080a 	sub.w	r8, r8, sl
 8010932:	930d      	str	r3, [sp, #52]	; 0x34
 8010934:	e7c2      	b.n	80108bc <_dtoa_r+0x1d4>
 8010936:	2300      	movs	r3, #0
 8010938:	9308      	str	r3, [sp, #32]
 801093a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801093c:	2b00      	cmp	r3, #0
 801093e:	dc39      	bgt.n	80109b4 <_dtoa_r+0x2cc>
 8010940:	f04f 0901 	mov.w	r9, #1
 8010944:	f8cd 9004 	str.w	r9, [sp, #4]
 8010948:	464b      	mov	r3, r9
 801094a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801094e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010950:	2200      	movs	r2, #0
 8010952:	6042      	str	r2, [r0, #4]
 8010954:	2204      	movs	r2, #4
 8010956:	f102 0614 	add.w	r6, r2, #20
 801095a:	429e      	cmp	r6, r3
 801095c:	6841      	ldr	r1, [r0, #4]
 801095e:	d92f      	bls.n	80109c0 <_dtoa_r+0x2d8>
 8010960:	4620      	mov	r0, r4
 8010962:	f000 fdf5 	bl	8011550 <_Balloc>
 8010966:	9000      	str	r0, [sp, #0]
 8010968:	2800      	cmp	r0, #0
 801096a:	d14b      	bne.n	8010a04 <_dtoa_r+0x31c>
 801096c:	4b24      	ldr	r3, [pc, #144]	; (8010a00 <_dtoa_r+0x318>)
 801096e:	4602      	mov	r2, r0
 8010970:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010974:	e6d1      	b.n	801071a <_dtoa_r+0x32>
 8010976:	2301      	movs	r3, #1
 8010978:	e7de      	b.n	8010938 <_dtoa_r+0x250>
 801097a:	2300      	movs	r3, #0
 801097c:	9308      	str	r3, [sp, #32]
 801097e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010980:	eb0a 0903 	add.w	r9, sl, r3
 8010984:	f109 0301 	add.w	r3, r9, #1
 8010988:	2b01      	cmp	r3, #1
 801098a:	9301      	str	r3, [sp, #4]
 801098c:	bfb8      	it	lt
 801098e:	2301      	movlt	r3, #1
 8010990:	e7dd      	b.n	801094e <_dtoa_r+0x266>
 8010992:	2301      	movs	r3, #1
 8010994:	e7f2      	b.n	801097c <_dtoa_r+0x294>
 8010996:	2501      	movs	r5, #1
 8010998:	2300      	movs	r3, #0
 801099a:	9305      	str	r3, [sp, #20]
 801099c:	9508      	str	r5, [sp, #32]
 801099e:	f04f 39ff 	mov.w	r9, #4294967295
 80109a2:	2200      	movs	r2, #0
 80109a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80109a8:	2312      	movs	r3, #18
 80109aa:	9209      	str	r2, [sp, #36]	; 0x24
 80109ac:	e7cf      	b.n	801094e <_dtoa_r+0x266>
 80109ae:	2301      	movs	r3, #1
 80109b0:	9308      	str	r3, [sp, #32]
 80109b2:	e7f4      	b.n	801099e <_dtoa_r+0x2b6>
 80109b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80109b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80109bc:	464b      	mov	r3, r9
 80109be:	e7c6      	b.n	801094e <_dtoa_r+0x266>
 80109c0:	3101      	adds	r1, #1
 80109c2:	6041      	str	r1, [r0, #4]
 80109c4:	0052      	lsls	r2, r2, #1
 80109c6:	e7c6      	b.n	8010956 <_dtoa_r+0x26e>
 80109c8:	636f4361 	.word	0x636f4361
 80109cc:	3fd287a7 	.word	0x3fd287a7
 80109d0:	8b60c8b3 	.word	0x8b60c8b3
 80109d4:	3fc68a28 	.word	0x3fc68a28
 80109d8:	509f79fb 	.word	0x509f79fb
 80109dc:	3fd34413 	.word	0x3fd34413
 80109e0:	0807b329 	.word	0x0807b329
 80109e4:	0807b340 	.word	0x0807b340
 80109e8:	7ff00000 	.word	0x7ff00000
 80109ec:	0807b325 	.word	0x0807b325
 80109f0:	0807b31c 	.word	0x0807b31c
 80109f4:	0807b2f9 	.word	0x0807b2f9
 80109f8:	3ff80000 	.word	0x3ff80000
 80109fc:	0807b438 	.word	0x0807b438
 8010a00:	0807b39f 	.word	0x0807b39f
 8010a04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a06:	9a00      	ldr	r2, [sp, #0]
 8010a08:	601a      	str	r2, [r3, #0]
 8010a0a:	9b01      	ldr	r3, [sp, #4]
 8010a0c:	2b0e      	cmp	r3, #14
 8010a0e:	f200 80ad 	bhi.w	8010b6c <_dtoa_r+0x484>
 8010a12:	2d00      	cmp	r5, #0
 8010a14:	f000 80aa 	beq.w	8010b6c <_dtoa_r+0x484>
 8010a18:	f1ba 0f00 	cmp.w	sl, #0
 8010a1c:	dd36      	ble.n	8010a8c <_dtoa_r+0x3a4>
 8010a1e:	4ac3      	ldr	r2, [pc, #780]	; (8010d2c <_dtoa_r+0x644>)
 8010a20:	f00a 030f 	and.w	r3, sl, #15
 8010a24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010a28:	ed93 7b00 	vldr	d7, [r3]
 8010a2c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010a30:	ea4f 172a 	mov.w	r7, sl, asr #4
 8010a34:	eeb0 8a47 	vmov.f32	s16, s14
 8010a38:	eef0 8a67 	vmov.f32	s17, s15
 8010a3c:	d016      	beq.n	8010a6c <_dtoa_r+0x384>
 8010a3e:	4bbc      	ldr	r3, [pc, #752]	; (8010d30 <_dtoa_r+0x648>)
 8010a40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010a44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010a48:	f7ef ff00 	bl	800084c <__aeabi_ddiv>
 8010a4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a50:	f007 070f 	and.w	r7, r7, #15
 8010a54:	2503      	movs	r5, #3
 8010a56:	4eb6      	ldr	r6, [pc, #728]	; (8010d30 <_dtoa_r+0x648>)
 8010a58:	b957      	cbnz	r7, 8010a70 <_dtoa_r+0x388>
 8010a5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a5e:	ec53 2b18 	vmov	r2, r3, d8
 8010a62:	f7ef fef3 	bl	800084c <__aeabi_ddiv>
 8010a66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a6a:	e029      	b.n	8010ac0 <_dtoa_r+0x3d8>
 8010a6c:	2502      	movs	r5, #2
 8010a6e:	e7f2      	b.n	8010a56 <_dtoa_r+0x36e>
 8010a70:	07f9      	lsls	r1, r7, #31
 8010a72:	d508      	bpl.n	8010a86 <_dtoa_r+0x39e>
 8010a74:	ec51 0b18 	vmov	r0, r1, d8
 8010a78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010a7c:	f7ef fdbc 	bl	80005f8 <__aeabi_dmul>
 8010a80:	ec41 0b18 	vmov	d8, r0, r1
 8010a84:	3501      	adds	r5, #1
 8010a86:	107f      	asrs	r7, r7, #1
 8010a88:	3608      	adds	r6, #8
 8010a8a:	e7e5      	b.n	8010a58 <_dtoa_r+0x370>
 8010a8c:	f000 80a6 	beq.w	8010bdc <_dtoa_r+0x4f4>
 8010a90:	f1ca 0600 	rsb	r6, sl, #0
 8010a94:	4ba5      	ldr	r3, [pc, #660]	; (8010d2c <_dtoa_r+0x644>)
 8010a96:	4fa6      	ldr	r7, [pc, #664]	; (8010d30 <_dtoa_r+0x648>)
 8010a98:	f006 020f 	and.w	r2, r6, #15
 8010a9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010aa8:	f7ef fda6 	bl	80005f8 <__aeabi_dmul>
 8010aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ab0:	1136      	asrs	r6, r6, #4
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	2502      	movs	r5, #2
 8010ab6:	2e00      	cmp	r6, #0
 8010ab8:	f040 8085 	bne.w	8010bc6 <_dtoa_r+0x4de>
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d1d2      	bne.n	8010a66 <_dtoa_r+0x37e>
 8010ac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	f000 808c 	beq.w	8010be0 <_dtoa_r+0x4f8>
 8010ac8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010acc:	4b99      	ldr	r3, [pc, #612]	; (8010d34 <_dtoa_r+0x64c>)
 8010ace:	2200      	movs	r2, #0
 8010ad0:	4630      	mov	r0, r6
 8010ad2:	4639      	mov	r1, r7
 8010ad4:	f7f0 f802 	bl	8000adc <__aeabi_dcmplt>
 8010ad8:	2800      	cmp	r0, #0
 8010ada:	f000 8081 	beq.w	8010be0 <_dtoa_r+0x4f8>
 8010ade:	9b01      	ldr	r3, [sp, #4]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d07d      	beq.n	8010be0 <_dtoa_r+0x4f8>
 8010ae4:	f1b9 0f00 	cmp.w	r9, #0
 8010ae8:	dd3c      	ble.n	8010b64 <_dtoa_r+0x47c>
 8010aea:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010aee:	9307      	str	r3, [sp, #28]
 8010af0:	2200      	movs	r2, #0
 8010af2:	4b91      	ldr	r3, [pc, #580]	; (8010d38 <_dtoa_r+0x650>)
 8010af4:	4630      	mov	r0, r6
 8010af6:	4639      	mov	r1, r7
 8010af8:	f7ef fd7e 	bl	80005f8 <__aeabi_dmul>
 8010afc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b00:	3501      	adds	r5, #1
 8010b02:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010b06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010b0a:	4628      	mov	r0, r5
 8010b0c:	f7ef fd0a 	bl	8000524 <__aeabi_i2d>
 8010b10:	4632      	mov	r2, r6
 8010b12:	463b      	mov	r3, r7
 8010b14:	f7ef fd70 	bl	80005f8 <__aeabi_dmul>
 8010b18:	4b88      	ldr	r3, [pc, #544]	; (8010d3c <_dtoa_r+0x654>)
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	f7ef fbb6 	bl	800028c <__adddf3>
 8010b20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010b24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b28:	9303      	str	r3, [sp, #12]
 8010b2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d15c      	bne.n	8010bea <_dtoa_r+0x502>
 8010b30:	4b83      	ldr	r3, [pc, #524]	; (8010d40 <_dtoa_r+0x658>)
 8010b32:	2200      	movs	r2, #0
 8010b34:	4630      	mov	r0, r6
 8010b36:	4639      	mov	r1, r7
 8010b38:	f7ef fba6 	bl	8000288 <__aeabi_dsub>
 8010b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b40:	4606      	mov	r6, r0
 8010b42:	460f      	mov	r7, r1
 8010b44:	f7ef ffe8 	bl	8000b18 <__aeabi_dcmpgt>
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	f040 8296 	bne.w	801107a <_dtoa_r+0x992>
 8010b4e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010b52:	4630      	mov	r0, r6
 8010b54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b58:	4639      	mov	r1, r7
 8010b5a:	f7ef ffbf 	bl	8000adc <__aeabi_dcmplt>
 8010b5e:	2800      	cmp	r0, #0
 8010b60:	f040 8288 	bne.w	8011074 <_dtoa_r+0x98c>
 8010b64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010b68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010b6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	f2c0 8158 	blt.w	8010e24 <_dtoa_r+0x73c>
 8010b74:	f1ba 0f0e 	cmp.w	sl, #14
 8010b78:	f300 8154 	bgt.w	8010e24 <_dtoa_r+0x73c>
 8010b7c:	4b6b      	ldr	r3, [pc, #428]	; (8010d2c <_dtoa_r+0x644>)
 8010b7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010b82:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	f280 80e3 	bge.w	8010d54 <_dtoa_r+0x66c>
 8010b8e:	9b01      	ldr	r3, [sp, #4]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	f300 80df 	bgt.w	8010d54 <_dtoa_r+0x66c>
 8010b96:	f040 826d 	bne.w	8011074 <_dtoa_r+0x98c>
 8010b9a:	4b69      	ldr	r3, [pc, #420]	; (8010d40 <_dtoa_r+0x658>)
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	4640      	mov	r0, r8
 8010ba0:	4649      	mov	r1, r9
 8010ba2:	f7ef fd29 	bl	80005f8 <__aeabi_dmul>
 8010ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010baa:	f7ef ffab 	bl	8000b04 <__aeabi_dcmpge>
 8010bae:	9e01      	ldr	r6, [sp, #4]
 8010bb0:	4637      	mov	r7, r6
 8010bb2:	2800      	cmp	r0, #0
 8010bb4:	f040 8243 	bne.w	801103e <_dtoa_r+0x956>
 8010bb8:	9d00      	ldr	r5, [sp, #0]
 8010bba:	2331      	movs	r3, #49	; 0x31
 8010bbc:	f805 3b01 	strb.w	r3, [r5], #1
 8010bc0:	f10a 0a01 	add.w	sl, sl, #1
 8010bc4:	e23f      	b.n	8011046 <_dtoa_r+0x95e>
 8010bc6:	07f2      	lsls	r2, r6, #31
 8010bc8:	d505      	bpl.n	8010bd6 <_dtoa_r+0x4ee>
 8010bca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bce:	f7ef fd13 	bl	80005f8 <__aeabi_dmul>
 8010bd2:	3501      	adds	r5, #1
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	1076      	asrs	r6, r6, #1
 8010bd8:	3708      	adds	r7, #8
 8010bda:	e76c      	b.n	8010ab6 <_dtoa_r+0x3ce>
 8010bdc:	2502      	movs	r5, #2
 8010bde:	e76f      	b.n	8010ac0 <_dtoa_r+0x3d8>
 8010be0:	9b01      	ldr	r3, [sp, #4]
 8010be2:	f8cd a01c 	str.w	sl, [sp, #28]
 8010be6:	930c      	str	r3, [sp, #48]	; 0x30
 8010be8:	e78d      	b.n	8010b06 <_dtoa_r+0x41e>
 8010bea:	9900      	ldr	r1, [sp, #0]
 8010bec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010bee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010bf0:	4b4e      	ldr	r3, [pc, #312]	; (8010d2c <_dtoa_r+0x644>)
 8010bf2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010bf6:	4401      	add	r1, r0
 8010bf8:	9102      	str	r1, [sp, #8]
 8010bfa:	9908      	ldr	r1, [sp, #32]
 8010bfc:	eeb0 8a47 	vmov.f32	s16, s14
 8010c00:	eef0 8a67 	vmov.f32	s17, s15
 8010c04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010c0c:	2900      	cmp	r1, #0
 8010c0e:	d045      	beq.n	8010c9c <_dtoa_r+0x5b4>
 8010c10:	494c      	ldr	r1, [pc, #304]	; (8010d44 <_dtoa_r+0x65c>)
 8010c12:	2000      	movs	r0, #0
 8010c14:	f7ef fe1a 	bl	800084c <__aeabi_ddiv>
 8010c18:	ec53 2b18 	vmov	r2, r3, d8
 8010c1c:	f7ef fb34 	bl	8000288 <__aeabi_dsub>
 8010c20:	9d00      	ldr	r5, [sp, #0]
 8010c22:	ec41 0b18 	vmov	d8, r0, r1
 8010c26:	4639      	mov	r1, r7
 8010c28:	4630      	mov	r0, r6
 8010c2a:	f7ef ff95 	bl	8000b58 <__aeabi_d2iz>
 8010c2e:	900c      	str	r0, [sp, #48]	; 0x30
 8010c30:	f7ef fc78 	bl	8000524 <__aeabi_i2d>
 8010c34:	4602      	mov	r2, r0
 8010c36:	460b      	mov	r3, r1
 8010c38:	4630      	mov	r0, r6
 8010c3a:	4639      	mov	r1, r7
 8010c3c:	f7ef fb24 	bl	8000288 <__aeabi_dsub>
 8010c40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c42:	3330      	adds	r3, #48	; 0x30
 8010c44:	f805 3b01 	strb.w	r3, [r5], #1
 8010c48:	ec53 2b18 	vmov	r2, r3, d8
 8010c4c:	4606      	mov	r6, r0
 8010c4e:	460f      	mov	r7, r1
 8010c50:	f7ef ff44 	bl	8000adc <__aeabi_dcmplt>
 8010c54:	2800      	cmp	r0, #0
 8010c56:	d165      	bne.n	8010d24 <_dtoa_r+0x63c>
 8010c58:	4632      	mov	r2, r6
 8010c5a:	463b      	mov	r3, r7
 8010c5c:	4935      	ldr	r1, [pc, #212]	; (8010d34 <_dtoa_r+0x64c>)
 8010c5e:	2000      	movs	r0, #0
 8010c60:	f7ef fb12 	bl	8000288 <__aeabi_dsub>
 8010c64:	ec53 2b18 	vmov	r2, r3, d8
 8010c68:	f7ef ff38 	bl	8000adc <__aeabi_dcmplt>
 8010c6c:	2800      	cmp	r0, #0
 8010c6e:	f040 80b9 	bne.w	8010de4 <_dtoa_r+0x6fc>
 8010c72:	9b02      	ldr	r3, [sp, #8]
 8010c74:	429d      	cmp	r5, r3
 8010c76:	f43f af75 	beq.w	8010b64 <_dtoa_r+0x47c>
 8010c7a:	4b2f      	ldr	r3, [pc, #188]	; (8010d38 <_dtoa_r+0x650>)
 8010c7c:	ec51 0b18 	vmov	r0, r1, d8
 8010c80:	2200      	movs	r2, #0
 8010c82:	f7ef fcb9 	bl	80005f8 <__aeabi_dmul>
 8010c86:	4b2c      	ldr	r3, [pc, #176]	; (8010d38 <_dtoa_r+0x650>)
 8010c88:	ec41 0b18 	vmov	d8, r0, r1
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	4630      	mov	r0, r6
 8010c90:	4639      	mov	r1, r7
 8010c92:	f7ef fcb1 	bl	80005f8 <__aeabi_dmul>
 8010c96:	4606      	mov	r6, r0
 8010c98:	460f      	mov	r7, r1
 8010c9a:	e7c4      	b.n	8010c26 <_dtoa_r+0x53e>
 8010c9c:	ec51 0b17 	vmov	r0, r1, d7
 8010ca0:	f7ef fcaa 	bl	80005f8 <__aeabi_dmul>
 8010ca4:	9b02      	ldr	r3, [sp, #8]
 8010ca6:	9d00      	ldr	r5, [sp, #0]
 8010ca8:	930c      	str	r3, [sp, #48]	; 0x30
 8010caa:	ec41 0b18 	vmov	d8, r0, r1
 8010cae:	4639      	mov	r1, r7
 8010cb0:	4630      	mov	r0, r6
 8010cb2:	f7ef ff51 	bl	8000b58 <__aeabi_d2iz>
 8010cb6:	9011      	str	r0, [sp, #68]	; 0x44
 8010cb8:	f7ef fc34 	bl	8000524 <__aeabi_i2d>
 8010cbc:	4602      	mov	r2, r0
 8010cbe:	460b      	mov	r3, r1
 8010cc0:	4630      	mov	r0, r6
 8010cc2:	4639      	mov	r1, r7
 8010cc4:	f7ef fae0 	bl	8000288 <__aeabi_dsub>
 8010cc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010cca:	3330      	adds	r3, #48	; 0x30
 8010ccc:	f805 3b01 	strb.w	r3, [r5], #1
 8010cd0:	9b02      	ldr	r3, [sp, #8]
 8010cd2:	429d      	cmp	r5, r3
 8010cd4:	4606      	mov	r6, r0
 8010cd6:	460f      	mov	r7, r1
 8010cd8:	f04f 0200 	mov.w	r2, #0
 8010cdc:	d134      	bne.n	8010d48 <_dtoa_r+0x660>
 8010cde:	4b19      	ldr	r3, [pc, #100]	; (8010d44 <_dtoa_r+0x65c>)
 8010ce0:	ec51 0b18 	vmov	r0, r1, d8
 8010ce4:	f7ef fad2 	bl	800028c <__adddf3>
 8010ce8:	4602      	mov	r2, r0
 8010cea:	460b      	mov	r3, r1
 8010cec:	4630      	mov	r0, r6
 8010cee:	4639      	mov	r1, r7
 8010cf0:	f7ef ff12 	bl	8000b18 <__aeabi_dcmpgt>
 8010cf4:	2800      	cmp	r0, #0
 8010cf6:	d175      	bne.n	8010de4 <_dtoa_r+0x6fc>
 8010cf8:	ec53 2b18 	vmov	r2, r3, d8
 8010cfc:	4911      	ldr	r1, [pc, #68]	; (8010d44 <_dtoa_r+0x65c>)
 8010cfe:	2000      	movs	r0, #0
 8010d00:	f7ef fac2 	bl	8000288 <__aeabi_dsub>
 8010d04:	4602      	mov	r2, r0
 8010d06:	460b      	mov	r3, r1
 8010d08:	4630      	mov	r0, r6
 8010d0a:	4639      	mov	r1, r7
 8010d0c:	f7ef fee6 	bl	8000adc <__aeabi_dcmplt>
 8010d10:	2800      	cmp	r0, #0
 8010d12:	f43f af27 	beq.w	8010b64 <_dtoa_r+0x47c>
 8010d16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010d18:	1e6b      	subs	r3, r5, #1
 8010d1a:	930c      	str	r3, [sp, #48]	; 0x30
 8010d1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010d20:	2b30      	cmp	r3, #48	; 0x30
 8010d22:	d0f8      	beq.n	8010d16 <_dtoa_r+0x62e>
 8010d24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010d28:	e04a      	b.n	8010dc0 <_dtoa_r+0x6d8>
 8010d2a:	bf00      	nop
 8010d2c:	0807b438 	.word	0x0807b438
 8010d30:	0807b410 	.word	0x0807b410
 8010d34:	3ff00000 	.word	0x3ff00000
 8010d38:	40240000 	.word	0x40240000
 8010d3c:	401c0000 	.word	0x401c0000
 8010d40:	40140000 	.word	0x40140000
 8010d44:	3fe00000 	.word	0x3fe00000
 8010d48:	4baf      	ldr	r3, [pc, #700]	; (8011008 <_dtoa_r+0x920>)
 8010d4a:	f7ef fc55 	bl	80005f8 <__aeabi_dmul>
 8010d4e:	4606      	mov	r6, r0
 8010d50:	460f      	mov	r7, r1
 8010d52:	e7ac      	b.n	8010cae <_dtoa_r+0x5c6>
 8010d54:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010d58:	9d00      	ldr	r5, [sp, #0]
 8010d5a:	4642      	mov	r2, r8
 8010d5c:	464b      	mov	r3, r9
 8010d5e:	4630      	mov	r0, r6
 8010d60:	4639      	mov	r1, r7
 8010d62:	f7ef fd73 	bl	800084c <__aeabi_ddiv>
 8010d66:	f7ef fef7 	bl	8000b58 <__aeabi_d2iz>
 8010d6a:	9002      	str	r0, [sp, #8]
 8010d6c:	f7ef fbda 	bl	8000524 <__aeabi_i2d>
 8010d70:	4642      	mov	r2, r8
 8010d72:	464b      	mov	r3, r9
 8010d74:	f7ef fc40 	bl	80005f8 <__aeabi_dmul>
 8010d78:	4602      	mov	r2, r0
 8010d7a:	460b      	mov	r3, r1
 8010d7c:	4630      	mov	r0, r6
 8010d7e:	4639      	mov	r1, r7
 8010d80:	f7ef fa82 	bl	8000288 <__aeabi_dsub>
 8010d84:	9e02      	ldr	r6, [sp, #8]
 8010d86:	9f01      	ldr	r7, [sp, #4]
 8010d88:	3630      	adds	r6, #48	; 0x30
 8010d8a:	f805 6b01 	strb.w	r6, [r5], #1
 8010d8e:	9e00      	ldr	r6, [sp, #0]
 8010d90:	1bae      	subs	r6, r5, r6
 8010d92:	42b7      	cmp	r7, r6
 8010d94:	4602      	mov	r2, r0
 8010d96:	460b      	mov	r3, r1
 8010d98:	d137      	bne.n	8010e0a <_dtoa_r+0x722>
 8010d9a:	f7ef fa77 	bl	800028c <__adddf3>
 8010d9e:	4642      	mov	r2, r8
 8010da0:	464b      	mov	r3, r9
 8010da2:	4606      	mov	r6, r0
 8010da4:	460f      	mov	r7, r1
 8010da6:	f7ef feb7 	bl	8000b18 <__aeabi_dcmpgt>
 8010daa:	b9c8      	cbnz	r0, 8010de0 <_dtoa_r+0x6f8>
 8010dac:	4642      	mov	r2, r8
 8010dae:	464b      	mov	r3, r9
 8010db0:	4630      	mov	r0, r6
 8010db2:	4639      	mov	r1, r7
 8010db4:	f7ef fe88 	bl	8000ac8 <__aeabi_dcmpeq>
 8010db8:	b110      	cbz	r0, 8010dc0 <_dtoa_r+0x6d8>
 8010dba:	9b02      	ldr	r3, [sp, #8]
 8010dbc:	07d9      	lsls	r1, r3, #31
 8010dbe:	d40f      	bmi.n	8010de0 <_dtoa_r+0x6f8>
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	4659      	mov	r1, fp
 8010dc4:	f000 fc04 	bl	80115d0 <_Bfree>
 8010dc8:	2300      	movs	r3, #0
 8010dca:	702b      	strb	r3, [r5, #0]
 8010dcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010dce:	f10a 0001 	add.w	r0, sl, #1
 8010dd2:	6018      	str	r0, [r3, #0]
 8010dd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	f43f acd8 	beq.w	801078c <_dtoa_r+0xa4>
 8010ddc:	601d      	str	r5, [r3, #0]
 8010dde:	e4d5      	b.n	801078c <_dtoa_r+0xa4>
 8010de0:	f8cd a01c 	str.w	sl, [sp, #28]
 8010de4:	462b      	mov	r3, r5
 8010de6:	461d      	mov	r5, r3
 8010de8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010dec:	2a39      	cmp	r2, #57	; 0x39
 8010dee:	d108      	bne.n	8010e02 <_dtoa_r+0x71a>
 8010df0:	9a00      	ldr	r2, [sp, #0]
 8010df2:	429a      	cmp	r2, r3
 8010df4:	d1f7      	bne.n	8010de6 <_dtoa_r+0x6fe>
 8010df6:	9a07      	ldr	r2, [sp, #28]
 8010df8:	9900      	ldr	r1, [sp, #0]
 8010dfa:	3201      	adds	r2, #1
 8010dfc:	9207      	str	r2, [sp, #28]
 8010dfe:	2230      	movs	r2, #48	; 0x30
 8010e00:	700a      	strb	r2, [r1, #0]
 8010e02:	781a      	ldrb	r2, [r3, #0]
 8010e04:	3201      	adds	r2, #1
 8010e06:	701a      	strb	r2, [r3, #0]
 8010e08:	e78c      	b.n	8010d24 <_dtoa_r+0x63c>
 8010e0a:	4b7f      	ldr	r3, [pc, #508]	; (8011008 <_dtoa_r+0x920>)
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	f7ef fbf3 	bl	80005f8 <__aeabi_dmul>
 8010e12:	2200      	movs	r2, #0
 8010e14:	2300      	movs	r3, #0
 8010e16:	4606      	mov	r6, r0
 8010e18:	460f      	mov	r7, r1
 8010e1a:	f7ef fe55 	bl	8000ac8 <__aeabi_dcmpeq>
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	d09b      	beq.n	8010d5a <_dtoa_r+0x672>
 8010e22:	e7cd      	b.n	8010dc0 <_dtoa_r+0x6d8>
 8010e24:	9a08      	ldr	r2, [sp, #32]
 8010e26:	2a00      	cmp	r2, #0
 8010e28:	f000 80c4 	beq.w	8010fb4 <_dtoa_r+0x8cc>
 8010e2c:	9a05      	ldr	r2, [sp, #20]
 8010e2e:	2a01      	cmp	r2, #1
 8010e30:	f300 80a8 	bgt.w	8010f84 <_dtoa_r+0x89c>
 8010e34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010e36:	2a00      	cmp	r2, #0
 8010e38:	f000 80a0 	beq.w	8010f7c <_dtoa_r+0x894>
 8010e3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010e40:	9e06      	ldr	r6, [sp, #24]
 8010e42:	4645      	mov	r5, r8
 8010e44:	9a04      	ldr	r2, [sp, #16]
 8010e46:	2101      	movs	r1, #1
 8010e48:	441a      	add	r2, r3
 8010e4a:	4620      	mov	r0, r4
 8010e4c:	4498      	add	r8, r3
 8010e4e:	9204      	str	r2, [sp, #16]
 8010e50:	f000 fc7a 	bl	8011748 <__i2b>
 8010e54:	4607      	mov	r7, r0
 8010e56:	2d00      	cmp	r5, #0
 8010e58:	dd0b      	ble.n	8010e72 <_dtoa_r+0x78a>
 8010e5a:	9b04      	ldr	r3, [sp, #16]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	dd08      	ble.n	8010e72 <_dtoa_r+0x78a>
 8010e60:	42ab      	cmp	r3, r5
 8010e62:	9a04      	ldr	r2, [sp, #16]
 8010e64:	bfa8      	it	ge
 8010e66:	462b      	movge	r3, r5
 8010e68:	eba8 0803 	sub.w	r8, r8, r3
 8010e6c:	1aed      	subs	r5, r5, r3
 8010e6e:	1ad3      	subs	r3, r2, r3
 8010e70:	9304      	str	r3, [sp, #16]
 8010e72:	9b06      	ldr	r3, [sp, #24]
 8010e74:	b1fb      	cbz	r3, 8010eb6 <_dtoa_r+0x7ce>
 8010e76:	9b08      	ldr	r3, [sp, #32]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	f000 809f 	beq.w	8010fbc <_dtoa_r+0x8d4>
 8010e7e:	2e00      	cmp	r6, #0
 8010e80:	dd11      	ble.n	8010ea6 <_dtoa_r+0x7be>
 8010e82:	4639      	mov	r1, r7
 8010e84:	4632      	mov	r2, r6
 8010e86:	4620      	mov	r0, r4
 8010e88:	f000 fd1a 	bl	80118c0 <__pow5mult>
 8010e8c:	465a      	mov	r2, fp
 8010e8e:	4601      	mov	r1, r0
 8010e90:	4607      	mov	r7, r0
 8010e92:	4620      	mov	r0, r4
 8010e94:	f000 fc6e 	bl	8011774 <__multiply>
 8010e98:	4659      	mov	r1, fp
 8010e9a:	9007      	str	r0, [sp, #28]
 8010e9c:	4620      	mov	r0, r4
 8010e9e:	f000 fb97 	bl	80115d0 <_Bfree>
 8010ea2:	9b07      	ldr	r3, [sp, #28]
 8010ea4:	469b      	mov	fp, r3
 8010ea6:	9b06      	ldr	r3, [sp, #24]
 8010ea8:	1b9a      	subs	r2, r3, r6
 8010eaa:	d004      	beq.n	8010eb6 <_dtoa_r+0x7ce>
 8010eac:	4659      	mov	r1, fp
 8010eae:	4620      	mov	r0, r4
 8010eb0:	f000 fd06 	bl	80118c0 <__pow5mult>
 8010eb4:	4683      	mov	fp, r0
 8010eb6:	2101      	movs	r1, #1
 8010eb8:	4620      	mov	r0, r4
 8010eba:	f000 fc45 	bl	8011748 <__i2b>
 8010ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	4606      	mov	r6, r0
 8010ec4:	dd7c      	ble.n	8010fc0 <_dtoa_r+0x8d8>
 8010ec6:	461a      	mov	r2, r3
 8010ec8:	4601      	mov	r1, r0
 8010eca:	4620      	mov	r0, r4
 8010ecc:	f000 fcf8 	bl	80118c0 <__pow5mult>
 8010ed0:	9b05      	ldr	r3, [sp, #20]
 8010ed2:	2b01      	cmp	r3, #1
 8010ed4:	4606      	mov	r6, r0
 8010ed6:	dd76      	ble.n	8010fc6 <_dtoa_r+0x8de>
 8010ed8:	2300      	movs	r3, #0
 8010eda:	9306      	str	r3, [sp, #24]
 8010edc:	6933      	ldr	r3, [r6, #16]
 8010ede:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010ee2:	6918      	ldr	r0, [r3, #16]
 8010ee4:	f000 fbe0 	bl	80116a8 <__hi0bits>
 8010ee8:	f1c0 0020 	rsb	r0, r0, #32
 8010eec:	9b04      	ldr	r3, [sp, #16]
 8010eee:	4418      	add	r0, r3
 8010ef0:	f010 001f 	ands.w	r0, r0, #31
 8010ef4:	f000 8086 	beq.w	8011004 <_dtoa_r+0x91c>
 8010ef8:	f1c0 0320 	rsb	r3, r0, #32
 8010efc:	2b04      	cmp	r3, #4
 8010efe:	dd7f      	ble.n	8011000 <_dtoa_r+0x918>
 8010f00:	f1c0 001c 	rsb	r0, r0, #28
 8010f04:	9b04      	ldr	r3, [sp, #16]
 8010f06:	4403      	add	r3, r0
 8010f08:	4480      	add	r8, r0
 8010f0a:	4405      	add	r5, r0
 8010f0c:	9304      	str	r3, [sp, #16]
 8010f0e:	f1b8 0f00 	cmp.w	r8, #0
 8010f12:	dd05      	ble.n	8010f20 <_dtoa_r+0x838>
 8010f14:	4659      	mov	r1, fp
 8010f16:	4642      	mov	r2, r8
 8010f18:	4620      	mov	r0, r4
 8010f1a:	f000 fd2b 	bl	8011974 <__lshift>
 8010f1e:	4683      	mov	fp, r0
 8010f20:	9b04      	ldr	r3, [sp, #16]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	dd05      	ble.n	8010f32 <_dtoa_r+0x84a>
 8010f26:	4631      	mov	r1, r6
 8010f28:	461a      	mov	r2, r3
 8010f2a:	4620      	mov	r0, r4
 8010f2c:	f000 fd22 	bl	8011974 <__lshift>
 8010f30:	4606      	mov	r6, r0
 8010f32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d069      	beq.n	801100c <_dtoa_r+0x924>
 8010f38:	4631      	mov	r1, r6
 8010f3a:	4658      	mov	r0, fp
 8010f3c:	f000 fd86 	bl	8011a4c <__mcmp>
 8010f40:	2800      	cmp	r0, #0
 8010f42:	da63      	bge.n	801100c <_dtoa_r+0x924>
 8010f44:	2300      	movs	r3, #0
 8010f46:	4659      	mov	r1, fp
 8010f48:	220a      	movs	r2, #10
 8010f4a:	4620      	mov	r0, r4
 8010f4c:	f000 fb62 	bl	8011614 <__multadd>
 8010f50:	9b08      	ldr	r3, [sp, #32]
 8010f52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010f56:	4683      	mov	fp, r0
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	f000 818f 	beq.w	801127c <_dtoa_r+0xb94>
 8010f5e:	4639      	mov	r1, r7
 8010f60:	2300      	movs	r3, #0
 8010f62:	220a      	movs	r2, #10
 8010f64:	4620      	mov	r0, r4
 8010f66:	f000 fb55 	bl	8011614 <__multadd>
 8010f6a:	f1b9 0f00 	cmp.w	r9, #0
 8010f6e:	4607      	mov	r7, r0
 8010f70:	f300 808e 	bgt.w	8011090 <_dtoa_r+0x9a8>
 8010f74:	9b05      	ldr	r3, [sp, #20]
 8010f76:	2b02      	cmp	r3, #2
 8010f78:	dc50      	bgt.n	801101c <_dtoa_r+0x934>
 8010f7a:	e089      	b.n	8011090 <_dtoa_r+0x9a8>
 8010f7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010f7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010f82:	e75d      	b.n	8010e40 <_dtoa_r+0x758>
 8010f84:	9b01      	ldr	r3, [sp, #4]
 8010f86:	1e5e      	subs	r6, r3, #1
 8010f88:	9b06      	ldr	r3, [sp, #24]
 8010f8a:	42b3      	cmp	r3, r6
 8010f8c:	bfbf      	itttt	lt
 8010f8e:	9b06      	ldrlt	r3, [sp, #24]
 8010f90:	9606      	strlt	r6, [sp, #24]
 8010f92:	1af2      	sublt	r2, r6, r3
 8010f94:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8010f96:	bfb6      	itet	lt
 8010f98:	189b      	addlt	r3, r3, r2
 8010f9a:	1b9e      	subge	r6, r3, r6
 8010f9c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8010f9e:	9b01      	ldr	r3, [sp, #4]
 8010fa0:	bfb8      	it	lt
 8010fa2:	2600      	movlt	r6, #0
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	bfb5      	itete	lt
 8010fa8:	eba8 0503 	sublt.w	r5, r8, r3
 8010fac:	9b01      	ldrge	r3, [sp, #4]
 8010fae:	2300      	movlt	r3, #0
 8010fb0:	4645      	movge	r5, r8
 8010fb2:	e747      	b.n	8010e44 <_dtoa_r+0x75c>
 8010fb4:	9e06      	ldr	r6, [sp, #24]
 8010fb6:	9f08      	ldr	r7, [sp, #32]
 8010fb8:	4645      	mov	r5, r8
 8010fba:	e74c      	b.n	8010e56 <_dtoa_r+0x76e>
 8010fbc:	9a06      	ldr	r2, [sp, #24]
 8010fbe:	e775      	b.n	8010eac <_dtoa_r+0x7c4>
 8010fc0:	9b05      	ldr	r3, [sp, #20]
 8010fc2:	2b01      	cmp	r3, #1
 8010fc4:	dc18      	bgt.n	8010ff8 <_dtoa_r+0x910>
 8010fc6:	9b02      	ldr	r3, [sp, #8]
 8010fc8:	b9b3      	cbnz	r3, 8010ff8 <_dtoa_r+0x910>
 8010fca:	9b03      	ldr	r3, [sp, #12]
 8010fcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010fd0:	b9a3      	cbnz	r3, 8010ffc <_dtoa_r+0x914>
 8010fd2:	9b03      	ldr	r3, [sp, #12]
 8010fd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010fd8:	0d1b      	lsrs	r3, r3, #20
 8010fda:	051b      	lsls	r3, r3, #20
 8010fdc:	b12b      	cbz	r3, 8010fea <_dtoa_r+0x902>
 8010fde:	9b04      	ldr	r3, [sp, #16]
 8010fe0:	3301      	adds	r3, #1
 8010fe2:	9304      	str	r3, [sp, #16]
 8010fe4:	f108 0801 	add.w	r8, r8, #1
 8010fe8:	2301      	movs	r3, #1
 8010fea:	9306      	str	r3, [sp, #24]
 8010fec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	f47f af74 	bne.w	8010edc <_dtoa_r+0x7f4>
 8010ff4:	2001      	movs	r0, #1
 8010ff6:	e779      	b.n	8010eec <_dtoa_r+0x804>
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	e7f6      	b.n	8010fea <_dtoa_r+0x902>
 8010ffc:	9b02      	ldr	r3, [sp, #8]
 8010ffe:	e7f4      	b.n	8010fea <_dtoa_r+0x902>
 8011000:	d085      	beq.n	8010f0e <_dtoa_r+0x826>
 8011002:	4618      	mov	r0, r3
 8011004:	301c      	adds	r0, #28
 8011006:	e77d      	b.n	8010f04 <_dtoa_r+0x81c>
 8011008:	40240000 	.word	0x40240000
 801100c:	9b01      	ldr	r3, [sp, #4]
 801100e:	2b00      	cmp	r3, #0
 8011010:	dc38      	bgt.n	8011084 <_dtoa_r+0x99c>
 8011012:	9b05      	ldr	r3, [sp, #20]
 8011014:	2b02      	cmp	r3, #2
 8011016:	dd35      	ble.n	8011084 <_dtoa_r+0x99c>
 8011018:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801101c:	f1b9 0f00 	cmp.w	r9, #0
 8011020:	d10d      	bne.n	801103e <_dtoa_r+0x956>
 8011022:	4631      	mov	r1, r6
 8011024:	464b      	mov	r3, r9
 8011026:	2205      	movs	r2, #5
 8011028:	4620      	mov	r0, r4
 801102a:	f000 faf3 	bl	8011614 <__multadd>
 801102e:	4601      	mov	r1, r0
 8011030:	4606      	mov	r6, r0
 8011032:	4658      	mov	r0, fp
 8011034:	f000 fd0a 	bl	8011a4c <__mcmp>
 8011038:	2800      	cmp	r0, #0
 801103a:	f73f adbd 	bgt.w	8010bb8 <_dtoa_r+0x4d0>
 801103e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011040:	9d00      	ldr	r5, [sp, #0]
 8011042:	ea6f 0a03 	mvn.w	sl, r3
 8011046:	f04f 0800 	mov.w	r8, #0
 801104a:	4631      	mov	r1, r6
 801104c:	4620      	mov	r0, r4
 801104e:	f000 fabf 	bl	80115d0 <_Bfree>
 8011052:	2f00      	cmp	r7, #0
 8011054:	f43f aeb4 	beq.w	8010dc0 <_dtoa_r+0x6d8>
 8011058:	f1b8 0f00 	cmp.w	r8, #0
 801105c:	d005      	beq.n	801106a <_dtoa_r+0x982>
 801105e:	45b8      	cmp	r8, r7
 8011060:	d003      	beq.n	801106a <_dtoa_r+0x982>
 8011062:	4641      	mov	r1, r8
 8011064:	4620      	mov	r0, r4
 8011066:	f000 fab3 	bl	80115d0 <_Bfree>
 801106a:	4639      	mov	r1, r7
 801106c:	4620      	mov	r0, r4
 801106e:	f000 faaf 	bl	80115d0 <_Bfree>
 8011072:	e6a5      	b.n	8010dc0 <_dtoa_r+0x6d8>
 8011074:	2600      	movs	r6, #0
 8011076:	4637      	mov	r7, r6
 8011078:	e7e1      	b.n	801103e <_dtoa_r+0x956>
 801107a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801107c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011080:	4637      	mov	r7, r6
 8011082:	e599      	b.n	8010bb8 <_dtoa_r+0x4d0>
 8011084:	9b08      	ldr	r3, [sp, #32]
 8011086:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801108a:	2b00      	cmp	r3, #0
 801108c:	f000 80fd 	beq.w	801128a <_dtoa_r+0xba2>
 8011090:	2d00      	cmp	r5, #0
 8011092:	dd05      	ble.n	80110a0 <_dtoa_r+0x9b8>
 8011094:	4639      	mov	r1, r7
 8011096:	462a      	mov	r2, r5
 8011098:	4620      	mov	r0, r4
 801109a:	f000 fc6b 	bl	8011974 <__lshift>
 801109e:	4607      	mov	r7, r0
 80110a0:	9b06      	ldr	r3, [sp, #24]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d05c      	beq.n	8011160 <_dtoa_r+0xa78>
 80110a6:	6879      	ldr	r1, [r7, #4]
 80110a8:	4620      	mov	r0, r4
 80110aa:	f000 fa51 	bl	8011550 <_Balloc>
 80110ae:	4605      	mov	r5, r0
 80110b0:	b928      	cbnz	r0, 80110be <_dtoa_r+0x9d6>
 80110b2:	4b80      	ldr	r3, [pc, #512]	; (80112b4 <_dtoa_r+0xbcc>)
 80110b4:	4602      	mov	r2, r0
 80110b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80110ba:	f7ff bb2e 	b.w	801071a <_dtoa_r+0x32>
 80110be:	693a      	ldr	r2, [r7, #16]
 80110c0:	3202      	adds	r2, #2
 80110c2:	0092      	lsls	r2, r2, #2
 80110c4:	f107 010c 	add.w	r1, r7, #12
 80110c8:	300c      	adds	r0, #12
 80110ca:	f7fe fb91 	bl	800f7f0 <memcpy>
 80110ce:	2201      	movs	r2, #1
 80110d0:	4629      	mov	r1, r5
 80110d2:	4620      	mov	r0, r4
 80110d4:	f000 fc4e 	bl	8011974 <__lshift>
 80110d8:	9b00      	ldr	r3, [sp, #0]
 80110da:	3301      	adds	r3, #1
 80110dc:	9301      	str	r3, [sp, #4]
 80110de:	9b00      	ldr	r3, [sp, #0]
 80110e0:	444b      	add	r3, r9
 80110e2:	9307      	str	r3, [sp, #28]
 80110e4:	9b02      	ldr	r3, [sp, #8]
 80110e6:	f003 0301 	and.w	r3, r3, #1
 80110ea:	46b8      	mov	r8, r7
 80110ec:	9306      	str	r3, [sp, #24]
 80110ee:	4607      	mov	r7, r0
 80110f0:	9b01      	ldr	r3, [sp, #4]
 80110f2:	4631      	mov	r1, r6
 80110f4:	3b01      	subs	r3, #1
 80110f6:	4658      	mov	r0, fp
 80110f8:	9302      	str	r3, [sp, #8]
 80110fa:	f7ff fa67 	bl	80105cc <quorem>
 80110fe:	4603      	mov	r3, r0
 8011100:	3330      	adds	r3, #48	; 0x30
 8011102:	9004      	str	r0, [sp, #16]
 8011104:	4641      	mov	r1, r8
 8011106:	4658      	mov	r0, fp
 8011108:	9308      	str	r3, [sp, #32]
 801110a:	f000 fc9f 	bl	8011a4c <__mcmp>
 801110e:	463a      	mov	r2, r7
 8011110:	4681      	mov	r9, r0
 8011112:	4631      	mov	r1, r6
 8011114:	4620      	mov	r0, r4
 8011116:	f000 fcb5 	bl	8011a84 <__mdiff>
 801111a:	68c2      	ldr	r2, [r0, #12]
 801111c:	9b08      	ldr	r3, [sp, #32]
 801111e:	4605      	mov	r5, r0
 8011120:	bb02      	cbnz	r2, 8011164 <_dtoa_r+0xa7c>
 8011122:	4601      	mov	r1, r0
 8011124:	4658      	mov	r0, fp
 8011126:	f000 fc91 	bl	8011a4c <__mcmp>
 801112a:	9b08      	ldr	r3, [sp, #32]
 801112c:	4602      	mov	r2, r0
 801112e:	4629      	mov	r1, r5
 8011130:	4620      	mov	r0, r4
 8011132:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011136:	f000 fa4b 	bl	80115d0 <_Bfree>
 801113a:	9b05      	ldr	r3, [sp, #20]
 801113c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801113e:	9d01      	ldr	r5, [sp, #4]
 8011140:	ea43 0102 	orr.w	r1, r3, r2
 8011144:	9b06      	ldr	r3, [sp, #24]
 8011146:	430b      	orrs	r3, r1
 8011148:	9b08      	ldr	r3, [sp, #32]
 801114a:	d10d      	bne.n	8011168 <_dtoa_r+0xa80>
 801114c:	2b39      	cmp	r3, #57	; 0x39
 801114e:	d029      	beq.n	80111a4 <_dtoa_r+0xabc>
 8011150:	f1b9 0f00 	cmp.w	r9, #0
 8011154:	dd01      	ble.n	801115a <_dtoa_r+0xa72>
 8011156:	9b04      	ldr	r3, [sp, #16]
 8011158:	3331      	adds	r3, #49	; 0x31
 801115a:	9a02      	ldr	r2, [sp, #8]
 801115c:	7013      	strb	r3, [r2, #0]
 801115e:	e774      	b.n	801104a <_dtoa_r+0x962>
 8011160:	4638      	mov	r0, r7
 8011162:	e7b9      	b.n	80110d8 <_dtoa_r+0x9f0>
 8011164:	2201      	movs	r2, #1
 8011166:	e7e2      	b.n	801112e <_dtoa_r+0xa46>
 8011168:	f1b9 0f00 	cmp.w	r9, #0
 801116c:	db06      	blt.n	801117c <_dtoa_r+0xa94>
 801116e:	9905      	ldr	r1, [sp, #20]
 8011170:	ea41 0909 	orr.w	r9, r1, r9
 8011174:	9906      	ldr	r1, [sp, #24]
 8011176:	ea59 0101 	orrs.w	r1, r9, r1
 801117a:	d120      	bne.n	80111be <_dtoa_r+0xad6>
 801117c:	2a00      	cmp	r2, #0
 801117e:	ddec      	ble.n	801115a <_dtoa_r+0xa72>
 8011180:	4659      	mov	r1, fp
 8011182:	2201      	movs	r2, #1
 8011184:	4620      	mov	r0, r4
 8011186:	9301      	str	r3, [sp, #4]
 8011188:	f000 fbf4 	bl	8011974 <__lshift>
 801118c:	4631      	mov	r1, r6
 801118e:	4683      	mov	fp, r0
 8011190:	f000 fc5c 	bl	8011a4c <__mcmp>
 8011194:	2800      	cmp	r0, #0
 8011196:	9b01      	ldr	r3, [sp, #4]
 8011198:	dc02      	bgt.n	80111a0 <_dtoa_r+0xab8>
 801119a:	d1de      	bne.n	801115a <_dtoa_r+0xa72>
 801119c:	07da      	lsls	r2, r3, #31
 801119e:	d5dc      	bpl.n	801115a <_dtoa_r+0xa72>
 80111a0:	2b39      	cmp	r3, #57	; 0x39
 80111a2:	d1d8      	bne.n	8011156 <_dtoa_r+0xa6e>
 80111a4:	9a02      	ldr	r2, [sp, #8]
 80111a6:	2339      	movs	r3, #57	; 0x39
 80111a8:	7013      	strb	r3, [r2, #0]
 80111aa:	462b      	mov	r3, r5
 80111ac:	461d      	mov	r5, r3
 80111ae:	3b01      	subs	r3, #1
 80111b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80111b4:	2a39      	cmp	r2, #57	; 0x39
 80111b6:	d050      	beq.n	801125a <_dtoa_r+0xb72>
 80111b8:	3201      	adds	r2, #1
 80111ba:	701a      	strb	r2, [r3, #0]
 80111bc:	e745      	b.n	801104a <_dtoa_r+0x962>
 80111be:	2a00      	cmp	r2, #0
 80111c0:	dd03      	ble.n	80111ca <_dtoa_r+0xae2>
 80111c2:	2b39      	cmp	r3, #57	; 0x39
 80111c4:	d0ee      	beq.n	80111a4 <_dtoa_r+0xabc>
 80111c6:	3301      	adds	r3, #1
 80111c8:	e7c7      	b.n	801115a <_dtoa_r+0xa72>
 80111ca:	9a01      	ldr	r2, [sp, #4]
 80111cc:	9907      	ldr	r1, [sp, #28]
 80111ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80111d2:	428a      	cmp	r2, r1
 80111d4:	d02a      	beq.n	801122c <_dtoa_r+0xb44>
 80111d6:	4659      	mov	r1, fp
 80111d8:	2300      	movs	r3, #0
 80111da:	220a      	movs	r2, #10
 80111dc:	4620      	mov	r0, r4
 80111de:	f000 fa19 	bl	8011614 <__multadd>
 80111e2:	45b8      	cmp	r8, r7
 80111e4:	4683      	mov	fp, r0
 80111e6:	f04f 0300 	mov.w	r3, #0
 80111ea:	f04f 020a 	mov.w	r2, #10
 80111ee:	4641      	mov	r1, r8
 80111f0:	4620      	mov	r0, r4
 80111f2:	d107      	bne.n	8011204 <_dtoa_r+0xb1c>
 80111f4:	f000 fa0e 	bl	8011614 <__multadd>
 80111f8:	4680      	mov	r8, r0
 80111fa:	4607      	mov	r7, r0
 80111fc:	9b01      	ldr	r3, [sp, #4]
 80111fe:	3301      	adds	r3, #1
 8011200:	9301      	str	r3, [sp, #4]
 8011202:	e775      	b.n	80110f0 <_dtoa_r+0xa08>
 8011204:	f000 fa06 	bl	8011614 <__multadd>
 8011208:	4639      	mov	r1, r7
 801120a:	4680      	mov	r8, r0
 801120c:	2300      	movs	r3, #0
 801120e:	220a      	movs	r2, #10
 8011210:	4620      	mov	r0, r4
 8011212:	f000 f9ff 	bl	8011614 <__multadd>
 8011216:	4607      	mov	r7, r0
 8011218:	e7f0      	b.n	80111fc <_dtoa_r+0xb14>
 801121a:	f1b9 0f00 	cmp.w	r9, #0
 801121e:	9a00      	ldr	r2, [sp, #0]
 8011220:	bfcc      	ite	gt
 8011222:	464d      	movgt	r5, r9
 8011224:	2501      	movle	r5, #1
 8011226:	4415      	add	r5, r2
 8011228:	f04f 0800 	mov.w	r8, #0
 801122c:	4659      	mov	r1, fp
 801122e:	2201      	movs	r2, #1
 8011230:	4620      	mov	r0, r4
 8011232:	9301      	str	r3, [sp, #4]
 8011234:	f000 fb9e 	bl	8011974 <__lshift>
 8011238:	4631      	mov	r1, r6
 801123a:	4683      	mov	fp, r0
 801123c:	f000 fc06 	bl	8011a4c <__mcmp>
 8011240:	2800      	cmp	r0, #0
 8011242:	dcb2      	bgt.n	80111aa <_dtoa_r+0xac2>
 8011244:	d102      	bne.n	801124c <_dtoa_r+0xb64>
 8011246:	9b01      	ldr	r3, [sp, #4]
 8011248:	07db      	lsls	r3, r3, #31
 801124a:	d4ae      	bmi.n	80111aa <_dtoa_r+0xac2>
 801124c:	462b      	mov	r3, r5
 801124e:	461d      	mov	r5, r3
 8011250:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011254:	2a30      	cmp	r2, #48	; 0x30
 8011256:	d0fa      	beq.n	801124e <_dtoa_r+0xb66>
 8011258:	e6f7      	b.n	801104a <_dtoa_r+0x962>
 801125a:	9a00      	ldr	r2, [sp, #0]
 801125c:	429a      	cmp	r2, r3
 801125e:	d1a5      	bne.n	80111ac <_dtoa_r+0xac4>
 8011260:	f10a 0a01 	add.w	sl, sl, #1
 8011264:	2331      	movs	r3, #49	; 0x31
 8011266:	e779      	b.n	801115c <_dtoa_r+0xa74>
 8011268:	4b13      	ldr	r3, [pc, #76]	; (80112b8 <_dtoa_r+0xbd0>)
 801126a:	f7ff baaf 	b.w	80107cc <_dtoa_r+0xe4>
 801126e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011270:	2b00      	cmp	r3, #0
 8011272:	f47f aa86 	bne.w	8010782 <_dtoa_r+0x9a>
 8011276:	4b11      	ldr	r3, [pc, #68]	; (80112bc <_dtoa_r+0xbd4>)
 8011278:	f7ff baa8 	b.w	80107cc <_dtoa_r+0xe4>
 801127c:	f1b9 0f00 	cmp.w	r9, #0
 8011280:	dc03      	bgt.n	801128a <_dtoa_r+0xba2>
 8011282:	9b05      	ldr	r3, [sp, #20]
 8011284:	2b02      	cmp	r3, #2
 8011286:	f73f aec9 	bgt.w	801101c <_dtoa_r+0x934>
 801128a:	9d00      	ldr	r5, [sp, #0]
 801128c:	4631      	mov	r1, r6
 801128e:	4658      	mov	r0, fp
 8011290:	f7ff f99c 	bl	80105cc <quorem>
 8011294:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011298:	f805 3b01 	strb.w	r3, [r5], #1
 801129c:	9a00      	ldr	r2, [sp, #0]
 801129e:	1aaa      	subs	r2, r5, r2
 80112a0:	4591      	cmp	r9, r2
 80112a2:	ddba      	ble.n	801121a <_dtoa_r+0xb32>
 80112a4:	4659      	mov	r1, fp
 80112a6:	2300      	movs	r3, #0
 80112a8:	220a      	movs	r2, #10
 80112aa:	4620      	mov	r0, r4
 80112ac:	f000 f9b2 	bl	8011614 <__multadd>
 80112b0:	4683      	mov	fp, r0
 80112b2:	e7eb      	b.n	801128c <_dtoa_r+0xba4>
 80112b4:	0807b39f 	.word	0x0807b39f
 80112b8:	0807b2f8 	.word	0x0807b2f8
 80112bc:	0807b31c 	.word	0x0807b31c

080112c0 <__sflush_r>:
 80112c0:	898a      	ldrh	r2, [r1, #12]
 80112c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112c6:	4605      	mov	r5, r0
 80112c8:	0710      	lsls	r0, r2, #28
 80112ca:	460c      	mov	r4, r1
 80112cc:	d458      	bmi.n	8011380 <__sflush_r+0xc0>
 80112ce:	684b      	ldr	r3, [r1, #4]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	dc05      	bgt.n	80112e0 <__sflush_r+0x20>
 80112d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	dc02      	bgt.n	80112e0 <__sflush_r+0x20>
 80112da:	2000      	movs	r0, #0
 80112dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112e2:	2e00      	cmp	r6, #0
 80112e4:	d0f9      	beq.n	80112da <__sflush_r+0x1a>
 80112e6:	2300      	movs	r3, #0
 80112e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80112ec:	682f      	ldr	r7, [r5, #0]
 80112ee:	602b      	str	r3, [r5, #0]
 80112f0:	d032      	beq.n	8011358 <__sflush_r+0x98>
 80112f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80112f4:	89a3      	ldrh	r3, [r4, #12]
 80112f6:	075a      	lsls	r2, r3, #29
 80112f8:	d505      	bpl.n	8011306 <__sflush_r+0x46>
 80112fa:	6863      	ldr	r3, [r4, #4]
 80112fc:	1ac0      	subs	r0, r0, r3
 80112fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011300:	b10b      	cbz	r3, 8011306 <__sflush_r+0x46>
 8011302:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011304:	1ac0      	subs	r0, r0, r3
 8011306:	2300      	movs	r3, #0
 8011308:	4602      	mov	r2, r0
 801130a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801130c:	6a21      	ldr	r1, [r4, #32]
 801130e:	4628      	mov	r0, r5
 8011310:	47b0      	blx	r6
 8011312:	1c43      	adds	r3, r0, #1
 8011314:	89a3      	ldrh	r3, [r4, #12]
 8011316:	d106      	bne.n	8011326 <__sflush_r+0x66>
 8011318:	6829      	ldr	r1, [r5, #0]
 801131a:	291d      	cmp	r1, #29
 801131c:	d82c      	bhi.n	8011378 <__sflush_r+0xb8>
 801131e:	4a2a      	ldr	r2, [pc, #168]	; (80113c8 <__sflush_r+0x108>)
 8011320:	40ca      	lsrs	r2, r1
 8011322:	07d6      	lsls	r6, r2, #31
 8011324:	d528      	bpl.n	8011378 <__sflush_r+0xb8>
 8011326:	2200      	movs	r2, #0
 8011328:	6062      	str	r2, [r4, #4]
 801132a:	04d9      	lsls	r1, r3, #19
 801132c:	6922      	ldr	r2, [r4, #16]
 801132e:	6022      	str	r2, [r4, #0]
 8011330:	d504      	bpl.n	801133c <__sflush_r+0x7c>
 8011332:	1c42      	adds	r2, r0, #1
 8011334:	d101      	bne.n	801133a <__sflush_r+0x7a>
 8011336:	682b      	ldr	r3, [r5, #0]
 8011338:	b903      	cbnz	r3, 801133c <__sflush_r+0x7c>
 801133a:	6560      	str	r0, [r4, #84]	; 0x54
 801133c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801133e:	602f      	str	r7, [r5, #0]
 8011340:	2900      	cmp	r1, #0
 8011342:	d0ca      	beq.n	80112da <__sflush_r+0x1a>
 8011344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011348:	4299      	cmp	r1, r3
 801134a:	d002      	beq.n	8011352 <__sflush_r+0x92>
 801134c:	4628      	mov	r0, r5
 801134e:	f7fe fa65 	bl	800f81c <_free_r>
 8011352:	2000      	movs	r0, #0
 8011354:	6360      	str	r0, [r4, #52]	; 0x34
 8011356:	e7c1      	b.n	80112dc <__sflush_r+0x1c>
 8011358:	6a21      	ldr	r1, [r4, #32]
 801135a:	2301      	movs	r3, #1
 801135c:	4628      	mov	r0, r5
 801135e:	47b0      	blx	r6
 8011360:	1c41      	adds	r1, r0, #1
 8011362:	d1c7      	bne.n	80112f4 <__sflush_r+0x34>
 8011364:	682b      	ldr	r3, [r5, #0]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d0c4      	beq.n	80112f4 <__sflush_r+0x34>
 801136a:	2b1d      	cmp	r3, #29
 801136c:	d001      	beq.n	8011372 <__sflush_r+0xb2>
 801136e:	2b16      	cmp	r3, #22
 8011370:	d101      	bne.n	8011376 <__sflush_r+0xb6>
 8011372:	602f      	str	r7, [r5, #0]
 8011374:	e7b1      	b.n	80112da <__sflush_r+0x1a>
 8011376:	89a3      	ldrh	r3, [r4, #12]
 8011378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801137c:	81a3      	strh	r3, [r4, #12]
 801137e:	e7ad      	b.n	80112dc <__sflush_r+0x1c>
 8011380:	690f      	ldr	r7, [r1, #16]
 8011382:	2f00      	cmp	r7, #0
 8011384:	d0a9      	beq.n	80112da <__sflush_r+0x1a>
 8011386:	0793      	lsls	r3, r2, #30
 8011388:	680e      	ldr	r6, [r1, #0]
 801138a:	bf08      	it	eq
 801138c:	694b      	ldreq	r3, [r1, #20]
 801138e:	600f      	str	r7, [r1, #0]
 8011390:	bf18      	it	ne
 8011392:	2300      	movne	r3, #0
 8011394:	eba6 0807 	sub.w	r8, r6, r7
 8011398:	608b      	str	r3, [r1, #8]
 801139a:	f1b8 0f00 	cmp.w	r8, #0
 801139e:	dd9c      	ble.n	80112da <__sflush_r+0x1a>
 80113a0:	6a21      	ldr	r1, [r4, #32]
 80113a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80113a4:	4643      	mov	r3, r8
 80113a6:	463a      	mov	r2, r7
 80113a8:	4628      	mov	r0, r5
 80113aa:	47b0      	blx	r6
 80113ac:	2800      	cmp	r0, #0
 80113ae:	dc06      	bgt.n	80113be <__sflush_r+0xfe>
 80113b0:	89a3      	ldrh	r3, [r4, #12]
 80113b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113b6:	81a3      	strh	r3, [r4, #12]
 80113b8:	f04f 30ff 	mov.w	r0, #4294967295
 80113bc:	e78e      	b.n	80112dc <__sflush_r+0x1c>
 80113be:	4407      	add	r7, r0
 80113c0:	eba8 0800 	sub.w	r8, r8, r0
 80113c4:	e7e9      	b.n	801139a <__sflush_r+0xda>
 80113c6:	bf00      	nop
 80113c8:	20400001 	.word	0x20400001

080113cc <_fflush_r>:
 80113cc:	b538      	push	{r3, r4, r5, lr}
 80113ce:	690b      	ldr	r3, [r1, #16]
 80113d0:	4605      	mov	r5, r0
 80113d2:	460c      	mov	r4, r1
 80113d4:	b913      	cbnz	r3, 80113dc <_fflush_r+0x10>
 80113d6:	2500      	movs	r5, #0
 80113d8:	4628      	mov	r0, r5
 80113da:	bd38      	pop	{r3, r4, r5, pc}
 80113dc:	b118      	cbz	r0, 80113e6 <_fflush_r+0x1a>
 80113de:	6983      	ldr	r3, [r0, #24]
 80113e0:	b90b      	cbnz	r3, 80113e6 <_fflush_r+0x1a>
 80113e2:	f7fe f92f 	bl	800f644 <__sinit>
 80113e6:	4b14      	ldr	r3, [pc, #80]	; (8011438 <_fflush_r+0x6c>)
 80113e8:	429c      	cmp	r4, r3
 80113ea:	d11b      	bne.n	8011424 <_fflush_r+0x58>
 80113ec:	686c      	ldr	r4, [r5, #4]
 80113ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d0ef      	beq.n	80113d6 <_fflush_r+0xa>
 80113f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80113f8:	07d0      	lsls	r0, r2, #31
 80113fa:	d404      	bmi.n	8011406 <_fflush_r+0x3a>
 80113fc:	0599      	lsls	r1, r3, #22
 80113fe:	d402      	bmi.n	8011406 <_fflush_r+0x3a>
 8011400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011402:	f7fe f9e2 	bl	800f7ca <__retarget_lock_acquire_recursive>
 8011406:	4628      	mov	r0, r5
 8011408:	4621      	mov	r1, r4
 801140a:	f7ff ff59 	bl	80112c0 <__sflush_r>
 801140e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011410:	07da      	lsls	r2, r3, #31
 8011412:	4605      	mov	r5, r0
 8011414:	d4e0      	bmi.n	80113d8 <_fflush_r+0xc>
 8011416:	89a3      	ldrh	r3, [r4, #12]
 8011418:	059b      	lsls	r3, r3, #22
 801141a:	d4dd      	bmi.n	80113d8 <_fflush_r+0xc>
 801141c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801141e:	f7fe f9d5 	bl	800f7cc <__retarget_lock_release_recursive>
 8011422:	e7d9      	b.n	80113d8 <_fflush_r+0xc>
 8011424:	4b05      	ldr	r3, [pc, #20]	; (801143c <_fflush_r+0x70>)
 8011426:	429c      	cmp	r4, r3
 8011428:	d101      	bne.n	801142e <_fflush_r+0x62>
 801142a:	68ac      	ldr	r4, [r5, #8]
 801142c:	e7df      	b.n	80113ee <_fflush_r+0x22>
 801142e:	4b04      	ldr	r3, [pc, #16]	; (8011440 <_fflush_r+0x74>)
 8011430:	429c      	cmp	r4, r3
 8011432:	bf08      	it	eq
 8011434:	68ec      	ldreq	r4, [r5, #12]
 8011436:	e7da      	b.n	80113ee <_fflush_r+0x22>
 8011438:	0807b2a4 	.word	0x0807b2a4
 801143c:	0807b2c4 	.word	0x0807b2c4
 8011440:	0807b284 	.word	0x0807b284

08011444 <_localeconv_r>:
 8011444:	4800      	ldr	r0, [pc, #0]	; (8011448 <_localeconv_r+0x4>)
 8011446:	4770      	bx	lr
 8011448:	20001158 	.word	0x20001158

0801144c <_lseek_r>:
 801144c:	b538      	push	{r3, r4, r5, lr}
 801144e:	4d07      	ldr	r5, [pc, #28]	; (801146c <_lseek_r+0x20>)
 8011450:	4604      	mov	r4, r0
 8011452:	4608      	mov	r0, r1
 8011454:	4611      	mov	r1, r2
 8011456:	2200      	movs	r2, #0
 8011458:	602a      	str	r2, [r5, #0]
 801145a:	461a      	mov	r2, r3
 801145c:	f7fc fd72 	bl	800df44 <_lseek>
 8011460:	1c43      	adds	r3, r0, #1
 8011462:	d102      	bne.n	801146a <_lseek_r+0x1e>
 8011464:	682b      	ldr	r3, [r5, #0]
 8011466:	b103      	cbz	r3, 801146a <_lseek_r+0x1e>
 8011468:	6023      	str	r3, [r4, #0]
 801146a:	bd38      	pop	{r3, r4, r5, pc}
 801146c:	2001a69c 	.word	0x2001a69c

08011470 <__swhatbuf_r>:
 8011470:	b570      	push	{r4, r5, r6, lr}
 8011472:	460e      	mov	r6, r1
 8011474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011478:	2900      	cmp	r1, #0
 801147a:	b096      	sub	sp, #88	; 0x58
 801147c:	4614      	mov	r4, r2
 801147e:	461d      	mov	r5, r3
 8011480:	da07      	bge.n	8011492 <__swhatbuf_r+0x22>
 8011482:	2300      	movs	r3, #0
 8011484:	602b      	str	r3, [r5, #0]
 8011486:	89b3      	ldrh	r3, [r6, #12]
 8011488:	061a      	lsls	r2, r3, #24
 801148a:	d410      	bmi.n	80114ae <__swhatbuf_r+0x3e>
 801148c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011490:	e00e      	b.n	80114b0 <__swhatbuf_r+0x40>
 8011492:	466a      	mov	r2, sp
 8011494:	f000 fd84 	bl	8011fa0 <_fstat_r>
 8011498:	2800      	cmp	r0, #0
 801149a:	dbf2      	blt.n	8011482 <__swhatbuf_r+0x12>
 801149c:	9a01      	ldr	r2, [sp, #4]
 801149e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80114a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80114a6:	425a      	negs	r2, r3
 80114a8:	415a      	adcs	r2, r3
 80114aa:	602a      	str	r2, [r5, #0]
 80114ac:	e7ee      	b.n	801148c <__swhatbuf_r+0x1c>
 80114ae:	2340      	movs	r3, #64	; 0x40
 80114b0:	2000      	movs	r0, #0
 80114b2:	6023      	str	r3, [r4, #0]
 80114b4:	b016      	add	sp, #88	; 0x58
 80114b6:	bd70      	pop	{r4, r5, r6, pc}

080114b8 <__smakebuf_r>:
 80114b8:	898b      	ldrh	r3, [r1, #12]
 80114ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80114bc:	079d      	lsls	r5, r3, #30
 80114be:	4606      	mov	r6, r0
 80114c0:	460c      	mov	r4, r1
 80114c2:	d507      	bpl.n	80114d4 <__smakebuf_r+0x1c>
 80114c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80114c8:	6023      	str	r3, [r4, #0]
 80114ca:	6123      	str	r3, [r4, #16]
 80114cc:	2301      	movs	r3, #1
 80114ce:	6163      	str	r3, [r4, #20]
 80114d0:	b002      	add	sp, #8
 80114d2:	bd70      	pop	{r4, r5, r6, pc}
 80114d4:	ab01      	add	r3, sp, #4
 80114d6:	466a      	mov	r2, sp
 80114d8:	f7ff ffca 	bl	8011470 <__swhatbuf_r>
 80114dc:	9900      	ldr	r1, [sp, #0]
 80114de:	4605      	mov	r5, r0
 80114e0:	4630      	mov	r0, r6
 80114e2:	f7fe f9eb 	bl	800f8bc <_malloc_r>
 80114e6:	b948      	cbnz	r0, 80114fc <__smakebuf_r+0x44>
 80114e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114ec:	059a      	lsls	r2, r3, #22
 80114ee:	d4ef      	bmi.n	80114d0 <__smakebuf_r+0x18>
 80114f0:	f023 0303 	bic.w	r3, r3, #3
 80114f4:	f043 0302 	orr.w	r3, r3, #2
 80114f8:	81a3      	strh	r3, [r4, #12]
 80114fa:	e7e3      	b.n	80114c4 <__smakebuf_r+0xc>
 80114fc:	4b0d      	ldr	r3, [pc, #52]	; (8011534 <__smakebuf_r+0x7c>)
 80114fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8011500:	89a3      	ldrh	r3, [r4, #12]
 8011502:	6020      	str	r0, [r4, #0]
 8011504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011508:	81a3      	strh	r3, [r4, #12]
 801150a:	9b00      	ldr	r3, [sp, #0]
 801150c:	6163      	str	r3, [r4, #20]
 801150e:	9b01      	ldr	r3, [sp, #4]
 8011510:	6120      	str	r0, [r4, #16]
 8011512:	b15b      	cbz	r3, 801152c <__smakebuf_r+0x74>
 8011514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011518:	4630      	mov	r0, r6
 801151a:	f000 fd53 	bl	8011fc4 <_isatty_r>
 801151e:	b128      	cbz	r0, 801152c <__smakebuf_r+0x74>
 8011520:	89a3      	ldrh	r3, [r4, #12]
 8011522:	f023 0303 	bic.w	r3, r3, #3
 8011526:	f043 0301 	orr.w	r3, r3, #1
 801152a:	81a3      	strh	r3, [r4, #12]
 801152c:	89a0      	ldrh	r0, [r4, #12]
 801152e:	4305      	orrs	r5, r0
 8011530:	81a5      	strh	r5, [r4, #12]
 8011532:	e7cd      	b.n	80114d0 <__smakebuf_r+0x18>
 8011534:	0800f5dd 	.word	0x0800f5dd

08011538 <__malloc_lock>:
 8011538:	4801      	ldr	r0, [pc, #4]	; (8011540 <__malloc_lock+0x8>)
 801153a:	f7fe b946 	b.w	800f7ca <__retarget_lock_acquire_recursive>
 801153e:	bf00      	nop
 8011540:	2001a694 	.word	0x2001a694

08011544 <__malloc_unlock>:
 8011544:	4801      	ldr	r0, [pc, #4]	; (801154c <__malloc_unlock+0x8>)
 8011546:	f7fe b941 	b.w	800f7cc <__retarget_lock_release_recursive>
 801154a:	bf00      	nop
 801154c:	2001a694 	.word	0x2001a694

08011550 <_Balloc>:
 8011550:	b570      	push	{r4, r5, r6, lr}
 8011552:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011554:	4604      	mov	r4, r0
 8011556:	460d      	mov	r5, r1
 8011558:	b976      	cbnz	r6, 8011578 <_Balloc+0x28>
 801155a:	2010      	movs	r0, #16
 801155c:	f7fe f938 	bl	800f7d0 <malloc>
 8011560:	4602      	mov	r2, r0
 8011562:	6260      	str	r0, [r4, #36]	; 0x24
 8011564:	b920      	cbnz	r0, 8011570 <_Balloc+0x20>
 8011566:	4b18      	ldr	r3, [pc, #96]	; (80115c8 <_Balloc+0x78>)
 8011568:	4818      	ldr	r0, [pc, #96]	; (80115cc <_Balloc+0x7c>)
 801156a:	2166      	movs	r1, #102	; 0x66
 801156c:	f000 fce8 	bl	8011f40 <__assert_func>
 8011570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011574:	6006      	str	r6, [r0, #0]
 8011576:	60c6      	str	r6, [r0, #12]
 8011578:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801157a:	68f3      	ldr	r3, [r6, #12]
 801157c:	b183      	cbz	r3, 80115a0 <_Balloc+0x50>
 801157e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011580:	68db      	ldr	r3, [r3, #12]
 8011582:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011586:	b9b8      	cbnz	r0, 80115b8 <_Balloc+0x68>
 8011588:	2101      	movs	r1, #1
 801158a:	fa01 f605 	lsl.w	r6, r1, r5
 801158e:	1d72      	adds	r2, r6, #5
 8011590:	0092      	lsls	r2, r2, #2
 8011592:	4620      	mov	r0, r4
 8011594:	f000 fb5a 	bl	8011c4c <_calloc_r>
 8011598:	b160      	cbz	r0, 80115b4 <_Balloc+0x64>
 801159a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801159e:	e00e      	b.n	80115be <_Balloc+0x6e>
 80115a0:	2221      	movs	r2, #33	; 0x21
 80115a2:	2104      	movs	r1, #4
 80115a4:	4620      	mov	r0, r4
 80115a6:	f000 fb51 	bl	8011c4c <_calloc_r>
 80115aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80115ac:	60f0      	str	r0, [r6, #12]
 80115ae:	68db      	ldr	r3, [r3, #12]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d1e4      	bne.n	801157e <_Balloc+0x2e>
 80115b4:	2000      	movs	r0, #0
 80115b6:	bd70      	pop	{r4, r5, r6, pc}
 80115b8:	6802      	ldr	r2, [r0, #0]
 80115ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80115be:	2300      	movs	r3, #0
 80115c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80115c4:	e7f7      	b.n	80115b6 <_Balloc+0x66>
 80115c6:	bf00      	nop
 80115c8:	0807b329 	.word	0x0807b329
 80115cc:	0807b3b0 	.word	0x0807b3b0

080115d0 <_Bfree>:
 80115d0:	b570      	push	{r4, r5, r6, lr}
 80115d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80115d4:	4605      	mov	r5, r0
 80115d6:	460c      	mov	r4, r1
 80115d8:	b976      	cbnz	r6, 80115f8 <_Bfree+0x28>
 80115da:	2010      	movs	r0, #16
 80115dc:	f7fe f8f8 	bl	800f7d0 <malloc>
 80115e0:	4602      	mov	r2, r0
 80115e2:	6268      	str	r0, [r5, #36]	; 0x24
 80115e4:	b920      	cbnz	r0, 80115f0 <_Bfree+0x20>
 80115e6:	4b09      	ldr	r3, [pc, #36]	; (801160c <_Bfree+0x3c>)
 80115e8:	4809      	ldr	r0, [pc, #36]	; (8011610 <_Bfree+0x40>)
 80115ea:	218a      	movs	r1, #138	; 0x8a
 80115ec:	f000 fca8 	bl	8011f40 <__assert_func>
 80115f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80115f4:	6006      	str	r6, [r0, #0]
 80115f6:	60c6      	str	r6, [r0, #12]
 80115f8:	b13c      	cbz	r4, 801160a <_Bfree+0x3a>
 80115fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80115fc:	6862      	ldr	r2, [r4, #4]
 80115fe:	68db      	ldr	r3, [r3, #12]
 8011600:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011604:	6021      	str	r1, [r4, #0]
 8011606:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801160a:	bd70      	pop	{r4, r5, r6, pc}
 801160c:	0807b329 	.word	0x0807b329
 8011610:	0807b3b0 	.word	0x0807b3b0

08011614 <__multadd>:
 8011614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011618:	690e      	ldr	r6, [r1, #16]
 801161a:	4607      	mov	r7, r0
 801161c:	4698      	mov	r8, r3
 801161e:	460c      	mov	r4, r1
 8011620:	f101 0014 	add.w	r0, r1, #20
 8011624:	2300      	movs	r3, #0
 8011626:	6805      	ldr	r5, [r0, #0]
 8011628:	b2a9      	uxth	r1, r5
 801162a:	fb02 8101 	mla	r1, r2, r1, r8
 801162e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011632:	0c2d      	lsrs	r5, r5, #16
 8011634:	fb02 c505 	mla	r5, r2, r5, ip
 8011638:	b289      	uxth	r1, r1
 801163a:	3301      	adds	r3, #1
 801163c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011640:	429e      	cmp	r6, r3
 8011642:	f840 1b04 	str.w	r1, [r0], #4
 8011646:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801164a:	dcec      	bgt.n	8011626 <__multadd+0x12>
 801164c:	f1b8 0f00 	cmp.w	r8, #0
 8011650:	d022      	beq.n	8011698 <__multadd+0x84>
 8011652:	68a3      	ldr	r3, [r4, #8]
 8011654:	42b3      	cmp	r3, r6
 8011656:	dc19      	bgt.n	801168c <__multadd+0x78>
 8011658:	6861      	ldr	r1, [r4, #4]
 801165a:	4638      	mov	r0, r7
 801165c:	3101      	adds	r1, #1
 801165e:	f7ff ff77 	bl	8011550 <_Balloc>
 8011662:	4605      	mov	r5, r0
 8011664:	b928      	cbnz	r0, 8011672 <__multadd+0x5e>
 8011666:	4602      	mov	r2, r0
 8011668:	4b0d      	ldr	r3, [pc, #52]	; (80116a0 <__multadd+0x8c>)
 801166a:	480e      	ldr	r0, [pc, #56]	; (80116a4 <__multadd+0x90>)
 801166c:	21b5      	movs	r1, #181	; 0xb5
 801166e:	f000 fc67 	bl	8011f40 <__assert_func>
 8011672:	6922      	ldr	r2, [r4, #16]
 8011674:	3202      	adds	r2, #2
 8011676:	f104 010c 	add.w	r1, r4, #12
 801167a:	0092      	lsls	r2, r2, #2
 801167c:	300c      	adds	r0, #12
 801167e:	f7fe f8b7 	bl	800f7f0 <memcpy>
 8011682:	4621      	mov	r1, r4
 8011684:	4638      	mov	r0, r7
 8011686:	f7ff ffa3 	bl	80115d0 <_Bfree>
 801168a:	462c      	mov	r4, r5
 801168c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011690:	3601      	adds	r6, #1
 8011692:	f8c3 8014 	str.w	r8, [r3, #20]
 8011696:	6126      	str	r6, [r4, #16]
 8011698:	4620      	mov	r0, r4
 801169a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801169e:	bf00      	nop
 80116a0:	0807b39f 	.word	0x0807b39f
 80116a4:	0807b3b0 	.word	0x0807b3b0

080116a8 <__hi0bits>:
 80116a8:	0c03      	lsrs	r3, r0, #16
 80116aa:	041b      	lsls	r3, r3, #16
 80116ac:	b9d3      	cbnz	r3, 80116e4 <__hi0bits+0x3c>
 80116ae:	0400      	lsls	r0, r0, #16
 80116b0:	2310      	movs	r3, #16
 80116b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80116b6:	bf04      	itt	eq
 80116b8:	0200      	lsleq	r0, r0, #8
 80116ba:	3308      	addeq	r3, #8
 80116bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80116c0:	bf04      	itt	eq
 80116c2:	0100      	lsleq	r0, r0, #4
 80116c4:	3304      	addeq	r3, #4
 80116c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80116ca:	bf04      	itt	eq
 80116cc:	0080      	lsleq	r0, r0, #2
 80116ce:	3302      	addeq	r3, #2
 80116d0:	2800      	cmp	r0, #0
 80116d2:	db05      	blt.n	80116e0 <__hi0bits+0x38>
 80116d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80116d8:	f103 0301 	add.w	r3, r3, #1
 80116dc:	bf08      	it	eq
 80116de:	2320      	moveq	r3, #32
 80116e0:	4618      	mov	r0, r3
 80116e2:	4770      	bx	lr
 80116e4:	2300      	movs	r3, #0
 80116e6:	e7e4      	b.n	80116b2 <__hi0bits+0xa>

080116e8 <__lo0bits>:
 80116e8:	6803      	ldr	r3, [r0, #0]
 80116ea:	f013 0207 	ands.w	r2, r3, #7
 80116ee:	4601      	mov	r1, r0
 80116f0:	d00b      	beq.n	801170a <__lo0bits+0x22>
 80116f2:	07da      	lsls	r2, r3, #31
 80116f4:	d424      	bmi.n	8011740 <__lo0bits+0x58>
 80116f6:	0798      	lsls	r0, r3, #30
 80116f8:	bf49      	itett	mi
 80116fa:	085b      	lsrmi	r3, r3, #1
 80116fc:	089b      	lsrpl	r3, r3, #2
 80116fe:	2001      	movmi	r0, #1
 8011700:	600b      	strmi	r3, [r1, #0]
 8011702:	bf5c      	itt	pl
 8011704:	600b      	strpl	r3, [r1, #0]
 8011706:	2002      	movpl	r0, #2
 8011708:	4770      	bx	lr
 801170a:	b298      	uxth	r0, r3
 801170c:	b9b0      	cbnz	r0, 801173c <__lo0bits+0x54>
 801170e:	0c1b      	lsrs	r3, r3, #16
 8011710:	2010      	movs	r0, #16
 8011712:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011716:	bf04      	itt	eq
 8011718:	0a1b      	lsreq	r3, r3, #8
 801171a:	3008      	addeq	r0, #8
 801171c:	071a      	lsls	r2, r3, #28
 801171e:	bf04      	itt	eq
 8011720:	091b      	lsreq	r3, r3, #4
 8011722:	3004      	addeq	r0, #4
 8011724:	079a      	lsls	r2, r3, #30
 8011726:	bf04      	itt	eq
 8011728:	089b      	lsreq	r3, r3, #2
 801172a:	3002      	addeq	r0, #2
 801172c:	07da      	lsls	r2, r3, #31
 801172e:	d403      	bmi.n	8011738 <__lo0bits+0x50>
 8011730:	085b      	lsrs	r3, r3, #1
 8011732:	f100 0001 	add.w	r0, r0, #1
 8011736:	d005      	beq.n	8011744 <__lo0bits+0x5c>
 8011738:	600b      	str	r3, [r1, #0]
 801173a:	4770      	bx	lr
 801173c:	4610      	mov	r0, r2
 801173e:	e7e8      	b.n	8011712 <__lo0bits+0x2a>
 8011740:	2000      	movs	r0, #0
 8011742:	4770      	bx	lr
 8011744:	2020      	movs	r0, #32
 8011746:	4770      	bx	lr

08011748 <__i2b>:
 8011748:	b510      	push	{r4, lr}
 801174a:	460c      	mov	r4, r1
 801174c:	2101      	movs	r1, #1
 801174e:	f7ff feff 	bl	8011550 <_Balloc>
 8011752:	4602      	mov	r2, r0
 8011754:	b928      	cbnz	r0, 8011762 <__i2b+0x1a>
 8011756:	4b05      	ldr	r3, [pc, #20]	; (801176c <__i2b+0x24>)
 8011758:	4805      	ldr	r0, [pc, #20]	; (8011770 <__i2b+0x28>)
 801175a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801175e:	f000 fbef 	bl	8011f40 <__assert_func>
 8011762:	2301      	movs	r3, #1
 8011764:	6144      	str	r4, [r0, #20]
 8011766:	6103      	str	r3, [r0, #16]
 8011768:	bd10      	pop	{r4, pc}
 801176a:	bf00      	nop
 801176c:	0807b39f 	.word	0x0807b39f
 8011770:	0807b3b0 	.word	0x0807b3b0

08011774 <__multiply>:
 8011774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011778:	4614      	mov	r4, r2
 801177a:	690a      	ldr	r2, [r1, #16]
 801177c:	6923      	ldr	r3, [r4, #16]
 801177e:	429a      	cmp	r2, r3
 8011780:	bfb8      	it	lt
 8011782:	460b      	movlt	r3, r1
 8011784:	460d      	mov	r5, r1
 8011786:	bfbc      	itt	lt
 8011788:	4625      	movlt	r5, r4
 801178a:	461c      	movlt	r4, r3
 801178c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011790:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011794:	68ab      	ldr	r3, [r5, #8]
 8011796:	6869      	ldr	r1, [r5, #4]
 8011798:	eb0a 0709 	add.w	r7, sl, r9
 801179c:	42bb      	cmp	r3, r7
 801179e:	b085      	sub	sp, #20
 80117a0:	bfb8      	it	lt
 80117a2:	3101      	addlt	r1, #1
 80117a4:	f7ff fed4 	bl	8011550 <_Balloc>
 80117a8:	b930      	cbnz	r0, 80117b8 <__multiply+0x44>
 80117aa:	4602      	mov	r2, r0
 80117ac:	4b42      	ldr	r3, [pc, #264]	; (80118b8 <__multiply+0x144>)
 80117ae:	4843      	ldr	r0, [pc, #268]	; (80118bc <__multiply+0x148>)
 80117b0:	f240 115d 	movw	r1, #349	; 0x15d
 80117b4:	f000 fbc4 	bl	8011f40 <__assert_func>
 80117b8:	f100 0614 	add.w	r6, r0, #20
 80117bc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80117c0:	4633      	mov	r3, r6
 80117c2:	2200      	movs	r2, #0
 80117c4:	4543      	cmp	r3, r8
 80117c6:	d31e      	bcc.n	8011806 <__multiply+0x92>
 80117c8:	f105 0c14 	add.w	ip, r5, #20
 80117cc:	f104 0314 	add.w	r3, r4, #20
 80117d0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80117d4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80117d8:	9202      	str	r2, [sp, #8]
 80117da:	ebac 0205 	sub.w	r2, ip, r5
 80117de:	3a15      	subs	r2, #21
 80117e0:	f022 0203 	bic.w	r2, r2, #3
 80117e4:	3204      	adds	r2, #4
 80117e6:	f105 0115 	add.w	r1, r5, #21
 80117ea:	458c      	cmp	ip, r1
 80117ec:	bf38      	it	cc
 80117ee:	2204      	movcc	r2, #4
 80117f0:	9201      	str	r2, [sp, #4]
 80117f2:	9a02      	ldr	r2, [sp, #8]
 80117f4:	9303      	str	r3, [sp, #12]
 80117f6:	429a      	cmp	r2, r3
 80117f8:	d808      	bhi.n	801180c <__multiply+0x98>
 80117fa:	2f00      	cmp	r7, #0
 80117fc:	dc55      	bgt.n	80118aa <__multiply+0x136>
 80117fe:	6107      	str	r7, [r0, #16]
 8011800:	b005      	add	sp, #20
 8011802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011806:	f843 2b04 	str.w	r2, [r3], #4
 801180a:	e7db      	b.n	80117c4 <__multiply+0x50>
 801180c:	f8b3 a000 	ldrh.w	sl, [r3]
 8011810:	f1ba 0f00 	cmp.w	sl, #0
 8011814:	d020      	beq.n	8011858 <__multiply+0xe4>
 8011816:	f105 0e14 	add.w	lr, r5, #20
 801181a:	46b1      	mov	r9, r6
 801181c:	2200      	movs	r2, #0
 801181e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011822:	f8d9 b000 	ldr.w	fp, [r9]
 8011826:	b2a1      	uxth	r1, r4
 8011828:	fa1f fb8b 	uxth.w	fp, fp
 801182c:	fb0a b101 	mla	r1, sl, r1, fp
 8011830:	4411      	add	r1, r2
 8011832:	f8d9 2000 	ldr.w	r2, [r9]
 8011836:	0c24      	lsrs	r4, r4, #16
 8011838:	0c12      	lsrs	r2, r2, #16
 801183a:	fb0a 2404 	mla	r4, sl, r4, r2
 801183e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011842:	b289      	uxth	r1, r1
 8011844:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011848:	45f4      	cmp	ip, lr
 801184a:	f849 1b04 	str.w	r1, [r9], #4
 801184e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011852:	d8e4      	bhi.n	801181e <__multiply+0xaa>
 8011854:	9901      	ldr	r1, [sp, #4]
 8011856:	5072      	str	r2, [r6, r1]
 8011858:	9a03      	ldr	r2, [sp, #12]
 801185a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801185e:	3304      	adds	r3, #4
 8011860:	f1b9 0f00 	cmp.w	r9, #0
 8011864:	d01f      	beq.n	80118a6 <__multiply+0x132>
 8011866:	6834      	ldr	r4, [r6, #0]
 8011868:	f105 0114 	add.w	r1, r5, #20
 801186c:	46b6      	mov	lr, r6
 801186e:	f04f 0a00 	mov.w	sl, #0
 8011872:	880a      	ldrh	r2, [r1, #0]
 8011874:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011878:	fb09 b202 	mla	r2, r9, r2, fp
 801187c:	4492      	add	sl, r2
 801187e:	b2a4      	uxth	r4, r4
 8011880:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011884:	f84e 4b04 	str.w	r4, [lr], #4
 8011888:	f851 4b04 	ldr.w	r4, [r1], #4
 801188c:	f8be 2000 	ldrh.w	r2, [lr]
 8011890:	0c24      	lsrs	r4, r4, #16
 8011892:	fb09 2404 	mla	r4, r9, r4, r2
 8011896:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801189a:	458c      	cmp	ip, r1
 801189c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80118a0:	d8e7      	bhi.n	8011872 <__multiply+0xfe>
 80118a2:	9a01      	ldr	r2, [sp, #4]
 80118a4:	50b4      	str	r4, [r6, r2]
 80118a6:	3604      	adds	r6, #4
 80118a8:	e7a3      	b.n	80117f2 <__multiply+0x7e>
 80118aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d1a5      	bne.n	80117fe <__multiply+0x8a>
 80118b2:	3f01      	subs	r7, #1
 80118b4:	e7a1      	b.n	80117fa <__multiply+0x86>
 80118b6:	bf00      	nop
 80118b8:	0807b39f 	.word	0x0807b39f
 80118bc:	0807b3b0 	.word	0x0807b3b0

080118c0 <__pow5mult>:
 80118c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118c4:	4615      	mov	r5, r2
 80118c6:	f012 0203 	ands.w	r2, r2, #3
 80118ca:	4606      	mov	r6, r0
 80118cc:	460f      	mov	r7, r1
 80118ce:	d007      	beq.n	80118e0 <__pow5mult+0x20>
 80118d0:	4c25      	ldr	r4, [pc, #148]	; (8011968 <__pow5mult+0xa8>)
 80118d2:	3a01      	subs	r2, #1
 80118d4:	2300      	movs	r3, #0
 80118d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80118da:	f7ff fe9b 	bl	8011614 <__multadd>
 80118de:	4607      	mov	r7, r0
 80118e0:	10ad      	asrs	r5, r5, #2
 80118e2:	d03d      	beq.n	8011960 <__pow5mult+0xa0>
 80118e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80118e6:	b97c      	cbnz	r4, 8011908 <__pow5mult+0x48>
 80118e8:	2010      	movs	r0, #16
 80118ea:	f7fd ff71 	bl	800f7d0 <malloc>
 80118ee:	4602      	mov	r2, r0
 80118f0:	6270      	str	r0, [r6, #36]	; 0x24
 80118f2:	b928      	cbnz	r0, 8011900 <__pow5mult+0x40>
 80118f4:	4b1d      	ldr	r3, [pc, #116]	; (801196c <__pow5mult+0xac>)
 80118f6:	481e      	ldr	r0, [pc, #120]	; (8011970 <__pow5mult+0xb0>)
 80118f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80118fc:	f000 fb20 	bl	8011f40 <__assert_func>
 8011900:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011904:	6004      	str	r4, [r0, #0]
 8011906:	60c4      	str	r4, [r0, #12]
 8011908:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801190c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011910:	b94c      	cbnz	r4, 8011926 <__pow5mult+0x66>
 8011912:	f240 2171 	movw	r1, #625	; 0x271
 8011916:	4630      	mov	r0, r6
 8011918:	f7ff ff16 	bl	8011748 <__i2b>
 801191c:	2300      	movs	r3, #0
 801191e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011922:	4604      	mov	r4, r0
 8011924:	6003      	str	r3, [r0, #0]
 8011926:	f04f 0900 	mov.w	r9, #0
 801192a:	07eb      	lsls	r3, r5, #31
 801192c:	d50a      	bpl.n	8011944 <__pow5mult+0x84>
 801192e:	4639      	mov	r1, r7
 8011930:	4622      	mov	r2, r4
 8011932:	4630      	mov	r0, r6
 8011934:	f7ff ff1e 	bl	8011774 <__multiply>
 8011938:	4639      	mov	r1, r7
 801193a:	4680      	mov	r8, r0
 801193c:	4630      	mov	r0, r6
 801193e:	f7ff fe47 	bl	80115d0 <_Bfree>
 8011942:	4647      	mov	r7, r8
 8011944:	106d      	asrs	r5, r5, #1
 8011946:	d00b      	beq.n	8011960 <__pow5mult+0xa0>
 8011948:	6820      	ldr	r0, [r4, #0]
 801194a:	b938      	cbnz	r0, 801195c <__pow5mult+0x9c>
 801194c:	4622      	mov	r2, r4
 801194e:	4621      	mov	r1, r4
 8011950:	4630      	mov	r0, r6
 8011952:	f7ff ff0f 	bl	8011774 <__multiply>
 8011956:	6020      	str	r0, [r4, #0]
 8011958:	f8c0 9000 	str.w	r9, [r0]
 801195c:	4604      	mov	r4, r0
 801195e:	e7e4      	b.n	801192a <__pow5mult+0x6a>
 8011960:	4638      	mov	r0, r7
 8011962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011966:	bf00      	nop
 8011968:	0807b500 	.word	0x0807b500
 801196c:	0807b329 	.word	0x0807b329
 8011970:	0807b3b0 	.word	0x0807b3b0

08011974 <__lshift>:
 8011974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011978:	460c      	mov	r4, r1
 801197a:	6849      	ldr	r1, [r1, #4]
 801197c:	6923      	ldr	r3, [r4, #16]
 801197e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011982:	68a3      	ldr	r3, [r4, #8]
 8011984:	4607      	mov	r7, r0
 8011986:	4691      	mov	r9, r2
 8011988:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801198c:	f108 0601 	add.w	r6, r8, #1
 8011990:	42b3      	cmp	r3, r6
 8011992:	db0b      	blt.n	80119ac <__lshift+0x38>
 8011994:	4638      	mov	r0, r7
 8011996:	f7ff fddb 	bl	8011550 <_Balloc>
 801199a:	4605      	mov	r5, r0
 801199c:	b948      	cbnz	r0, 80119b2 <__lshift+0x3e>
 801199e:	4602      	mov	r2, r0
 80119a0:	4b28      	ldr	r3, [pc, #160]	; (8011a44 <__lshift+0xd0>)
 80119a2:	4829      	ldr	r0, [pc, #164]	; (8011a48 <__lshift+0xd4>)
 80119a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80119a8:	f000 faca 	bl	8011f40 <__assert_func>
 80119ac:	3101      	adds	r1, #1
 80119ae:	005b      	lsls	r3, r3, #1
 80119b0:	e7ee      	b.n	8011990 <__lshift+0x1c>
 80119b2:	2300      	movs	r3, #0
 80119b4:	f100 0114 	add.w	r1, r0, #20
 80119b8:	f100 0210 	add.w	r2, r0, #16
 80119bc:	4618      	mov	r0, r3
 80119be:	4553      	cmp	r3, sl
 80119c0:	db33      	blt.n	8011a2a <__lshift+0xb6>
 80119c2:	6920      	ldr	r0, [r4, #16]
 80119c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119c8:	f104 0314 	add.w	r3, r4, #20
 80119cc:	f019 091f 	ands.w	r9, r9, #31
 80119d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80119d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80119d8:	d02b      	beq.n	8011a32 <__lshift+0xbe>
 80119da:	f1c9 0e20 	rsb	lr, r9, #32
 80119de:	468a      	mov	sl, r1
 80119e0:	2200      	movs	r2, #0
 80119e2:	6818      	ldr	r0, [r3, #0]
 80119e4:	fa00 f009 	lsl.w	r0, r0, r9
 80119e8:	4302      	orrs	r2, r0
 80119ea:	f84a 2b04 	str.w	r2, [sl], #4
 80119ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80119f2:	459c      	cmp	ip, r3
 80119f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80119f8:	d8f3      	bhi.n	80119e2 <__lshift+0x6e>
 80119fa:	ebac 0304 	sub.w	r3, ip, r4
 80119fe:	3b15      	subs	r3, #21
 8011a00:	f023 0303 	bic.w	r3, r3, #3
 8011a04:	3304      	adds	r3, #4
 8011a06:	f104 0015 	add.w	r0, r4, #21
 8011a0a:	4584      	cmp	ip, r0
 8011a0c:	bf38      	it	cc
 8011a0e:	2304      	movcc	r3, #4
 8011a10:	50ca      	str	r2, [r1, r3]
 8011a12:	b10a      	cbz	r2, 8011a18 <__lshift+0xa4>
 8011a14:	f108 0602 	add.w	r6, r8, #2
 8011a18:	3e01      	subs	r6, #1
 8011a1a:	4638      	mov	r0, r7
 8011a1c:	612e      	str	r6, [r5, #16]
 8011a1e:	4621      	mov	r1, r4
 8011a20:	f7ff fdd6 	bl	80115d0 <_Bfree>
 8011a24:	4628      	mov	r0, r5
 8011a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a2e:	3301      	adds	r3, #1
 8011a30:	e7c5      	b.n	80119be <__lshift+0x4a>
 8011a32:	3904      	subs	r1, #4
 8011a34:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a38:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a3c:	459c      	cmp	ip, r3
 8011a3e:	d8f9      	bhi.n	8011a34 <__lshift+0xc0>
 8011a40:	e7ea      	b.n	8011a18 <__lshift+0xa4>
 8011a42:	bf00      	nop
 8011a44:	0807b39f 	.word	0x0807b39f
 8011a48:	0807b3b0 	.word	0x0807b3b0

08011a4c <__mcmp>:
 8011a4c:	b530      	push	{r4, r5, lr}
 8011a4e:	6902      	ldr	r2, [r0, #16]
 8011a50:	690c      	ldr	r4, [r1, #16]
 8011a52:	1b12      	subs	r2, r2, r4
 8011a54:	d10e      	bne.n	8011a74 <__mcmp+0x28>
 8011a56:	f100 0314 	add.w	r3, r0, #20
 8011a5a:	3114      	adds	r1, #20
 8011a5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011a60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011a64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011a68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011a6c:	42a5      	cmp	r5, r4
 8011a6e:	d003      	beq.n	8011a78 <__mcmp+0x2c>
 8011a70:	d305      	bcc.n	8011a7e <__mcmp+0x32>
 8011a72:	2201      	movs	r2, #1
 8011a74:	4610      	mov	r0, r2
 8011a76:	bd30      	pop	{r4, r5, pc}
 8011a78:	4283      	cmp	r3, r0
 8011a7a:	d3f3      	bcc.n	8011a64 <__mcmp+0x18>
 8011a7c:	e7fa      	b.n	8011a74 <__mcmp+0x28>
 8011a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8011a82:	e7f7      	b.n	8011a74 <__mcmp+0x28>

08011a84 <__mdiff>:
 8011a84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a88:	460c      	mov	r4, r1
 8011a8a:	4606      	mov	r6, r0
 8011a8c:	4611      	mov	r1, r2
 8011a8e:	4620      	mov	r0, r4
 8011a90:	4617      	mov	r7, r2
 8011a92:	f7ff ffdb 	bl	8011a4c <__mcmp>
 8011a96:	1e05      	subs	r5, r0, #0
 8011a98:	d110      	bne.n	8011abc <__mdiff+0x38>
 8011a9a:	4629      	mov	r1, r5
 8011a9c:	4630      	mov	r0, r6
 8011a9e:	f7ff fd57 	bl	8011550 <_Balloc>
 8011aa2:	b930      	cbnz	r0, 8011ab2 <__mdiff+0x2e>
 8011aa4:	4b39      	ldr	r3, [pc, #228]	; (8011b8c <__mdiff+0x108>)
 8011aa6:	4602      	mov	r2, r0
 8011aa8:	f240 2132 	movw	r1, #562	; 0x232
 8011aac:	4838      	ldr	r0, [pc, #224]	; (8011b90 <__mdiff+0x10c>)
 8011aae:	f000 fa47 	bl	8011f40 <__assert_func>
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011ab8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011abc:	bfa4      	itt	ge
 8011abe:	463b      	movge	r3, r7
 8011ac0:	4627      	movge	r7, r4
 8011ac2:	4630      	mov	r0, r6
 8011ac4:	6879      	ldr	r1, [r7, #4]
 8011ac6:	bfa6      	itte	ge
 8011ac8:	461c      	movge	r4, r3
 8011aca:	2500      	movge	r5, #0
 8011acc:	2501      	movlt	r5, #1
 8011ace:	f7ff fd3f 	bl	8011550 <_Balloc>
 8011ad2:	b920      	cbnz	r0, 8011ade <__mdiff+0x5a>
 8011ad4:	4b2d      	ldr	r3, [pc, #180]	; (8011b8c <__mdiff+0x108>)
 8011ad6:	4602      	mov	r2, r0
 8011ad8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011adc:	e7e6      	b.n	8011aac <__mdiff+0x28>
 8011ade:	693e      	ldr	r6, [r7, #16]
 8011ae0:	60c5      	str	r5, [r0, #12]
 8011ae2:	6925      	ldr	r5, [r4, #16]
 8011ae4:	f107 0114 	add.w	r1, r7, #20
 8011ae8:	f104 0914 	add.w	r9, r4, #20
 8011aec:	f100 0e14 	add.w	lr, r0, #20
 8011af0:	f107 0210 	add.w	r2, r7, #16
 8011af4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011af8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011afc:	46f2      	mov	sl, lr
 8011afe:	2700      	movs	r7, #0
 8011b00:	f859 3b04 	ldr.w	r3, [r9], #4
 8011b04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011b08:	fa1f f883 	uxth.w	r8, r3
 8011b0c:	fa17 f78b 	uxtah	r7, r7, fp
 8011b10:	0c1b      	lsrs	r3, r3, #16
 8011b12:	eba7 0808 	sub.w	r8, r7, r8
 8011b16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011b1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011b1e:	fa1f f888 	uxth.w	r8, r8
 8011b22:	141f      	asrs	r7, r3, #16
 8011b24:	454d      	cmp	r5, r9
 8011b26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011b2a:	f84a 3b04 	str.w	r3, [sl], #4
 8011b2e:	d8e7      	bhi.n	8011b00 <__mdiff+0x7c>
 8011b30:	1b2b      	subs	r3, r5, r4
 8011b32:	3b15      	subs	r3, #21
 8011b34:	f023 0303 	bic.w	r3, r3, #3
 8011b38:	3304      	adds	r3, #4
 8011b3a:	3415      	adds	r4, #21
 8011b3c:	42a5      	cmp	r5, r4
 8011b3e:	bf38      	it	cc
 8011b40:	2304      	movcc	r3, #4
 8011b42:	4419      	add	r1, r3
 8011b44:	4473      	add	r3, lr
 8011b46:	469e      	mov	lr, r3
 8011b48:	460d      	mov	r5, r1
 8011b4a:	4565      	cmp	r5, ip
 8011b4c:	d30e      	bcc.n	8011b6c <__mdiff+0xe8>
 8011b4e:	f10c 0203 	add.w	r2, ip, #3
 8011b52:	1a52      	subs	r2, r2, r1
 8011b54:	f022 0203 	bic.w	r2, r2, #3
 8011b58:	3903      	subs	r1, #3
 8011b5a:	458c      	cmp	ip, r1
 8011b5c:	bf38      	it	cc
 8011b5e:	2200      	movcc	r2, #0
 8011b60:	441a      	add	r2, r3
 8011b62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011b66:	b17b      	cbz	r3, 8011b88 <__mdiff+0x104>
 8011b68:	6106      	str	r6, [r0, #16]
 8011b6a:	e7a5      	b.n	8011ab8 <__mdiff+0x34>
 8011b6c:	f855 8b04 	ldr.w	r8, [r5], #4
 8011b70:	fa17 f488 	uxtah	r4, r7, r8
 8011b74:	1422      	asrs	r2, r4, #16
 8011b76:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011b7a:	b2a4      	uxth	r4, r4
 8011b7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011b80:	f84e 4b04 	str.w	r4, [lr], #4
 8011b84:	1417      	asrs	r7, r2, #16
 8011b86:	e7e0      	b.n	8011b4a <__mdiff+0xc6>
 8011b88:	3e01      	subs	r6, #1
 8011b8a:	e7ea      	b.n	8011b62 <__mdiff+0xde>
 8011b8c:	0807b39f 	.word	0x0807b39f
 8011b90:	0807b3b0 	.word	0x0807b3b0

08011b94 <__d2b>:
 8011b94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011b98:	4689      	mov	r9, r1
 8011b9a:	2101      	movs	r1, #1
 8011b9c:	ec57 6b10 	vmov	r6, r7, d0
 8011ba0:	4690      	mov	r8, r2
 8011ba2:	f7ff fcd5 	bl	8011550 <_Balloc>
 8011ba6:	4604      	mov	r4, r0
 8011ba8:	b930      	cbnz	r0, 8011bb8 <__d2b+0x24>
 8011baa:	4602      	mov	r2, r0
 8011bac:	4b25      	ldr	r3, [pc, #148]	; (8011c44 <__d2b+0xb0>)
 8011bae:	4826      	ldr	r0, [pc, #152]	; (8011c48 <__d2b+0xb4>)
 8011bb0:	f240 310a 	movw	r1, #778	; 0x30a
 8011bb4:	f000 f9c4 	bl	8011f40 <__assert_func>
 8011bb8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011bbc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011bc0:	bb35      	cbnz	r5, 8011c10 <__d2b+0x7c>
 8011bc2:	2e00      	cmp	r6, #0
 8011bc4:	9301      	str	r3, [sp, #4]
 8011bc6:	d028      	beq.n	8011c1a <__d2b+0x86>
 8011bc8:	4668      	mov	r0, sp
 8011bca:	9600      	str	r6, [sp, #0]
 8011bcc:	f7ff fd8c 	bl	80116e8 <__lo0bits>
 8011bd0:	9900      	ldr	r1, [sp, #0]
 8011bd2:	b300      	cbz	r0, 8011c16 <__d2b+0x82>
 8011bd4:	9a01      	ldr	r2, [sp, #4]
 8011bd6:	f1c0 0320 	rsb	r3, r0, #32
 8011bda:	fa02 f303 	lsl.w	r3, r2, r3
 8011bde:	430b      	orrs	r3, r1
 8011be0:	40c2      	lsrs	r2, r0
 8011be2:	6163      	str	r3, [r4, #20]
 8011be4:	9201      	str	r2, [sp, #4]
 8011be6:	9b01      	ldr	r3, [sp, #4]
 8011be8:	61a3      	str	r3, [r4, #24]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	bf14      	ite	ne
 8011bee:	2202      	movne	r2, #2
 8011bf0:	2201      	moveq	r2, #1
 8011bf2:	6122      	str	r2, [r4, #16]
 8011bf4:	b1d5      	cbz	r5, 8011c2c <__d2b+0x98>
 8011bf6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011bfa:	4405      	add	r5, r0
 8011bfc:	f8c9 5000 	str.w	r5, [r9]
 8011c00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011c04:	f8c8 0000 	str.w	r0, [r8]
 8011c08:	4620      	mov	r0, r4
 8011c0a:	b003      	add	sp, #12
 8011c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011c14:	e7d5      	b.n	8011bc2 <__d2b+0x2e>
 8011c16:	6161      	str	r1, [r4, #20]
 8011c18:	e7e5      	b.n	8011be6 <__d2b+0x52>
 8011c1a:	a801      	add	r0, sp, #4
 8011c1c:	f7ff fd64 	bl	80116e8 <__lo0bits>
 8011c20:	9b01      	ldr	r3, [sp, #4]
 8011c22:	6163      	str	r3, [r4, #20]
 8011c24:	2201      	movs	r2, #1
 8011c26:	6122      	str	r2, [r4, #16]
 8011c28:	3020      	adds	r0, #32
 8011c2a:	e7e3      	b.n	8011bf4 <__d2b+0x60>
 8011c2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011c30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011c34:	f8c9 0000 	str.w	r0, [r9]
 8011c38:	6918      	ldr	r0, [r3, #16]
 8011c3a:	f7ff fd35 	bl	80116a8 <__hi0bits>
 8011c3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011c42:	e7df      	b.n	8011c04 <__d2b+0x70>
 8011c44:	0807b39f 	.word	0x0807b39f
 8011c48:	0807b3b0 	.word	0x0807b3b0

08011c4c <_calloc_r>:
 8011c4c:	b513      	push	{r0, r1, r4, lr}
 8011c4e:	434a      	muls	r2, r1
 8011c50:	4611      	mov	r1, r2
 8011c52:	9201      	str	r2, [sp, #4]
 8011c54:	f7fd fe32 	bl	800f8bc <_malloc_r>
 8011c58:	4604      	mov	r4, r0
 8011c5a:	b118      	cbz	r0, 8011c64 <_calloc_r+0x18>
 8011c5c:	9a01      	ldr	r2, [sp, #4]
 8011c5e:	2100      	movs	r1, #0
 8011c60:	f7fd fdd4 	bl	800f80c <memset>
 8011c64:	4620      	mov	r0, r4
 8011c66:	b002      	add	sp, #8
 8011c68:	bd10      	pop	{r4, pc}

08011c6a <__sfputc_r>:
 8011c6a:	6893      	ldr	r3, [r2, #8]
 8011c6c:	3b01      	subs	r3, #1
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	b410      	push	{r4}
 8011c72:	6093      	str	r3, [r2, #8]
 8011c74:	da08      	bge.n	8011c88 <__sfputc_r+0x1e>
 8011c76:	6994      	ldr	r4, [r2, #24]
 8011c78:	42a3      	cmp	r3, r4
 8011c7a:	db01      	blt.n	8011c80 <__sfputc_r+0x16>
 8011c7c:	290a      	cmp	r1, #10
 8011c7e:	d103      	bne.n	8011c88 <__sfputc_r+0x1e>
 8011c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c84:	f7fe bbc0 	b.w	8010408 <__swbuf_r>
 8011c88:	6813      	ldr	r3, [r2, #0]
 8011c8a:	1c58      	adds	r0, r3, #1
 8011c8c:	6010      	str	r0, [r2, #0]
 8011c8e:	7019      	strb	r1, [r3, #0]
 8011c90:	4608      	mov	r0, r1
 8011c92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c96:	4770      	bx	lr

08011c98 <__sfputs_r>:
 8011c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c9a:	4606      	mov	r6, r0
 8011c9c:	460f      	mov	r7, r1
 8011c9e:	4614      	mov	r4, r2
 8011ca0:	18d5      	adds	r5, r2, r3
 8011ca2:	42ac      	cmp	r4, r5
 8011ca4:	d101      	bne.n	8011caa <__sfputs_r+0x12>
 8011ca6:	2000      	movs	r0, #0
 8011ca8:	e007      	b.n	8011cba <__sfputs_r+0x22>
 8011caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cae:	463a      	mov	r2, r7
 8011cb0:	4630      	mov	r0, r6
 8011cb2:	f7ff ffda 	bl	8011c6a <__sfputc_r>
 8011cb6:	1c43      	adds	r3, r0, #1
 8011cb8:	d1f3      	bne.n	8011ca2 <__sfputs_r+0xa>
 8011cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011cbc <_vfiprintf_r>:
 8011cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cc0:	460d      	mov	r5, r1
 8011cc2:	b09d      	sub	sp, #116	; 0x74
 8011cc4:	4614      	mov	r4, r2
 8011cc6:	4698      	mov	r8, r3
 8011cc8:	4606      	mov	r6, r0
 8011cca:	b118      	cbz	r0, 8011cd4 <_vfiprintf_r+0x18>
 8011ccc:	6983      	ldr	r3, [r0, #24]
 8011cce:	b90b      	cbnz	r3, 8011cd4 <_vfiprintf_r+0x18>
 8011cd0:	f7fd fcb8 	bl	800f644 <__sinit>
 8011cd4:	4b89      	ldr	r3, [pc, #548]	; (8011efc <_vfiprintf_r+0x240>)
 8011cd6:	429d      	cmp	r5, r3
 8011cd8:	d11b      	bne.n	8011d12 <_vfiprintf_r+0x56>
 8011cda:	6875      	ldr	r5, [r6, #4]
 8011cdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011cde:	07d9      	lsls	r1, r3, #31
 8011ce0:	d405      	bmi.n	8011cee <_vfiprintf_r+0x32>
 8011ce2:	89ab      	ldrh	r3, [r5, #12]
 8011ce4:	059a      	lsls	r2, r3, #22
 8011ce6:	d402      	bmi.n	8011cee <_vfiprintf_r+0x32>
 8011ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011cea:	f7fd fd6e 	bl	800f7ca <__retarget_lock_acquire_recursive>
 8011cee:	89ab      	ldrh	r3, [r5, #12]
 8011cf0:	071b      	lsls	r3, r3, #28
 8011cf2:	d501      	bpl.n	8011cf8 <_vfiprintf_r+0x3c>
 8011cf4:	692b      	ldr	r3, [r5, #16]
 8011cf6:	b9eb      	cbnz	r3, 8011d34 <_vfiprintf_r+0x78>
 8011cf8:	4629      	mov	r1, r5
 8011cfa:	4630      	mov	r0, r6
 8011cfc:	f7fe fbe8 	bl	80104d0 <__swsetup_r>
 8011d00:	b1c0      	cbz	r0, 8011d34 <_vfiprintf_r+0x78>
 8011d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d04:	07dc      	lsls	r4, r3, #31
 8011d06:	d50e      	bpl.n	8011d26 <_vfiprintf_r+0x6a>
 8011d08:	f04f 30ff 	mov.w	r0, #4294967295
 8011d0c:	b01d      	add	sp, #116	; 0x74
 8011d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d12:	4b7b      	ldr	r3, [pc, #492]	; (8011f00 <_vfiprintf_r+0x244>)
 8011d14:	429d      	cmp	r5, r3
 8011d16:	d101      	bne.n	8011d1c <_vfiprintf_r+0x60>
 8011d18:	68b5      	ldr	r5, [r6, #8]
 8011d1a:	e7df      	b.n	8011cdc <_vfiprintf_r+0x20>
 8011d1c:	4b79      	ldr	r3, [pc, #484]	; (8011f04 <_vfiprintf_r+0x248>)
 8011d1e:	429d      	cmp	r5, r3
 8011d20:	bf08      	it	eq
 8011d22:	68f5      	ldreq	r5, [r6, #12]
 8011d24:	e7da      	b.n	8011cdc <_vfiprintf_r+0x20>
 8011d26:	89ab      	ldrh	r3, [r5, #12]
 8011d28:	0598      	lsls	r0, r3, #22
 8011d2a:	d4ed      	bmi.n	8011d08 <_vfiprintf_r+0x4c>
 8011d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d2e:	f7fd fd4d 	bl	800f7cc <__retarget_lock_release_recursive>
 8011d32:	e7e9      	b.n	8011d08 <_vfiprintf_r+0x4c>
 8011d34:	2300      	movs	r3, #0
 8011d36:	9309      	str	r3, [sp, #36]	; 0x24
 8011d38:	2320      	movs	r3, #32
 8011d3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d42:	2330      	movs	r3, #48	; 0x30
 8011d44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011f08 <_vfiprintf_r+0x24c>
 8011d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d4c:	f04f 0901 	mov.w	r9, #1
 8011d50:	4623      	mov	r3, r4
 8011d52:	469a      	mov	sl, r3
 8011d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d58:	b10a      	cbz	r2, 8011d5e <_vfiprintf_r+0xa2>
 8011d5a:	2a25      	cmp	r2, #37	; 0x25
 8011d5c:	d1f9      	bne.n	8011d52 <_vfiprintf_r+0x96>
 8011d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8011d62:	d00b      	beq.n	8011d7c <_vfiprintf_r+0xc0>
 8011d64:	465b      	mov	r3, fp
 8011d66:	4622      	mov	r2, r4
 8011d68:	4629      	mov	r1, r5
 8011d6a:	4630      	mov	r0, r6
 8011d6c:	f7ff ff94 	bl	8011c98 <__sfputs_r>
 8011d70:	3001      	adds	r0, #1
 8011d72:	f000 80aa 	beq.w	8011eca <_vfiprintf_r+0x20e>
 8011d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d78:	445a      	add	r2, fp
 8011d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8011d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	f000 80a2 	beq.w	8011eca <_vfiprintf_r+0x20e>
 8011d86:	2300      	movs	r3, #0
 8011d88:	f04f 32ff 	mov.w	r2, #4294967295
 8011d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d90:	f10a 0a01 	add.w	sl, sl, #1
 8011d94:	9304      	str	r3, [sp, #16]
 8011d96:	9307      	str	r3, [sp, #28]
 8011d98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011d9c:	931a      	str	r3, [sp, #104]	; 0x68
 8011d9e:	4654      	mov	r4, sl
 8011da0:	2205      	movs	r2, #5
 8011da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011da6:	4858      	ldr	r0, [pc, #352]	; (8011f08 <_vfiprintf_r+0x24c>)
 8011da8:	f7ee fa1a 	bl	80001e0 <memchr>
 8011dac:	9a04      	ldr	r2, [sp, #16]
 8011dae:	b9d8      	cbnz	r0, 8011de8 <_vfiprintf_r+0x12c>
 8011db0:	06d1      	lsls	r1, r2, #27
 8011db2:	bf44      	itt	mi
 8011db4:	2320      	movmi	r3, #32
 8011db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011dba:	0713      	lsls	r3, r2, #28
 8011dbc:	bf44      	itt	mi
 8011dbe:	232b      	movmi	r3, #43	; 0x2b
 8011dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8011dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8011dca:	d015      	beq.n	8011df8 <_vfiprintf_r+0x13c>
 8011dcc:	9a07      	ldr	r2, [sp, #28]
 8011dce:	4654      	mov	r4, sl
 8011dd0:	2000      	movs	r0, #0
 8011dd2:	f04f 0c0a 	mov.w	ip, #10
 8011dd6:	4621      	mov	r1, r4
 8011dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ddc:	3b30      	subs	r3, #48	; 0x30
 8011dde:	2b09      	cmp	r3, #9
 8011de0:	d94e      	bls.n	8011e80 <_vfiprintf_r+0x1c4>
 8011de2:	b1b0      	cbz	r0, 8011e12 <_vfiprintf_r+0x156>
 8011de4:	9207      	str	r2, [sp, #28]
 8011de6:	e014      	b.n	8011e12 <_vfiprintf_r+0x156>
 8011de8:	eba0 0308 	sub.w	r3, r0, r8
 8011dec:	fa09 f303 	lsl.w	r3, r9, r3
 8011df0:	4313      	orrs	r3, r2
 8011df2:	9304      	str	r3, [sp, #16]
 8011df4:	46a2      	mov	sl, r4
 8011df6:	e7d2      	b.n	8011d9e <_vfiprintf_r+0xe2>
 8011df8:	9b03      	ldr	r3, [sp, #12]
 8011dfa:	1d19      	adds	r1, r3, #4
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	9103      	str	r1, [sp, #12]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	bfbb      	ittet	lt
 8011e04:	425b      	neglt	r3, r3
 8011e06:	f042 0202 	orrlt.w	r2, r2, #2
 8011e0a:	9307      	strge	r3, [sp, #28]
 8011e0c:	9307      	strlt	r3, [sp, #28]
 8011e0e:	bfb8      	it	lt
 8011e10:	9204      	strlt	r2, [sp, #16]
 8011e12:	7823      	ldrb	r3, [r4, #0]
 8011e14:	2b2e      	cmp	r3, #46	; 0x2e
 8011e16:	d10c      	bne.n	8011e32 <_vfiprintf_r+0x176>
 8011e18:	7863      	ldrb	r3, [r4, #1]
 8011e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8011e1c:	d135      	bne.n	8011e8a <_vfiprintf_r+0x1ce>
 8011e1e:	9b03      	ldr	r3, [sp, #12]
 8011e20:	1d1a      	adds	r2, r3, #4
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	9203      	str	r2, [sp, #12]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	bfb8      	it	lt
 8011e2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e2e:	3402      	adds	r4, #2
 8011e30:	9305      	str	r3, [sp, #20]
 8011e32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011f18 <_vfiprintf_r+0x25c>
 8011e36:	7821      	ldrb	r1, [r4, #0]
 8011e38:	2203      	movs	r2, #3
 8011e3a:	4650      	mov	r0, sl
 8011e3c:	f7ee f9d0 	bl	80001e0 <memchr>
 8011e40:	b140      	cbz	r0, 8011e54 <_vfiprintf_r+0x198>
 8011e42:	2340      	movs	r3, #64	; 0x40
 8011e44:	eba0 000a 	sub.w	r0, r0, sl
 8011e48:	fa03 f000 	lsl.w	r0, r3, r0
 8011e4c:	9b04      	ldr	r3, [sp, #16]
 8011e4e:	4303      	orrs	r3, r0
 8011e50:	3401      	adds	r4, #1
 8011e52:	9304      	str	r3, [sp, #16]
 8011e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e58:	482c      	ldr	r0, [pc, #176]	; (8011f0c <_vfiprintf_r+0x250>)
 8011e5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e5e:	2206      	movs	r2, #6
 8011e60:	f7ee f9be 	bl	80001e0 <memchr>
 8011e64:	2800      	cmp	r0, #0
 8011e66:	d03f      	beq.n	8011ee8 <_vfiprintf_r+0x22c>
 8011e68:	4b29      	ldr	r3, [pc, #164]	; (8011f10 <_vfiprintf_r+0x254>)
 8011e6a:	bb1b      	cbnz	r3, 8011eb4 <_vfiprintf_r+0x1f8>
 8011e6c:	9b03      	ldr	r3, [sp, #12]
 8011e6e:	3307      	adds	r3, #7
 8011e70:	f023 0307 	bic.w	r3, r3, #7
 8011e74:	3308      	adds	r3, #8
 8011e76:	9303      	str	r3, [sp, #12]
 8011e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e7a:	443b      	add	r3, r7
 8011e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8011e7e:	e767      	b.n	8011d50 <_vfiprintf_r+0x94>
 8011e80:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e84:	460c      	mov	r4, r1
 8011e86:	2001      	movs	r0, #1
 8011e88:	e7a5      	b.n	8011dd6 <_vfiprintf_r+0x11a>
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	3401      	adds	r4, #1
 8011e8e:	9305      	str	r3, [sp, #20]
 8011e90:	4619      	mov	r1, r3
 8011e92:	f04f 0c0a 	mov.w	ip, #10
 8011e96:	4620      	mov	r0, r4
 8011e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e9c:	3a30      	subs	r2, #48	; 0x30
 8011e9e:	2a09      	cmp	r2, #9
 8011ea0:	d903      	bls.n	8011eaa <_vfiprintf_r+0x1ee>
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d0c5      	beq.n	8011e32 <_vfiprintf_r+0x176>
 8011ea6:	9105      	str	r1, [sp, #20]
 8011ea8:	e7c3      	b.n	8011e32 <_vfiprintf_r+0x176>
 8011eaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8011eae:	4604      	mov	r4, r0
 8011eb0:	2301      	movs	r3, #1
 8011eb2:	e7f0      	b.n	8011e96 <_vfiprintf_r+0x1da>
 8011eb4:	ab03      	add	r3, sp, #12
 8011eb6:	9300      	str	r3, [sp, #0]
 8011eb8:	462a      	mov	r2, r5
 8011eba:	4b16      	ldr	r3, [pc, #88]	; (8011f14 <_vfiprintf_r+0x258>)
 8011ebc:	a904      	add	r1, sp, #16
 8011ebe:	4630      	mov	r0, r6
 8011ec0:	f7fd fdf6 	bl	800fab0 <_printf_float>
 8011ec4:	4607      	mov	r7, r0
 8011ec6:	1c78      	adds	r0, r7, #1
 8011ec8:	d1d6      	bne.n	8011e78 <_vfiprintf_r+0x1bc>
 8011eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ecc:	07d9      	lsls	r1, r3, #31
 8011ece:	d405      	bmi.n	8011edc <_vfiprintf_r+0x220>
 8011ed0:	89ab      	ldrh	r3, [r5, #12]
 8011ed2:	059a      	lsls	r2, r3, #22
 8011ed4:	d402      	bmi.n	8011edc <_vfiprintf_r+0x220>
 8011ed6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ed8:	f7fd fc78 	bl	800f7cc <__retarget_lock_release_recursive>
 8011edc:	89ab      	ldrh	r3, [r5, #12]
 8011ede:	065b      	lsls	r3, r3, #25
 8011ee0:	f53f af12 	bmi.w	8011d08 <_vfiprintf_r+0x4c>
 8011ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ee6:	e711      	b.n	8011d0c <_vfiprintf_r+0x50>
 8011ee8:	ab03      	add	r3, sp, #12
 8011eea:	9300      	str	r3, [sp, #0]
 8011eec:	462a      	mov	r2, r5
 8011eee:	4b09      	ldr	r3, [pc, #36]	; (8011f14 <_vfiprintf_r+0x258>)
 8011ef0:	a904      	add	r1, sp, #16
 8011ef2:	4630      	mov	r0, r6
 8011ef4:	f7fe f880 	bl	800fff8 <_printf_i>
 8011ef8:	e7e4      	b.n	8011ec4 <_vfiprintf_r+0x208>
 8011efa:	bf00      	nop
 8011efc:	0807b2a4 	.word	0x0807b2a4
 8011f00:	0807b2c4 	.word	0x0807b2c4
 8011f04:	0807b284 	.word	0x0807b284
 8011f08:	0807b50c 	.word	0x0807b50c
 8011f0c:	0807b516 	.word	0x0807b516
 8011f10:	0800fab1 	.word	0x0800fab1
 8011f14:	08011c99 	.word	0x08011c99
 8011f18:	0807b512 	.word	0x0807b512

08011f1c <_read_r>:
 8011f1c:	b538      	push	{r3, r4, r5, lr}
 8011f1e:	4d07      	ldr	r5, [pc, #28]	; (8011f3c <_read_r+0x20>)
 8011f20:	4604      	mov	r4, r0
 8011f22:	4608      	mov	r0, r1
 8011f24:	4611      	mov	r1, r2
 8011f26:	2200      	movs	r2, #0
 8011f28:	602a      	str	r2, [r5, #0]
 8011f2a:	461a      	mov	r2, r3
 8011f2c:	f7fb ffb2 	bl	800de94 <_read>
 8011f30:	1c43      	adds	r3, r0, #1
 8011f32:	d102      	bne.n	8011f3a <_read_r+0x1e>
 8011f34:	682b      	ldr	r3, [r5, #0]
 8011f36:	b103      	cbz	r3, 8011f3a <_read_r+0x1e>
 8011f38:	6023      	str	r3, [r4, #0]
 8011f3a:	bd38      	pop	{r3, r4, r5, pc}
 8011f3c:	2001a69c 	.word	0x2001a69c

08011f40 <__assert_func>:
 8011f40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f42:	4614      	mov	r4, r2
 8011f44:	461a      	mov	r2, r3
 8011f46:	4b09      	ldr	r3, [pc, #36]	; (8011f6c <__assert_func+0x2c>)
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	4605      	mov	r5, r0
 8011f4c:	68d8      	ldr	r0, [r3, #12]
 8011f4e:	b14c      	cbz	r4, 8011f64 <__assert_func+0x24>
 8011f50:	4b07      	ldr	r3, [pc, #28]	; (8011f70 <__assert_func+0x30>)
 8011f52:	9100      	str	r1, [sp, #0]
 8011f54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011f58:	4906      	ldr	r1, [pc, #24]	; (8011f74 <__assert_func+0x34>)
 8011f5a:	462b      	mov	r3, r5
 8011f5c:	f000 f80e 	bl	8011f7c <fiprintf>
 8011f60:	f000 f85f 	bl	8012022 <abort>
 8011f64:	4b04      	ldr	r3, [pc, #16]	; (8011f78 <__assert_func+0x38>)
 8011f66:	461c      	mov	r4, r3
 8011f68:	e7f3      	b.n	8011f52 <__assert_func+0x12>
 8011f6a:	bf00      	nop
 8011f6c:	20001004 	.word	0x20001004
 8011f70:	0807b51d 	.word	0x0807b51d
 8011f74:	0807b52a 	.word	0x0807b52a
 8011f78:	0807b558 	.word	0x0807b558

08011f7c <fiprintf>:
 8011f7c:	b40e      	push	{r1, r2, r3}
 8011f7e:	b503      	push	{r0, r1, lr}
 8011f80:	4601      	mov	r1, r0
 8011f82:	ab03      	add	r3, sp, #12
 8011f84:	4805      	ldr	r0, [pc, #20]	; (8011f9c <fiprintf+0x20>)
 8011f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f8a:	6800      	ldr	r0, [r0, #0]
 8011f8c:	9301      	str	r3, [sp, #4]
 8011f8e:	f7ff fe95 	bl	8011cbc <_vfiprintf_r>
 8011f92:	b002      	add	sp, #8
 8011f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f98:	b003      	add	sp, #12
 8011f9a:	4770      	bx	lr
 8011f9c:	20001004 	.word	0x20001004

08011fa0 <_fstat_r>:
 8011fa0:	b538      	push	{r3, r4, r5, lr}
 8011fa2:	4d07      	ldr	r5, [pc, #28]	; (8011fc0 <_fstat_r+0x20>)
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	4604      	mov	r4, r0
 8011fa8:	4608      	mov	r0, r1
 8011faa:	4611      	mov	r1, r2
 8011fac:	602b      	str	r3, [r5, #0]
 8011fae:	f7fc f856 	bl	800e05e <_fstat>
 8011fb2:	1c43      	adds	r3, r0, #1
 8011fb4:	d102      	bne.n	8011fbc <_fstat_r+0x1c>
 8011fb6:	682b      	ldr	r3, [r5, #0]
 8011fb8:	b103      	cbz	r3, 8011fbc <_fstat_r+0x1c>
 8011fba:	6023      	str	r3, [r4, #0]
 8011fbc:	bd38      	pop	{r3, r4, r5, pc}
 8011fbe:	bf00      	nop
 8011fc0:	2001a69c 	.word	0x2001a69c

08011fc4 <_isatty_r>:
 8011fc4:	b538      	push	{r3, r4, r5, lr}
 8011fc6:	4d06      	ldr	r5, [pc, #24]	; (8011fe0 <_isatty_r+0x1c>)
 8011fc8:	2300      	movs	r3, #0
 8011fca:	4604      	mov	r4, r0
 8011fcc:	4608      	mov	r0, r1
 8011fce:	602b      	str	r3, [r5, #0]
 8011fd0:	f7fc f9aa 	bl	800e328 <_isatty>
 8011fd4:	1c43      	adds	r3, r0, #1
 8011fd6:	d102      	bne.n	8011fde <_isatty_r+0x1a>
 8011fd8:	682b      	ldr	r3, [r5, #0]
 8011fda:	b103      	cbz	r3, 8011fde <_isatty_r+0x1a>
 8011fdc:	6023      	str	r3, [r4, #0]
 8011fde:	bd38      	pop	{r3, r4, r5, pc}
 8011fe0:	2001a69c 	.word	0x2001a69c

08011fe4 <__ascii_mbtowc>:
 8011fe4:	b082      	sub	sp, #8
 8011fe6:	b901      	cbnz	r1, 8011fea <__ascii_mbtowc+0x6>
 8011fe8:	a901      	add	r1, sp, #4
 8011fea:	b142      	cbz	r2, 8011ffe <__ascii_mbtowc+0x1a>
 8011fec:	b14b      	cbz	r3, 8012002 <__ascii_mbtowc+0x1e>
 8011fee:	7813      	ldrb	r3, [r2, #0]
 8011ff0:	600b      	str	r3, [r1, #0]
 8011ff2:	7812      	ldrb	r2, [r2, #0]
 8011ff4:	1e10      	subs	r0, r2, #0
 8011ff6:	bf18      	it	ne
 8011ff8:	2001      	movne	r0, #1
 8011ffa:	b002      	add	sp, #8
 8011ffc:	4770      	bx	lr
 8011ffe:	4610      	mov	r0, r2
 8012000:	e7fb      	b.n	8011ffa <__ascii_mbtowc+0x16>
 8012002:	f06f 0001 	mvn.w	r0, #1
 8012006:	e7f8      	b.n	8011ffa <__ascii_mbtowc+0x16>

08012008 <__ascii_wctomb>:
 8012008:	b149      	cbz	r1, 801201e <__ascii_wctomb+0x16>
 801200a:	2aff      	cmp	r2, #255	; 0xff
 801200c:	bf85      	ittet	hi
 801200e:	238a      	movhi	r3, #138	; 0x8a
 8012010:	6003      	strhi	r3, [r0, #0]
 8012012:	700a      	strbls	r2, [r1, #0]
 8012014:	f04f 30ff 	movhi.w	r0, #4294967295
 8012018:	bf98      	it	ls
 801201a:	2001      	movls	r0, #1
 801201c:	4770      	bx	lr
 801201e:	4608      	mov	r0, r1
 8012020:	4770      	bx	lr

08012022 <abort>:
 8012022:	b508      	push	{r3, lr}
 8012024:	2006      	movs	r0, #6
 8012026:	f000 f82b 	bl	8012080 <raise>
 801202a:	2001      	movs	r0, #1
 801202c:	f001 fb82 	bl	8013734 <_exit>

08012030 <_raise_r>:
 8012030:	291f      	cmp	r1, #31
 8012032:	b538      	push	{r3, r4, r5, lr}
 8012034:	4604      	mov	r4, r0
 8012036:	460d      	mov	r5, r1
 8012038:	d904      	bls.n	8012044 <_raise_r+0x14>
 801203a:	2316      	movs	r3, #22
 801203c:	6003      	str	r3, [r0, #0]
 801203e:	f04f 30ff 	mov.w	r0, #4294967295
 8012042:	bd38      	pop	{r3, r4, r5, pc}
 8012044:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012046:	b112      	cbz	r2, 801204e <_raise_r+0x1e>
 8012048:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801204c:	b94b      	cbnz	r3, 8012062 <_raise_r+0x32>
 801204e:	4620      	mov	r0, r4
 8012050:	f000 f830 	bl	80120b4 <_getpid_r>
 8012054:	462a      	mov	r2, r5
 8012056:	4601      	mov	r1, r0
 8012058:	4620      	mov	r0, r4
 801205a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801205e:	f000 b817 	b.w	8012090 <_kill_r>
 8012062:	2b01      	cmp	r3, #1
 8012064:	d00a      	beq.n	801207c <_raise_r+0x4c>
 8012066:	1c59      	adds	r1, r3, #1
 8012068:	d103      	bne.n	8012072 <_raise_r+0x42>
 801206a:	2316      	movs	r3, #22
 801206c:	6003      	str	r3, [r0, #0]
 801206e:	2001      	movs	r0, #1
 8012070:	e7e7      	b.n	8012042 <_raise_r+0x12>
 8012072:	2400      	movs	r4, #0
 8012074:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012078:	4628      	mov	r0, r5
 801207a:	4798      	blx	r3
 801207c:	2000      	movs	r0, #0
 801207e:	e7e0      	b.n	8012042 <_raise_r+0x12>

08012080 <raise>:
 8012080:	4b02      	ldr	r3, [pc, #8]	; (801208c <raise+0xc>)
 8012082:	4601      	mov	r1, r0
 8012084:	6818      	ldr	r0, [r3, #0]
 8012086:	f7ff bfd3 	b.w	8012030 <_raise_r>
 801208a:	bf00      	nop
 801208c:	20001004 	.word	0x20001004

08012090 <_kill_r>:
 8012090:	b538      	push	{r3, r4, r5, lr}
 8012092:	4d07      	ldr	r5, [pc, #28]	; (80120b0 <_kill_r+0x20>)
 8012094:	2300      	movs	r3, #0
 8012096:	4604      	mov	r4, r0
 8012098:	4608      	mov	r0, r1
 801209a:	4611      	mov	r1, r2
 801209c:	602b      	str	r3, [r5, #0]
 801209e:	f001 fb41 	bl	8013724 <_kill>
 80120a2:	1c43      	adds	r3, r0, #1
 80120a4:	d102      	bne.n	80120ac <_kill_r+0x1c>
 80120a6:	682b      	ldr	r3, [r5, #0]
 80120a8:	b103      	cbz	r3, 80120ac <_kill_r+0x1c>
 80120aa:	6023      	str	r3, [r4, #0]
 80120ac:	bd38      	pop	{r3, r4, r5, pc}
 80120ae:	bf00      	nop
 80120b0:	2001a69c 	.word	0x2001a69c

080120b4 <_getpid_r>:
 80120b4:	f7fb bfb0 	b.w	800e018 <_getpid>

080120b8 <cos>:
 80120b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80120ba:	ec53 2b10 	vmov	r2, r3, d0
 80120be:	4824      	ldr	r0, [pc, #144]	; (8012150 <cos+0x98>)
 80120c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80120c4:	4281      	cmp	r1, r0
 80120c6:	dc06      	bgt.n	80120d6 <cos+0x1e>
 80120c8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8012148 <cos+0x90>
 80120cc:	f000 fd40 	bl	8012b50 <__kernel_cos>
 80120d0:	ec51 0b10 	vmov	r0, r1, d0
 80120d4:	e007      	b.n	80120e6 <cos+0x2e>
 80120d6:	481f      	ldr	r0, [pc, #124]	; (8012154 <cos+0x9c>)
 80120d8:	4281      	cmp	r1, r0
 80120da:	dd09      	ble.n	80120f0 <cos+0x38>
 80120dc:	ee10 0a10 	vmov	r0, s0
 80120e0:	4619      	mov	r1, r3
 80120e2:	f7ee f8d1 	bl	8000288 <__aeabi_dsub>
 80120e6:	ec41 0b10 	vmov	d0, r0, r1
 80120ea:	b005      	add	sp, #20
 80120ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80120f0:	4668      	mov	r0, sp
 80120f2:	f000 f901 	bl	80122f8 <__ieee754_rem_pio2>
 80120f6:	f000 0003 	and.w	r0, r0, #3
 80120fa:	2801      	cmp	r0, #1
 80120fc:	d007      	beq.n	801210e <cos+0x56>
 80120fe:	2802      	cmp	r0, #2
 8012100:	d012      	beq.n	8012128 <cos+0x70>
 8012102:	b9c0      	cbnz	r0, 8012136 <cos+0x7e>
 8012104:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012108:	ed9d 0b00 	vldr	d0, [sp]
 801210c:	e7de      	b.n	80120cc <cos+0x14>
 801210e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012112:	ed9d 0b00 	vldr	d0, [sp]
 8012116:	f001 f923 	bl	8013360 <__kernel_sin>
 801211a:	ec53 2b10 	vmov	r2, r3, d0
 801211e:	ee10 0a10 	vmov	r0, s0
 8012122:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012126:	e7de      	b.n	80120e6 <cos+0x2e>
 8012128:	ed9d 1b02 	vldr	d1, [sp, #8]
 801212c:	ed9d 0b00 	vldr	d0, [sp]
 8012130:	f000 fd0e 	bl	8012b50 <__kernel_cos>
 8012134:	e7f1      	b.n	801211a <cos+0x62>
 8012136:	ed9d 1b02 	vldr	d1, [sp, #8]
 801213a:	ed9d 0b00 	vldr	d0, [sp]
 801213e:	2001      	movs	r0, #1
 8012140:	f001 f90e 	bl	8013360 <__kernel_sin>
 8012144:	e7c4      	b.n	80120d0 <cos+0x18>
 8012146:	bf00      	nop
	...
 8012150:	3fe921fb 	.word	0x3fe921fb
 8012154:	7fefffff 	.word	0x7fefffff

08012158 <expf>:
 8012158:	b508      	push	{r3, lr}
 801215a:	ed2d 8b02 	vpush	{d8}
 801215e:	eef0 8a40 	vmov.f32	s17, s0
 8012162:	f000 fad3 	bl	801270c <__ieee754_expf>
 8012166:	4b16      	ldr	r3, [pc, #88]	; (80121c0 <expf+0x68>)
 8012168:	f993 3000 	ldrsb.w	r3, [r3]
 801216c:	3301      	adds	r3, #1
 801216e:	eeb0 8a40 	vmov.f32	s16, s0
 8012172:	d011      	beq.n	8012198 <expf+0x40>
 8012174:	eeb0 0a68 	vmov.f32	s0, s17
 8012178:	f001 fac0 	bl	80136fc <finitef>
 801217c:	b160      	cbz	r0, 8012198 <expf+0x40>
 801217e:	eddf 7a11 	vldr	s15, [pc, #68]	; 80121c4 <expf+0x6c>
 8012182:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801218a:	dd0a      	ble.n	80121a2 <expf+0x4a>
 801218c:	f7fd f9fc 	bl	800f588 <__errno>
 8012190:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 80121c8 <expf+0x70>
 8012194:	2322      	movs	r3, #34	; 0x22
 8012196:	6003      	str	r3, [r0, #0]
 8012198:	eeb0 0a48 	vmov.f32	s0, s16
 801219c:	ecbd 8b02 	vpop	{d8}
 80121a0:	bd08      	pop	{r3, pc}
 80121a2:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80121cc <expf+0x74>
 80121a6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80121aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121ae:	d5f3      	bpl.n	8012198 <expf+0x40>
 80121b0:	f7fd f9ea 	bl	800f588 <__errno>
 80121b4:	2322      	movs	r3, #34	; 0x22
 80121b6:	ed9f 8a06 	vldr	s16, [pc, #24]	; 80121d0 <expf+0x78>
 80121ba:	6003      	str	r3, [r0, #0]
 80121bc:	e7ec      	b.n	8012198 <expf+0x40>
 80121be:	bf00      	nop
 80121c0:	200011d4 	.word	0x200011d4
 80121c4:	42b17180 	.word	0x42b17180
 80121c8:	7f800000 	.word	0x7f800000
 80121cc:	c2cff1b5 	.word	0xc2cff1b5
 80121d0:	00000000 	.word	0x00000000

080121d4 <logf>:
 80121d4:	b508      	push	{r3, lr}
 80121d6:	ed2d 8b02 	vpush	{d8}
 80121da:	eeb0 8a40 	vmov.f32	s16, s0
 80121de:	f000 fb69 	bl	80128b4 <__ieee754_logf>
 80121e2:	4b14      	ldr	r3, [pc, #80]	; (8012234 <logf+0x60>)
 80121e4:	f993 3000 	ldrsb.w	r3, [r3]
 80121e8:	3301      	adds	r3, #1
 80121ea:	d014      	beq.n	8012216 <logf+0x42>
 80121ec:	eeb4 8a48 	vcmp.f32	s16, s16
 80121f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121f4:	d60f      	bvs.n	8012216 <logf+0x42>
 80121f6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80121fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121fe:	dc0a      	bgt.n	8012216 <logf+0x42>
 8012200:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012208:	d108      	bne.n	801221c <logf+0x48>
 801220a:	f7fd f9bd 	bl	800f588 <__errno>
 801220e:	2322      	movs	r3, #34	; 0x22
 8012210:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8012238 <logf+0x64>
 8012214:	6003      	str	r3, [r0, #0]
 8012216:	ecbd 8b02 	vpop	{d8}
 801221a:	bd08      	pop	{r3, pc}
 801221c:	f7fd f9b4 	bl	800f588 <__errno>
 8012220:	ecbd 8b02 	vpop	{d8}
 8012224:	2321      	movs	r3, #33	; 0x21
 8012226:	6003      	str	r3, [r0, #0]
 8012228:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801222c:	4803      	ldr	r0, [pc, #12]	; (801223c <logf+0x68>)
 801222e:	f001 ba73 	b.w	8013718 <nanf>
 8012232:	bf00      	nop
 8012234:	200011d4 	.word	0x200011d4
 8012238:	ff800000 	.word	0xff800000
 801223c:	0807b558 	.word	0x0807b558

08012240 <log10f>:
 8012240:	b508      	push	{r3, lr}
 8012242:	ed2d 8b02 	vpush	{d8}
 8012246:	eeb0 8a40 	vmov.f32	s16, s0
 801224a:	f000 fc23 	bl	8012a94 <__ieee754_log10f>
 801224e:	4b14      	ldr	r3, [pc, #80]	; (80122a0 <log10f+0x60>)
 8012250:	f993 3000 	ldrsb.w	r3, [r3]
 8012254:	3301      	adds	r3, #1
 8012256:	d014      	beq.n	8012282 <log10f+0x42>
 8012258:	eeb4 8a48 	vcmp.f32	s16, s16
 801225c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012260:	d60f      	bvs.n	8012282 <log10f+0x42>
 8012262:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801226a:	d80a      	bhi.n	8012282 <log10f+0x42>
 801226c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012274:	d108      	bne.n	8012288 <log10f+0x48>
 8012276:	f7fd f987 	bl	800f588 <__errno>
 801227a:	2322      	movs	r3, #34	; 0x22
 801227c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80122a4 <log10f+0x64>
 8012280:	6003      	str	r3, [r0, #0]
 8012282:	ecbd 8b02 	vpop	{d8}
 8012286:	bd08      	pop	{r3, pc}
 8012288:	f7fd f97e 	bl	800f588 <__errno>
 801228c:	ecbd 8b02 	vpop	{d8}
 8012290:	2321      	movs	r3, #33	; 0x21
 8012292:	6003      	str	r3, [r0, #0]
 8012294:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012298:	4803      	ldr	r0, [pc, #12]	; (80122a8 <log10f+0x68>)
 801229a:	f001 ba3d 	b.w	8013718 <nanf>
 801229e:	bf00      	nop
 80122a0:	200011d4 	.word	0x200011d4
 80122a4:	ff800000 	.word	0xff800000
 80122a8:	0807b558 	.word	0x0807b558

080122ac <sqrtf>:
 80122ac:	b508      	push	{r3, lr}
 80122ae:	ed2d 8b02 	vpush	{d8}
 80122b2:	eeb0 8a40 	vmov.f32	s16, s0
 80122b6:	f000 fc45 	bl	8012b44 <__ieee754_sqrtf>
 80122ba:	4b0d      	ldr	r3, [pc, #52]	; (80122f0 <sqrtf+0x44>)
 80122bc:	f993 3000 	ldrsb.w	r3, [r3]
 80122c0:	3301      	adds	r3, #1
 80122c2:	d011      	beq.n	80122e8 <sqrtf+0x3c>
 80122c4:	eeb4 8a48 	vcmp.f32	s16, s16
 80122c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122cc:	d60c      	bvs.n	80122e8 <sqrtf+0x3c>
 80122ce:	eddf 8a09 	vldr	s17, [pc, #36]	; 80122f4 <sqrtf+0x48>
 80122d2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80122d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122da:	d505      	bpl.n	80122e8 <sqrtf+0x3c>
 80122dc:	f7fd f954 	bl	800f588 <__errno>
 80122e0:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80122e4:	2321      	movs	r3, #33	; 0x21
 80122e6:	6003      	str	r3, [r0, #0]
 80122e8:	ecbd 8b02 	vpop	{d8}
 80122ec:	bd08      	pop	{r3, pc}
 80122ee:	bf00      	nop
 80122f0:	200011d4 	.word	0x200011d4
 80122f4:	00000000 	.word	0x00000000

080122f8 <__ieee754_rem_pio2>:
 80122f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122fc:	ed2d 8b02 	vpush	{d8}
 8012300:	ec55 4b10 	vmov	r4, r5, d0
 8012304:	4bca      	ldr	r3, [pc, #808]	; (8012630 <__ieee754_rem_pio2+0x338>)
 8012306:	b08b      	sub	sp, #44	; 0x2c
 8012308:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801230c:	4598      	cmp	r8, r3
 801230e:	4682      	mov	sl, r0
 8012310:	9502      	str	r5, [sp, #8]
 8012312:	dc08      	bgt.n	8012326 <__ieee754_rem_pio2+0x2e>
 8012314:	2200      	movs	r2, #0
 8012316:	2300      	movs	r3, #0
 8012318:	ed80 0b00 	vstr	d0, [r0]
 801231c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012320:	f04f 0b00 	mov.w	fp, #0
 8012324:	e028      	b.n	8012378 <__ieee754_rem_pio2+0x80>
 8012326:	4bc3      	ldr	r3, [pc, #780]	; (8012634 <__ieee754_rem_pio2+0x33c>)
 8012328:	4598      	cmp	r8, r3
 801232a:	dc78      	bgt.n	801241e <__ieee754_rem_pio2+0x126>
 801232c:	9b02      	ldr	r3, [sp, #8]
 801232e:	4ec2      	ldr	r6, [pc, #776]	; (8012638 <__ieee754_rem_pio2+0x340>)
 8012330:	2b00      	cmp	r3, #0
 8012332:	ee10 0a10 	vmov	r0, s0
 8012336:	a3b0      	add	r3, pc, #704	; (adr r3, 80125f8 <__ieee754_rem_pio2+0x300>)
 8012338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801233c:	4629      	mov	r1, r5
 801233e:	dd39      	ble.n	80123b4 <__ieee754_rem_pio2+0xbc>
 8012340:	f7ed ffa2 	bl	8000288 <__aeabi_dsub>
 8012344:	45b0      	cmp	r8, r6
 8012346:	4604      	mov	r4, r0
 8012348:	460d      	mov	r5, r1
 801234a:	d01b      	beq.n	8012384 <__ieee754_rem_pio2+0x8c>
 801234c:	a3ac      	add	r3, pc, #688	; (adr r3, 8012600 <__ieee754_rem_pio2+0x308>)
 801234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012352:	f7ed ff99 	bl	8000288 <__aeabi_dsub>
 8012356:	4602      	mov	r2, r0
 8012358:	460b      	mov	r3, r1
 801235a:	e9ca 2300 	strd	r2, r3, [sl]
 801235e:	4620      	mov	r0, r4
 8012360:	4629      	mov	r1, r5
 8012362:	f7ed ff91 	bl	8000288 <__aeabi_dsub>
 8012366:	a3a6      	add	r3, pc, #664	; (adr r3, 8012600 <__ieee754_rem_pio2+0x308>)
 8012368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801236c:	f7ed ff8c 	bl	8000288 <__aeabi_dsub>
 8012370:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012374:	f04f 0b01 	mov.w	fp, #1
 8012378:	4658      	mov	r0, fp
 801237a:	b00b      	add	sp, #44	; 0x2c
 801237c:	ecbd 8b02 	vpop	{d8}
 8012380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012384:	a3a0      	add	r3, pc, #640	; (adr r3, 8012608 <__ieee754_rem_pio2+0x310>)
 8012386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801238a:	f7ed ff7d 	bl	8000288 <__aeabi_dsub>
 801238e:	a3a0      	add	r3, pc, #640	; (adr r3, 8012610 <__ieee754_rem_pio2+0x318>)
 8012390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012394:	4604      	mov	r4, r0
 8012396:	460d      	mov	r5, r1
 8012398:	f7ed ff76 	bl	8000288 <__aeabi_dsub>
 801239c:	4602      	mov	r2, r0
 801239e:	460b      	mov	r3, r1
 80123a0:	e9ca 2300 	strd	r2, r3, [sl]
 80123a4:	4620      	mov	r0, r4
 80123a6:	4629      	mov	r1, r5
 80123a8:	f7ed ff6e 	bl	8000288 <__aeabi_dsub>
 80123ac:	a398      	add	r3, pc, #608	; (adr r3, 8012610 <__ieee754_rem_pio2+0x318>)
 80123ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b2:	e7db      	b.n	801236c <__ieee754_rem_pio2+0x74>
 80123b4:	f7ed ff6a 	bl	800028c <__adddf3>
 80123b8:	45b0      	cmp	r8, r6
 80123ba:	4604      	mov	r4, r0
 80123bc:	460d      	mov	r5, r1
 80123be:	d016      	beq.n	80123ee <__ieee754_rem_pio2+0xf6>
 80123c0:	a38f      	add	r3, pc, #572	; (adr r3, 8012600 <__ieee754_rem_pio2+0x308>)
 80123c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c6:	f7ed ff61 	bl	800028c <__adddf3>
 80123ca:	4602      	mov	r2, r0
 80123cc:	460b      	mov	r3, r1
 80123ce:	e9ca 2300 	strd	r2, r3, [sl]
 80123d2:	4620      	mov	r0, r4
 80123d4:	4629      	mov	r1, r5
 80123d6:	f7ed ff57 	bl	8000288 <__aeabi_dsub>
 80123da:	a389      	add	r3, pc, #548	; (adr r3, 8012600 <__ieee754_rem_pio2+0x308>)
 80123dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e0:	f7ed ff54 	bl	800028c <__adddf3>
 80123e4:	f04f 3bff 	mov.w	fp, #4294967295
 80123e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80123ec:	e7c4      	b.n	8012378 <__ieee754_rem_pio2+0x80>
 80123ee:	a386      	add	r3, pc, #536	; (adr r3, 8012608 <__ieee754_rem_pio2+0x310>)
 80123f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f4:	f7ed ff4a 	bl	800028c <__adddf3>
 80123f8:	a385      	add	r3, pc, #532	; (adr r3, 8012610 <__ieee754_rem_pio2+0x318>)
 80123fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123fe:	4604      	mov	r4, r0
 8012400:	460d      	mov	r5, r1
 8012402:	f7ed ff43 	bl	800028c <__adddf3>
 8012406:	4602      	mov	r2, r0
 8012408:	460b      	mov	r3, r1
 801240a:	e9ca 2300 	strd	r2, r3, [sl]
 801240e:	4620      	mov	r0, r4
 8012410:	4629      	mov	r1, r5
 8012412:	f7ed ff39 	bl	8000288 <__aeabi_dsub>
 8012416:	a37e      	add	r3, pc, #504	; (adr r3, 8012610 <__ieee754_rem_pio2+0x318>)
 8012418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801241c:	e7e0      	b.n	80123e0 <__ieee754_rem_pio2+0xe8>
 801241e:	4b87      	ldr	r3, [pc, #540]	; (801263c <__ieee754_rem_pio2+0x344>)
 8012420:	4598      	cmp	r8, r3
 8012422:	f300 80d9 	bgt.w	80125d8 <__ieee754_rem_pio2+0x2e0>
 8012426:	f001 f859 	bl	80134dc <fabs>
 801242a:	ec55 4b10 	vmov	r4, r5, d0
 801242e:	ee10 0a10 	vmov	r0, s0
 8012432:	a379      	add	r3, pc, #484	; (adr r3, 8012618 <__ieee754_rem_pio2+0x320>)
 8012434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012438:	4629      	mov	r1, r5
 801243a:	f7ee f8dd 	bl	80005f8 <__aeabi_dmul>
 801243e:	4b80      	ldr	r3, [pc, #512]	; (8012640 <__ieee754_rem_pio2+0x348>)
 8012440:	2200      	movs	r2, #0
 8012442:	f7ed ff23 	bl	800028c <__adddf3>
 8012446:	f7ee fb87 	bl	8000b58 <__aeabi_d2iz>
 801244a:	4683      	mov	fp, r0
 801244c:	f7ee f86a 	bl	8000524 <__aeabi_i2d>
 8012450:	4602      	mov	r2, r0
 8012452:	460b      	mov	r3, r1
 8012454:	ec43 2b18 	vmov	d8, r2, r3
 8012458:	a367      	add	r3, pc, #412	; (adr r3, 80125f8 <__ieee754_rem_pio2+0x300>)
 801245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801245e:	f7ee f8cb 	bl	80005f8 <__aeabi_dmul>
 8012462:	4602      	mov	r2, r0
 8012464:	460b      	mov	r3, r1
 8012466:	4620      	mov	r0, r4
 8012468:	4629      	mov	r1, r5
 801246a:	f7ed ff0d 	bl	8000288 <__aeabi_dsub>
 801246e:	a364      	add	r3, pc, #400	; (adr r3, 8012600 <__ieee754_rem_pio2+0x308>)
 8012470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012474:	4606      	mov	r6, r0
 8012476:	460f      	mov	r7, r1
 8012478:	ec51 0b18 	vmov	r0, r1, d8
 801247c:	f7ee f8bc 	bl	80005f8 <__aeabi_dmul>
 8012480:	f1bb 0f1f 	cmp.w	fp, #31
 8012484:	4604      	mov	r4, r0
 8012486:	460d      	mov	r5, r1
 8012488:	dc0d      	bgt.n	80124a6 <__ieee754_rem_pio2+0x1ae>
 801248a:	4b6e      	ldr	r3, [pc, #440]	; (8012644 <__ieee754_rem_pio2+0x34c>)
 801248c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012494:	4543      	cmp	r3, r8
 8012496:	d006      	beq.n	80124a6 <__ieee754_rem_pio2+0x1ae>
 8012498:	4622      	mov	r2, r4
 801249a:	462b      	mov	r3, r5
 801249c:	4630      	mov	r0, r6
 801249e:	4639      	mov	r1, r7
 80124a0:	f7ed fef2 	bl	8000288 <__aeabi_dsub>
 80124a4:	e00f      	b.n	80124c6 <__ieee754_rem_pio2+0x1ce>
 80124a6:	462b      	mov	r3, r5
 80124a8:	4622      	mov	r2, r4
 80124aa:	4630      	mov	r0, r6
 80124ac:	4639      	mov	r1, r7
 80124ae:	f7ed feeb 	bl	8000288 <__aeabi_dsub>
 80124b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80124b6:	9303      	str	r3, [sp, #12]
 80124b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80124bc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80124c0:	f1b8 0f10 	cmp.w	r8, #16
 80124c4:	dc02      	bgt.n	80124cc <__ieee754_rem_pio2+0x1d4>
 80124c6:	e9ca 0100 	strd	r0, r1, [sl]
 80124ca:	e039      	b.n	8012540 <__ieee754_rem_pio2+0x248>
 80124cc:	a34e      	add	r3, pc, #312	; (adr r3, 8012608 <__ieee754_rem_pio2+0x310>)
 80124ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d2:	ec51 0b18 	vmov	r0, r1, d8
 80124d6:	f7ee f88f 	bl	80005f8 <__aeabi_dmul>
 80124da:	4604      	mov	r4, r0
 80124dc:	460d      	mov	r5, r1
 80124de:	4602      	mov	r2, r0
 80124e0:	460b      	mov	r3, r1
 80124e2:	4630      	mov	r0, r6
 80124e4:	4639      	mov	r1, r7
 80124e6:	f7ed fecf 	bl	8000288 <__aeabi_dsub>
 80124ea:	4602      	mov	r2, r0
 80124ec:	460b      	mov	r3, r1
 80124ee:	4680      	mov	r8, r0
 80124f0:	4689      	mov	r9, r1
 80124f2:	4630      	mov	r0, r6
 80124f4:	4639      	mov	r1, r7
 80124f6:	f7ed fec7 	bl	8000288 <__aeabi_dsub>
 80124fa:	4622      	mov	r2, r4
 80124fc:	462b      	mov	r3, r5
 80124fe:	f7ed fec3 	bl	8000288 <__aeabi_dsub>
 8012502:	a343      	add	r3, pc, #268	; (adr r3, 8012610 <__ieee754_rem_pio2+0x318>)
 8012504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012508:	4604      	mov	r4, r0
 801250a:	460d      	mov	r5, r1
 801250c:	ec51 0b18 	vmov	r0, r1, d8
 8012510:	f7ee f872 	bl	80005f8 <__aeabi_dmul>
 8012514:	4622      	mov	r2, r4
 8012516:	462b      	mov	r3, r5
 8012518:	f7ed feb6 	bl	8000288 <__aeabi_dsub>
 801251c:	4602      	mov	r2, r0
 801251e:	460b      	mov	r3, r1
 8012520:	4604      	mov	r4, r0
 8012522:	460d      	mov	r5, r1
 8012524:	4640      	mov	r0, r8
 8012526:	4649      	mov	r1, r9
 8012528:	f7ed feae 	bl	8000288 <__aeabi_dsub>
 801252c:	9a03      	ldr	r2, [sp, #12]
 801252e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012532:	1ad3      	subs	r3, r2, r3
 8012534:	2b31      	cmp	r3, #49	; 0x31
 8012536:	dc24      	bgt.n	8012582 <__ieee754_rem_pio2+0x28a>
 8012538:	e9ca 0100 	strd	r0, r1, [sl]
 801253c:	4646      	mov	r6, r8
 801253e:	464f      	mov	r7, r9
 8012540:	e9da 8900 	ldrd	r8, r9, [sl]
 8012544:	4630      	mov	r0, r6
 8012546:	4642      	mov	r2, r8
 8012548:	464b      	mov	r3, r9
 801254a:	4639      	mov	r1, r7
 801254c:	f7ed fe9c 	bl	8000288 <__aeabi_dsub>
 8012550:	462b      	mov	r3, r5
 8012552:	4622      	mov	r2, r4
 8012554:	f7ed fe98 	bl	8000288 <__aeabi_dsub>
 8012558:	9b02      	ldr	r3, [sp, #8]
 801255a:	2b00      	cmp	r3, #0
 801255c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012560:	f6bf af0a 	bge.w	8012378 <__ieee754_rem_pio2+0x80>
 8012564:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012568:	f8ca 3004 	str.w	r3, [sl, #4]
 801256c:	f8ca 8000 	str.w	r8, [sl]
 8012570:	f8ca 0008 	str.w	r0, [sl, #8]
 8012574:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012578:	f8ca 300c 	str.w	r3, [sl, #12]
 801257c:	f1cb 0b00 	rsb	fp, fp, #0
 8012580:	e6fa      	b.n	8012378 <__ieee754_rem_pio2+0x80>
 8012582:	a327      	add	r3, pc, #156	; (adr r3, 8012620 <__ieee754_rem_pio2+0x328>)
 8012584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012588:	ec51 0b18 	vmov	r0, r1, d8
 801258c:	f7ee f834 	bl	80005f8 <__aeabi_dmul>
 8012590:	4604      	mov	r4, r0
 8012592:	460d      	mov	r5, r1
 8012594:	4602      	mov	r2, r0
 8012596:	460b      	mov	r3, r1
 8012598:	4640      	mov	r0, r8
 801259a:	4649      	mov	r1, r9
 801259c:	f7ed fe74 	bl	8000288 <__aeabi_dsub>
 80125a0:	4602      	mov	r2, r0
 80125a2:	460b      	mov	r3, r1
 80125a4:	4606      	mov	r6, r0
 80125a6:	460f      	mov	r7, r1
 80125a8:	4640      	mov	r0, r8
 80125aa:	4649      	mov	r1, r9
 80125ac:	f7ed fe6c 	bl	8000288 <__aeabi_dsub>
 80125b0:	4622      	mov	r2, r4
 80125b2:	462b      	mov	r3, r5
 80125b4:	f7ed fe68 	bl	8000288 <__aeabi_dsub>
 80125b8:	a31b      	add	r3, pc, #108	; (adr r3, 8012628 <__ieee754_rem_pio2+0x330>)
 80125ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125be:	4604      	mov	r4, r0
 80125c0:	460d      	mov	r5, r1
 80125c2:	ec51 0b18 	vmov	r0, r1, d8
 80125c6:	f7ee f817 	bl	80005f8 <__aeabi_dmul>
 80125ca:	4622      	mov	r2, r4
 80125cc:	462b      	mov	r3, r5
 80125ce:	f7ed fe5b 	bl	8000288 <__aeabi_dsub>
 80125d2:	4604      	mov	r4, r0
 80125d4:	460d      	mov	r5, r1
 80125d6:	e75f      	b.n	8012498 <__ieee754_rem_pio2+0x1a0>
 80125d8:	4b1b      	ldr	r3, [pc, #108]	; (8012648 <__ieee754_rem_pio2+0x350>)
 80125da:	4598      	cmp	r8, r3
 80125dc:	dd36      	ble.n	801264c <__ieee754_rem_pio2+0x354>
 80125de:	ee10 2a10 	vmov	r2, s0
 80125e2:	462b      	mov	r3, r5
 80125e4:	4620      	mov	r0, r4
 80125e6:	4629      	mov	r1, r5
 80125e8:	f7ed fe4e 	bl	8000288 <__aeabi_dsub>
 80125ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80125f0:	e9ca 0100 	strd	r0, r1, [sl]
 80125f4:	e694      	b.n	8012320 <__ieee754_rem_pio2+0x28>
 80125f6:	bf00      	nop
 80125f8:	54400000 	.word	0x54400000
 80125fc:	3ff921fb 	.word	0x3ff921fb
 8012600:	1a626331 	.word	0x1a626331
 8012604:	3dd0b461 	.word	0x3dd0b461
 8012608:	1a600000 	.word	0x1a600000
 801260c:	3dd0b461 	.word	0x3dd0b461
 8012610:	2e037073 	.word	0x2e037073
 8012614:	3ba3198a 	.word	0x3ba3198a
 8012618:	6dc9c883 	.word	0x6dc9c883
 801261c:	3fe45f30 	.word	0x3fe45f30
 8012620:	2e000000 	.word	0x2e000000
 8012624:	3ba3198a 	.word	0x3ba3198a
 8012628:	252049c1 	.word	0x252049c1
 801262c:	397b839a 	.word	0x397b839a
 8012630:	3fe921fb 	.word	0x3fe921fb
 8012634:	4002d97b 	.word	0x4002d97b
 8012638:	3ff921fb 	.word	0x3ff921fb
 801263c:	413921fb 	.word	0x413921fb
 8012640:	3fe00000 	.word	0x3fe00000
 8012644:	0807b664 	.word	0x0807b664
 8012648:	7fefffff 	.word	0x7fefffff
 801264c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8012650:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8012654:	ee10 0a10 	vmov	r0, s0
 8012658:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801265c:	ee10 6a10 	vmov	r6, s0
 8012660:	460f      	mov	r7, r1
 8012662:	f7ee fa79 	bl	8000b58 <__aeabi_d2iz>
 8012666:	f7ed ff5d 	bl	8000524 <__aeabi_i2d>
 801266a:	4602      	mov	r2, r0
 801266c:	460b      	mov	r3, r1
 801266e:	4630      	mov	r0, r6
 8012670:	4639      	mov	r1, r7
 8012672:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012676:	f7ed fe07 	bl	8000288 <__aeabi_dsub>
 801267a:	4b22      	ldr	r3, [pc, #136]	; (8012704 <__ieee754_rem_pio2+0x40c>)
 801267c:	2200      	movs	r2, #0
 801267e:	f7ed ffbb 	bl	80005f8 <__aeabi_dmul>
 8012682:	460f      	mov	r7, r1
 8012684:	4606      	mov	r6, r0
 8012686:	f7ee fa67 	bl	8000b58 <__aeabi_d2iz>
 801268a:	f7ed ff4b 	bl	8000524 <__aeabi_i2d>
 801268e:	4602      	mov	r2, r0
 8012690:	460b      	mov	r3, r1
 8012692:	4630      	mov	r0, r6
 8012694:	4639      	mov	r1, r7
 8012696:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801269a:	f7ed fdf5 	bl	8000288 <__aeabi_dsub>
 801269e:	4b19      	ldr	r3, [pc, #100]	; (8012704 <__ieee754_rem_pio2+0x40c>)
 80126a0:	2200      	movs	r2, #0
 80126a2:	f7ed ffa9 	bl	80005f8 <__aeabi_dmul>
 80126a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80126aa:	ad04      	add	r5, sp, #16
 80126ac:	f04f 0803 	mov.w	r8, #3
 80126b0:	46a9      	mov	r9, r5
 80126b2:	2600      	movs	r6, #0
 80126b4:	2700      	movs	r7, #0
 80126b6:	4632      	mov	r2, r6
 80126b8:	463b      	mov	r3, r7
 80126ba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80126be:	46c3      	mov	fp, r8
 80126c0:	3d08      	subs	r5, #8
 80126c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80126c6:	f7ee f9ff 	bl	8000ac8 <__aeabi_dcmpeq>
 80126ca:	2800      	cmp	r0, #0
 80126cc:	d1f3      	bne.n	80126b6 <__ieee754_rem_pio2+0x3be>
 80126ce:	4b0e      	ldr	r3, [pc, #56]	; (8012708 <__ieee754_rem_pio2+0x410>)
 80126d0:	9301      	str	r3, [sp, #4]
 80126d2:	2302      	movs	r3, #2
 80126d4:	9300      	str	r3, [sp, #0]
 80126d6:	4622      	mov	r2, r4
 80126d8:	465b      	mov	r3, fp
 80126da:	4651      	mov	r1, sl
 80126dc:	4648      	mov	r0, r9
 80126de:	f000 faff 	bl	8012ce0 <__kernel_rem_pio2>
 80126e2:	9b02      	ldr	r3, [sp, #8]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	4683      	mov	fp, r0
 80126e8:	f6bf ae46 	bge.w	8012378 <__ieee754_rem_pio2+0x80>
 80126ec:	f8da 3004 	ldr.w	r3, [sl, #4]
 80126f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80126f4:	f8ca 3004 	str.w	r3, [sl, #4]
 80126f8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80126fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012700:	e73a      	b.n	8012578 <__ieee754_rem_pio2+0x280>
 8012702:	bf00      	nop
 8012704:	41700000 	.word	0x41700000
 8012708:	0807b6e4 	.word	0x0807b6e4

0801270c <__ieee754_expf>:
 801270c:	ee10 2a10 	vmov	r2, s0
 8012710:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8012714:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012718:	d902      	bls.n	8012720 <__ieee754_expf+0x14>
 801271a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801271e:	4770      	bx	lr
 8012720:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8012724:	d106      	bne.n	8012734 <__ieee754_expf+0x28>
 8012726:	eddf 7a51 	vldr	s15, [pc, #324]	; 801286c <__ieee754_expf+0x160>
 801272a:	2b00      	cmp	r3, #0
 801272c:	bf18      	it	ne
 801272e:	eeb0 0a67 	vmovne.f32	s0, s15
 8012732:	4770      	bx	lr
 8012734:	484e      	ldr	r0, [pc, #312]	; (8012870 <__ieee754_expf+0x164>)
 8012736:	4282      	cmp	r2, r0
 8012738:	dd04      	ble.n	8012744 <__ieee754_expf+0x38>
 801273a:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8012874 <__ieee754_expf+0x168>
 801273e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012742:	4770      	bx	lr
 8012744:	2a00      	cmp	r2, #0
 8012746:	da03      	bge.n	8012750 <__ieee754_expf+0x44>
 8012748:	4a4b      	ldr	r2, [pc, #300]	; (8012878 <__ieee754_expf+0x16c>)
 801274a:	4291      	cmp	r1, r2
 801274c:	f200 808a 	bhi.w	8012864 <__ieee754_expf+0x158>
 8012750:	4a4a      	ldr	r2, [pc, #296]	; (801287c <__ieee754_expf+0x170>)
 8012752:	4291      	cmp	r1, r2
 8012754:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8012758:	d954      	bls.n	8012804 <__ieee754_expf+0xf8>
 801275a:	4a49      	ldr	r2, [pc, #292]	; (8012880 <__ieee754_expf+0x174>)
 801275c:	4291      	cmp	r1, r2
 801275e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8012762:	d836      	bhi.n	80127d2 <__ieee754_expf+0xc6>
 8012764:	4947      	ldr	r1, [pc, #284]	; (8012884 <__ieee754_expf+0x178>)
 8012766:	4411      	add	r1, r2
 8012768:	ed91 7a00 	vldr	s14, [r1]
 801276c:	4946      	ldr	r1, [pc, #280]	; (8012888 <__ieee754_expf+0x17c>)
 801276e:	440a      	add	r2, r1
 8012770:	edd2 7a00 	vldr	s15, [r2]
 8012774:	ee30 7a47 	vsub.f32	s14, s0, s14
 8012778:	f1c3 0201 	rsb	r2, r3, #1
 801277c:	1ad2      	subs	r2, r2, r3
 801277e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8012782:	ee60 6a00 	vmul.f32	s13, s0, s0
 8012786:	eddf 5a41 	vldr	s11, [pc, #260]	; 801288c <__ieee754_expf+0x180>
 801278a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8012890 <__ieee754_expf+0x184>
 801278e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8012792:	eddf 5a40 	vldr	s11, [pc, #256]	; 8012894 <__ieee754_expf+0x188>
 8012796:	eee5 5a26 	vfma.f32	s11, s10, s13
 801279a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8012898 <__ieee754_expf+0x18c>
 801279e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 80127a2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801289c <__ieee754_expf+0x190>
 80127a6:	eee5 5a26 	vfma.f32	s11, s10, s13
 80127aa:	eeb0 5a40 	vmov.f32	s10, s0
 80127ae:	eea5 5ae6 	vfms.f32	s10, s11, s13
 80127b2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80127b6:	eef0 6a45 	vmov.f32	s13, s10
 80127ba:	ee20 5a05 	vmul.f32	s10, s0, s10
 80127be:	bb92      	cbnz	r2, 8012826 <__ieee754_expf+0x11a>
 80127c0:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80127c4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80127c8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80127cc:	ee36 0a40 	vsub.f32	s0, s12, s0
 80127d0:	4770      	bx	lr
 80127d2:	4b33      	ldr	r3, [pc, #204]	; (80128a0 <__ieee754_expf+0x194>)
 80127d4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80128a4 <__ieee754_expf+0x198>
 80127d8:	4413      	add	r3, r2
 80127da:	edd3 7a00 	vldr	s15, [r3]
 80127de:	eee0 7a07 	vfma.f32	s15, s0, s14
 80127e2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80128a8 <__ieee754_expf+0x19c>
 80127e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80127ea:	ee17 2a90 	vmov	r2, s15
 80127ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80127f2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80127f6:	eeb0 7a40 	vmov.f32	s14, s0
 80127fa:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80128ac <__ieee754_expf+0x1a0>
 80127fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012802:	e7bc      	b.n	801277e <__ieee754_expf+0x72>
 8012804:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8012808:	d20b      	bcs.n	8012822 <__ieee754_expf+0x116>
 801280a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8012874 <__ieee754_expf+0x168>
 801280e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8012812:	eef4 6ac6 	vcmpe.f32	s13, s12
 8012816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801281a:	dd02      	ble.n	8012822 <__ieee754_expf+0x116>
 801281c:	ee30 0a06 	vadd.f32	s0, s0, s12
 8012820:	4770      	bx	lr
 8012822:	2200      	movs	r2, #0
 8012824:	e7ad      	b.n	8012782 <__ieee754_expf+0x76>
 8012826:	ee75 6ae6 	vsub.f32	s13, s11, s13
 801282a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801282e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8012832:	bfb8      	it	lt
 8012834:	3264      	addlt	r2, #100	; 0x64
 8012836:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801283a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801283e:	ee76 7a40 	vsub.f32	s15, s12, s0
 8012842:	ee17 3a90 	vmov	r3, s15
 8012846:	bfab      	itete	ge
 8012848:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801284c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8012850:	ee00 3a10 	vmovge	s0, r3
 8012854:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 80128b0 <__ieee754_expf+0x1a4>
 8012858:	bfbc      	itt	lt
 801285a:	ee00 3a10 	vmovlt	s0, r3
 801285e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8012862:	4770      	bx	lr
 8012864:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801286c <__ieee754_expf+0x160>
 8012868:	4770      	bx	lr
 801286a:	bf00      	nop
 801286c:	00000000 	.word	0x00000000
 8012870:	42b17217 	.word	0x42b17217
 8012874:	7149f2ca 	.word	0x7149f2ca
 8012878:	42cff1b5 	.word	0x42cff1b5
 801287c:	3eb17218 	.word	0x3eb17218
 8012880:	3f851591 	.word	0x3f851591
 8012884:	0807b7f4 	.word	0x0807b7f4
 8012888:	0807b7fc 	.word	0x0807b7fc
 801288c:	3331bb4c 	.word	0x3331bb4c
 8012890:	b5ddea0e 	.word	0xb5ddea0e
 8012894:	388ab355 	.word	0x388ab355
 8012898:	bb360b61 	.word	0xbb360b61
 801289c:	3e2aaaab 	.word	0x3e2aaaab
 80128a0:	0807b7ec 	.word	0x0807b7ec
 80128a4:	3fb8aa3b 	.word	0x3fb8aa3b
 80128a8:	3f317180 	.word	0x3f317180
 80128ac:	3717f7d1 	.word	0x3717f7d1
 80128b0:	0d800000 	.word	0x0d800000

080128b4 <__ieee754_logf>:
 80128b4:	ee10 3a10 	vmov	r3, s0
 80128b8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80128bc:	d106      	bne.n	80128cc <__ieee754_logf+0x18>
 80128be:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8012a54 <__ieee754_logf+0x1a0>
 80128c2:	eddf 7a65 	vldr	s15, [pc, #404]	; 8012a58 <__ieee754_logf+0x1a4>
 80128c6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80128ca:	4770      	bx	lr
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	da02      	bge.n	80128d6 <__ieee754_logf+0x22>
 80128d0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80128d4:	e7f5      	b.n	80128c2 <__ieee754_logf+0xe>
 80128d6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80128da:	db02      	blt.n	80128e2 <__ieee754_logf+0x2e>
 80128dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80128e0:	4770      	bx	lr
 80128e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80128e6:	bfb8      	it	lt
 80128e8:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8012a5c <__ieee754_logf+0x1a8>
 80128ec:	485c      	ldr	r0, [pc, #368]	; (8012a60 <__ieee754_logf+0x1ac>)
 80128ee:	bfbe      	ittt	lt
 80128f0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80128f4:	f06f 0118 	mvnlt.w	r1, #24
 80128f8:	ee17 3a90 	vmovlt	r3, s15
 80128fc:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8012900:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012904:	4418      	add	r0, r3
 8012906:	bfa8      	it	ge
 8012908:	2100      	movge	r1, #0
 801290a:	3a7f      	subs	r2, #127	; 0x7f
 801290c:	440a      	add	r2, r1
 801290e:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8012912:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8012916:	4319      	orrs	r1, r3
 8012918:	ee00 1a10 	vmov	s0, r1
 801291c:	4951      	ldr	r1, [pc, #324]	; (8012a64 <__ieee754_logf+0x1b0>)
 801291e:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8012922:	f103 000f 	add.w	r0, r3, #15
 8012926:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801292a:	4001      	ands	r1, r0
 801292c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012930:	bb89      	cbnz	r1, 8012996 <__ieee754_logf+0xe2>
 8012932:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8012936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801293a:	d10f      	bne.n	801295c <__ieee754_logf+0xa8>
 801293c:	2a00      	cmp	r2, #0
 801293e:	f000 8085 	beq.w	8012a4c <__ieee754_logf+0x198>
 8012942:	ee07 2a90 	vmov	s15, r2
 8012946:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8012a68 <__ieee754_logf+0x1b4>
 801294a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8012a6c <__ieee754_logf+0x1b8>
 801294e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012952:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012956:	eea7 0a87 	vfma.f32	s0, s15, s14
 801295a:	4770      	bx	lr
 801295c:	eddf 6a44 	vldr	s13, [pc, #272]	; 8012a70 <__ieee754_logf+0x1bc>
 8012960:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012964:	eee0 7a66 	vfms.f32	s15, s0, s13
 8012968:	ee20 7a00 	vmul.f32	s14, s0, s0
 801296c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012970:	b912      	cbnz	r2, 8012978 <__ieee754_logf+0xc4>
 8012972:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012976:	4770      	bx	lr
 8012978:	ee07 2a90 	vmov	s15, r2
 801297c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8012a68 <__ieee754_logf+0x1b4>
 8012980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012984:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8012988:	ee37 0a40 	vsub.f32	s0, s14, s0
 801298c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8012a6c <__ieee754_logf+0x1b8>
 8012990:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8012994:	4770      	bx	lr
 8012996:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801299a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801299e:	eddf 5a35 	vldr	s11, [pc, #212]	; 8012a74 <__ieee754_logf+0x1c0>
 80129a2:	eddf 4a35 	vldr	s9, [pc, #212]	; 8012a78 <__ieee754_logf+0x1c4>
 80129a6:	4935      	ldr	r1, [pc, #212]	; (8012a7c <__ieee754_logf+0x1c8>)
 80129a8:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80129ac:	4419      	add	r1, r3
 80129ae:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 80129b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80129b6:	430b      	orrs	r3, r1
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	ee07 2a90 	vmov	s15, r2
 80129be:	ee26 5a06 	vmul.f32	s10, s12, s12
 80129c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80129c6:	ee25 7a05 	vmul.f32	s14, s10, s10
 80129ca:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8012a80 <__ieee754_logf+0x1cc>
 80129ce:	eee7 7a25 	vfma.f32	s15, s14, s11
 80129d2:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8012a84 <__ieee754_logf+0x1d0>
 80129d6:	eee7 5a87 	vfma.f32	s11, s15, s14
 80129da:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012a88 <__ieee754_logf+0x1d4>
 80129de:	eee7 7a24 	vfma.f32	s15, s14, s9
 80129e2:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8012a8c <__ieee754_logf+0x1d8>
 80129e6:	eee7 4a87 	vfma.f32	s9, s15, s14
 80129ea:	eddf 7a29 	vldr	s15, [pc, #164]	; 8012a90 <__ieee754_logf+0x1dc>
 80129ee:	eee4 7a87 	vfma.f32	s15, s9, s14
 80129f2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80129f6:	eee5 7a87 	vfma.f32	s15, s11, s14
 80129fa:	dd1c      	ble.n	8012a36 <__ieee754_logf+0x182>
 80129fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012a00:	ee20 7a07 	vmul.f32	s14, s0, s14
 8012a04:	ee27 7a00 	vmul.f32	s14, s14, s0
 8012a08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012a0c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012a10:	b922      	cbnz	r2, 8012a1c <__ieee754_logf+0x168>
 8012a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012a16:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012a1a:	4770      	bx	lr
 8012a1c:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8012a68 <__ieee754_logf+0x1b4>
 8012a20:	eee6 7a86 	vfma.f32	s15, s13, s12
 8012a24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012a28:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012a2c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8012a6c <__ieee754_logf+0x1b8>
 8012a30:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8012a34:	4770      	bx	lr
 8012a36:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012a3a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012a3e:	2a00      	cmp	r2, #0
 8012a40:	d0e9      	beq.n	8012a16 <__ieee754_logf+0x162>
 8012a42:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8012a68 <__ieee754_logf+0x1b4>
 8012a46:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8012a4a:	e7ed      	b.n	8012a28 <__ieee754_logf+0x174>
 8012a4c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8012a58 <__ieee754_logf+0x1a4>
 8012a50:	4770      	bx	lr
 8012a52:	bf00      	nop
 8012a54:	cc000000 	.word	0xcc000000
 8012a58:	00000000 	.word	0x00000000
 8012a5c:	4c000000 	.word	0x4c000000
 8012a60:	004afb20 	.word	0x004afb20
 8012a64:	007ffff0 	.word	0x007ffff0
 8012a68:	3717f7d1 	.word	0x3717f7d1
 8012a6c:	3f317180 	.word	0x3f317180
 8012a70:	3eaaaaab 	.word	0x3eaaaaab
 8012a74:	3e1cd04f 	.word	0x3e1cd04f
 8012a78:	3e178897 	.word	0x3e178897
 8012a7c:	ffcf5c30 	.word	0xffcf5c30
 8012a80:	3e638e29 	.word	0x3e638e29
 8012a84:	3ecccccd 	.word	0x3ecccccd
 8012a88:	3e3a3325 	.word	0x3e3a3325
 8012a8c:	3e924925 	.word	0x3e924925
 8012a90:	3f2aaaab 	.word	0x3f2aaaab

08012a94 <__ieee754_log10f>:
 8012a94:	b508      	push	{r3, lr}
 8012a96:	ee10 2a10 	vmov	r2, s0
 8012a9a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8012a9e:	ed2d 8b02 	vpush	{d8}
 8012aa2:	d108      	bne.n	8012ab6 <__ieee754_log10f+0x22>
 8012aa4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8012b2c <__ieee754_log10f+0x98>
 8012aa8:	eddf 7a21 	vldr	s15, [pc, #132]	; 8012b30 <__ieee754_log10f+0x9c>
 8012aac:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8012ab0:	ecbd 8b02 	vpop	{d8}
 8012ab4:	bd08      	pop	{r3, pc}
 8012ab6:	2a00      	cmp	r2, #0
 8012ab8:	da02      	bge.n	8012ac0 <__ieee754_log10f+0x2c>
 8012aba:	ee30 7a40 	vsub.f32	s14, s0, s0
 8012abe:	e7f3      	b.n	8012aa8 <__ieee754_log10f+0x14>
 8012ac0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8012ac4:	db02      	blt.n	8012acc <__ieee754_log10f+0x38>
 8012ac6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012aca:	e7f1      	b.n	8012ab0 <__ieee754_log10f+0x1c>
 8012acc:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8012ad0:	bfbf      	itttt	lt
 8012ad2:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8012b34 <__ieee754_log10f+0xa0>
 8012ad6:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8012ada:	f06f 0118 	mvnlt.w	r1, #24
 8012ade:	ee17 2a90 	vmovlt	r2, s15
 8012ae2:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8012ae6:	bfa8      	it	ge
 8012ae8:	2100      	movge	r1, #0
 8012aea:	3b7f      	subs	r3, #127	; 0x7f
 8012aec:	440b      	add	r3, r1
 8012aee:	0fd9      	lsrs	r1, r3, #31
 8012af0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8012af4:	ee07 3a90 	vmov	s15, r3
 8012af8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8012afc:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8012b00:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8012b04:	ee00 3a10 	vmov	s0, r3
 8012b08:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8012b0c:	f7ff fed2 	bl	80128b4 <__ieee754_logf>
 8012b10:	eddf 7a09 	vldr	s15, [pc, #36]	; 8012b38 <__ieee754_log10f+0xa4>
 8012b14:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012b18:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012b3c <__ieee754_log10f+0xa8>
 8012b1c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8012b20:	eddf 7a07 	vldr	s15, [pc, #28]	; 8012b40 <__ieee754_log10f+0xac>
 8012b24:	eea8 0a27 	vfma.f32	s0, s16, s15
 8012b28:	e7c2      	b.n	8012ab0 <__ieee754_log10f+0x1c>
 8012b2a:	bf00      	nop
 8012b2c:	cc000000 	.word	0xcc000000
 8012b30:	00000000 	.word	0x00000000
 8012b34:	4c000000 	.word	0x4c000000
 8012b38:	3ede5bd9 	.word	0x3ede5bd9
 8012b3c:	355427db 	.word	0x355427db
 8012b40:	3e9a2080 	.word	0x3e9a2080

08012b44 <__ieee754_sqrtf>:
 8012b44:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012b48:	4770      	bx	lr
 8012b4a:	0000      	movs	r0, r0
 8012b4c:	0000      	movs	r0, r0
	...

08012b50 <__kernel_cos>:
 8012b50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b54:	ec57 6b10 	vmov	r6, r7, d0
 8012b58:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012b5c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012b60:	ed8d 1b00 	vstr	d1, [sp]
 8012b64:	da07      	bge.n	8012b76 <__kernel_cos+0x26>
 8012b66:	ee10 0a10 	vmov	r0, s0
 8012b6a:	4639      	mov	r1, r7
 8012b6c:	f7ed fff4 	bl	8000b58 <__aeabi_d2iz>
 8012b70:	2800      	cmp	r0, #0
 8012b72:	f000 8088 	beq.w	8012c86 <__kernel_cos+0x136>
 8012b76:	4632      	mov	r2, r6
 8012b78:	463b      	mov	r3, r7
 8012b7a:	4630      	mov	r0, r6
 8012b7c:	4639      	mov	r1, r7
 8012b7e:	f7ed fd3b 	bl	80005f8 <__aeabi_dmul>
 8012b82:	4b51      	ldr	r3, [pc, #324]	; (8012cc8 <__kernel_cos+0x178>)
 8012b84:	2200      	movs	r2, #0
 8012b86:	4604      	mov	r4, r0
 8012b88:	460d      	mov	r5, r1
 8012b8a:	f7ed fd35 	bl	80005f8 <__aeabi_dmul>
 8012b8e:	a340      	add	r3, pc, #256	; (adr r3, 8012c90 <__kernel_cos+0x140>)
 8012b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b94:	4682      	mov	sl, r0
 8012b96:	468b      	mov	fp, r1
 8012b98:	4620      	mov	r0, r4
 8012b9a:	4629      	mov	r1, r5
 8012b9c:	f7ed fd2c 	bl	80005f8 <__aeabi_dmul>
 8012ba0:	a33d      	add	r3, pc, #244	; (adr r3, 8012c98 <__kernel_cos+0x148>)
 8012ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba6:	f7ed fb71 	bl	800028c <__adddf3>
 8012baa:	4622      	mov	r2, r4
 8012bac:	462b      	mov	r3, r5
 8012bae:	f7ed fd23 	bl	80005f8 <__aeabi_dmul>
 8012bb2:	a33b      	add	r3, pc, #236	; (adr r3, 8012ca0 <__kernel_cos+0x150>)
 8012bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bb8:	f7ed fb66 	bl	8000288 <__aeabi_dsub>
 8012bbc:	4622      	mov	r2, r4
 8012bbe:	462b      	mov	r3, r5
 8012bc0:	f7ed fd1a 	bl	80005f8 <__aeabi_dmul>
 8012bc4:	a338      	add	r3, pc, #224	; (adr r3, 8012ca8 <__kernel_cos+0x158>)
 8012bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bca:	f7ed fb5f 	bl	800028c <__adddf3>
 8012bce:	4622      	mov	r2, r4
 8012bd0:	462b      	mov	r3, r5
 8012bd2:	f7ed fd11 	bl	80005f8 <__aeabi_dmul>
 8012bd6:	a336      	add	r3, pc, #216	; (adr r3, 8012cb0 <__kernel_cos+0x160>)
 8012bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bdc:	f7ed fb54 	bl	8000288 <__aeabi_dsub>
 8012be0:	4622      	mov	r2, r4
 8012be2:	462b      	mov	r3, r5
 8012be4:	f7ed fd08 	bl	80005f8 <__aeabi_dmul>
 8012be8:	a333      	add	r3, pc, #204	; (adr r3, 8012cb8 <__kernel_cos+0x168>)
 8012bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bee:	f7ed fb4d 	bl	800028c <__adddf3>
 8012bf2:	4622      	mov	r2, r4
 8012bf4:	462b      	mov	r3, r5
 8012bf6:	f7ed fcff 	bl	80005f8 <__aeabi_dmul>
 8012bfa:	4622      	mov	r2, r4
 8012bfc:	462b      	mov	r3, r5
 8012bfe:	f7ed fcfb 	bl	80005f8 <__aeabi_dmul>
 8012c02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c06:	4604      	mov	r4, r0
 8012c08:	460d      	mov	r5, r1
 8012c0a:	4630      	mov	r0, r6
 8012c0c:	4639      	mov	r1, r7
 8012c0e:	f7ed fcf3 	bl	80005f8 <__aeabi_dmul>
 8012c12:	460b      	mov	r3, r1
 8012c14:	4602      	mov	r2, r0
 8012c16:	4629      	mov	r1, r5
 8012c18:	4620      	mov	r0, r4
 8012c1a:	f7ed fb35 	bl	8000288 <__aeabi_dsub>
 8012c1e:	4b2b      	ldr	r3, [pc, #172]	; (8012ccc <__kernel_cos+0x17c>)
 8012c20:	4598      	cmp	r8, r3
 8012c22:	4606      	mov	r6, r0
 8012c24:	460f      	mov	r7, r1
 8012c26:	dc10      	bgt.n	8012c4a <__kernel_cos+0xfa>
 8012c28:	4602      	mov	r2, r0
 8012c2a:	460b      	mov	r3, r1
 8012c2c:	4650      	mov	r0, sl
 8012c2e:	4659      	mov	r1, fp
 8012c30:	f7ed fb2a 	bl	8000288 <__aeabi_dsub>
 8012c34:	460b      	mov	r3, r1
 8012c36:	4926      	ldr	r1, [pc, #152]	; (8012cd0 <__kernel_cos+0x180>)
 8012c38:	4602      	mov	r2, r0
 8012c3a:	2000      	movs	r0, #0
 8012c3c:	f7ed fb24 	bl	8000288 <__aeabi_dsub>
 8012c40:	ec41 0b10 	vmov	d0, r0, r1
 8012c44:	b003      	add	sp, #12
 8012c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c4a:	4b22      	ldr	r3, [pc, #136]	; (8012cd4 <__kernel_cos+0x184>)
 8012c4c:	4920      	ldr	r1, [pc, #128]	; (8012cd0 <__kernel_cos+0x180>)
 8012c4e:	4598      	cmp	r8, r3
 8012c50:	bfcc      	ite	gt
 8012c52:	4d21      	ldrgt	r5, [pc, #132]	; (8012cd8 <__kernel_cos+0x188>)
 8012c54:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8012c58:	2400      	movs	r4, #0
 8012c5a:	4622      	mov	r2, r4
 8012c5c:	462b      	mov	r3, r5
 8012c5e:	2000      	movs	r0, #0
 8012c60:	f7ed fb12 	bl	8000288 <__aeabi_dsub>
 8012c64:	4622      	mov	r2, r4
 8012c66:	4680      	mov	r8, r0
 8012c68:	4689      	mov	r9, r1
 8012c6a:	462b      	mov	r3, r5
 8012c6c:	4650      	mov	r0, sl
 8012c6e:	4659      	mov	r1, fp
 8012c70:	f7ed fb0a 	bl	8000288 <__aeabi_dsub>
 8012c74:	4632      	mov	r2, r6
 8012c76:	463b      	mov	r3, r7
 8012c78:	f7ed fb06 	bl	8000288 <__aeabi_dsub>
 8012c7c:	4602      	mov	r2, r0
 8012c7e:	460b      	mov	r3, r1
 8012c80:	4640      	mov	r0, r8
 8012c82:	4649      	mov	r1, r9
 8012c84:	e7da      	b.n	8012c3c <__kernel_cos+0xec>
 8012c86:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012cc0 <__kernel_cos+0x170>
 8012c8a:	e7db      	b.n	8012c44 <__kernel_cos+0xf4>
 8012c8c:	f3af 8000 	nop.w
 8012c90:	be8838d4 	.word	0xbe8838d4
 8012c94:	bda8fae9 	.word	0xbda8fae9
 8012c98:	bdb4b1c4 	.word	0xbdb4b1c4
 8012c9c:	3e21ee9e 	.word	0x3e21ee9e
 8012ca0:	809c52ad 	.word	0x809c52ad
 8012ca4:	3e927e4f 	.word	0x3e927e4f
 8012ca8:	19cb1590 	.word	0x19cb1590
 8012cac:	3efa01a0 	.word	0x3efa01a0
 8012cb0:	16c15177 	.word	0x16c15177
 8012cb4:	3f56c16c 	.word	0x3f56c16c
 8012cb8:	5555554c 	.word	0x5555554c
 8012cbc:	3fa55555 	.word	0x3fa55555
 8012cc0:	00000000 	.word	0x00000000
 8012cc4:	3ff00000 	.word	0x3ff00000
 8012cc8:	3fe00000 	.word	0x3fe00000
 8012ccc:	3fd33332 	.word	0x3fd33332
 8012cd0:	3ff00000 	.word	0x3ff00000
 8012cd4:	3fe90000 	.word	0x3fe90000
 8012cd8:	3fd20000 	.word	0x3fd20000
 8012cdc:	00000000 	.word	0x00000000

08012ce0 <__kernel_rem_pio2>:
 8012ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ce4:	ed2d 8b02 	vpush	{d8}
 8012ce8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8012cec:	f112 0f14 	cmn.w	r2, #20
 8012cf0:	9308      	str	r3, [sp, #32]
 8012cf2:	9101      	str	r1, [sp, #4]
 8012cf4:	4bc6      	ldr	r3, [pc, #792]	; (8013010 <__kernel_rem_pio2+0x330>)
 8012cf6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8012cf8:	9009      	str	r0, [sp, #36]	; 0x24
 8012cfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012cfe:	9304      	str	r3, [sp, #16]
 8012d00:	9b08      	ldr	r3, [sp, #32]
 8012d02:	f103 33ff 	add.w	r3, r3, #4294967295
 8012d06:	bfa8      	it	ge
 8012d08:	1ed4      	subge	r4, r2, #3
 8012d0a:	9306      	str	r3, [sp, #24]
 8012d0c:	bfb2      	itee	lt
 8012d0e:	2400      	movlt	r4, #0
 8012d10:	2318      	movge	r3, #24
 8012d12:	fb94 f4f3 	sdivge	r4, r4, r3
 8012d16:	f06f 0317 	mvn.w	r3, #23
 8012d1a:	fb04 3303 	mla	r3, r4, r3, r3
 8012d1e:	eb03 0a02 	add.w	sl, r3, r2
 8012d22:	9b04      	ldr	r3, [sp, #16]
 8012d24:	9a06      	ldr	r2, [sp, #24]
 8012d26:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8013000 <__kernel_rem_pio2+0x320>
 8012d2a:	eb03 0802 	add.w	r8, r3, r2
 8012d2e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012d30:	1aa7      	subs	r7, r4, r2
 8012d32:	ae20      	add	r6, sp, #128	; 0x80
 8012d34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012d38:	2500      	movs	r5, #0
 8012d3a:	4545      	cmp	r5, r8
 8012d3c:	dd18      	ble.n	8012d70 <__kernel_rem_pio2+0x90>
 8012d3e:	9b08      	ldr	r3, [sp, #32]
 8012d40:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012d44:	aa20      	add	r2, sp, #128	; 0x80
 8012d46:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8013000 <__kernel_rem_pio2+0x320>
 8012d4a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012d4e:	f1c3 0301 	rsb	r3, r3, #1
 8012d52:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8012d56:	9307      	str	r3, [sp, #28]
 8012d58:	9b07      	ldr	r3, [sp, #28]
 8012d5a:	9a04      	ldr	r2, [sp, #16]
 8012d5c:	4443      	add	r3, r8
 8012d5e:	429a      	cmp	r2, r3
 8012d60:	db2f      	blt.n	8012dc2 <__kernel_rem_pio2+0xe2>
 8012d62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012d66:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012d6a:	462f      	mov	r7, r5
 8012d6c:	2600      	movs	r6, #0
 8012d6e:	e01b      	b.n	8012da8 <__kernel_rem_pio2+0xc8>
 8012d70:	42ef      	cmn	r7, r5
 8012d72:	d407      	bmi.n	8012d84 <__kernel_rem_pio2+0xa4>
 8012d74:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012d78:	f7ed fbd4 	bl	8000524 <__aeabi_i2d>
 8012d7c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012d80:	3501      	adds	r5, #1
 8012d82:	e7da      	b.n	8012d3a <__kernel_rem_pio2+0x5a>
 8012d84:	ec51 0b18 	vmov	r0, r1, d8
 8012d88:	e7f8      	b.n	8012d7c <__kernel_rem_pio2+0x9c>
 8012d8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012d8e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012d92:	f7ed fc31 	bl	80005f8 <__aeabi_dmul>
 8012d96:	4602      	mov	r2, r0
 8012d98:	460b      	mov	r3, r1
 8012d9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d9e:	f7ed fa75 	bl	800028c <__adddf3>
 8012da2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012da6:	3601      	adds	r6, #1
 8012da8:	9b06      	ldr	r3, [sp, #24]
 8012daa:	429e      	cmp	r6, r3
 8012dac:	f1a7 0708 	sub.w	r7, r7, #8
 8012db0:	ddeb      	ble.n	8012d8a <__kernel_rem_pio2+0xaa>
 8012db2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012db6:	3508      	adds	r5, #8
 8012db8:	ecab 7b02 	vstmia	fp!, {d7}
 8012dbc:	f108 0801 	add.w	r8, r8, #1
 8012dc0:	e7ca      	b.n	8012d58 <__kernel_rem_pio2+0x78>
 8012dc2:	9b04      	ldr	r3, [sp, #16]
 8012dc4:	aa0c      	add	r2, sp, #48	; 0x30
 8012dc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012dca:	930b      	str	r3, [sp, #44]	; 0x2c
 8012dcc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012dce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012dd2:	9c04      	ldr	r4, [sp, #16]
 8012dd4:	930a      	str	r3, [sp, #40]	; 0x28
 8012dd6:	ab98      	add	r3, sp, #608	; 0x260
 8012dd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012ddc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8012de0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8012de4:	f8cd b008 	str.w	fp, [sp, #8]
 8012de8:	4625      	mov	r5, r4
 8012dea:	2d00      	cmp	r5, #0
 8012dec:	dc78      	bgt.n	8012ee0 <__kernel_rem_pio2+0x200>
 8012dee:	ec47 6b10 	vmov	d0, r6, r7
 8012df2:	4650      	mov	r0, sl
 8012df4:	f000 fbfc 	bl	80135f0 <scalbn>
 8012df8:	ec57 6b10 	vmov	r6, r7, d0
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012e02:	ee10 0a10 	vmov	r0, s0
 8012e06:	4639      	mov	r1, r7
 8012e08:	f7ed fbf6 	bl	80005f8 <__aeabi_dmul>
 8012e0c:	ec41 0b10 	vmov	d0, r0, r1
 8012e10:	f000 fb6e 	bl	80134f0 <floor>
 8012e14:	4b7f      	ldr	r3, [pc, #508]	; (8013014 <__kernel_rem_pio2+0x334>)
 8012e16:	ec51 0b10 	vmov	r0, r1, d0
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	f7ed fbec 	bl	80005f8 <__aeabi_dmul>
 8012e20:	4602      	mov	r2, r0
 8012e22:	460b      	mov	r3, r1
 8012e24:	4630      	mov	r0, r6
 8012e26:	4639      	mov	r1, r7
 8012e28:	f7ed fa2e 	bl	8000288 <__aeabi_dsub>
 8012e2c:	460f      	mov	r7, r1
 8012e2e:	4606      	mov	r6, r0
 8012e30:	f7ed fe92 	bl	8000b58 <__aeabi_d2iz>
 8012e34:	9007      	str	r0, [sp, #28]
 8012e36:	f7ed fb75 	bl	8000524 <__aeabi_i2d>
 8012e3a:	4602      	mov	r2, r0
 8012e3c:	460b      	mov	r3, r1
 8012e3e:	4630      	mov	r0, r6
 8012e40:	4639      	mov	r1, r7
 8012e42:	f7ed fa21 	bl	8000288 <__aeabi_dsub>
 8012e46:	f1ba 0f00 	cmp.w	sl, #0
 8012e4a:	4606      	mov	r6, r0
 8012e4c:	460f      	mov	r7, r1
 8012e4e:	dd70      	ble.n	8012f32 <__kernel_rem_pio2+0x252>
 8012e50:	1e62      	subs	r2, r4, #1
 8012e52:	ab0c      	add	r3, sp, #48	; 0x30
 8012e54:	9d07      	ldr	r5, [sp, #28]
 8012e56:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012e5a:	f1ca 0118 	rsb	r1, sl, #24
 8012e5e:	fa40 f301 	asr.w	r3, r0, r1
 8012e62:	441d      	add	r5, r3
 8012e64:	408b      	lsls	r3, r1
 8012e66:	1ac0      	subs	r0, r0, r3
 8012e68:	ab0c      	add	r3, sp, #48	; 0x30
 8012e6a:	9507      	str	r5, [sp, #28]
 8012e6c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012e70:	f1ca 0317 	rsb	r3, sl, #23
 8012e74:	fa40 f303 	asr.w	r3, r0, r3
 8012e78:	9302      	str	r3, [sp, #8]
 8012e7a:	9b02      	ldr	r3, [sp, #8]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	dd66      	ble.n	8012f4e <__kernel_rem_pio2+0x26e>
 8012e80:	9b07      	ldr	r3, [sp, #28]
 8012e82:	2200      	movs	r2, #0
 8012e84:	3301      	adds	r3, #1
 8012e86:	9307      	str	r3, [sp, #28]
 8012e88:	4615      	mov	r5, r2
 8012e8a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012e8e:	4294      	cmp	r4, r2
 8012e90:	f300 8099 	bgt.w	8012fc6 <__kernel_rem_pio2+0x2e6>
 8012e94:	f1ba 0f00 	cmp.w	sl, #0
 8012e98:	dd07      	ble.n	8012eaa <__kernel_rem_pio2+0x1ca>
 8012e9a:	f1ba 0f01 	cmp.w	sl, #1
 8012e9e:	f000 80a5 	beq.w	8012fec <__kernel_rem_pio2+0x30c>
 8012ea2:	f1ba 0f02 	cmp.w	sl, #2
 8012ea6:	f000 80c1 	beq.w	801302c <__kernel_rem_pio2+0x34c>
 8012eaa:	9b02      	ldr	r3, [sp, #8]
 8012eac:	2b02      	cmp	r3, #2
 8012eae:	d14e      	bne.n	8012f4e <__kernel_rem_pio2+0x26e>
 8012eb0:	4632      	mov	r2, r6
 8012eb2:	463b      	mov	r3, r7
 8012eb4:	4958      	ldr	r1, [pc, #352]	; (8013018 <__kernel_rem_pio2+0x338>)
 8012eb6:	2000      	movs	r0, #0
 8012eb8:	f7ed f9e6 	bl	8000288 <__aeabi_dsub>
 8012ebc:	4606      	mov	r6, r0
 8012ebe:	460f      	mov	r7, r1
 8012ec0:	2d00      	cmp	r5, #0
 8012ec2:	d044      	beq.n	8012f4e <__kernel_rem_pio2+0x26e>
 8012ec4:	4650      	mov	r0, sl
 8012ec6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8013008 <__kernel_rem_pio2+0x328>
 8012eca:	f000 fb91 	bl	80135f0 <scalbn>
 8012ece:	4630      	mov	r0, r6
 8012ed0:	4639      	mov	r1, r7
 8012ed2:	ec53 2b10 	vmov	r2, r3, d0
 8012ed6:	f7ed f9d7 	bl	8000288 <__aeabi_dsub>
 8012eda:	4606      	mov	r6, r0
 8012edc:	460f      	mov	r7, r1
 8012ede:	e036      	b.n	8012f4e <__kernel_rem_pio2+0x26e>
 8012ee0:	4b4e      	ldr	r3, [pc, #312]	; (801301c <__kernel_rem_pio2+0x33c>)
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	4630      	mov	r0, r6
 8012ee6:	4639      	mov	r1, r7
 8012ee8:	f7ed fb86 	bl	80005f8 <__aeabi_dmul>
 8012eec:	f7ed fe34 	bl	8000b58 <__aeabi_d2iz>
 8012ef0:	f7ed fb18 	bl	8000524 <__aeabi_i2d>
 8012ef4:	4b4a      	ldr	r3, [pc, #296]	; (8013020 <__kernel_rem_pio2+0x340>)
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	4680      	mov	r8, r0
 8012efa:	4689      	mov	r9, r1
 8012efc:	f7ed fb7c 	bl	80005f8 <__aeabi_dmul>
 8012f00:	4602      	mov	r2, r0
 8012f02:	460b      	mov	r3, r1
 8012f04:	4630      	mov	r0, r6
 8012f06:	4639      	mov	r1, r7
 8012f08:	f7ed f9be 	bl	8000288 <__aeabi_dsub>
 8012f0c:	f7ed fe24 	bl	8000b58 <__aeabi_d2iz>
 8012f10:	9b02      	ldr	r3, [sp, #8]
 8012f12:	f843 0b04 	str.w	r0, [r3], #4
 8012f16:	3d01      	subs	r5, #1
 8012f18:	9302      	str	r3, [sp, #8]
 8012f1a:	ab70      	add	r3, sp, #448	; 0x1c0
 8012f1c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f24:	4640      	mov	r0, r8
 8012f26:	4649      	mov	r1, r9
 8012f28:	f7ed f9b0 	bl	800028c <__adddf3>
 8012f2c:	4606      	mov	r6, r0
 8012f2e:	460f      	mov	r7, r1
 8012f30:	e75b      	b.n	8012dea <__kernel_rem_pio2+0x10a>
 8012f32:	d105      	bne.n	8012f40 <__kernel_rem_pio2+0x260>
 8012f34:	1e63      	subs	r3, r4, #1
 8012f36:	aa0c      	add	r2, sp, #48	; 0x30
 8012f38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012f3c:	15c3      	asrs	r3, r0, #23
 8012f3e:	e79b      	b.n	8012e78 <__kernel_rem_pio2+0x198>
 8012f40:	4b38      	ldr	r3, [pc, #224]	; (8013024 <__kernel_rem_pio2+0x344>)
 8012f42:	2200      	movs	r2, #0
 8012f44:	f7ed fdde 	bl	8000b04 <__aeabi_dcmpge>
 8012f48:	2800      	cmp	r0, #0
 8012f4a:	d139      	bne.n	8012fc0 <__kernel_rem_pio2+0x2e0>
 8012f4c:	9002      	str	r0, [sp, #8]
 8012f4e:	2200      	movs	r2, #0
 8012f50:	2300      	movs	r3, #0
 8012f52:	4630      	mov	r0, r6
 8012f54:	4639      	mov	r1, r7
 8012f56:	f7ed fdb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8012f5a:	2800      	cmp	r0, #0
 8012f5c:	f000 80b4 	beq.w	80130c8 <__kernel_rem_pio2+0x3e8>
 8012f60:	f104 3bff 	add.w	fp, r4, #4294967295
 8012f64:	465b      	mov	r3, fp
 8012f66:	2200      	movs	r2, #0
 8012f68:	9904      	ldr	r1, [sp, #16]
 8012f6a:	428b      	cmp	r3, r1
 8012f6c:	da65      	bge.n	801303a <__kernel_rem_pio2+0x35a>
 8012f6e:	2a00      	cmp	r2, #0
 8012f70:	d07b      	beq.n	801306a <__kernel_rem_pio2+0x38a>
 8012f72:	ab0c      	add	r3, sp, #48	; 0x30
 8012f74:	f1aa 0a18 	sub.w	sl, sl, #24
 8012f78:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	f000 80a0 	beq.w	80130c2 <__kernel_rem_pio2+0x3e2>
 8012f82:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8013008 <__kernel_rem_pio2+0x328>
 8012f86:	4650      	mov	r0, sl
 8012f88:	f000 fb32 	bl	80135f0 <scalbn>
 8012f8c:	4f23      	ldr	r7, [pc, #140]	; (801301c <__kernel_rem_pio2+0x33c>)
 8012f8e:	ec55 4b10 	vmov	r4, r5, d0
 8012f92:	46d8      	mov	r8, fp
 8012f94:	2600      	movs	r6, #0
 8012f96:	f1b8 0f00 	cmp.w	r8, #0
 8012f9a:	f280 80cf 	bge.w	801313c <__kernel_rem_pio2+0x45c>
 8012f9e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8013000 <__kernel_rem_pio2+0x320>
 8012fa2:	465f      	mov	r7, fp
 8012fa4:	f04f 0800 	mov.w	r8, #0
 8012fa8:	2f00      	cmp	r7, #0
 8012faa:	f2c0 80fd 	blt.w	80131a8 <__kernel_rem_pio2+0x4c8>
 8012fae:	ab70      	add	r3, sp, #448	; 0x1c0
 8012fb0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8013028 <__kernel_rem_pio2+0x348>
 8012fb4:	ec55 4b18 	vmov	r4, r5, d8
 8012fb8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8012fbc:	2600      	movs	r6, #0
 8012fbe:	e0e5      	b.n	801318c <__kernel_rem_pio2+0x4ac>
 8012fc0:	2302      	movs	r3, #2
 8012fc2:	9302      	str	r3, [sp, #8]
 8012fc4:	e75c      	b.n	8012e80 <__kernel_rem_pio2+0x1a0>
 8012fc6:	f8db 3000 	ldr.w	r3, [fp]
 8012fca:	b955      	cbnz	r5, 8012fe2 <__kernel_rem_pio2+0x302>
 8012fcc:	b123      	cbz	r3, 8012fd8 <__kernel_rem_pio2+0x2f8>
 8012fce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012fd2:	f8cb 3000 	str.w	r3, [fp]
 8012fd6:	2301      	movs	r3, #1
 8012fd8:	3201      	adds	r2, #1
 8012fda:	f10b 0b04 	add.w	fp, fp, #4
 8012fde:	461d      	mov	r5, r3
 8012fe0:	e755      	b.n	8012e8e <__kernel_rem_pio2+0x1ae>
 8012fe2:	1acb      	subs	r3, r1, r3
 8012fe4:	f8cb 3000 	str.w	r3, [fp]
 8012fe8:	462b      	mov	r3, r5
 8012fea:	e7f5      	b.n	8012fd8 <__kernel_rem_pio2+0x2f8>
 8012fec:	1e62      	subs	r2, r4, #1
 8012fee:	ab0c      	add	r3, sp, #48	; 0x30
 8012ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ff4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012ff8:	a90c      	add	r1, sp, #48	; 0x30
 8012ffa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012ffe:	e754      	b.n	8012eaa <__kernel_rem_pio2+0x1ca>
	...
 801300c:	3ff00000 	.word	0x3ff00000
 8013010:	0807b848 	.word	0x0807b848
 8013014:	40200000 	.word	0x40200000
 8013018:	3ff00000 	.word	0x3ff00000
 801301c:	3e700000 	.word	0x3e700000
 8013020:	41700000 	.word	0x41700000
 8013024:	3fe00000 	.word	0x3fe00000
 8013028:	0807b808 	.word	0x0807b808
 801302c:	1e62      	subs	r2, r4, #1
 801302e:	ab0c      	add	r3, sp, #48	; 0x30
 8013030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013034:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013038:	e7de      	b.n	8012ff8 <__kernel_rem_pio2+0x318>
 801303a:	a90c      	add	r1, sp, #48	; 0x30
 801303c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013040:	3b01      	subs	r3, #1
 8013042:	430a      	orrs	r2, r1
 8013044:	e790      	b.n	8012f68 <__kernel_rem_pio2+0x288>
 8013046:	3301      	adds	r3, #1
 8013048:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801304c:	2900      	cmp	r1, #0
 801304e:	d0fa      	beq.n	8013046 <__kernel_rem_pio2+0x366>
 8013050:	9a08      	ldr	r2, [sp, #32]
 8013052:	18e3      	adds	r3, r4, r3
 8013054:	18a6      	adds	r6, r4, r2
 8013056:	aa20      	add	r2, sp, #128	; 0x80
 8013058:	1c65      	adds	r5, r4, #1
 801305a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801305e:	9302      	str	r3, [sp, #8]
 8013060:	9b02      	ldr	r3, [sp, #8]
 8013062:	42ab      	cmp	r3, r5
 8013064:	da04      	bge.n	8013070 <__kernel_rem_pio2+0x390>
 8013066:	461c      	mov	r4, r3
 8013068:	e6b5      	b.n	8012dd6 <__kernel_rem_pio2+0xf6>
 801306a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801306c:	2301      	movs	r3, #1
 801306e:	e7eb      	b.n	8013048 <__kernel_rem_pio2+0x368>
 8013070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013072:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013076:	f7ed fa55 	bl	8000524 <__aeabi_i2d>
 801307a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801307e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013080:	46b3      	mov	fp, r6
 8013082:	461c      	mov	r4, r3
 8013084:	2700      	movs	r7, #0
 8013086:	f04f 0800 	mov.w	r8, #0
 801308a:	f04f 0900 	mov.w	r9, #0
 801308e:	9b06      	ldr	r3, [sp, #24]
 8013090:	429f      	cmp	r7, r3
 8013092:	dd06      	ble.n	80130a2 <__kernel_rem_pio2+0x3c2>
 8013094:	ab70      	add	r3, sp, #448	; 0x1c0
 8013096:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801309a:	e9c3 8900 	strd	r8, r9, [r3]
 801309e:	3501      	adds	r5, #1
 80130a0:	e7de      	b.n	8013060 <__kernel_rem_pio2+0x380>
 80130a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80130a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80130aa:	f7ed faa5 	bl	80005f8 <__aeabi_dmul>
 80130ae:	4602      	mov	r2, r0
 80130b0:	460b      	mov	r3, r1
 80130b2:	4640      	mov	r0, r8
 80130b4:	4649      	mov	r1, r9
 80130b6:	f7ed f8e9 	bl	800028c <__adddf3>
 80130ba:	3701      	adds	r7, #1
 80130bc:	4680      	mov	r8, r0
 80130be:	4689      	mov	r9, r1
 80130c0:	e7e5      	b.n	801308e <__kernel_rem_pio2+0x3ae>
 80130c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80130c6:	e754      	b.n	8012f72 <__kernel_rem_pio2+0x292>
 80130c8:	ec47 6b10 	vmov	d0, r6, r7
 80130cc:	f1ca 0000 	rsb	r0, sl, #0
 80130d0:	f000 fa8e 	bl	80135f0 <scalbn>
 80130d4:	ec57 6b10 	vmov	r6, r7, d0
 80130d8:	4b9f      	ldr	r3, [pc, #636]	; (8013358 <__kernel_rem_pio2+0x678>)
 80130da:	ee10 0a10 	vmov	r0, s0
 80130de:	2200      	movs	r2, #0
 80130e0:	4639      	mov	r1, r7
 80130e2:	f7ed fd0f 	bl	8000b04 <__aeabi_dcmpge>
 80130e6:	b300      	cbz	r0, 801312a <__kernel_rem_pio2+0x44a>
 80130e8:	4b9c      	ldr	r3, [pc, #624]	; (801335c <__kernel_rem_pio2+0x67c>)
 80130ea:	2200      	movs	r2, #0
 80130ec:	4630      	mov	r0, r6
 80130ee:	4639      	mov	r1, r7
 80130f0:	f7ed fa82 	bl	80005f8 <__aeabi_dmul>
 80130f4:	f7ed fd30 	bl	8000b58 <__aeabi_d2iz>
 80130f8:	4605      	mov	r5, r0
 80130fa:	f7ed fa13 	bl	8000524 <__aeabi_i2d>
 80130fe:	4b96      	ldr	r3, [pc, #600]	; (8013358 <__kernel_rem_pio2+0x678>)
 8013100:	2200      	movs	r2, #0
 8013102:	f7ed fa79 	bl	80005f8 <__aeabi_dmul>
 8013106:	460b      	mov	r3, r1
 8013108:	4602      	mov	r2, r0
 801310a:	4639      	mov	r1, r7
 801310c:	4630      	mov	r0, r6
 801310e:	f7ed f8bb 	bl	8000288 <__aeabi_dsub>
 8013112:	f7ed fd21 	bl	8000b58 <__aeabi_d2iz>
 8013116:	f104 0b01 	add.w	fp, r4, #1
 801311a:	ab0c      	add	r3, sp, #48	; 0x30
 801311c:	f10a 0a18 	add.w	sl, sl, #24
 8013120:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013124:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8013128:	e72b      	b.n	8012f82 <__kernel_rem_pio2+0x2a2>
 801312a:	4630      	mov	r0, r6
 801312c:	4639      	mov	r1, r7
 801312e:	f7ed fd13 	bl	8000b58 <__aeabi_d2iz>
 8013132:	ab0c      	add	r3, sp, #48	; 0x30
 8013134:	46a3      	mov	fp, r4
 8013136:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801313a:	e722      	b.n	8012f82 <__kernel_rem_pio2+0x2a2>
 801313c:	ab70      	add	r3, sp, #448	; 0x1c0
 801313e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8013142:	ab0c      	add	r3, sp, #48	; 0x30
 8013144:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013148:	f7ed f9ec 	bl	8000524 <__aeabi_i2d>
 801314c:	4622      	mov	r2, r4
 801314e:	462b      	mov	r3, r5
 8013150:	f7ed fa52 	bl	80005f8 <__aeabi_dmul>
 8013154:	4632      	mov	r2, r6
 8013156:	e9c9 0100 	strd	r0, r1, [r9]
 801315a:	463b      	mov	r3, r7
 801315c:	4620      	mov	r0, r4
 801315e:	4629      	mov	r1, r5
 8013160:	f7ed fa4a 	bl	80005f8 <__aeabi_dmul>
 8013164:	f108 38ff 	add.w	r8, r8, #4294967295
 8013168:	4604      	mov	r4, r0
 801316a:	460d      	mov	r5, r1
 801316c:	e713      	b.n	8012f96 <__kernel_rem_pio2+0x2b6>
 801316e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8013172:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8013176:	f7ed fa3f 	bl	80005f8 <__aeabi_dmul>
 801317a:	4602      	mov	r2, r0
 801317c:	460b      	mov	r3, r1
 801317e:	4620      	mov	r0, r4
 8013180:	4629      	mov	r1, r5
 8013182:	f7ed f883 	bl	800028c <__adddf3>
 8013186:	3601      	adds	r6, #1
 8013188:	4604      	mov	r4, r0
 801318a:	460d      	mov	r5, r1
 801318c:	9b04      	ldr	r3, [sp, #16]
 801318e:	429e      	cmp	r6, r3
 8013190:	dc01      	bgt.n	8013196 <__kernel_rem_pio2+0x4b6>
 8013192:	45b0      	cmp	r8, r6
 8013194:	daeb      	bge.n	801316e <__kernel_rem_pio2+0x48e>
 8013196:	ab48      	add	r3, sp, #288	; 0x120
 8013198:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801319c:	e9c3 4500 	strd	r4, r5, [r3]
 80131a0:	3f01      	subs	r7, #1
 80131a2:	f108 0801 	add.w	r8, r8, #1
 80131a6:	e6ff      	b.n	8012fa8 <__kernel_rem_pio2+0x2c8>
 80131a8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80131aa:	2b02      	cmp	r3, #2
 80131ac:	dc0b      	bgt.n	80131c6 <__kernel_rem_pio2+0x4e6>
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	dc6e      	bgt.n	8013290 <__kernel_rem_pio2+0x5b0>
 80131b2:	d045      	beq.n	8013240 <__kernel_rem_pio2+0x560>
 80131b4:	9b07      	ldr	r3, [sp, #28]
 80131b6:	f003 0007 	and.w	r0, r3, #7
 80131ba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80131be:	ecbd 8b02 	vpop	{d8}
 80131c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131c6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80131c8:	2b03      	cmp	r3, #3
 80131ca:	d1f3      	bne.n	80131b4 <__kernel_rem_pio2+0x4d4>
 80131cc:	ab48      	add	r3, sp, #288	; 0x120
 80131ce:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80131d2:	46d0      	mov	r8, sl
 80131d4:	46d9      	mov	r9, fp
 80131d6:	f1b9 0f00 	cmp.w	r9, #0
 80131da:	f1a8 0808 	sub.w	r8, r8, #8
 80131de:	dc64      	bgt.n	80132aa <__kernel_rem_pio2+0x5ca>
 80131e0:	465c      	mov	r4, fp
 80131e2:	2c01      	cmp	r4, #1
 80131e4:	f1aa 0a08 	sub.w	sl, sl, #8
 80131e8:	dc7e      	bgt.n	80132e8 <__kernel_rem_pio2+0x608>
 80131ea:	2000      	movs	r0, #0
 80131ec:	2100      	movs	r1, #0
 80131ee:	f1bb 0f01 	cmp.w	fp, #1
 80131f2:	f300 8097 	bgt.w	8013324 <__kernel_rem_pio2+0x644>
 80131f6:	9b02      	ldr	r3, [sp, #8]
 80131f8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80131fc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8013200:	2b00      	cmp	r3, #0
 8013202:	f040 8099 	bne.w	8013338 <__kernel_rem_pio2+0x658>
 8013206:	9b01      	ldr	r3, [sp, #4]
 8013208:	e9c3 5600 	strd	r5, r6, [r3]
 801320c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8013210:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013214:	e7ce      	b.n	80131b4 <__kernel_rem_pio2+0x4d4>
 8013216:	ab48      	add	r3, sp, #288	; 0x120
 8013218:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013220:	f7ed f834 	bl	800028c <__adddf3>
 8013224:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013228:	f1bb 0f00 	cmp.w	fp, #0
 801322c:	daf3      	bge.n	8013216 <__kernel_rem_pio2+0x536>
 801322e:	9b02      	ldr	r3, [sp, #8]
 8013230:	b113      	cbz	r3, 8013238 <__kernel_rem_pio2+0x558>
 8013232:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013236:	4619      	mov	r1, r3
 8013238:	9b01      	ldr	r3, [sp, #4]
 801323a:	e9c3 0100 	strd	r0, r1, [r3]
 801323e:	e7b9      	b.n	80131b4 <__kernel_rem_pio2+0x4d4>
 8013240:	2000      	movs	r0, #0
 8013242:	2100      	movs	r1, #0
 8013244:	e7f0      	b.n	8013228 <__kernel_rem_pio2+0x548>
 8013246:	ab48      	add	r3, sp, #288	; 0x120
 8013248:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013250:	f7ed f81c 	bl	800028c <__adddf3>
 8013254:	3c01      	subs	r4, #1
 8013256:	2c00      	cmp	r4, #0
 8013258:	daf5      	bge.n	8013246 <__kernel_rem_pio2+0x566>
 801325a:	9b02      	ldr	r3, [sp, #8]
 801325c:	b1e3      	cbz	r3, 8013298 <__kernel_rem_pio2+0x5b8>
 801325e:	4602      	mov	r2, r0
 8013260:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013264:	9c01      	ldr	r4, [sp, #4]
 8013266:	e9c4 2300 	strd	r2, r3, [r4]
 801326a:	4602      	mov	r2, r0
 801326c:	460b      	mov	r3, r1
 801326e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8013272:	f7ed f809 	bl	8000288 <__aeabi_dsub>
 8013276:	ad4a      	add	r5, sp, #296	; 0x128
 8013278:	2401      	movs	r4, #1
 801327a:	45a3      	cmp	fp, r4
 801327c:	da0f      	bge.n	801329e <__kernel_rem_pio2+0x5be>
 801327e:	9b02      	ldr	r3, [sp, #8]
 8013280:	b113      	cbz	r3, 8013288 <__kernel_rem_pio2+0x5a8>
 8013282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013286:	4619      	mov	r1, r3
 8013288:	9b01      	ldr	r3, [sp, #4]
 801328a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801328e:	e791      	b.n	80131b4 <__kernel_rem_pio2+0x4d4>
 8013290:	465c      	mov	r4, fp
 8013292:	2000      	movs	r0, #0
 8013294:	2100      	movs	r1, #0
 8013296:	e7de      	b.n	8013256 <__kernel_rem_pio2+0x576>
 8013298:	4602      	mov	r2, r0
 801329a:	460b      	mov	r3, r1
 801329c:	e7e2      	b.n	8013264 <__kernel_rem_pio2+0x584>
 801329e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80132a2:	f7ec fff3 	bl	800028c <__adddf3>
 80132a6:	3401      	adds	r4, #1
 80132a8:	e7e7      	b.n	801327a <__kernel_rem_pio2+0x59a>
 80132aa:	e9d8 4500 	ldrd	r4, r5, [r8]
 80132ae:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80132b2:	4620      	mov	r0, r4
 80132b4:	4632      	mov	r2, r6
 80132b6:	463b      	mov	r3, r7
 80132b8:	4629      	mov	r1, r5
 80132ba:	f7ec ffe7 	bl	800028c <__adddf3>
 80132be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80132c2:	4602      	mov	r2, r0
 80132c4:	460b      	mov	r3, r1
 80132c6:	4620      	mov	r0, r4
 80132c8:	4629      	mov	r1, r5
 80132ca:	f7ec ffdd 	bl	8000288 <__aeabi_dsub>
 80132ce:	4632      	mov	r2, r6
 80132d0:	463b      	mov	r3, r7
 80132d2:	f7ec ffdb 	bl	800028c <__adddf3>
 80132d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80132da:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80132de:	ed88 7b00 	vstr	d7, [r8]
 80132e2:	f109 39ff 	add.w	r9, r9, #4294967295
 80132e6:	e776      	b.n	80131d6 <__kernel_rem_pio2+0x4f6>
 80132e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80132ec:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80132f0:	4640      	mov	r0, r8
 80132f2:	4632      	mov	r2, r6
 80132f4:	463b      	mov	r3, r7
 80132f6:	4649      	mov	r1, r9
 80132f8:	f7ec ffc8 	bl	800028c <__adddf3>
 80132fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013300:	4602      	mov	r2, r0
 8013302:	460b      	mov	r3, r1
 8013304:	4640      	mov	r0, r8
 8013306:	4649      	mov	r1, r9
 8013308:	f7ec ffbe 	bl	8000288 <__aeabi_dsub>
 801330c:	4632      	mov	r2, r6
 801330e:	463b      	mov	r3, r7
 8013310:	f7ec ffbc 	bl	800028c <__adddf3>
 8013314:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013318:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801331c:	ed8a 7b00 	vstr	d7, [sl]
 8013320:	3c01      	subs	r4, #1
 8013322:	e75e      	b.n	80131e2 <__kernel_rem_pio2+0x502>
 8013324:	ab48      	add	r3, sp, #288	; 0x120
 8013326:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801332e:	f7ec ffad 	bl	800028c <__adddf3>
 8013332:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013336:	e75a      	b.n	80131ee <__kernel_rem_pio2+0x50e>
 8013338:	9b01      	ldr	r3, [sp, #4]
 801333a:	9a01      	ldr	r2, [sp, #4]
 801333c:	601d      	str	r5, [r3, #0]
 801333e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8013342:	605c      	str	r4, [r3, #4]
 8013344:	609f      	str	r7, [r3, #8]
 8013346:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801334a:	60d3      	str	r3, [r2, #12]
 801334c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013350:	6110      	str	r0, [r2, #16]
 8013352:	6153      	str	r3, [r2, #20]
 8013354:	e72e      	b.n	80131b4 <__kernel_rem_pio2+0x4d4>
 8013356:	bf00      	nop
 8013358:	41700000 	.word	0x41700000
 801335c:	3e700000 	.word	0x3e700000

08013360 <__kernel_sin>:
 8013360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013364:	ed2d 8b04 	vpush	{d8-d9}
 8013368:	eeb0 8a41 	vmov.f32	s16, s2
 801336c:	eef0 8a61 	vmov.f32	s17, s3
 8013370:	ec55 4b10 	vmov	r4, r5, d0
 8013374:	b083      	sub	sp, #12
 8013376:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801337a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801337e:	9001      	str	r0, [sp, #4]
 8013380:	da06      	bge.n	8013390 <__kernel_sin+0x30>
 8013382:	ee10 0a10 	vmov	r0, s0
 8013386:	4629      	mov	r1, r5
 8013388:	f7ed fbe6 	bl	8000b58 <__aeabi_d2iz>
 801338c:	2800      	cmp	r0, #0
 801338e:	d051      	beq.n	8013434 <__kernel_sin+0xd4>
 8013390:	4622      	mov	r2, r4
 8013392:	462b      	mov	r3, r5
 8013394:	4620      	mov	r0, r4
 8013396:	4629      	mov	r1, r5
 8013398:	f7ed f92e 	bl	80005f8 <__aeabi_dmul>
 801339c:	4682      	mov	sl, r0
 801339e:	468b      	mov	fp, r1
 80133a0:	4602      	mov	r2, r0
 80133a2:	460b      	mov	r3, r1
 80133a4:	4620      	mov	r0, r4
 80133a6:	4629      	mov	r1, r5
 80133a8:	f7ed f926 	bl	80005f8 <__aeabi_dmul>
 80133ac:	a341      	add	r3, pc, #260	; (adr r3, 80134b4 <__kernel_sin+0x154>)
 80133ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133b2:	4680      	mov	r8, r0
 80133b4:	4689      	mov	r9, r1
 80133b6:	4650      	mov	r0, sl
 80133b8:	4659      	mov	r1, fp
 80133ba:	f7ed f91d 	bl	80005f8 <__aeabi_dmul>
 80133be:	a33f      	add	r3, pc, #252	; (adr r3, 80134bc <__kernel_sin+0x15c>)
 80133c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c4:	f7ec ff60 	bl	8000288 <__aeabi_dsub>
 80133c8:	4652      	mov	r2, sl
 80133ca:	465b      	mov	r3, fp
 80133cc:	f7ed f914 	bl	80005f8 <__aeabi_dmul>
 80133d0:	a33c      	add	r3, pc, #240	; (adr r3, 80134c4 <__kernel_sin+0x164>)
 80133d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133d6:	f7ec ff59 	bl	800028c <__adddf3>
 80133da:	4652      	mov	r2, sl
 80133dc:	465b      	mov	r3, fp
 80133de:	f7ed f90b 	bl	80005f8 <__aeabi_dmul>
 80133e2:	a33a      	add	r3, pc, #232	; (adr r3, 80134cc <__kernel_sin+0x16c>)
 80133e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133e8:	f7ec ff4e 	bl	8000288 <__aeabi_dsub>
 80133ec:	4652      	mov	r2, sl
 80133ee:	465b      	mov	r3, fp
 80133f0:	f7ed f902 	bl	80005f8 <__aeabi_dmul>
 80133f4:	a337      	add	r3, pc, #220	; (adr r3, 80134d4 <__kernel_sin+0x174>)
 80133f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133fa:	f7ec ff47 	bl	800028c <__adddf3>
 80133fe:	9b01      	ldr	r3, [sp, #4]
 8013400:	4606      	mov	r6, r0
 8013402:	460f      	mov	r7, r1
 8013404:	b9eb      	cbnz	r3, 8013442 <__kernel_sin+0xe2>
 8013406:	4602      	mov	r2, r0
 8013408:	460b      	mov	r3, r1
 801340a:	4650      	mov	r0, sl
 801340c:	4659      	mov	r1, fp
 801340e:	f7ed f8f3 	bl	80005f8 <__aeabi_dmul>
 8013412:	a325      	add	r3, pc, #148	; (adr r3, 80134a8 <__kernel_sin+0x148>)
 8013414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013418:	f7ec ff36 	bl	8000288 <__aeabi_dsub>
 801341c:	4642      	mov	r2, r8
 801341e:	464b      	mov	r3, r9
 8013420:	f7ed f8ea 	bl	80005f8 <__aeabi_dmul>
 8013424:	4602      	mov	r2, r0
 8013426:	460b      	mov	r3, r1
 8013428:	4620      	mov	r0, r4
 801342a:	4629      	mov	r1, r5
 801342c:	f7ec ff2e 	bl	800028c <__adddf3>
 8013430:	4604      	mov	r4, r0
 8013432:	460d      	mov	r5, r1
 8013434:	ec45 4b10 	vmov	d0, r4, r5
 8013438:	b003      	add	sp, #12
 801343a:	ecbd 8b04 	vpop	{d8-d9}
 801343e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013442:	4b1b      	ldr	r3, [pc, #108]	; (80134b0 <__kernel_sin+0x150>)
 8013444:	ec51 0b18 	vmov	r0, r1, d8
 8013448:	2200      	movs	r2, #0
 801344a:	f7ed f8d5 	bl	80005f8 <__aeabi_dmul>
 801344e:	4632      	mov	r2, r6
 8013450:	ec41 0b19 	vmov	d9, r0, r1
 8013454:	463b      	mov	r3, r7
 8013456:	4640      	mov	r0, r8
 8013458:	4649      	mov	r1, r9
 801345a:	f7ed f8cd 	bl	80005f8 <__aeabi_dmul>
 801345e:	4602      	mov	r2, r0
 8013460:	460b      	mov	r3, r1
 8013462:	ec51 0b19 	vmov	r0, r1, d9
 8013466:	f7ec ff0f 	bl	8000288 <__aeabi_dsub>
 801346a:	4652      	mov	r2, sl
 801346c:	465b      	mov	r3, fp
 801346e:	f7ed f8c3 	bl	80005f8 <__aeabi_dmul>
 8013472:	ec53 2b18 	vmov	r2, r3, d8
 8013476:	f7ec ff07 	bl	8000288 <__aeabi_dsub>
 801347a:	a30b      	add	r3, pc, #44	; (adr r3, 80134a8 <__kernel_sin+0x148>)
 801347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013480:	4606      	mov	r6, r0
 8013482:	460f      	mov	r7, r1
 8013484:	4640      	mov	r0, r8
 8013486:	4649      	mov	r1, r9
 8013488:	f7ed f8b6 	bl	80005f8 <__aeabi_dmul>
 801348c:	4602      	mov	r2, r0
 801348e:	460b      	mov	r3, r1
 8013490:	4630      	mov	r0, r6
 8013492:	4639      	mov	r1, r7
 8013494:	f7ec fefa 	bl	800028c <__adddf3>
 8013498:	4602      	mov	r2, r0
 801349a:	460b      	mov	r3, r1
 801349c:	4620      	mov	r0, r4
 801349e:	4629      	mov	r1, r5
 80134a0:	f7ec fef2 	bl	8000288 <__aeabi_dsub>
 80134a4:	e7c4      	b.n	8013430 <__kernel_sin+0xd0>
 80134a6:	bf00      	nop
 80134a8:	55555549 	.word	0x55555549
 80134ac:	3fc55555 	.word	0x3fc55555
 80134b0:	3fe00000 	.word	0x3fe00000
 80134b4:	5acfd57c 	.word	0x5acfd57c
 80134b8:	3de5d93a 	.word	0x3de5d93a
 80134bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80134c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80134c4:	57b1fe7d 	.word	0x57b1fe7d
 80134c8:	3ec71de3 	.word	0x3ec71de3
 80134cc:	19c161d5 	.word	0x19c161d5
 80134d0:	3f2a01a0 	.word	0x3f2a01a0
 80134d4:	1110f8a6 	.word	0x1110f8a6
 80134d8:	3f811111 	.word	0x3f811111

080134dc <fabs>:
 80134dc:	ec51 0b10 	vmov	r0, r1, d0
 80134e0:	ee10 2a10 	vmov	r2, s0
 80134e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80134e8:	ec43 2b10 	vmov	d0, r2, r3
 80134ec:	4770      	bx	lr
	...

080134f0 <floor>:
 80134f0:	ec51 0b10 	vmov	r0, r1, d0
 80134f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80134fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013500:	2e13      	cmp	r6, #19
 8013502:	ee10 5a10 	vmov	r5, s0
 8013506:	ee10 8a10 	vmov	r8, s0
 801350a:	460c      	mov	r4, r1
 801350c:	dc32      	bgt.n	8013574 <floor+0x84>
 801350e:	2e00      	cmp	r6, #0
 8013510:	da14      	bge.n	801353c <floor+0x4c>
 8013512:	a333      	add	r3, pc, #204	; (adr r3, 80135e0 <floor+0xf0>)
 8013514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013518:	f7ec feb8 	bl	800028c <__adddf3>
 801351c:	2200      	movs	r2, #0
 801351e:	2300      	movs	r3, #0
 8013520:	f7ed fafa 	bl	8000b18 <__aeabi_dcmpgt>
 8013524:	b138      	cbz	r0, 8013536 <floor+0x46>
 8013526:	2c00      	cmp	r4, #0
 8013528:	da57      	bge.n	80135da <floor+0xea>
 801352a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801352e:	431d      	orrs	r5, r3
 8013530:	d001      	beq.n	8013536 <floor+0x46>
 8013532:	4c2d      	ldr	r4, [pc, #180]	; (80135e8 <floor+0xf8>)
 8013534:	2500      	movs	r5, #0
 8013536:	4621      	mov	r1, r4
 8013538:	4628      	mov	r0, r5
 801353a:	e025      	b.n	8013588 <floor+0x98>
 801353c:	4f2b      	ldr	r7, [pc, #172]	; (80135ec <floor+0xfc>)
 801353e:	4137      	asrs	r7, r6
 8013540:	ea01 0307 	and.w	r3, r1, r7
 8013544:	4303      	orrs	r3, r0
 8013546:	d01f      	beq.n	8013588 <floor+0x98>
 8013548:	a325      	add	r3, pc, #148	; (adr r3, 80135e0 <floor+0xf0>)
 801354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801354e:	f7ec fe9d 	bl	800028c <__adddf3>
 8013552:	2200      	movs	r2, #0
 8013554:	2300      	movs	r3, #0
 8013556:	f7ed fadf 	bl	8000b18 <__aeabi_dcmpgt>
 801355a:	2800      	cmp	r0, #0
 801355c:	d0eb      	beq.n	8013536 <floor+0x46>
 801355e:	2c00      	cmp	r4, #0
 8013560:	bfbe      	ittt	lt
 8013562:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013566:	fa43 f606 	asrlt.w	r6, r3, r6
 801356a:	19a4      	addlt	r4, r4, r6
 801356c:	ea24 0407 	bic.w	r4, r4, r7
 8013570:	2500      	movs	r5, #0
 8013572:	e7e0      	b.n	8013536 <floor+0x46>
 8013574:	2e33      	cmp	r6, #51	; 0x33
 8013576:	dd0b      	ble.n	8013590 <floor+0xa0>
 8013578:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801357c:	d104      	bne.n	8013588 <floor+0x98>
 801357e:	ee10 2a10 	vmov	r2, s0
 8013582:	460b      	mov	r3, r1
 8013584:	f7ec fe82 	bl	800028c <__adddf3>
 8013588:	ec41 0b10 	vmov	d0, r0, r1
 801358c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013590:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013594:	f04f 33ff 	mov.w	r3, #4294967295
 8013598:	fa23 f707 	lsr.w	r7, r3, r7
 801359c:	4207      	tst	r7, r0
 801359e:	d0f3      	beq.n	8013588 <floor+0x98>
 80135a0:	a30f      	add	r3, pc, #60	; (adr r3, 80135e0 <floor+0xf0>)
 80135a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135a6:	f7ec fe71 	bl	800028c <__adddf3>
 80135aa:	2200      	movs	r2, #0
 80135ac:	2300      	movs	r3, #0
 80135ae:	f7ed fab3 	bl	8000b18 <__aeabi_dcmpgt>
 80135b2:	2800      	cmp	r0, #0
 80135b4:	d0bf      	beq.n	8013536 <floor+0x46>
 80135b6:	2c00      	cmp	r4, #0
 80135b8:	da02      	bge.n	80135c0 <floor+0xd0>
 80135ba:	2e14      	cmp	r6, #20
 80135bc:	d103      	bne.n	80135c6 <floor+0xd6>
 80135be:	3401      	adds	r4, #1
 80135c0:	ea25 0507 	bic.w	r5, r5, r7
 80135c4:	e7b7      	b.n	8013536 <floor+0x46>
 80135c6:	2301      	movs	r3, #1
 80135c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80135cc:	fa03 f606 	lsl.w	r6, r3, r6
 80135d0:	4435      	add	r5, r6
 80135d2:	4545      	cmp	r5, r8
 80135d4:	bf38      	it	cc
 80135d6:	18e4      	addcc	r4, r4, r3
 80135d8:	e7f2      	b.n	80135c0 <floor+0xd0>
 80135da:	2500      	movs	r5, #0
 80135dc:	462c      	mov	r4, r5
 80135de:	e7aa      	b.n	8013536 <floor+0x46>
 80135e0:	8800759c 	.word	0x8800759c
 80135e4:	7e37e43c 	.word	0x7e37e43c
 80135e8:	bff00000 	.word	0xbff00000
 80135ec:	000fffff 	.word	0x000fffff

080135f0 <scalbn>:
 80135f0:	b570      	push	{r4, r5, r6, lr}
 80135f2:	ec55 4b10 	vmov	r4, r5, d0
 80135f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80135fa:	4606      	mov	r6, r0
 80135fc:	462b      	mov	r3, r5
 80135fe:	b99a      	cbnz	r2, 8013628 <scalbn+0x38>
 8013600:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013604:	4323      	orrs	r3, r4
 8013606:	d036      	beq.n	8013676 <scalbn+0x86>
 8013608:	4b39      	ldr	r3, [pc, #228]	; (80136f0 <scalbn+0x100>)
 801360a:	4629      	mov	r1, r5
 801360c:	ee10 0a10 	vmov	r0, s0
 8013610:	2200      	movs	r2, #0
 8013612:	f7ec fff1 	bl	80005f8 <__aeabi_dmul>
 8013616:	4b37      	ldr	r3, [pc, #220]	; (80136f4 <scalbn+0x104>)
 8013618:	429e      	cmp	r6, r3
 801361a:	4604      	mov	r4, r0
 801361c:	460d      	mov	r5, r1
 801361e:	da10      	bge.n	8013642 <scalbn+0x52>
 8013620:	a32b      	add	r3, pc, #172	; (adr r3, 80136d0 <scalbn+0xe0>)
 8013622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013626:	e03a      	b.n	801369e <scalbn+0xae>
 8013628:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801362c:	428a      	cmp	r2, r1
 801362e:	d10c      	bne.n	801364a <scalbn+0x5a>
 8013630:	ee10 2a10 	vmov	r2, s0
 8013634:	4620      	mov	r0, r4
 8013636:	4629      	mov	r1, r5
 8013638:	f7ec fe28 	bl	800028c <__adddf3>
 801363c:	4604      	mov	r4, r0
 801363e:	460d      	mov	r5, r1
 8013640:	e019      	b.n	8013676 <scalbn+0x86>
 8013642:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013646:	460b      	mov	r3, r1
 8013648:	3a36      	subs	r2, #54	; 0x36
 801364a:	4432      	add	r2, r6
 801364c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013650:	428a      	cmp	r2, r1
 8013652:	dd08      	ble.n	8013666 <scalbn+0x76>
 8013654:	2d00      	cmp	r5, #0
 8013656:	a120      	add	r1, pc, #128	; (adr r1, 80136d8 <scalbn+0xe8>)
 8013658:	e9d1 0100 	ldrd	r0, r1, [r1]
 801365c:	da1c      	bge.n	8013698 <scalbn+0xa8>
 801365e:	a120      	add	r1, pc, #128	; (adr r1, 80136e0 <scalbn+0xf0>)
 8013660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013664:	e018      	b.n	8013698 <scalbn+0xa8>
 8013666:	2a00      	cmp	r2, #0
 8013668:	dd08      	ble.n	801367c <scalbn+0x8c>
 801366a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801366e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013672:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013676:	ec45 4b10 	vmov	d0, r4, r5
 801367a:	bd70      	pop	{r4, r5, r6, pc}
 801367c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013680:	da19      	bge.n	80136b6 <scalbn+0xc6>
 8013682:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013686:	429e      	cmp	r6, r3
 8013688:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801368c:	dd0a      	ble.n	80136a4 <scalbn+0xb4>
 801368e:	a112      	add	r1, pc, #72	; (adr r1, 80136d8 <scalbn+0xe8>)
 8013690:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d1e2      	bne.n	801365e <scalbn+0x6e>
 8013698:	a30f      	add	r3, pc, #60	; (adr r3, 80136d8 <scalbn+0xe8>)
 801369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801369e:	f7ec ffab 	bl	80005f8 <__aeabi_dmul>
 80136a2:	e7cb      	b.n	801363c <scalbn+0x4c>
 80136a4:	a10a      	add	r1, pc, #40	; (adr r1, 80136d0 <scalbn+0xe0>)
 80136a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d0b8      	beq.n	8013620 <scalbn+0x30>
 80136ae:	a10e      	add	r1, pc, #56	; (adr r1, 80136e8 <scalbn+0xf8>)
 80136b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136b4:	e7b4      	b.n	8013620 <scalbn+0x30>
 80136b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80136ba:	3236      	adds	r2, #54	; 0x36
 80136bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80136c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80136c4:	4620      	mov	r0, r4
 80136c6:	4b0c      	ldr	r3, [pc, #48]	; (80136f8 <scalbn+0x108>)
 80136c8:	2200      	movs	r2, #0
 80136ca:	e7e8      	b.n	801369e <scalbn+0xae>
 80136cc:	f3af 8000 	nop.w
 80136d0:	c2f8f359 	.word	0xc2f8f359
 80136d4:	01a56e1f 	.word	0x01a56e1f
 80136d8:	8800759c 	.word	0x8800759c
 80136dc:	7e37e43c 	.word	0x7e37e43c
 80136e0:	8800759c 	.word	0x8800759c
 80136e4:	fe37e43c 	.word	0xfe37e43c
 80136e8:	c2f8f359 	.word	0xc2f8f359
 80136ec:	81a56e1f 	.word	0x81a56e1f
 80136f0:	43500000 	.word	0x43500000
 80136f4:	ffff3cb0 	.word	0xffff3cb0
 80136f8:	3c900000 	.word	0x3c900000

080136fc <finitef>:
 80136fc:	b082      	sub	sp, #8
 80136fe:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013702:	9801      	ldr	r0, [sp, #4]
 8013704:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013708:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801370c:	bfac      	ite	ge
 801370e:	2000      	movge	r0, #0
 8013710:	2001      	movlt	r0, #1
 8013712:	b002      	add	sp, #8
 8013714:	4770      	bx	lr
	...

08013718 <nanf>:
 8013718:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013720 <nanf+0x8>
 801371c:	4770      	bx	lr
 801371e:	bf00      	nop
 8013720:	7fc00000 	.word	0x7fc00000

08013724 <_kill>:
 8013724:	4b02      	ldr	r3, [pc, #8]	; (8013730 <_kill+0xc>)
 8013726:	2258      	movs	r2, #88	; 0x58
 8013728:	601a      	str	r2, [r3, #0]
 801372a:	f04f 30ff 	mov.w	r0, #4294967295
 801372e:	4770      	bx	lr
 8013730:	2001a69c 	.word	0x2001a69c

08013734 <_exit>:
 8013734:	e7fe      	b.n	8013734 <_exit>
	...

08013738 <_init>:
 8013738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801373a:	bf00      	nop
 801373c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801373e:	bc08      	pop	{r3}
 8013740:	469e      	mov	lr, r3
 8013742:	4770      	bx	lr

08013744 <_fini>:
 8013744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013746:	bf00      	nop
 8013748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801374a:	bc08      	pop	{r3}
 801374c:	469e      	mov	lr, r3
 801374e:	4770      	bx	lr
